<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"
  xmlns:dc="http://purl.org/dc/elements/1.1/">
  <author>
    <name>Naoto Kaneko</name>
  </author>
  <id>https://blog.naoty.dev/</id>
  <link href="https://blog.naoty.dev"/>
  <logo>https://blog.naoty.dev/icon.png</logo>
  <title>blog.naoty.dev</title>
  <updated>2021-01-09T00:00:00+00:00</updated>
  <entry>
    <id>https://blog.naoty.dev/522/</id>
    <link href="https://blog.naoty.dev/522/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;/521/&quot;&gt;前回&lt;/a&gt;設定したキーマッピングだと問題があることがわかり、ゼロからやり直した。&lt;/p&gt;
&lt;h1&gt;TL;DR&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;KeySwapを使ってCtrlとCapsLockを入れ替えた。&lt;/li&gt;
&lt;li&gt;alt-ime-ahkを使ってAltの空打ちでIMEを切り替えられるようにした。&lt;/li&gt;
&lt;li&gt;AutoHotKeyを使ってCtrlによるカーソル移動や、コロンとセミコロンの入れ替えなど細かいキーマッピングを設定した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;AutoHotKey&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;; カーソル移動
^h::Send '{Left}'
^j::Send '{Down}'
^k::Send '{Up}'
^l::Send '{Right}'
^a::Send '{Home}'
^e::Send '{End}'

; セミコロンとコロンを入れ替える
VKBA::+VKBA
+VKBA::VKBA
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;独自のスクリプト言語を使っているということもあり、メンテナンスのことを考えるとあまり気が乗らなかったのだけど、歴史とユーザーコミュニティの大きさを踏まえてAutoHotKeyを使うことにした。さいわい、上のような簡単な設定だけならシンプルな記述で済んだ。&lt;/p&gt;
&lt;h1&gt;alt-ime-ahk&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;/522/&quot;&gt;前回&lt;/a&gt;書いたとおり、MacのKarabinerと同じようにaltの空打ちでIMEの切り替えができ、大変便利。実体としてはAutoHotKeyのスクリプトなので、上のスクリプトと合わせて2つのスクリプトをAutoHotKeyで動かしているということになる。&lt;/p&gt;
&lt;h1&gt;他に試したもの&lt;/h1&gt;
&lt;h2&gt;keyhac&lt;/h2&gt;
&lt;p&gt;AutoHotKeyのようなキーマッピングをPythonで記述できるため、メンテナンスしやすさ、学習コストの低さが魅力的に感じたが、セミコロンとコロンを入れ替える設定がどうやらできなさそうということが分かり断念した。&lt;/p&gt;
&lt;h2&gt;キーボードのマクロ機能&lt;/h2&gt;
&lt;p&gt;Mistel Barocco MD770にはマクロ機能が備わっており、物理的なレイヤーでマッピングが可能なので試してみたが、修飾キーを伴うマッピングができないということが分かり断念した。&lt;/p&gt;
&lt;h1&gt;Ctrl押しっぱなし問題&lt;/h1&gt;
&lt;p&gt;AutoHotKeyやkeyhac、そして&lt;a href=&quot;/522/&quot;&gt;前回&lt;/a&gt;使っていたKeyboard ManagerでCtrlとCapsLockの入れ替えを設定すると、時々Ctrlが押しっぱなしになり、なにも入力できなくなってしまう現象がおきることがある。Windowsキー+Lでロック画面にいき、復帰すると復旧できるのだけど、そこそこの頻度で発生するため、AutoHotKeyやkeyhacでCtrlをいじるのを断念した。&lt;/p&gt;
&lt;p&gt;調べていくと、どうやらWindowsのIMEに問題があるらしいことが分かり、レジストリを編集することで解決するという話があった。とはいえ、直接レジストリを編集するのはリスクもあるため、KeySwapを使いレジストリを低いリスクで変更することにした。&lt;/p&gt;</summary>
    <title>Windowsのキーマッピング2</title>
    <updated>2023-08-13T09:32:00+00:00</updated>
    <dc:date>2023-08-13T09:32:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/521/</id>
    <link href="https://blog.naoty.dev/521/"/>
    <summary>&lt;p&gt;Windowsを久々に使い始めて一番戸惑ったのがキーマッピングだった。英字キーボードで日本語を入力するため、普段MacではKarabinerを使ってゴリゴリにカスタマイズしていたのだけど、Windowsでも同様のカスタマイズをしようとしたところKarabinerほど使いやすいアプリケーションがなかった。そして、1週間ほどの試行錯誤と妥協の末、ようやく落ち着いたのでブログに残しておきたい。&lt;/p&gt;
&lt;h1&gt;Keyboard Manager&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;./keyboard-manager.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./keyboard-manager.png&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Keyboard ManagerはPowerToysというWindows謹製のユーティリティアプリに同梱されているキーマッピングアプリで、シンプルなマッピングならこれで実現できる。&lt;/p&gt;
&lt;p&gt;設定したのはこれだけ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CtrlとCapsLockの入れ替え&lt;/li&gt;
&lt;li&gt;Ctrl+hjklで上下左右の矢印キー入力&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;後述するalt-ime-ahkと併用する場合、CapsLockをAltに割り当てて入力するとそれ以降キー入力ができなくなる現象が発生することがわかり、Keyboard Managerの設定をなるべく最小限に抑えることにした。&lt;/p&gt;
&lt;h1&gt;alt-ime-ahk&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/karakaram/alt-ime-ahk&quot;&gt;https://github.com/karakaram/alt-ime-ahk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MacのKarabinerで便利な設定だったコマンドキーの空打ちでIME切り替えるという挙動をWindowsで再現してくれる便利アプリで、これを導入してなるべくMacと近い操作感にした。&lt;/p&gt;
&lt;p&gt;本当はAltをCtrlに割り当てることでMacとほぼ同じキーマッピングにしたかったのだけど、先述したCapsLockをAltに割り当てられない問題があるため、そこは妥協することとなった。&lt;/p&gt;
&lt;h1&gt;キーボード&lt;/h1&gt;
&lt;p&gt;キーボードにはMistel Barocco MD770を使っているのだけど、裏面にあるDIPスイッチによってMacに最適化された配列にしていたため、Windowsで使うとAltキーとWindowsキーが入れ替わっていることに最初は気づかなかった。&lt;/p&gt;
&lt;p&gt;OSによる差異はキーボードではなくOS上のアプリケーションによって吸収してほしいので、DIPスイッチはすべてオフにした。&lt;/p&gt;</summary>
    <title>Windowsのキーマッピング</title>
    <updated>2023-08-08T21:24:00+00:00</updated>
    <dc:date>2023-08-08T21:24:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/520/</id>
    <link href="https://blog.naoty.dev/520/"/>
    <summary>&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;./finished-PC.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./finished-PC.jpg&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;初の自作PC&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;はじめてPCを自作した。いままで使っていたMacbook Proはたしか9年くらい前に買ったもので、ChromeとDockerとIDEを同時に起動するとカクカクに固まってしまうからPCを新調しようとしたんだけど、せっかくなら将棋の解析とか生成系のAIの実験なんかに使えそうな強いグラボを積んだPCを自作してみたくなって、トライしてみた。&lt;/p&gt;
&lt;h1&gt;情報収集&lt;/h1&gt;
&lt;p&gt;はじめての自作PCだったので、事前に入念に情報収集はした。基本的にはYouTubeにいろんな動画が上がっているのでそれを見つつ、不足する情報を検索し、Scrapboxに得た知識を整理して学んでいった。なんだかんだ情報収集しているときが一番楽しかった気がする。&lt;/p&gt;
&lt;h1&gt;パーツ&lt;/h1&gt;
&lt;p&gt;パーツ類はこんな感じ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;./PC-parts.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./PC-parts.jpg&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU: Intel Corei5 13400F&lt;/li&gt;
&lt;li&gt;マザーボード: ASUS TUF Gaming B760M-PLUS Wifi D4&lt;/li&gt;
&lt;li&gt;グラフィックボード: ASUS Dual GeForce RTX 4070 OC Edition&lt;/li&gt;
&lt;li&gt;CPUクーラー: NZXT Kraken Elite 240 Black&lt;/li&gt;
&lt;li&gt;ケース: NZXT H7 Flow Black&lt;/li&gt;
&lt;li&gt;ケースファン: NZXT F120Q 120mm&lt;/li&gt;
&lt;li&gt;電源ユニット: NZXT C650&lt;/li&gt;
&lt;li&gt;メモリ: Crucial RAM 32GB Kit DDR4 3200MHz&lt;/li&gt;
&lt;li&gt;SSD: Crucial P5 SSD 1TB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;予算はだいたいMacbook Proの新品と同じくらいになるように考えた。また、初の自作だったので、余計なトラブルを避けるためにメーカーをなるべく揃えるようにしたり、最新のチップセットを使うようにした。IntelかAMDかはあんまりこだわりがなかったのでCPUは無難にIntelにし、グラボは最新の4000番台でワットパフォーマンスがよさそうなRTX 4070にした。&lt;/p&gt;
&lt;p&gt;当初は部屋のインテリアとの相性を考えて白系のPCを組みたいと考えていたのだけど、白系のパーツはあまり多くなかったり全体的に白くても付属のケーブルは黒だったり細部まで気にし始めるとかなり難易度が高いと思った。なので、振り切ってPCを黒に統一した。また、ゲーミング用途のPCにありがちなRGBでレインボーな装飾は趣味に合わないのでいっさい排した（あまりに味気がないのでKraken Eliteを丸形ディスプレイのためだけに導入した）。&lt;/p&gt;
&lt;h1&gt;初の自作&lt;/h1&gt;
&lt;p&gt;自作は昼から始めて夜にはなんとか終わった。苦戦したところはこんなところだった。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;./checking-PC.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./checking-PC.jpg&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;最小構成で動作確認している様子&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;マザーボードのどのピンにどのケーブルを差せばよいかわからなかった。また、マザーボードやラジエーターをケースに取り付けたあとでファンのケーブルを差し込むことになったけど、先にケーブルだけ差してからラジエーターを取り付けた方がよかった気がする。差し込む箇所が狭くて自分の指で隠れてかなり大変だった。&lt;/li&gt;
&lt;li&gt;電源ユニットに付属していたケーブルが固すぎて、ケース内の穴から通してマザーボードに接続するのになかなか曲がらず苦労した。また、電源がつかないことがあったけど、24ピンをグリグリねじ込んだら電源がつくようになって、無理にケーブルを曲げてマザーボードに接続していたのがよくなかったのかも。もう少しやわらかいケーブルにするか、ヘッドをL字型にしてほしい。&lt;/li&gt;
&lt;li&gt;ケースファン用のマザーボード側のピンが1箇所にしかないと勘違いしていて、あやうくタコ足ケーブルを買いそうになったけど、よくマザーボードの説明書を見るといろんな場所にケースファン用のピンがあることが分かり無駄な買い物をするところだった。&lt;/li&gt;
&lt;li&gt;UEFIではキーボードを認識しているのに、なぜかWindowsセットアップ画面でキーボードが認識されず、なにもできなくなった。日をおいてもう一度リトライしたらなぜかうまくいった。こういう気まぐれな一面も自作PCの醍醐味なのだろう。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;感想&lt;/h1&gt;
&lt;p&gt;自作PCと聞くとはじめは高いハードルを感じていたけど、いざやってみると組み立てそのものはプラモの組み立てみたいな感じで、動画を見ながらやればそんなに苦労しなかった。パーツ選びの方が「そもそもグラボとは?」みたいなところから理解する必要があって大変なのだけど、プログラミングの勉強の延長みたいなものなのでそういうのが楽しめる人には実益も兼ねていておすすめできると思う。&lt;/p&gt;
&lt;p&gt;これでPCのスペックがボトルネックになっていてできなかったことができるようになり、モチベーションがわいてきた。直近はまず15年以上ぶりのWindowsに慣れるところから始めていきたい。&lt;/p&gt;</summary>
    <title>PCを自作した</title>
    <updated>2023-08-05T22:55:00+00:00</updated>
    <dc:date>2023-08-05T22:55:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/519/</id>
    <link href="https://blog.naoty.dev/519/"/>
    <summary>&lt;p&gt;2023年も半年たったので、KPTで振り返る。&lt;/p&gt;
&lt;h1&gt;Keep&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;減量が順調に進んでいる。先月の時点で今年の目標の半分を達成しているので、このペースを維持したい。&lt;/li&gt;
&lt;li&gt;筋トレが半年続いている。人体の細胞は半年で全身入れ替わるらしいので、もう100%筋トレ後の身体になっていると言っていい。ジムまでを徒歩で通うモチベを維持させるためにポッドキャストを購読したり、ワイヤレスイヤホンを購入したりしていたのがよかった。&lt;/li&gt;
&lt;li&gt;棋力が上がった。今年から四間飛車から中飛車に転向したのだけど、すっかり定着して、四間飛車の頃よりも実績がいい。将棋ウォーズでは、スクショの通り着実に棋力が上がっているのがわかる。今年の目標である二段昇段が見えてきたので継続したい。隣町の指導対局会や将棋バーなど、リアルでの対局を増やしたのも良い刺激になっていると思う。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;./kiryoku.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./kiryoku.jpg&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;将棋ウォーズでの棋力の推移&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;途中ゼルダによる中断していたけど、だいたい週1本のペースでコンスタントにブログ記事を書き続けられている。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Problem&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;技術的な成長がイマイチだった。Dartについては徐々に理解が深まってきたものの、Flutterについてはあんまり理解度が変わっていない。プライベートPCが10年近く前のもので、Flutterアプリを開発するにはスペックが低すぎるのがボトルネックになっていると思う。&lt;/li&gt;
&lt;li&gt;家にあまり時間や労力をかけられていない。いまの家を立ててそろそろ2年たつけど、家具が揃いきっていないし、ベランダもぜんぜん活用できていない。将棋とか筋トレとかの優先度が高くなっていて、しょうがない部分もあるが、バランスをとりたいところ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Try&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;引き続き、筋トレの習慣を維持させるための工夫を考え続けて実践していきたい。パーソナルトレーニングをやっていた頃に比べると、自分の意志がより強く求められるので、意志に頼らずに半ば強制的にできるような仕組みを取り入れたい。&lt;/li&gt;
&lt;li&gt;自作PCにチャレンジしたい。プライベートPCのスペックを爆上げして、Flutterアプリ開発の素振りとか、AIによる将棋の研究とか、流行りのLLM関連に手を出してみたりしたい。&lt;/li&gt;
&lt;li&gt;詰将棋を習慣化したい。最近「駒サプリ」というアプリをインストールして、詰将棋をしているのだけど、本でやるよりサクサクできて継続しやすい。自分はやはり終盤や読みのスピードに課題があると感じるので、詰将棋で克服していきたい。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>2023年上半期の振り返り</title>
    <updated>2023-07-02T21:39:00+00:00</updated>
    <dc:date>2023-07-02T21:39:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/518/</id>
    <link href="https://blog.naoty.dev/518/"/>
    <summary>&lt;p&gt;アプリケーションが成長して、扱うドメインも大きくなると、どこかでコンテキストの境界をひき、アプリケーションを分割するタイミングがくる。&lt;/p&gt;
&lt;p&gt;そんなときに、複数のコンテキストを内包したドメインモデルと、それを永続化するテーブルを分割する戦術について考えてみた。考えただけで、実践したわけじゃないから、そんなにうまくいかないとかあると思う。&lt;/p&gt;
&lt;p&gt;ユーザーモデルをコンテキストAとコンテキストBに分割する例で考える。&lt;/p&gt;
&lt;h1&gt;フェーズ0&lt;/h1&gt;
&lt;p&gt;初期状態として、ユーザーモデルとそれを保持するテーブルがある。この時点では、すべてのコンテキストを1つのモデルで表現している。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;./phase0.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./phase0.png&quot; alt=&quot;ユーザーモデルとそれを永続化させるテーブル&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;なお、モデルからテーブルへの矢印はwriteを表し、テーブルからモデルへの矢印はreadを表す。&lt;/p&gt;
&lt;h1&gt;フェーズ1&lt;/h1&gt;
&lt;p&gt;次に、モデルのみコンテキストに分割した。2つのモデルはいまだ1つのテーブルに永続化されている。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;./phase1.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./phase1.png&quot; alt=&quot;2つのコンテキストとそれぞれに含まれるユーザーモデル、テーブル&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2つのモデルはテーブルを介して暗黙的に依存関係にあり、片方のコンテキストで起きた変更が意図しない結果を他方のコンテキストに及ぼす危険がある。&lt;/p&gt;
&lt;h1&gt;フェーズ2&lt;/h1&gt;
&lt;p&gt;各コンテキストのモデルに対応するテーブルを追加した。この時点では、writeは元のテーブルと新しく追加したテーブルに二重におこない、readは元のテーブルからおこなう。次のフェーズで完全にテーブルを移行させるのだけど、安全にread先を切り替えるため、一時的に二重にwriteする体制をとっている。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;./phase2.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./phase2.png&quot; alt=&quot;2つのコンテキストとそれぞれに含まれるユーザーモデルとテーブル、そして独立したテーブル&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;実装としては、元のテーブルと新しいテーブルのwriteを同一トランザクションで実行できるならそうするし、完全に独立したマイクロサービスになっているなら同一トランザクションが使えないため、元のテーブルと同期させるworkerを別途用意し結果整合性を担保すると思う。&lt;/p&gt;
&lt;h1&gt;フェーズ3&lt;/h1&gt;
&lt;p&gt;read先のテーブルを切り替えられたなら、元のテーブルを切り離し、完全にコンテキスト内でモデルとテーブルが完結できる。もし切り替えに失敗しても、元のテーブルにすぐにread先を戻せば影響を最小限に抑えられる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;./phase3.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./phase3.png&quot; alt=&quot;2つのコンテキストとそれぞれに含まれるユーザーモデルとテーブル&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ここまで来てようやくモデルとテーブルをコンテキストに分割することができた。お互いのモデルやテーブルの変更が他方に影響を与えることはなくなった。&lt;/p&gt;
&lt;h1&gt;まとめ&lt;/h1&gt;
&lt;p&gt;3段階に分けてコンテキストに分割していく戦術について見てきたけど、1つのモデルを分割するのにここまで手間をかけるのはさすがに骨が折れるとも思ってしまった。もっと効率的に進める戦術はないものか。&lt;/p&gt;</summary>
    <title>モデルとテーブルをコンテキストに分割する戦術</title>
    <updated>2023-06-24T18:26:00+00:00</updated>
    <dc:date>2023-06-24T18:26:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/517/</id>
    <link href="https://blog.naoty.dev/517/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://preducts.jp/&quot;&gt;PREDUCTS&lt;/a&gt;の天板と&lt;a href=&quot;https://flexispot.jp/e7-set.html&quot;&gt;FlexiSpotのE7&lt;/a&gt;という電動昇降デスクの脚を買った。部屋に合わせて天板は白、脚は黒にしたかったので、セットではなくバラバラに買った。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;./preducts-desk.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./preducts-desk.jpg&quot; alt=&quot;デスクとチェア&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今までは無印のデスクを6年くらい使っていたのだけど、幅120cmの天板は手狭に感じていた。また、ずっと自宅で座りっぱなしで仕事するのは健康にも良くないと思い、電動昇降デスクを買うことにした。&lt;/p&gt;
&lt;h1&gt;組み立て&lt;/h1&gt;
&lt;p&gt;天板で20kg、脚で30kg以上あるため、2Fに持ち運ぶだけでも苦労した。組み立ては一人でやったけど、最後ひっくり返して立てるところだけ手伝ってもらった。昔買ったIKEAの電動ドライバーは動かなかったので普通のドライバーを使ったけど、特に問題なかった。あと、巨大な段ボールを捨てるのに苦労した。&lt;/p&gt;
&lt;h1&gt;感想&lt;/h1&gt;
&lt;p&gt;PREDUCTSの天板は天板裏のレールにさまざまなパーツを装着することで、自分好みにカスタマイズできるところが特徴なのだけど、まだそういったパーツは買っておらず、楽しみを残している。&lt;/p&gt;
&lt;p&gt;FlexiSpotの電動昇降デスクはとても良くて、スタンディングデスクにすることで気分を替えて仕事できて良いし、また座って作業するときも自分にとってちょうどいい高さに調整できるというメリットも感じた。&lt;/p&gt;</summary>
    <title>PREDUCTSのデスクを買った</title>
    <updated>2023-06-22T22:33:00+00:00</updated>
    <dc:date>2023-06-22T22:33:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/516/</id>
    <link href="https://blog.naoty.dev/516/"/>
    <summary>&lt;p&gt;最近、仕事ではエンジニアが定常的に実行するスクリプトの改善に取り組んでいて、そこで気づいたことをブログにまとめることにした。&lt;/p&gt;
&lt;p&gt;ここで言うスクリプトというのは、エンジニアが行う作業を効率化するために書かれたプログラムのことで、例えば、データのマイグレーションのためのスクリプトや、カスタマーサポートからの問い合わせを受けてたまに行う作業のためのスクリプトなんかがある。&lt;/p&gt;
&lt;h1&gt;手順書&lt;/h1&gt;
&lt;p&gt;本番環境に向けておこなう操作はすべて手順書を用意した方がいいと思っている。理由としては、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手順書をレビューしてもらうことで、誤った操作によるインシデントを回避できるため&lt;/li&gt;
&lt;li&gt;いつ誰がどのような作業をおこなったか記録に残るため&lt;/li&gt;
&lt;li&gt;プロセスを手順書に文書化することで、プロセス自体を改善しやすくなるため&lt;/li&gt;
&lt;li&gt;作業の属人化を回避できるため&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といったものが考えられる。さらに、定常的に発生する作業については、手順書をテンプレート化し、毎回同じフォーマットの手順書を使うことで効果が高まると思う。&lt;/p&gt;
&lt;h1&gt;手順書の内容&lt;/h1&gt;
&lt;p&gt;手順書の内容としては以下のような項目を含めるようにしている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事前に準備しておくこと&lt;/li&gt;
&lt;li&gt;具体的な作業手順&lt;/li&gt;
&lt;li&gt;次の作業に進めるか判断するためのチェックポイント&lt;/li&gt;
&lt;li&gt;想定されるエラーとそれに対する対処方法（つまり、トラブルシューティング）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;手順書ドリブン&lt;/h1&gt;
&lt;p&gt;手順書ドリブンというのは、まず手順書を先に書き、そこからスクリプトに求められる要件を見定め、開発を始めることを言っている。ライブラリを書く際にREADMEドリブンで開発することがあるのだけど、それのスクリプト版とも言える。&lt;/p&gt;
&lt;p&gt;上述したような内容を含む手順書を書くと、スクリプトを書く際に自ずとこういったことを意識するようになる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事前に用意すべきデータのフォーマット&lt;/li&gt;
&lt;li&gt;ヒューマンエラーをおこしにくいコマンドラインインターフェイス&lt;/li&gt;
&lt;li&gt;チェックポイントを意識したログ出力&lt;/li&gt;
&lt;li&gt;原因と対処方法を理解しやすいエラーメッセージ&lt;/li&gt;
&lt;li&gt;リトライ可能なエントリーポイントの設計とスクリプトの冪等性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;逆に、手順書を書く前にスクリプトを書きはじめると、こういったポイントがどこかで抜けてしまいがちになる。&lt;/p&gt;
&lt;h1&gt;まとめ&lt;/h1&gt;
&lt;p&gt;本番環境で作業をおこなう前に手順書を用意するというのは、割とよく見られるエンジニアしぐさだと思うのだけど、そこからさらに「スクリプトより先に手順書を書く」というテクニックを加えるとコスパよく実用性の高いスクリプトを書けるようになるため、ぜひオススメしたい。&lt;/p&gt;</summary>
    <title>手順書ドリブンなスクリプト開発</title>
    <updated>2023-06-15T22:04:00+00:00</updated>
    <dc:date>2023-06-15T22:04:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/515/</id>
    <link href="https://blog.naoty.dev/515/"/>
    <summary>&lt;p&gt;Dartでは、クラスに対して&lt;code&gt;extends&lt;/code&gt;することも&lt;code&gt;implements&lt;/code&gt;することもできるのが他の言語とは明らかに違うポイントで、書いていて少し混乱したので、整理してみた。&lt;/p&gt;
&lt;p&gt;こんな感じの雑なクラスを&lt;code&gt;extends&lt;/code&gt;あるいは&lt;code&gt;implements&lt;/code&gt;する例を考えてみる。&lt;/p&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isPublished&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_isPublished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_isPublished&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_isPublished&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;extends&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;extends&lt;/code&gt;はあるクラスを継承したサブクラスを定義する。他の言語と変わったところはなにもない。&lt;/p&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DraftArticle&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DraftArticle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;title:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;スーパークラスを継承しているから、&lt;code&gt;super&lt;/code&gt;でスーパークラスを参照できるし、実装もスーパークラスのものをそのまま利用できる。&lt;/p&gt;
&lt;h1&gt;implements&lt;/h1&gt;
&lt;p&gt;Dartの面白い仕様の1つに、すべてのクラスが暗黙的にinterfaceを提供するというものがある。&lt;code&gt;implements&lt;/code&gt;はあるクラスが提供するinterfaceを実装する新しいクラスを定義する。&lt;/p&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PublishedArticle&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isPublished&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_isPublished&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;PublishedArticle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  
  &lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;継承する場合と異なる点は以下のようなポイントがある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;すべてのメソッドやgetter, setterを実装する必要がある。&lt;/li&gt;
&lt;li&gt;複数のスーパークラスを継承できない一方で、複数のクラスのinterfaceであれば実装できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この例だと、privateなフィールドまで実装する必要があり、わざわざinterfaceを実装するメリットが感じられない。&lt;/p&gt;
&lt;h1&gt;abstract class&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;abstract class&lt;/code&gt;と宣言すると、インスタンスを初期化できないクラスを定義できる。また、abstract classは実装を持たないメソッドも定義できる。他の言語に現れるinterfaceに近い。&lt;/p&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;abstract classのサブクラスは実装をもたないメソッドを実装する必要がある。&lt;/p&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DraftArticle&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isPublished&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_isPublished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_isPublished&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;DraftArticle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;title:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_isPublished&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>クラスに対するextendsとimplements</title>
    <updated>2023-06-11T18:29:00+00:00</updated>
    <dc:date>2023-06-11T18:29:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/514/</id>
    <link href="https://blog.naoty.dev/514/"/>
    <summary>&lt;p&gt;あんまり更新できてなかったので、ここ1ヶ月の出来事を書く。&lt;/p&gt;
&lt;h1&gt;ゼルダの伝説 ティアーズ オブ ザ キングダム&lt;/h1&gt;
&lt;p&gt;1ヶ月以上ブログを更新できなかった理由。とにかく楽しかった。3週間ほどでようやくクリアできた。ネタバレを回避し続ける生活から解放された。同僚とネタバレを回避しながら互いの進捗や情報を共有する日常が楽しかった。&lt;/p&gt;
&lt;p&gt;ゾナウギアでモビリティを創作して移動を効率化したり、兵器を創作して強敵と戦うのがとにかく楽しく、前作以上の名作だと感じた。&lt;/p&gt;
&lt;h1&gt;指導対局&lt;/h1&gt;
&lt;p&gt;5月から休日に隣町の文化センターで行われている指導対局会に参加するようになった。きっかけとしては、4月末に参加したシモキタ名人戦で初めて指導対局をしてもらい、そこでとても楽しく、将棋に対するモチベーションにいい影響があったので、継続的にやりたくなった。&lt;/p&gt;
&lt;p&gt;今のところ、プロの先生には二枚落ちで指導していただき、大学生の先生には平手で指導してもらっている。普段、将棋ウォーズで対局するのとは異なり、感想戦で自分に足りない部分に気づけることが多く、非常に勉強になっている。感想戦がきっかけで、対振り飛車対策として中飛車左穴熊を勉強するようになり、しっくりきている。&lt;/p&gt;
&lt;h1&gt;ルンバ コンボ j7+&lt;/h1&gt;
&lt;p&gt;7, 8年くらい前に買ったロボット掃除機が動かなくなったため、ルンバ コンボ j7+を購入した。水拭き兼用機としてDEEBOTと悩んだけど、家電量販店の店員さんにルンバの方がブラシに髪の毛がからみにくいということを教えてもらったのが決め手となった。&lt;/p&gt;
&lt;h1&gt;chocoZAP&lt;/h1&gt;
&lt;p&gt;3ヶ月間のパーソナルトレーニングのあと、紆余曲折を経て、現在はchocoZAPに通っている。パーソナルトレーニングのときに近いマシントレーニングが簡単にできて、今のところなんとか続けられている。&lt;/p&gt;
&lt;p&gt;従来のタンパク質中心の食生活も崩れつつも続けられており、体重も開始当初と比べると5kg程度減っていて順調といえる。&lt;/p&gt;
&lt;h1&gt;誕生日&lt;/h1&gt;
&lt;p&gt;そんな中で先日誕生日を迎えた。仕事はほどよい負荷で充実しているし、趣味も上述のとおり打ち込めていて、なんだかんだ最近はいい生活が送れていると思う。引き続き、健康第一に穏やかで充実した毎日を過ごしたい。&lt;/p&gt;</summary>
    <title>2023-06-04</title>
    <updated>2023-06-04T21:35:00+00:00</updated>
    <dc:date>2023-06-04T21:35:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/513/</id>
    <link href="https://blog.naoty.dev/513/"/>
    <summary>&lt;h1&gt;背景&lt;/h1&gt;
&lt;p&gt;Dartのプロジェクトにおいてファイル間の依存関係を明らかにしたいニーズが出てきたため、DartのASTを参照する方法を調べようと思った。ASTを利用すれば&lt;code&gt;import&lt;/code&gt;文を解析することで依存関係を明らかにできるだろうと考えた。&lt;/p&gt;
&lt;h1&gt;analyzerパッケージ&lt;/h1&gt;
&lt;p&gt;DartのASTを参照するには、analyzerパッケージを使う。このパッケージはIDEなどで使われるAnalysis Serverを提供している他、linterの実装でも利用されている。&lt;/p&gt;
&lt;p&gt;使い方としては、&lt;code&gt;parseFile&lt;/code&gt;関数でファイルに含まれるDartのソースコードをASTに変換する。&lt;/p&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parseFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;path:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'path/to/code.dart'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;featureSet:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FeatureSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;latestLanguageVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// result.unitからASTを参照できる&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;ASTを表すクラス群&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;result.unit&lt;/code&gt;は&lt;code&gt;Directive&lt;/code&gt;のリストと&lt;code&gt;Declaration&lt;/code&gt;のリストから成る。&lt;code&gt;Directive&lt;/code&gt;や&lt;code&gt;Declaration&lt;/code&gt;は以下のような継承ツリーの一部に含まれていて、特に&lt;code&gt;Directive&lt;/code&gt;のサブクラスとしては&lt;code&gt;ImportDirective&lt;/code&gt;や&lt;code&gt;ExportDirective&lt;/code&gt;が存在する。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;./nodes.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./nodes.png&quot; alt=&quot;Node&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;AstVisitor&lt;/h1&gt;
&lt;p&gt;ASTのノードの親クラスにあたる&lt;code&gt;AstNode&lt;/code&gt;には&lt;code&gt;visitChildren&lt;/code&gt;というメソッドが用意されている。&lt;code&gt;AstVisitor&lt;/code&gt;型のvisitorを引数に渡すと、ASTのnodeの種類に対応したvisitorのメソッドが呼び出されるようになっている。&lt;code&gt;AstVisitor&lt;/code&gt;は抽象型で、これを実装したクラスがいくつか用意されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;SimpleAstVisitor&lt;/code&gt;: メソッドはすべて実装されているが、何もしない。これが他のvisitorのベースになっているようだ。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;RecursiveAstVisitor&lt;/code&gt;: nodeがchildrenを持っているときに再帰的にASTのツリーをたどる。これも実際には何もしないので、これを継承することで、再帰的にnodeをたどってnodeの種類に応じた処理を実装できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらを利用して&lt;code&gt;import&lt;/code&gt;したファイルを取得するだけのvisitorを実装してみる。&lt;/p&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ImportVisitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleAstVisitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;importedUris&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visitImportDirective&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ImportDirective&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;importedUris&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stringValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;visitImportDirective&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parseFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;path:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'path/to/code.dart'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;featureSet:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FeatureSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;latestLanguageVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visitor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImportVisitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;visitChildren&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;importedUris&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;AstVisitor&lt;/code&gt;の&lt;code&gt;visitImportDirective&lt;/code&gt;は&lt;code&gt;ImportDirective&lt;/code&gt;型のnodeを見つけたときに呼ばれるメソッドで、今回はこれをリストに追加して、ファイル中のすべての&lt;code&gt;import&lt;/code&gt;されているファイルを収集している。&lt;/p&gt;
&lt;p&gt;このように&lt;code&gt;AstVisitor&lt;/code&gt;を利用することで、特定の種類のnodeのみに対して行う処理を簡潔に実装できるため、アイデア次第でいろんな応用ができるだろう。&lt;/p&gt;</summary>
    <title>DartのASTを参照する</title>
    <updated>2023-04-29T21:38:00+00:00</updated>
    <dc:date>2023-04-29T21:38:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/512/</id>
    <link href="https://blog.naoty.dev/512/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/require&quot;&gt;naoty/require&lt;/a&gt;というDartのパッケージを書いてみた。これは、不変条件を宣言的に記述するための小さなパッケージで、以下のように使う。&lt;/p&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;label:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNotEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasLengthLessThanOrEqualTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;r'^[a-z]+$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;requireIfNotNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;label:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isGreaterThanOrEqualTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;できるだけ自然言語として理解できるようにAPIを工夫した。これらの不変条件に違反すると、以下のようなエラーメッセージを持つ例外がthrowされる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name('Naoto Kaneko') is required to match '^[a-z]+$'
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;きっかけ&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://book.mynavi.jp/ec/products/detail/id=124056&quot;&gt;セキュア・バイ・デザイン&lt;/a&gt;という本を読み、完全性を備えたドメインモデルを構築するためのテクニックとして不変条件が紹介されており、仕事で使っているDartでもこれを実装してみたいと思った。&lt;/p&gt;
&lt;p&gt;ただ、言語仕様に備わっている&lt;code&gt;assert&lt;/code&gt;では開発時のみにしか機能せず、こなれたAPIを持ったパッケージも見当たらなかったため、自分で実装してみようと思った。&lt;/p&gt;
&lt;h1&gt;工夫点&lt;/h1&gt;
&lt;p&gt;当初はDartプログラマーには馴染みが深い&lt;code&gt;test&lt;/code&gt;パッケージのAPIデザインを踏襲しようとしてみたけど、後継の&lt;code&gt;checks&lt;/code&gt;パッケージのことを思い出し、こちらを参考にしてみたところ、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;複数の条件をメソッドチェーンとして表現できる&lt;/li&gt;
&lt;li&gt;nullableなオブジェクトを扱いやすい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といった特徴があることがわかり、自然言語らしい表現力と強い型システムを両立するデザインになった。例えば、nullableな値に対して&lt;code&gt;require&lt;/code&gt;を呼ぶと&lt;code&gt;Subject&amp;lt;T?&amp;gt;&lt;/code&gt;が返るのだけど、&lt;code&gt;Subject&amp;lt;T?&amp;gt;&lt;/code&gt;に対しては&lt;code&gt;isNull&lt;/code&gt;か&lt;code&gt;isNotNull&lt;/code&gt;くらいしか呼べないようになっている。そして、&lt;code&gt;isNotNull&lt;/code&gt;を呼ぶと&lt;code&gt;Subject&amp;lt;T&amp;gt;&lt;/code&gt;が返るため、&lt;code&gt;isNotEmpty&lt;/code&gt;など各種条件を呼び出せるようになる。&lt;/p&gt;
&lt;p&gt;一方で、否定形の条件を記述することが難しいという限界もあり、乗り越える方法も考えてみた（&lt;code&gt;require().to(beEmpty())&lt;/code&gt;のようなRSpec風のAPIデザインでは&lt;code&gt;require().notTo()&lt;/code&gt;とすることで否定形を表現できる）が、逆にnullableなオブジェクトを扱いにくいことがわかったため、否定形ではなくnullablilityの扱いやすさに寄せる意思決定が必要になった。&lt;/p&gt;</summary>
    <title>naoty/require</title>
    <updated>2023-04-22T23:29:00+00:00</updated>
    <dc:date>2023-04-22T23:29:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/511/</id>
    <link href="https://blog.naoty.dev/511/"/>
    <summary>&lt;p&gt;今年こそは運動しようと思ってパーソナルトレーニングを始めてから3ヶ月が経った。そのうち、始めの1ヶ月は食事指導も受けていて、おおむね食生活を変えずに過ごした。&lt;/p&gt;
&lt;p&gt;最近は少し増えてしまったけど、MAXで4kg減らすことができた。3ヶ月で4kgなので、そんなに減ってはいないのかもしれないけど、ストレスなく続けた割にはちゃんと成果が出たと思っている。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;./graph.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./graph.png&quot; alt=&quot;体重の推移&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;体重の推移&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1&gt;トレーニング&lt;/h1&gt;
&lt;p&gt;週2回のペースでジムに行き、45分間トレーニングしていた。内容としては、脚のトレーニングに加えて、胸のトレーニングと背中のトレーニングを交互にやっていた。この3つが人体で最も大きい筋肉だそうで、これらを鍛えることで基礎代謝が上がりやすくなるとのことだった。&lt;/p&gt;
&lt;p&gt;ベンチプレスは始めは25kgを10回3セット上げていたけど、最後には40kgを上げるようになった。また、ブルガリアンスクワットも重りなしでフラフラしながらやっていたけど、9kg * 2のバーベルを持ってやれるようになった。こういった目に見える成長のおかげで楽しみながら続けることができた。&lt;/p&gt;
&lt;p&gt;途中からは有酸素運動も取り入れるため、自宅からジムまで歩くようにして、週2回は1時間歩くようになった。おかげで、階段や坂道で息切れしにくくなった気がする。ウォーキングのお供にポッドキャストを聞くようになり、習慣化できてきた。&lt;/p&gt;
&lt;h1&gt;食生活&lt;/h1&gt;
&lt;p&gt;今までは炭水化物と脂質中心の食生活だったけど、タンパク質中心の生活に激変した。食事指導の結果、1日140gを目標にタンパク質を摂り、摂取カロリーを1600kcal程度に抑えるようにした。こうしたタンパク質中心の食生活でもストレスを抑えつつ続けられた食品をリストアップしたい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;サラダチキン: 我が家にはホットクックがあるため、簡単に鶏むね肉からサラダチキンを錬成することができた。カロリーを抑えつつ、タンパク質を大量に摂取できるので最高。&lt;/li&gt;
&lt;li&gt;プロテイン: トレーニングを始めてから人生で初めてプロテインを飲むようになったけど、思っていたよりもおいしくて驚いた。バニラ味はあんまり好きじゃないけど、SAVASのリッチショコラ味はちょっとした甘いものの代わりになってしまうくらいにはおいしかった。腹持ちもよく、間食として摂取していた。&lt;/li&gt;
&lt;li&gt;プロテインバー: お菓子代わりに食べていた。1本満足バーがカロリーを抑えつつ、タンパク質が摂れるのでよく食べている。1つあたりの値段が少し高いのが気になるけど。&lt;/li&gt;
&lt;li&gt;鶏肉入り味噌汁: 朝食にご飯を食べる場合のおかずとして、鶏むね肉や鶏もも肉を味噌汁に入れて食べていた。あまった野菜と鶏肉で雑に作れるので便利だし、朝食に温かい味噌汁を飲むのは食事指導でもオススメされていた。&lt;/li&gt;
&lt;li&gt;ベースブレッド: 朝食にパンを食べる場合はベースブレッドを食べていた。タンパク質がそこそこ摂れて、ちゃんとおいしいので、今まで食べてきた食パンから完全に置き換わった。&lt;/li&gt;
&lt;li&gt;ギリシャヨーグルト: だいたいタンパク質が10gくらいとれて、朝食にちょい足しするのにちょうどいいので、パン食では毎日食べていた。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;今後&lt;/h1&gt;
&lt;p&gt;パーソナルトレーニングのおかげで運動習慣と食習慣が身についた。ただ、そこそこ高額なので、ここで打ち切って、一般的なジムにシフトしようとしている。トレーニングのやり方について細かく指導していただいたので、スムーズに移行できると思っている。&lt;/p&gt;
&lt;p&gt;食生活も緩むことなく、引き続き改良を重ねて楽しみながら続けていきたい。&lt;/p&gt;</summary>
    <title>パーソナルトレーニングを3ヶ月やった</title>
    <updated>2023-04-16T21:05:00+00:00</updated>
    <dc:date>2023-04-16T21:05:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/510/</id>
    <link href="https://blog.naoty.dev/510/"/>
    <summary>&lt;p&gt;最近、スプリントにチケットを詰め込みすぎるのをやめて、チーム全体でゆとりを作る試みをしている。元はと言えば、みんな自分の作業に手一杯になってしまい、お互いの作業のことまで気が回る余裕が生まれず、チームとしての一体感が出ていないなという課題感があった。&lt;/p&gt;
&lt;p&gt;ここで、生まれたゆとりを使って他にどういったことができるか具体的に考えるため、仮に「1日だけ自由にチームの生産性を上げるために時間を使えるとしたら」という仮定を立ててアイデアを出してみたい。もちろん、他のメンバーの作業を手伝うとか、次のスプリントに予定している作業に着手するといった時間の使い方も考えられるけど、チーム全体の生産性を上げるためにスキマ時間を投資するのが賢いと思う。&lt;/p&gt;
&lt;h1&gt;アイデア&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;小さいリファクタリングを行う
&lt;ul&gt;
&lt;li&gt;長過ぎるメソッドを責務に基づいて分割し、可読性やテスト容易性を高める&lt;/li&gt;
&lt;li&gt;変数名やメソッド名を見直し、可読性を高める&lt;/li&gt;
&lt;li&gt;エラーメッセージを見直し、原因発見や問題解決のスピードを高める&lt;/li&gt;
&lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;パフォーマンス（レスポンスタイムやスループット）を改善する&lt;/li&gt;
&lt;li&gt;テストコードを追加する&lt;/li&gt;
&lt;li&gt;テストの実行時間を短縮させる&lt;/li&gt;
&lt;li&gt;flakyなテストを修正する&lt;/li&gt;
&lt;li&gt;デッドコードを消す&lt;/li&gt;
&lt;li&gt;linterに規約を追加する&lt;/li&gt;
&lt;li&gt;コード内のTODOコメントやFIXMEコメントを処理する&lt;/li&gt;
&lt;li&gt;メソッドやクラスにドキュメントコメントを追加する&lt;/li&gt;
&lt;li&gt;ライブラリや言語をマイナーアップデートする&lt;/li&gt;
&lt;li&gt;コードリーディングを行い、結果をドキュメントに整理して共有する&lt;/li&gt;
&lt;li&gt;古くなったドキュメントを更新する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他にもいいアイデアがあれば教えてほしいです。&lt;/p&gt;</summary>
    <title>1日だけチームのために自由に時間が使えるなら</title>
    <updated>2023-04-08T22:09:00+00:00</updated>
    <dc:date>2023-04-08T22:09:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/509/</id>
    <link href="https://blog.naoty.dev/509/"/>
    <summary>&lt;h1&gt;入社して半年経った&lt;/h1&gt;
&lt;p&gt;昨年10月に今の会社に入って、早いものでもう半年が経った。最初の3ヶ月は会社の雰囲気や開発のやり方に慣れていくことにエネルギーを使っていたけど、最近3ヶ月くらいはようやく自発的に動き出せるようになってきた。&lt;/p&gt;
&lt;p&gt;もう半年のゴールとしては、忙しい中でももう少し余裕を持って仕事できるようにしていきたい。あんまり家のこととか自分のこととかに時間やエネルギーを使えていなかったので。&lt;/p&gt;
&lt;h1&gt;パーソナルトレーニングはだいたい3ヶ月&lt;/h1&gt;
&lt;p&gt;今年の初めから開始したパーソナルトレーニングももうそろそろで3ヶ月が経とうとしている。成果としては2ヶ月時点で3kg減を達成したし、週2回のペースで運動するリズムやタンパク質中心の食生活は身についたので、やってよかったと思う。&lt;/p&gt;
&lt;p&gt;とはいえ、パーソナルトレーニングは比較的高額なので、3ヶ月経過したら一般的なジムに移ろうと思っている。&lt;/p&gt;
&lt;h1&gt;花粉症かも&lt;/h1&gt;
&lt;p&gt;ここ数日、頭がぼーっとしたりくしゃみや鼻水が止まらなくなり風邪をひいたかと思っていたけど、もしかして花粉症なのではないかと思ってきた。花粉症とは縁のない人生を送ってきたけど、ついになってしまったかもしれない。&lt;/p&gt;
&lt;h1&gt;Dartのパッケージ作り&lt;/h1&gt;
&lt;p&gt;社内で「&lt;a href=&quot;https://book.mynavi.jp/ec/products/detail/id=124056&quot;&gt;セキュア・バイ・デザイン&lt;/a&gt;」を輪読している影響でDartでドメイン・プリミティブを実装していきたい気持ちが高まっている。&lt;/p&gt;
&lt;p&gt;そんな中で足りないパーツとして宣言的に不変条件を定義する手段がDartにはないことに気づいた。&lt;code&gt;assert&lt;/code&gt;は開発時にしか機能しないものだし、if文を使ってチマチマとチェックするのはドメインロジックをストレートに表現する実装とは言えない。&lt;/p&gt;
&lt;p&gt;そこで、&lt;a href=&quot;https://github.com/naoty/require&quot;&gt;naoty/require&lt;/a&gt;というパッケージを作り始めた。これを使うと、こんな感じで不変条件を宣言的に記述できる。条件にマッチしなかった場合、それぞれの条件に合った例外がthrowされるようになっている。&lt;/p&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'package:require/require.dart'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;label:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasLengthGreaterThanOrEqualTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasLengthLessThan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'^[a-zA-Z]+&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;label:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isGreaterThanOrEqualTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isLessThan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;PoC的に何パターンか実装してみて、APIの可読性と実装の柔軟性のバランスがとれた実装になってきた。今後はさまざまな条件や型のサポートを増やしたり、実用上の課題を見つけて対応していきたい。&lt;/p&gt;
&lt;p&gt;実装においては、似たような実装が多かったので、おそらく半分以上のコードはGitHub Copilotが生成していると思う。怖いくらい便利。&lt;/p&gt;</summary>
    <title>2023-04-02</title>
    <updated>2023-04-02T19:48:00+00:00</updated>
    <dc:date>2023-04-02T19:48:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/508/</id>
    <link href="https://blog.naoty.dev/508/"/>
    <summary>&lt;p&gt;ChatGPTが世間を賑わせるようになって、界隈ではプログラマーの仕事がなくなるのでは?という悲観的な意見を耳にするようになった。だけど、出てしまったものはどうしようもないので、恐れるよりもどうやって使いこなせるかに頭を使っていきたい。&lt;/p&gt;
&lt;p&gt;まずは以下のタスクをChatGPTでどこまでこなせるのか確かめてみた。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;コード生成&lt;/li&gt;
&lt;li&gt;コードリーディング&lt;/li&gt;
&lt;li&gt;コードレビュー&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;コード生成&lt;/h1&gt;
&lt;p&gt;簡単なTODOアプリケーションを例にとって自然言語からどこまでコード生成してくれるか確認する。TODOアプリケーションが検証の例として微妙そうという意見はごもっともなのだけど、これだけでも分かることがあった。&lt;/p&gt;
&lt;p&gt;まずはプロンプト。仕様からテストコードを生成し、テストコードから実装を生成する順番で指示してみる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;以下の仕様を満たす、TODOアプリケーションのテストコードをDartで実装し、ファイル名をつけてください。

- 次のようなコマンドを受け付けるCLIアプリケーションである。
  - `todo list`でTODOの一覧を標準出力に出力する。
  - `todo add &amp;lt;title&amp;gt;`で新しいTODOを追加する。
  - `todo done &amp;lt;id&amp;gt;`で指定したIDのTODOを完了状態にする。
  - `todo delete &amp;lt;id&amp;gt;`で指定したIDのTODOを削除する。
- それぞれのTODOはIDとタイトルと完了しているかのフラグを持つ。
- TODOのデータはファイルとして保存するが、形式やフォーマットは問わない。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成されたテストコード。いい感じな気がする。&lt;/p&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'dart:io'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'package:test/test.dart'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'../lib/todo_application.dart'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'TodoApplication'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;todoApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TodoApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// テストデータの作成&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testTodoList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TodoItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;title:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'test1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;isDone:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TodoItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;title:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'test2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;isDone:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TodoItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;title:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'test3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;isDone:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TodoApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FILE_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeAsString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testTodoList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;tearDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// テストデータの削除&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TodoApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FILE_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deleteSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'TodoApplication.list'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// テストデータをリストアップ&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;todoList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;todoApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// リストアップ結果の確認&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todoList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todoList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todoList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'test1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todoList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isDone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todoList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todoList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'test2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todoList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isDone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todoList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todoList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'test3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todoList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isDone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// snip&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;そしてこれをパスさせるコードの生成を指示する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;このテストコードをすべてパスさせる実装を出力し、ファイル名をつけてください。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成された実装。&lt;/p&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'dart:io'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TodoItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isDone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;TodoItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isDone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$title&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$isDone&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TodoApplication&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILE_PATH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'todo.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TodoItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;todoList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TodoItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;[];&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FILE_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readAsLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;todoList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TodoItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;nl&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;nl&quot;&gt;title:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;nl&quot;&gt;isDone:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'true'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;todoList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// snip&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;一部省略してあるのだけど、これらのコードはエラーが含まれていて、テストが通らない。コードの修正をすべてChatGPTに依頼すると、提案されたコードにはまた別のエラーが含まれていてキリがない。もしかするともっと良いプロンプトを渡すと精度が上がるのかもしれない。&lt;/p&gt;
&lt;p&gt;コード生成はプログラミングの初手としては非常に強力で、数秒で80点くらいのコードが生成されるので、生成されたコードを人間が手直しするというステップを踏めば、生産性が爆発的に上がる感触があった。&lt;/p&gt;
&lt;h1&gt;コードリーディング&lt;/h1&gt;
&lt;p&gt;ChatGPTの主なユースケースの1つとして文章の要約をよく見るので、コードを要約させてみる。試しに、このブログのプレビューサーバーの&lt;a href=&quot;https://github.com/naoty/blog/blob/main/lib/blog/rack/post_build.rb&quot;&gt;実装&lt;/a&gt;をChatGPTに要約させてみた。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;以下のコードを要約してください。

（以下、コードを貼り付け）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;結果、かなり正確に要約されていることがわかった。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;このコードは、Blogという名前のモジュール内にRackという名前の別のモジュールがあり、その中にPostBuildというクラスが定義されています。このクラスは、RackアプリケーションをラップするためのRackミドルウェアであり、リクエストを受けるたびに記事ページを構築します。&lt;/p&gt;
&lt;p&gt;このクラスには、アプリケーション、パス、ソースの3つの属性があります。initializeメソッドは、これら3つの属性を設定します。callメソッドは、Rackアプリケーションのリクエストを処理するために呼び出されます。このメソッドでは、リクエストされたURLがパスに一致しているかどうかを確認し、パスから記事IDを抽出します。HTTP_IF_MODIFIED_SINCEヘッダが存在する場合、記事の最終更新日時をチェックし、更新がない場合は304レスポンスを返します。記事を構築するために、build_postメソッドが呼び出されます。記事をレンダリングするために、PostRendererを使用し、記事のHTMLをファイルに保存します。また、記事ページに自動リロードスクリプトを挿入するために、inject_reload_scriptメソッドが使用されます。PostNotFound例外が発生した場合、404レスポンスが返されます。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;また、メソッドごとに要約するように依頼すると、メソッドごとの要約が生成された。未知のコードを理解するときにChatGPTを使う場合には、本当に正しいか最終的には人間が確認する必要があるけど、メソッドの単位で要約されている方が確認しやすいだろう。&lt;/p&gt;
&lt;h1&gt;コードレビュー&lt;/h1&gt;
&lt;p&gt;自分が書いたコードに対するレビューをChatGPTに依頼することでどんなアドバイスがもらえるのか試してみた。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;以下のコードで改善すべきポイントを教えてください。

（以下、コードを貼り付け）
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;このコードには、次の改善点があります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rackミドルウェアを記述する場合は、Rack::Utilsを使用してクエリパラメータを解析する必要があります。Rack::Utilsを使用すると、コードがより堅牢になり、パフォーマンスが向上する可能性があります。&lt;/li&gt;
&lt;li&gt;HTTPのステータスコード404を返すとき、env変数を渡す必要があります。env変数には、HTTPヘッダーなどの情報が含まれています。現在のコードでは、env変数が引数として渡されていないため、リクエストヘッダーやリクエストメソッドなどの情報が失われてしまいます。&lt;/li&gt;
&lt;li&gt;このコードは、例外PostNotFoundを補足していますが、PostNotFoundがどのように定義されているかは明確ではありません。PostNotFoundが定義されていない場合、コードが動作しない可能性があります。PostNotFoundが定義されていない場合は、自分で定義する必要があります。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;正確性は微妙なところだが、ここも聞き方を工夫することでより精度の高いコードレビューを受けられそうなポテンシャルを感じる。&lt;/p&gt;
&lt;p&gt;コード生成やコードリーディングに比べると、自分が書いたコードに対する質問なので、その内容の正確性を判断しやすいわけで、より気軽に依頼してしまってよさそう。&lt;/p&gt;
&lt;h1&gt;まとめ&lt;/h1&gt;
&lt;p&gt;プログラミングに関わる3つの主なタスクについてChatGPTでどこまでこなせるか確かめてみたけど、現時点では完全に人間を置き換えるものとは言えないものの、プログラミングのタスクを大幅にショートカットできると言って間違いなさそう。&lt;/p&gt;</summary>
    <title>ChatGPT所感</title>
    <updated>2023-03-20T12:40:00+00:00</updated>
    <dc:date>2023-03-20T12:40:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/507/</id>
    <link href="https://blog.naoty.dev/507/"/>
    <summary>&lt;p&gt;ドメインモデリングにおいて状態をどのように扱うか考えることが増えてきたので、以下のような状態を持つブログ記事を例にとって、どのような方法がありうるか考えてみる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下書き: まだ公開していないので公開日時がない。&lt;/li&gt;
&lt;li&gt;公開: 公開しているので公開日時がある。&lt;/li&gt;
&lt;li&gt;アーカイブ: ユーザーが退会しているのでユーザーIDがない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下、コンストラクタは省略する。&lt;/p&gt;
&lt;h1&gt;フラグ&lt;/h1&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publishedAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isDraft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isPublished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isArchived&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publishedAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isDraft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;isDraft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;isPublished&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;publishedAt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publishedAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;archive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isPublished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;isPublished&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;isArchived&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;isDraft&lt;/code&gt;と&lt;code&gt;isPublished&lt;/code&gt;と&lt;code&gt;isArchived&lt;/code&gt;がすべて&lt;code&gt;true&lt;/code&gt;になることはないし、&lt;code&gt;isDraft&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;なら&lt;code&gt;publishedAt&lt;/code&gt;は&lt;code&gt;null&lt;/code&gt;でないといけない。そういった不変条件を常に満たすように実装が必要になる。&lt;/li&gt;
&lt;li&gt;下書き状態なら公開日時は本来必要ないけど、nullableとして表現するしかない。nulllableなフィールドが増えればそれだけnullチェックも増える。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Article&lt;/code&gt;インスタンスを利用する際、フラグをいちいち確認する必要がある。例えば、インスタンスを公開しようとしたとき、その状態をチェックして処理を替えなくてはいけない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;enum&lt;/h1&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArticleStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publishedAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArticleStatus&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;draft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;published&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;archived&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;フラグよりはすっきりしたけど、それ以外は変わっていない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;状態ごとにクラスを分割&lt;/h1&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DraftArticle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;PublishedArticle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publishedAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PublishedArticle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;userId:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;title:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;publishedAt:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publishedAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PublishedArticle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publishedAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;ArchivedArticle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;archive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArchivedArticle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;title:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;publishedAt:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;publishedAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArchivedArticle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publishedAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;インスタンスは異なっていても同じ記事であれば&lt;code&gt;id&lt;/code&gt;は同じものを利用する。&lt;/li&gt;
&lt;li&gt;上2つと比べて、コード量が増えたけど、不必要でnullableなフィールドはなくなったし、状態に関わる不変条件をチェックする必要もなくなった。&lt;/li&gt;
&lt;li&gt;それぞれの状態に対して可能な処理がコンパイル時には保証されている。例えば、&lt;code&gt;publish&lt;/code&gt;は下書き状態の記事にしかできなくなっている。&lt;/li&gt;
&lt;li&gt;状態に関わらずにブログ記事を扱いたい場合、Dartであれば&lt;code&gt;Article&lt;/code&gt;インターフェイスを定義することになり、ポリモーフィズムを駆使した実装になるだろう。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>状態ごとにモデルを分割する</title>
    <updated>2023-03-11T17:39:00+00:00</updated>
    <dc:date>2023-03-11T17:39:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/506/</id>
    <link href="https://blog.naoty.dev/506/"/>
    <summary>&lt;p&gt;最近、Firestoreのことやドメインモデリングについて思いをめぐらせることが多いので、感じていることや考えていることを雑にテキストに起こした。&lt;/p&gt;
&lt;h1&gt;非正規化とORマッパー&lt;/h1&gt;
&lt;p&gt;Firestoreに限らずNoSQLでは、アクセスパターンに合わせて非正規化したスキーマを設計するのがよいとされている。RDBとは異なり、JOINが使えない（MongoDBでは使えるらしい）ため、アプリケーション側で複数回のクエリを実行し結合することになり効率がよくないのが理由のようだ。&lt;/p&gt;
&lt;p&gt;RDBでそうしてきたようにORマッパーを使い、Firestoreに格納されたデータとオブジェクトとの間で変換しようとすると、どうしても正規化されたスキーマになりやすいと思う。正規化されたモデルを使ってFirestoreにアクセスすると、上述した通り、アプリケーション側での結合に頼ることになり、readのパフォーマンスが悪化しやすくなると思う。&lt;/p&gt;
&lt;h1&gt;非正規化のための工夫&lt;/h1&gt;
&lt;p&gt;スキーマを非正規化すると、同じドメインモデルを複数のコレクションに保存することになる。そのため、コレクション間での一貫性を保つための工夫がアプリケーション側に必要になる。例えば、Firestoreへの書き込みを行うメソッドを統一し、複数のコレクションへの書き込みが矛盾なく行われるようにしたり、コレクション間の矛盾を検知しあるべき状態に収束させるワーカープロセスを用意したり、FaaSを利用してあるコレクションのデータを別コレクションにコピーするようにしたり、といった工夫が考えられそうだ。&lt;/p&gt;
&lt;p&gt;とはいえ、完璧なプログラムが存在しないように、アプリケーション側での工夫にも限界があり、一貫性を強く求められるシステム（SoRなど）では素直にRDBを使って正規化されたスキーマの上で書き込みをする方が無難だと思う。&lt;/p&gt;
&lt;h1&gt;ドメインモデリングとデータモデリング&lt;/h1&gt;
&lt;p&gt;ドメインモデリングを通してドメインを正確に反映したモデルを抽出できる一方で、それをそのままFirestoreに保存しようとすると、上述の通り、パフォーマンス上の問題が出てくる。なので、非正規化などFirestoreの特性に合わせたデータモデリングも同時に必要になる。&lt;/p&gt;
&lt;p&gt;アプリケーションはドメインモデルとデータモデルの溝を埋めるように実装したい。HTTPリクエストをドメインモデルに変換し、ドメインモデルをデータモデルに変換してFirestoreに保存する。そしてその逆を行う。&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873118703/&quot;&gt;データ指向アプリケーションデザイン&lt;/a&gt;を読み直すとこのようなことを思い起こさせてくれる。&lt;/p&gt;</summary>
    <title>Firestoreとドメインモデルの間で</title>
    <updated>2023-03-04T15:41:00+00:00</updated>
    <dc:date>2023-03-04T15:41:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/505/</id>
    <link href="https://blog.naoty.dev/505/"/>
    <summary>&lt;p&gt;今までなんとなくでStreamを触ってきたけど、そろそろちゃんと理解しておきたいので記事に残すことにした。基本的なところからエラーハンドリングまで調べたり手を動かして検証した。&lt;/p&gt;
&lt;h1&gt;Streamの生成&lt;/h1&gt;
&lt;h2&gt;
&lt;code&gt;async*&lt;/code&gt;による生成&lt;/h2&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;async*&lt;/code&gt;がついた関数を呼ぶとStreamが生成され、関数が終了するとそのStreamは終了する。その間、&lt;code&gt;yield&lt;/code&gt;や&lt;code&gt;yield*&lt;/code&gt;によってStreamに値を送ることができる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yield&lt;/code&gt;は値をそのままStreamに送るのに対して、&lt;code&gt;yield*&lt;/code&gt;は別のStreamを受け取り、そのStreamから受け取った値を&lt;code&gt;yield&lt;/code&gt;する。&lt;/p&gt;
&lt;h2&gt;別のStreamから生成&lt;/h2&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Stream&lt;/code&gt;クラスには新しい&lt;code&gt;Stream&lt;/code&gt;を生成するための便利なメソッドが用意されている。例えば、以下のようなメソッドが定義されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;map&lt;/code&gt;: 引数の関数で変換した値を送る新たなStreamを生成する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;where&lt;/code&gt;: 引数の条件を満たす値を送る新たなStreamを生成する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;take&lt;/code&gt;: 最初のN件の値だけを返す新たなStreamを生成する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;skip&lt;/code&gt;: 最初のN件をスキップした残りの値を返す新たなStreamを生成する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cast&lt;/code&gt;: 実行時に型キャストした値を返す新たなStreamを生成する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;code&gt;StreamController&lt;/code&gt;による生成&lt;/h2&gt;
&lt;p&gt;これだけで1本記事が書けそうなので今回は割愛する。&lt;/p&gt;
&lt;h2&gt;エラーハンドリング&lt;/h2&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// throw Exception('error for $i') はNG&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'error for &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Streamの生成時にエラーが発生した場合、エラーをStreamに送る必要がある。&lt;code&gt;throw&lt;/code&gt;してしまうと、Streamを生成する関数自体が例外を投げてしまう。エラーをStreamに送ると、後述するように&lt;code&gt;handleError&lt;/code&gt;等によって利用側がエラーハンドリングできるようになる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;async*&lt;/code&gt;を使って生成する場合、上のように&lt;code&gt;Stream.error&lt;/code&gt;で単一のエラーを送るStreamを作り&lt;code&gt;yield*&lt;/code&gt;に渡すことでエラーをStreamに送ることができる（もっと簡単にできる方法があれば教えてください）。&lt;code&gt;map&lt;/code&gt;等で別のStreamから生成する場合も同様にできるはず。&lt;/p&gt;
&lt;h1&gt;Streamの利用&lt;/h1&gt;
&lt;h2&gt;
&lt;code&gt;await for&lt;/code&gt;による利用&lt;/h2&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;await for&lt;/code&gt;文を使うと、Streamから値を受け取るまで待機し、値を受け取ったら処理できる。&lt;/p&gt;
&lt;h2&gt;Streamクラスのメソッドによる利用&lt;/h2&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Stream&lt;/code&gt;クラスにはStreamの値を処理して結果を&lt;code&gt;Future&lt;/code&gt;として出力するメソッドが用意されている。例えば、以下のようなメソッドが定義されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;any&lt;/code&gt;: Streamの値のいずれかが条件を満たすかを返す。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;contains&lt;/code&gt;: Streamに引数の値が含まれるかを返す。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;reduce&lt;/code&gt;: Streamの値を集約して一つの値を返す。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;drain&lt;/code&gt;: Streamが完了したら引数の値を返し、エラーが発生したらエラーを返す。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toList&lt;/code&gt;: Streamの値を&lt;code&gt;List&lt;/code&gt;にして返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;code&gt;listen&lt;/code&gt;による利用&lt;/h2&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;countStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;onDone:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;listen&lt;/code&gt;メソッドを使うと、Streamの値を受け取ったときの処理、Streamが完了したときの処理などをより汎用的に定義できる。&lt;/p&gt;
&lt;h2&gt;エラーハンドリング&lt;/h2&gt;
&lt;p&gt;Streamの生成側のエラーハンドリングで使ったコードを利用する場合を考える。&lt;/p&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; Exception: error for 5&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 10&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;await for&lt;/code&gt;で値を受け取る場合、途中でエラーを受け取ると&lt;code&gt;await for&lt;/code&gt;はStreamの処理を中止しそのエラーを&lt;code&gt;throw&lt;/code&gt;する。なので、エラーハンドリングするには&lt;code&gt;await for&lt;/code&gt;を&lt;code&gt;try ... catch&lt;/code&gt;で囲む必要がある。そして、エラーを受け取るまでは処理されるが、&lt;code&gt;catch&lt;/code&gt;した時点ではループを抜けているため、その後の処理を継続させることができない。&lt;/p&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;countStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;onDone:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 50&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;onError:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; Exception: error for 5&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;cancelOnError:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;listen&lt;/code&gt;で値を受け取る場合はより細かくエラーを受け取ったときの処理を定義できる。&lt;code&gt;onError&lt;/code&gt;でエラーを受け取ったときの処理を定義でき、&lt;code&gt;cancelOnError&lt;/code&gt;でエラーを受け取ったときにStreamをcancelするかどうかを設定できる。デフォルトではこれが&lt;code&gt;false&lt;/code&gt;なので、エラーを受け取っても処理を継続できる。&lt;/p&gt;</summary>
    <title>Streamと仲良くなる</title>
    <updated>2023-02-19T13:47:00+00:00</updated>
    <dc:date>2023-02-19T13:47:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/504/</id>
    <link href="https://blog.naoty.dev/504/"/>
    <summary>&lt;p&gt;ここ1,2年で7kgくらい太ったので、今年こそ運動しようと思い、1ヶ月前からパーソナルトレーニングと食事指導を受け始めた。なんとか1ヶ月続いたので記録に残しておきたい。&lt;/p&gt;
&lt;h1&gt;パーソナルトレーニング&lt;/h1&gt;
&lt;p&gt;週2回のペースで1回45分のトレーニングを受けている。ジムに行くこと自体が初めてだったので、手取り足取り教えてもらってとても助かる。&lt;/p&gt;
&lt;p&gt;やっていることは、スクワット2種目と、胸側のトレーニングまたは背中側のトレーニングを日によって替えてやっている。具体的には&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ブルガリアンスクワット10回3セット&lt;/li&gt;
&lt;li&gt;フロントランジまたはバックランジ20回3セット&lt;/li&gt;
&lt;li&gt;ベンチプレスを25kgで15回3セット&lt;/li&gt;
&lt;li&gt;あと脇周りを鍛えるやつ（忘れた）、またはキックバック&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;みたいな感じ。&lt;/p&gt;
&lt;p&gt;やる度に翌日筋肉痛になるのだけど、だんだん慣れてきて筋肉痛が弱いと、逆にトレーニングできていないのではと不安になるようになった。&lt;/p&gt;
&lt;h1&gt;食事指導&lt;/h1&gt;
&lt;p&gt;体重と体脂肪率から一日に摂取していいカロリーとPFCバランスを計算してもらい、それに従って食事指導をしてもらっている。毎晩寝る前にその日の食事メニューを写真つきでLINEで送って、アドバイスをもらう形だ。&lt;/p&gt;
&lt;p&gt;これまでの食生活ではタンパク質があまり摂れていないことがわかり、一気にタンパク質中心の食生活になった。具体的な変化はこんな感じ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;豚肉と鶏もも肉を買うのをやめ、鶏むね肉を大量に買うようになった。ホットクックのおかげで鶏むね肉からサラダチキンを簡単につくれるし、カレーを鶏むね肉で作ってもおいしく食べれるので最高。&lt;/li&gt;
&lt;li&gt;冷食の炭水化物系（チャーハンとか麺類）を買うのをやめ、浮いたお金でベースブレッドを定期購入するようになった。&lt;/li&gt;
&lt;li&gt;間食として、1本満足バーやギリシャヨーグルトなどタンパク質が豊富なおやつを食べたり、プロテイン+牛乳を摂るようになった。1回の食事で消化できるタンパク質は40gまでらしいので、必然的に間食を摂ることになるけど、こういったものを食べることで小腹を膨らましつつ、タンパク質を補える。&lt;/li&gt;
&lt;li&gt;飲み物は水かお茶しか飲まなくなった。3L飲む必要があると言われているけど、ぜんぜん届かない…。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;感想&lt;/h1&gt;
&lt;p&gt;トレーニングをやっていると自分に甘くなる部分がどうしても出てくるけど、トレーナーのおかげであと一歩追い込むことができているような気がする。また、トレーニングのやり方次第でけっこう効果に差が出てくることも分かったので、最初は指導を受けるのが効率的だと感じた。あと2ヶ月くらいは続けてみて、独り立ちできそうなら、一般的なジムに移行しようと思う。&lt;/p&gt;
&lt;p&gt;食事指導については4週間だけで終わりなのだけど、習慣づけにはちょうど良い期間で、今後も継続できそうな予感がしている。食習慣を変えるのは中長期的にはかなり健康に影響してくるので、良い投資だったと思う。&lt;/p&gt;</summary>
    <title>パーソナルトレーニングと食事指導を始めた</title>
    <updated>2023-02-11T22:33:00+00:00</updated>
    <dc:date>2023-02-11T22:33:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/503/</id>
    <link href="https://blog.naoty.dev/503/"/>
    <summary>&lt;p&gt;ドメインと境界づけられたコンテキストとチームの単位について最近考えることが多いので、整理のためブログに残しておきたい。もちろんここに書かれた内容はいろいろな書籍から自分なりに噛み砕いた解釈なので、異なっている部分もあると思う。&lt;/p&gt;
&lt;h1&gt;ドメインとは&lt;/h1&gt;
&lt;p&gt;システムが対象とする現実世界の概念のこと。&lt;/p&gt;
&lt;h1&gt;境界づけられたコンテキストとは&lt;/h1&gt;
&lt;p&gt;ドメインが特定の意味を持つための条件のこと。&lt;/p&gt;
&lt;p&gt;よく挙げられる例として「商品」というドメインは消費者から見た場合と、在庫を管理するスタッフから見た場合とでは、意味合いが変わってくる。後者の場合では「商品」というより「在庫」と呼ばれるだろう。この場合では「商品」というドメインに対して「購入」というコンテキストと「在庫管理」というコンテキストが考えられそうだ。&lt;/p&gt;
&lt;p&gt;あるドメインを表す言葉（ユビキタス言語）はコンテキストの中では一意の意味を持つことになる。&lt;/p&gt;
&lt;h1&gt;ドメインとコンテキストの関係性&lt;/h1&gt;
&lt;p&gt;ドメインとコンテキストの関係性について、フリマサービスを例に考えてみたい。フリマサービスに関わったことがないので、ドメインの理解としてそもそも間違っている可能性があるけどそこは目をつむってほしい。&lt;/p&gt;
&lt;p&gt;このフリマサービスは以下のような機能を持っているとする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ユーザーは自由に商品を出品できるし、また出品された商品を購入することもできる。&lt;/li&gt;
&lt;li&gt;サービスの運営者は不当な取引がないか商品を検閲している。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「ユーザー」「商品」「出品」「購入」「検閲」などのドメインらしき概念が出てきた。&lt;/p&gt;
&lt;p&gt;まずは、どんなサービスにも存在する「ユーザー」という概念から整理してみる。ユーザーは購入するときには購入者と呼ばれるし、出品するときには出品者と呼ばれる。これはつまり、「購入」のコンテキストと「出品」のコンテキストがあるということを意味している。&lt;/p&gt;
&lt;p&gt;次に「商品」について考えてみる。「購入」のコンテキストでも「出品」のコンテキストでも商品は商品であろうと思えそうだが、よく考えるとこれも区別する必要があることがわかる。例えば、「出品」のコンテキストでは「商品」には非公開・公開といった表示ステータスや、未購入・購入済みといった購入ステータスが考えられるが、「購入」のコンテキストでは非公開の商品や購入済みの商品は存在する必要がないため、考慮する必要がない。さらに、運営者が検閲する際に「商品」の掲載可否を表すステータスや、掲載できなかった場合の理由といった情報が加わるだろう。つまり、ここには「検閲」というコンテキストが存在することになる。このように「商品」というドメインはコンテキストにより微妙に関心事が異なっており、意味合いが異なると言える。&lt;/p&gt;
&lt;p&gt;ここまでを表にまとめる。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ドメイン＼コンテキスト&lt;/th&gt;
&lt;th&gt;購入&lt;/th&gt;
&lt;th&gt;出品&lt;/th&gt;
&lt;th&gt;検閲&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ユーザー&lt;/td&gt;
&lt;td&gt;購入者&lt;/td&gt;
&lt;td&gt;出品者&lt;/td&gt;
&lt;td&gt;運営者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;商品&lt;/td&gt;
&lt;td&gt;商品&lt;/td&gt;
&lt;td&gt;商品&lt;/td&gt;
&lt;td&gt;商品&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;「ユーザー」というドメインはコンテキストによって呼び方が変わることがわかった一方で、「商品」というドメインはコンテキストが変わっても特に呼び方が変わるわけではなかった。それでも、コンテキストにより意味合いが異なることがわかった。場合によって呼び方が変わる概念にはコンテキストが潜んでいることが分かりやすいが、現実世界ではまれであるようにも思える。それでも、場合によって関心事が変わるということは必ずあるはずで、それを見逃さずにコンテキストとして整理できるとよいだろう。&lt;/p&gt;
&lt;h1&gt;チームの単位&lt;/h1&gt;
&lt;p&gt;システムが成熟し巨大化してくると、扱うドメインもコンテキストも当然増えてくる。&lt;strong&gt;開発チームの全員がそれらすべてを理解するのは徐々に認知負荷が高まりデリバリーの遅れや品質の悪化につながる&lt;/strong&gt;ため、どこかでチームを分割し、担当領域を割り振る必要が出てくる。そこで、どのように分割すると効果的なのか考えたい。&lt;/p&gt;
&lt;p&gt;ここで、フリマサービスが成長し機能が増えた結果、ドメインやコンテキストが以下のような表に整理できたとしよう。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ドメイン＼コンテキスト&lt;/th&gt;
&lt;th&gt;購入&lt;/th&gt;
&lt;th&gt;出品&lt;/th&gt;
&lt;th&gt;検閲&lt;/th&gt;
&lt;th&gt;広告&lt;/th&gt;
&lt;th&gt;...&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ユーザー&lt;/td&gt;
&lt;td&gt;購入者&lt;/td&gt;
&lt;td&gt;出品者&lt;/td&gt;
&lt;td&gt;運営者&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;商品&lt;/td&gt;
&lt;td&gt;商品&lt;/td&gt;
&lt;td&gt;商品&lt;/td&gt;
&lt;td&gt;商品&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;分割の仕方としては2つ考えられる。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ドメイン単位で分割する。「ユーザー」チーム、「商品」チームといった具合に分割し、そのドメインが関わるコンテキストをすべて扱う。表で言うと、行ごとにチームを割り当てることになる。&lt;/li&gt;
&lt;li&gt;コンテキスト単位で分割する。「購入」チーム、「出品」チームといった具合に分割し、そのコンテキストが関わるドメインをすべて扱う。表で言うと、列ごとにチームを割り当てることになる。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;どちらにしてもチームの数には限りがあるので、近接するいくつかのドメイン/コンテキストをチームに割り当てることになるだろう。&lt;/p&gt;
&lt;p&gt;2つの分割方法のうち、コンテキストの単位で分割する方がいいと思う。理由としては、&lt;strong&gt;1つのコンテキストに複数のチームを割り当てると、同じコンテキストの中でチームごとに固有のユビキタス言語が生まれやすくなってしまう&lt;/strong&gt;からだ。1つのコンテキストには一意に意味が定まるべきなので、ドメイン単位で分割するのは得策とは言えない。&lt;/p&gt;
&lt;p&gt;DDDの書籍を読むとわかることだけど、各チームはコンテキストを所有し、ユビキタス言語に沿った独自のドメインモデルを構築し、コンテキストマッピングに従って他のコンテキストとのコミュニケーション手段を実装していくことになる。&lt;/p&gt;</summary>
    <title>ドメインとコンテキストの関係とチームの単位</title>
    <updated>2023-02-04T15:45:00+00:00</updated>
    <dc:date>2023-02-04T15:45:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/502/</id>
    <link href="https://blog.naoty.dev/502/"/>
    <summary>&lt;p&gt;最近&lt;a href=&quot;https://book.mynavi.jp/ec/products/detail/id=124056&quot;&gt;セキュア・バイ・デザイン&lt;/a&gt;という本を2週間くらいかけて読んでいた。&lt;/p&gt;
&lt;h1&gt;感想&lt;/h1&gt;
&lt;p&gt;社内の輪読会で読むことになり、少し先取りして読んでみたところ、面白いし読みやすかったため、一気に読み進めてしまった。前回の「単体テストの感想/使い方」に並んで、大当たりの本だった。&lt;/p&gt;
&lt;h1&gt;内容&lt;/h1&gt;
&lt;p&gt;タイトルからは想像つかないけど、感覚的には7割くらいはDDDの実装パターンの話で、残りはセキュリティの話という印象だった。DDDに則った設計を推し進めることでセキュアなサービスにつながるという感じだった。&lt;/p&gt;
&lt;p&gt;以下は印象にのこったことを書いていく。&lt;/p&gt;
&lt;h2&gt;汎用データ型が適切な場面はほとんどない&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;int&lt;/code&gt;や&lt;code&gt;string&lt;/code&gt;といった汎用データ型がドメインモデルの表現として適切であることはほとんどない、という強烈なパンチラインが最初の方に出てくる。&lt;/p&gt;
&lt;p&gt;例えば、ユーザー名を表すデータ型として&lt;code&gt;string&lt;/code&gt;を使うのは当然だと思われるが、ユーザー名に使える文字種や長さといったドメインルールを&lt;code&gt;User&lt;/code&gt;クラスなどそれを包含する概念で検証するのではなく、&lt;code&gt;UserName&lt;/code&gt;クラスを新たに作りそこで検証させる方が凝集度が高くfail-fastな設計になるということだった。当然ながら、この&lt;code&gt;UserName&lt;/code&gt;クラスの中で文字列の表現として&lt;code&gt;string&lt;/code&gt;を使うことにはなるが、それを直接使うことはないということだろう。&lt;/p&gt;
&lt;p&gt;確か「&lt;a href=&quot;/491/&quot;&gt;Domain modeling made functional&lt;/a&gt;」にも同じような話が出てきた記憶がある。ただの&lt;code&gt;string&lt;/code&gt;ではなく型エイリアスを使ってドメインを型として表現することの重要性について書かれていたはず。&lt;/p&gt;
&lt;h2&gt;契約プログラミング&lt;/h2&gt;
&lt;p&gt;自分は例の分厚い「オブジェクト指向入門」を読んだことがなく、ちゃんと契約プログラミングについて書かれた本を読んだことがなかったのだけど、本書には部分的に契約プログラミングについて書かれた箇所があり、とても勉強になった。&lt;/p&gt;
&lt;p&gt;以前読んだ「&lt;a href=&quot;/498/&quot;&gt;単体テストの考え方/使い方&lt;/a&gt;」の中でも「事前条件」「事後条件」「不変条件」といった用語は登場しており、契約プログラミングはプログラミングにおける基本的な考え方の一つとして捉えられるのだろう。&lt;/p&gt;
&lt;p&gt;本書では値オブジェクトの不変条件を守るために、コンストラクタにおいて引数を検証する実装を紹介している。そして、immutableであり、かつ不変条件が常に保証された値オブジェクトを特にドメイン・プリミティブと呼んでいる。&lt;/p&gt;
&lt;h2&gt;コードレビューと確証バイアス&lt;/h2&gt;
&lt;p&gt;本書では一致する特徴を探してしまう人間の習性のことを確証バイアスと呼んでおり、それがコードレビューにも影響するという話が面白かった。&lt;/p&gt;
&lt;p&gt;レビューするコードの99%が正しかったとすると、無意識のうちに残り1%も正しいだろうと思い込んでしまう。逆に、バグをいくつか見つかると、他のコードも疑わしく見えてくる。&lt;/p&gt;
&lt;p&gt;警察官はこういった確証バイアスに陥らないように特殊な訓練を受けているそうだけど、僕たちプログラマーも確証バイアスに陥らない工夫が必要になるのだろうと思った。&lt;/p&gt;
&lt;h2&gt;コレクションを持つエンティティの完全性&lt;/h2&gt;
&lt;p&gt;エンティティのメンバーに&lt;code&gt;List&lt;/code&gt;などのコレクションがある場合、エンティティの完全性を保つ工夫が必要という話。&lt;/p&gt;
&lt;p&gt;エンティティは、immutableである値オブジェクトとは異なり、mutableな存在なので、コンストラクタで不変条件を検証するだけでは不十分で、setterや状態を更新するメソッドにおいて不変条件が守られているかを検証する必要がある。なので、mutableなメンバーをpublicにせず状態を更新するメソッドにカプセル化するといった基本的な工夫をとることになる。&lt;/p&gt;
&lt;p&gt;ただ、コレクションをメンバーに持つ場合はさらに踏み込んで考える必要がある。コレクションそのものをgetter等で外部に公開すると、そのコレクションの中身を外部から更新できてしまうため、エンティティの不変条件を守れなくなってしまう。&lt;/p&gt;
&lt;p&gt;そこで、外部にコレクションを公開する場合は、コレクションそのものではなくimmutableな参照を返すようにする。Javaにはこれを可能にする&lt;code&gt;Collection.unmodifiableList&lt;/code&gt;といった便利メソッドがある。これにより、外部の利用者に読み取り専用のコレクションを公開できるようになる。&lt;/p&gt;
&lt;h1&gt;ドメインDoS攻撃&lt;/h1&gt;
&lt;p&gt;ドメインDoS攻撃というのは、ドメインルールを悪用してサービスを提供できない状態に追い詰める攻撃のことで、本書ではホテルに5000件予約してキャンセル料が発生する直前で全件キャンセルするといった攻撃が紹介されていた。&lt;/p&gt;
&lt;p&gt;こういった攻撃が存在することを知っているだけでも、ドメインルールを悪用してみようという発想が生まれ、そこから隠されたドメインルールを発見する手がかりが生まれると思う。&lt;/p&gt;
&lt;h2&gt;11章全部&lt;/h2&gt;
&lt;p&gt;11章は保険アプリケーションを開発する企業においてチーム間で「支払い」に関わる認識のずれに誰も気づかないまま機能をリリースした結果、裁判沙汰にまで発展したという話で、一見同じに見えるドメインモデルでもそのコンテキストを意識しなくてはならないという示唆があったし、コンテキストごとにチームを分割することで独立して動けるようになったが、そのコンテキストマッピングを疎かにしたことによる弊害に気付かされた。個人的に非常に刺さる内容だった。&lt;/p&gt;</summary>
    <title>セキュア・バイ・デザイン</title>
    <updated>2023-01-28T12:41:00+00:00</updated>
    <dc:date>2023-01-28T12:41:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/501/</id>
    <link href="https://blog.naoty.dev/501/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://book.mynavi.jp/ec/products/detail/id=124056&quot;&gt;セキュア・バイ・デザイン&lt;/a&gt;という本を最近読んでいて、その中で紹介されるドメイン・プリミティブという設計手法が印象に残ったのでDartでどのように実装できるか試してみた。&lt;/p&gt;
&lt;p&gt;ドメイン・プリミティブとは、簡単に言うと、その値が常に有効であることが保証された値オブジェクトのことを指していて、&lt;code&gt;String&lt;/code&gt;や&lt;code&gt;int&lt;/code&gt;のような汎用的なデータ型に代わって使われる。&lt;/p&gt;
&lt;h1&gt;実装例&lt;/h1&gt;
&lt;p&gt;以下の例では税を含む金額の計算をDartを使ってモデリングしている。&lt;/p&gt;
&lt;p&gt;まず、金額を表すために単なる&lt;code&gt;int&lt;/code&gt;の代わりに&lt;code&gt;Money&lt;/code&gt;というドメイン・プリミティブを定義する。-1000円といった負の値は有効ではないのでファクトリーコンストラクタで事前条件を検証し、デフォルトコンストラクタを非公開にすることで有効な値のみで初期化できるようにしている。&lt;/p&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_internal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'value'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'must be &amp;gt;= 0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_internal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;次に、税を表す&lt;code&gt;Tax&lt;/code&gt;というドメイン・プリミティブを定義する。ここでは通常税率と軽減税率の2種類を定義した。Dartのenhanced enumsを使い、定数コンストラクタを定義すれば、コンパイル時には値が決定するためコンストラクタの引数を検証する必要がない。&lt;/p&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kt&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tax&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;regular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;rate:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;reduced&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;rate:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.08&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;次に、税抜価格を&lt;code&gt;Money&lt;/code&gt;型を利用して定義する。&lt;code&gt;Money&lt;/code&gt;型を利用しているので、自動的に負の値になることは実行時に保証されている。&lt;/p&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TaxExcludedPrice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;TaxExcludedPrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;最後に、これらを利用して税込価格を定義する。コンストラクタにて税抜価格と税から生成するようにしているため、任意の数値から税込価格を直接生成することができない。&lt;/p&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TaxIncludedPrice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;TaxIncludedPrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaxExcludedPrice&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taxExcludedPrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tax&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;taxExcludedPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;これらを使って軽減税率の商品の税込価格を計算してみる（紙幅の関係で&lt;code&gt;toString()&lt;/code&gt;の実装は省略してある）。&lt;/p&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taxExcludedPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaxExcludedPrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taxIncludedPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaxIncludedPrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;taxExcludedPrice:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taxExcludedPrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;tax:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reduced&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'tax included price is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$taxIncludedPrice&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; tax included price is 1080.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;何が良いのか&lt;/h1&gt;
&lt;p&gt;こうした金額を実装する際、&lt;code&gt;int&lt;/code&gt;や&lt;code&gt;double&lt;/code&gt;といった基本データ型を直接使って表すことが多いが、&lt;code&gt;Money&lt;/code&gt;型を導入することで「負の値は許容しない」といったドメインルールを内包することができる。&lt;/p&gt;
&lt;p&gt;また、&lt;code&gt;TaxIncludedPrice&lt;/code&gt;型が&lt;code&gt;TaxExcludedPrice&lt;/code&gt;型と&lt;code&gt;Tax&lt;/code&gt;型からでないと生成できないようにしていることで「税込価格は税抜価格に税を加えた値である」といったドメインロジックを型システムによって強制できるため、単体テストなどによる保証よりもさらにfail-fastな設計となり、より堅牢なコードになる。&lt;/p&gt;</summary>
    <title>ドメイン・プリミティブ in Dart</title>
    <updated>2023-01-20T22:25:00+00:00</updated>
    <dc:date>2023-01-20T22:25:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/500/</id>
    <link href="https://blog.naoty.dev/500/"/>
    <summary>&lt;p&gt;ずっと気になってたKindle Paperwhiteを買ってみた。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;./kindle-paperwhite.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./kindle-paperwhite.jpg&quot; alt=&quot;'PDFの技術書を表示するKindle Paperwhite'&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;PDFの技術書も読める&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;今まではAndroidのAdobe AcrobatアプリでPDFの技術書を読んでいたのだけど、集中が切れるとすぐにTwitterを開いてしまい、読書量が十分にとれていなかったのが課題だった。読書専用のデバイスによってこれを解決したいと思い、購入してみた。&lt;/p&gt;
&lt;p&gt;PDFを読めるのかが懸念だったけど、MacとKindle PaperwhiteをUSBで接続すると、Finderにデバイスとして表示され、簡単にPC上のPDFを転送できたのでまったく問題なかった。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;./kindle-on-finder.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./kindle-on-finder.png&quot; alt='&quot;Finder上に表示されたKindle&quot;' style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;Finder上にKindleが表示される&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;今のところ、読みたいマンガを読み尽くしておいたおかげか、技術書をかなり集中して読めており、読書量がかなり増えたと感じている。ディスプレイの特性上、スマホと比べるとレンダリングがモッサリとしているけど、読書に支障をきたすレベルにはなく、むしろ読書以外の余計な操作をする気力を削いでいるとも言えそう。&lt;/p&gt;</summary>
    <title>Kindle Paperwhite</title>
    <updated>2023-01-14T21:26:00+00:00</updated>
    <dc:date>2023-01-14T21:26:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/499/</id>
    <link href="https://blog.naoty.dev/499/"/>
    <summary>&lt;p&gt;当たり前すぎるかもしれないけど、ちゃんと言語化しておきたいと思いブログにした。&lt;/p&gt;
&lt;h1&gt;モック&lt;/h1&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Service posts message via API'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Arrange&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apiClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockApiClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;databaseClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockDatabaseClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;apiClient:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apiClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;databaseClient:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;databaseClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Act&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;postMessages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Assert&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apiClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;モックはテスト対象から外部へのコミュニケーションを模倣し、検証する。外部というのは、他のサービス、データベース、メッセージキューなどテスト対象とは別の場所で動いているもの全般を指す。&lt;/p&gt;
&lt;h1&gt;スタブ&lt;/h1&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Service returns the list of messages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Arrange&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apiClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockApiClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;databaseClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockDatabaseClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;apiClient:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apiClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;databaseClient:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;databaseClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;databaseClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'DUMMY'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Act&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listMessages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Assert&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'DUMMY'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;スタブは外部からテスト対象へのコミュニケーションを模倣する。モックがテスト対象からの出力を模倣するのに対して、スタブはテスト対象への入力を模倣するとも言える。&lt;/p&gt;
&lt;p&gt;モックとは異なり、スタブを使ってコミュニケーションを検証しない。スタブはテスト対象への入力なので、テスト対象の内部でどのようなコミュニケーションが行われたかを検証することは、実装の詳細に立ち入りすぎている。詳細と深く結びついたテストは、実装をリファクタリングすると壊れてしまうため、保守性が低いといえる。&lt;/p&gt;</summary>
    <title>モックとスタブ</title>
    <updated>2023-01-06T23:20:00+00:00</updated>
    <dc:date>2023-01-06T23:20:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/498/</id>
    <link href="https://blog.naoty.dev/498/"/>
    <summary>&lt;p&gt;発売されたばかりの&lt;a href=&quot;https://book.mynavi.jp/ec/products/detail/id=134252&quot;&gt;単体テストの考え方/使い方&lt;/a&gt;を年末年始の読み物として読んだ。これまでいくつかのテスティングフレームワークを使ってきたものの、単体テストとはどうあるべきかといったツールによらない本質的な部分の理解をおろそかにしてきたので手にとった。&lt;/p&gt;
&lt;p&gt;テスト・ダブル、スタブ、モックのそれぞれの違いなど今まであいまいに理解してきた用語をしっかり定義した上で、良い単体テストに求められる観点を4つ提示し、それに基づいてモックをどのように使うか、単体テストのそれぞれの手法をどう評価するかといった解説があり、単体テストにとどまらずヘキサゴナルアーキテクチャや関数型アーキテクチャといったアーキテクチャがテスタビリティに与える影響まで解説されている。&lt;/p&gt;
&lt;p&gt;個人的に印象に残ったことを列挙してみる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;テストコードもプロダクションコード同様に書いた時点から負債になるので、たくさん書けば良いというものではなく、ドメインロジックを中心に書く。&lt;/li&gt;
&lt;li&gt;テストケース間で共通する処理をコンストラクタや&lt;code&gt;setUp&lt;/code&gt;でまとめると、テストケース間の結合度が上がるし読みにくい。その代わりに、Object MotherパターンやTest Data Builderパターンを使いArrangeフェーズのコードを共有するのが望ましい。&lt;/li&gt;
&lt;li&gt;テストメソッドのメソッド名はドメインエキスパートが理解できるようにテストする振る舞いを書く。実装に結びついたメソッド名は避ける。&lt;/li&gt;
&lt;li&gt;実装に結びついたテストコードはリファクタリングによって壊れやすくなる。&lt;/li&gt;
&lt;li&gt;モックはテスト対象から外部に向かう出力を模倣して検証するためのもので、スタブは外部からテスト対象への入力を模倣するためのもの。スタブへの検証は実装の詳細を検証することになり、リファクタリングで壊れやすくなる。&lt;/li&gt;
&lt;li&gt;出力値ベースの単体テストが最も質が高い。出力値ベースでテストできるようにするためには、ロジックと副作用を切り離し関数型プログラミングのスタイルで実装する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当初の目論見通り、ツールによらない本質的な部分の理解が深まり、これまで当たり前に実践してきた単体テストのやり方が間違っていたことに気づけたので、とてもいい本だった。&lt;/p&gt;</summary>
    <title>単体テストの考え方/使い方</title>
    <updated>2023-01-03T22:35:00+00:00</updated>
    <dc:date>2023-01-03T22:35:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/497/</id>
    <link href="https://blog.naoty.dev/497/"/>
    <summary>&lt;h1&gt;プライベート&lt;/h1&gt;
&lt;p&gt;昨年9月に引っ越してから、新しい街で過ごした初めての一年だった。自転車を買って行動範囲が広がり、だいぶこの街での生活に馴染んできた。&lt;/p&gt;
&lt;p&gt;新居は外構ができあがり、庭というものを手に入れた。そして、24回払いで気に入ったソファも買った。プロジェクターも買って、家での生活はすっかり快適になった。優先的に買いたいものが落ち着いた頃に、ようやく自室にもお金をかけられるようになり、シェルフを買い部屋らしい部屋になった。また、建てるときに自室に付けてもらったピクチャーレールを活用すべく、富樫展でポスターを買い自室に飾ることができた。&lt;/p&gt;
&lt;p&gt;趣味の将棋は二段昇段を目標にしていたけど、仕事や新しい技術のキャッチアップで余裕ができず、あまり捗らなかった。だけど、四間飛車に代わって新たな戦法に取り組んでいく機運が高まった。そして、初めて将棋会館に行けたのもよかった。思いの外、小さいビルで、建て替わる前に行けて記念になった。&lt;/p&gt;
&lt;p&gt;9月には、夫婦で旅行も兼ねてRubyKaigiに参加した。初めて三重県に行き、伊勢神宮を参拝したり、松坂牛を堪能した。コロナ禍に入ってから初の旅行で、旅行の楽しさを思い出した。&lt;/p&gt;
&lt;h1&gt;仕事&lt;/h1&gt;
&lt;p&gt;今年は10月に転職するまでは、だいたいこんな感じのことをやっていた気がする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;個人情報を削除する機能の改修&lt;/li&gt;
&lt;li&gt;Kafka Streamアプリケーションの実装&lt;/li&gt;
&lt;li&gt;ReactとGraphQLを使った管理画面の実装&lt;/li&gt;
&lt;li&gt;厳しいスケジュールのなかでリリースするスコープを調整していた&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;10月に転職してからはこんな感じ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Flutterやバックエンドの細かな機能改修&lt;/li&gt;
&lt;li&gt;大きめの機能のDesign Docを書いた&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;振り返ってみると、前職ではJava、Kafka、React、GraphQLを新たに経験し、現職ではDart、Flutterを新たに経験し、キャッチアップの多い一年となった。そのせいか、あまり自分の作りたいものを作る時間がとれなかったかもしれない。スケジュールが厳しい中で開発したり、新しい環境に適応したりで、一年通してストレスが高い一年でもあった。&lt;/p&gt;
&lt;h1&gt;作ったもの&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://github.com/naoty/blog&quot;&gt;naoty/blog&lt;/a&gt;: このブログを生成するツールなんだけど、ブログのプレビュー時にLive reloadできるようにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;読んだもの&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://link.springer.com/book/10.1007/978-3-030-33836-7&quot;&gt;Database Design and Implementation&lt;/a&gt;: 自作DB本は途中までで挫折してしまったけど、内容はとても良いのでキャッチアップが落ち着いたらまたやりたい。&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://productionreadygraphql.myshopify.com/&quot;&gt;Production Ready GraphQL&lt;/a&gt;: GraphQLをキャッチアップするために一通りのチュートリアルの後に読んでみたけど、ベストプラクティスがちょうどいい分量でまとまっていて良かった。&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://www.amazon.co.jp/dp/4820729632&quot;&gt;チームトポロジー&lt;/a&gt;: 周囲でチームトポロジーの内容を前提とした話が増えてきたので、自分も読んだ。&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://pragprog.com/titles/swdddf/domain-modeling-made-functional/&quot;&gt;Domain Modeling Made Functional&lt;/a&gt;: 久々にDDDをやっていく機運が出てきたので気になっていた本を読んだ。全部は読みきれてないけど、それでも良い内容だった。&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://book.mynavi.jp/ec/products/detail/id=134252&quot;&gt;単体テストの考え方/使い方&lt;/a&gt;: RSpecから離れたことでテスティングフレームワークの些末な違いではなく、単体テストをどう書くか理解したくなり、昨日買って読み始めた。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;買ったもの&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Pixel 6&lt;/li&gt;
&lt;li&gt;ソファ&lt;/li&gt;
&lt;li&gt;Dahonの自転車&lt;/li&gt;
&lt;li&gt;将棋会館で買った将棋盤&lt;/li&gt;
&lt;li&gt;3Dプリンターで作られた不思議なペンスタンド&lt;/li&gt;
&lt;li&gt;無印良品のコスパの良いスチールラック&lt;/li&gt;
&lt;li&gt;富樫展で買ったハンターハンターの原画っぽいやつ&lt;/li&gt;
&lt;li&gt;軟骨伝導イヤホン&lt;/li&gt;
&lt;li&gt;ポケットモンスターバイオレット&lt;/li&gt;
&lt;li&gt;iittalaの皿とスープマグ&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>2022年振り返り</title>
    <updated>2022-12-31T17:01:00+00:00</updated>
    <dc:date>2022-12-31T17:01:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/496/</id>
    <link href="https://blog.naoty.dev/496/"/>
    <summary>&lt;p&gt;最近読んでいた&quot;&lt;a href=&quot;https://pragprog.com/titles/swdddf/domain-modeling-made-functional/&quot;&gt;Domain Modeling Made Functional&lt;/a&gt;&quot;という本のなかで、スマートコンストラクタと呼ばれるテクニックが紹介されていてとても面白く明日から使えるなと思ったので、最近書いているDartでどのように実装できるか調べてみた。&lt;/p&gt;
&lt;h1&gt;スマートコンストラクタとは&lt;/h1&gt;
&lt;p&gt;スマートコンストラクタというのは、すべてのコンストラクタをprivateにし、代わりに有効な値ならインスタンスを返し無効な値ならエラーを返すようなコンストラクタのみを提供するような実装パターンのことを指す。&lt;/p&gt;
&lt;p&gt;このような実装により、このクラスのインスタンスは必ず有効な値であることが保証される。そのため、あるオブジェクトをあちこちで検証する必要がなくなり、検証のための実装がスマートコンストラクタに集約されるため、凝集性の高いコードになる。また、検証漏れによる不具合も回避できるため、堅牢なコードになるとも言えるだろう。&lt;/p&gt;
&lt;h1&gt;実装例&lt;/h1&gt;
&lt;p&gt;JANコードを例にとる。JANコードは13桁または8桁の数字で構成され、&lt;code&gt;&quot;jancode&quot;&lt;/code&gt;のような文字列はJANコードではない。こういったビジネスルールをスマートコンストラクタを使って実装してみる。&lt;/p&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jancode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Jancode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_internal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Jancode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'invalid JAN code'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// TODO: implement validation rules&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Jancode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_internal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jancode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Jancode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'12345678'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Dartでは&lt;code&gt;_&lt;/code&gt;から始まるメソッドやフィールドはprivateとして扱われる。ここではコンストラクタを&lt;code&gt;_internal&lt;/code&gt;のように定義することでprivateにしている。&lt;/li&gt;
&lt;li&gt;Dartでは必ずしも新しいインスタンスを返すわけではないコンストラクタを実装する際には&lt;code&gt;factory&lt;/code&gt;キーワードを使う。不正な値を受け取ったら例外をthrowするために&lt;code&gt;factory&lt;/code&gt;を使ったファクトリコンストラクタとして定義している。&lt;/li&gt;
&lt;li&gt;「JANコードは13桁または8桁である」といったビジネスルールを&lt;code&gt;fromNumbers&lt;/code&gt;に実装することで、正しいJANコードのみが&lt;code&gt;Jancode&lt;/code&gt;のインスタンスとして生成できるようになった。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>スマートコンストラクタ in Dart</title>
    <updated>2022-11-14T21:45:00+00:00</updated>
    <dc:date>2022-11-14T21:45:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/495/</id>
    <link href="https://blog.naoty.dev/495/"/>
    <summary>&lt;p&gt;9月の有給消化中に10年間くらいのプログラマーの経験から自分なりのベストプラクティスを言語化してみようという試みをした。&lt;/p&gt;
&lt;h1&gt;背景&lt;/h1&gt;
&lt;p&gt;新しい会社ではこれまでとは異なるプログラミング言語やフレームワークを使うことが決まっていたため、これまでの経験を活かすにはプログラミング以外の部分での振る舞いや考え方をベストプラクティスという形で抽象化して活用するしかないと思った。&lt;/p&gt;
&lt;h1&gt;やり方&lt;/h1&gt;
&lt;p&gt;いまのところ、こういったテーマ（一例）について自分なりの経験から得られたベストプラクティスを言語化している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ドキュメンテーション&lt;/li&gt;
&lt;li&gt;ポストモーテム&lt;/li&gt;
&lt;li&gt;タスク管理&lt;/li&gt;
&lt;li&gt;個人情報の取り扱い&lt;/li&gt;
&lt;li&gt;見積もり&lt;/li&gt;
&lt;li&gt;コードレビュー&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自分の場合、scrapboxにテーマ毎のページを作ってベストプラクティスをまとめている。こうすることでテーマ間の関連性も自然と見えてくるようになる。まとめる際にはできるかぎり「なぜそれが望ましいのか」という理由も沿えるようにした。&lt;/p&gt;
&lt;h1&gt;やってみた感想&lt;/h1&gt;
&lt;p&gt;言語化することによるメリットは数多くあった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当初の狙いどおり、新しい職場でこれまでの経験を適用して貢献する機会が多かった。&lt;/li&gt;
&lt;li&gt;自分の仕事のうち、プログラミングは数あるタスクの1つに過ぎず、実はさまざまな種類のタスクをこなしていることに（当たり前ながら）気づいた。&lt;/li&gt;
&lt;li&gt;これからの経験を取り込んでさらにブラッシュアップしていけるベースができた。&lt;/li&gt;
&lt;li&gt;言語化することでさらにそこから新たに理解や思考を深めることができた。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>自分なりのベストプラクティスを持つ</title>
    <updated>2022-11-13T21:34:00+00:00</updated>
    <dc:date>2022-11-13T21:34:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/494/</id>
    <link href="https://blog.naoty.dev/494/"/>
    <summary>&lt;p&gt;10月から&lt;a href=&quot;https://10x.co.jp/&quot;&gt;10X&lt;/a&gt;にソフトウェアエンジニアとして入社しました。1ヶ月経って、落ち着いて入社を振り返られるようになってきたので、入社の動機や入社してからの気づきなどを書いていきたいと思います。&lt;/p&gt;
&lt;p&gt;※採用PRも兼ねたエントリーなので「ですます」調で書きます。&lt;/p&gt;
&lt;h1&gt;動機&lt;/h1&gt;
&lt;p&gt;前職を退職したときの&lt;a href=&quot;/487/&quot;&gt;エントリー&lt;/a&gt;にも書いたとおり、「なぜ自分がこのプロダクトを開発する必要があるのか」ということを大事にしているので、自分がユーザーになったり、自分がイメージしやすい人々がユーザーになるプロダクトに関わりたいと思っていました。&lt;/p&gt;
&lt;p&gt;10Xはネットスーパーのアプリやその裏側のシステムである&lt;a href=&quot;https://stailer.jp/&quot;&gt;Stailer&lt;/a&gt;を開発しているため、自分の生活にとても身近に感じました。生活に身近という観点だと他にも候補となる会社はあったのですが、10Xの歴史をさかのぼってみるとタベリーという毎日の献立を考えてくれるプロダクトを開発しており、会社のアイデンティティとして生活課題の解決を目指しているんだなと感じたことが決め手となりました。&lt;/p&gt;
&lt;h1&gt;やっていること&lt;/h1&gt;
&lt;p&gt;入社して2, 3週間はオンボーディングプログラムを受けたり、充実したドキュメントから情報を収集したり、オフサイトやシャッフルランチなどの機会を利用して社員の皆さんとの関係づくりを進めていました。10Xはこの1, 2年で急速に規模が拡大しているところですが、オンボーディングプロセスやドキュメントはこれまでの経験と比べてとても充実していると感じました。&lt;/p&gt;
&lt;p&gt;現在はネットスーパーの基盤システムであるStailerのバックエンド、モバイルアプリ、Webフロントエンドを区別なく開発しています。DartもFlutterもGCPもKubernetesも触ったことがなく物流や決済といったドメインも未経験といった状態で入社し、技術とドメインの両面でキャッチアップをしながら、目の前のタスクをこなしているところです。&lt;/p&gt;
&lt;h1&gt;気づき&lt;/h1&gt;
&lt;h2&gt;抽象度の高いミッション&lt;/h2&gt;
&lt;p&gt;これまでの経験と比べて与えられるミッションの抽象度が高いと感じました。今までなら決められたスケジュールで何かしらの機能を開発しリリースまでやり遂げることがミッションになりがちでしたが、10Xでは特定のイシューを解決することがミッションとして与えられており、何をどのように開発するかはこちらにある程度委ねられているため、抽象度が高く難易度の高い仕事だと感じました。&lt;/p&gt;
&lt;p&gt;開発者としては与えられた要件の機能を開発するところまでが仕事で、その前後は別の職種の担当範囲だという意見もあると思います。ただ、与えられた仕事をなぜやるか考えずにただこなすだけだと、主体性がなくなって楽しくなくなってくるし、受け身になって他責思考に陥りやすくなることに気づいてから、なぜその機能を開発するのかから自ら設定して開発を進めていく仕事をしたいと思っていたので、10Xでの仕事にやりがいを感じています。&lt;/p&gt;
&lt;h2&gt;ドキュメンテーションの文化&lt;/h2&gt;
&lt;p&gt;10Xは僕が入社時点ではプロダクトを開発するエンジニアが20名程度（SETやSREなどを含めるともう少しいます）の比較的小規模な開発組織ですが、これまで所属していた開発組織のなかで最もドキュメンテーションに力を入れていると感じました。&lt;/p&gt;
&lt;p&gt;開発初期の検討段階ではDesign Docを書くようになっているし、仕様やアーキテクチャが定まったらDesign Docとは別にドキュメントを残すように開発プロセスの整備が進められているところです。&lt;/p&gt;
&lt;p&gt;これまでの経験ではドキュメントをちゃんと残そうという試みはありましたが、それが定着している組織にいたことがなかったので、ドキュメンテーションの文化は10Xの特徴だと思います。どうやら創業当初からこの文化が続いてきているようなので、新しく入ったメンバーも良い文化を継続できるようにドキュメンテーションにも力を入れていきたいと思いました。&lt;/p&gt;
&lt;h2&gt;雰囲気がとにかくいい&lt;/h2&gt;
&lt;p&gt;10Xが掲げているvalueの1つに&quot;As One Team&quot;というものがあるのですが、入社してみて組織全体の雰囲気の良さを感じました。&lt;/p&gt;
&lt;p&gt;これまでの経験だとDevとBizの間には壁があって、どんな方が働いているのかよくわからなかったりすることが多かったのですが、10Xではそういった壁を感じることがないです。Devのメンバーもただコードを書いていればいいといった雰囲気がないし、BizのメンバーもDevのメンバーの取り組みを理解しようとする雰囲気を感じます。&lt;/p&gt;
&lt;p&gt;基本的にはリモートワークが中心ですが、それでも定期的に行われるオフサイトやシャッフルランチでいろんな人と交流できるように設計されているので、僕みたいな社交性が限りなく低い人間でもなじみやすいんじゃないかと思います。&lt;/p&gt;
&lt;h2&gt;Dartの経験がなくても貢献の余地はある&lt;/h2&gt;
&lt;p&gt;前述の通り、僕は入社前までDartやFlutterの経験がなくまさに今キャッチアップしているところなのですが、それでもこれまでの経験を活かすことで会社に貢献することはできそうだという感触があります。&lt;/p&gt;
&lt;p&gt;僕の場合だと、前職での個人情報の処理に関わる開発経験を活かせる場面がありましたし、スクラム開発の経験をチームに持ち込む場面もありました。そういったプログラミング自体には直接関わらない部分で貢献する余地はまだまだたくさんあるんじゃないかと思います。特に、SoRのような高い品質や堅牢性が求められるプロダクトの開発経験や、モノリシックなアプリケーションのリアーキテクチャといった開発経験があれば、十分に貢献できるんじゃないかと思います。&lt;/p&gt;
&lt;h1&gt;PR&lt;/h1&gt;
&lt;p&gt;10Xではソフトウェアエンジニアをはじめ、多くの職種で募集をしています。もしこのエントリーを見て少しでも興味があれば、&lt;a href=&quot;https://10x.co.jp/recruit/&quot;&gt;採用ページ&lt;/a&gt;からエントリーしてもらうか、具体的な話を聞いてみたければ&lt;a href=&quot;https://meety.net/articles/t2--yo4sx7qce&quot;&gt;カジュアル面談&lt;/a&gt;に申し込んでもらうとよいと思います。また、&lt;a href=&quot;https://twitter.com/naoty_k&quot;&gt;@naoty_k&lt;/a&gt;宛にDMをもらえればよしなに取り次ぎます。&lt;/p&gt;</summary>
    <title>10Xに入社しました</title>
    <updated>2022-11-09T21:34:00+00:00</updated>
    <dc:date>2022-11-09T21:34:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/493/</id>
    <link href="https://blog.naoty.dev/493/"/>
    <summary>&lt;p&gt;転職を機にPC周りの小物類を買い直した。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;./desk.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./desk.jpg&quot; alt=&quot;デスク&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;ノートパソコンスタンド&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/B091GYPQD8&quot;&gt;https://www.amazon.co.jp/dp/B091GYPQD8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;普段からPCは開かずにクラムシェルモードにしてワイドディスプレイのみで作業している。なので、私用と仕事用の2台のノートPCを立てて収納できるスタンドを買った。&lt;/p&gt;
&lt;p&gt;幅をある程度調整できるため、さまざまな幅のPCに対応できて便利だった。あと、タブレットなどを立て掛けておけるくぼみもあるため、写真のように電子メモパッドを立て掛けている。&lt;/p&gt;
&lt;h1&gt;USB切替器&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/B072R16Z6S&quot;&gt;https://www.amazon.co.jp/dp/B072R16Z6S&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2台のPCでキーボード、マウス、Webカメラを共有するため、USB切替器を導入した。おかげで、仕事が終わって私用のPCを使うときにいちいちキーボードやマウスをつなぎ直していたけど、それがスイッチひとつで済ませられるようになった。&lt;/p&gt;
&lt;h1&gt;骨伝導イヤホン&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/B0BF48Y5CG&quot;&gt;https://www.amazon.co.jp/dp/B0BF48Y5CG&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ちょうどいいタイミングで新たな骨伝導イヤホンが発売されたので、さっそく買ってみた。今まではゴツいヘッドセットを使っていたけど、耳がかゆくなってくるのが気になって耳を塞がないイヤホンにした。&lt;/p&gt;
&lt;p&gt;よかった点としては、目論見どおり耳がかゆくならなくなって快適になった。あとは有線から無線になったことで、PCでもスマホでも使えるようになった。さらに、マルチペアリングに対応しているため、スマホとPC2台の間での切り替えが少なく済むのもよい（欲を言えば3台でマルチペアリングできてほしい）。&lt;/p&gt;
&lt;p&gt;イマイチな点としては、いちおうマイクが内蔵されているもののほとんど声を拾ってくれないのでヘッドセットとしては使えなかった。あとは、頭にフィットしないので寝ながら使うことができなかったり、数時間つけてると耳が痛くなってくるのも惜しかった。&lt;/p&gt;
&lt;h1&gt;Webカメラ&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/B086R71LGW&quot;&gt;https://www.amazon.co.jp/dp/B086R71LGW&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;イヤホンのマイクが使えない代わりにWebカメラのマイクをあてにするため、いいやつを買ってみた。&lt;/p&gt;
&lt;p&gt;だけど、これは正直、以前使っていた2, 3000円のWebカメラと比べてそこまで大きな良さを感じることはできなかった。良かった点はカメラの解像度が上がった程度で、マイクもそこまで優れているわけでもなく、映り方も自然になった気がするけど個人的には大差なく感じた。&lt;/p&gt;
&lt;h1&gt;USB-Cアダプタ&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.apple.com/shop/product/MUF82AM/A/usb-c-digital-av-multiport-adapter&quot;&gt;https://www.apple.com/shop/product/MUF82AM/A/usb-c-digital-av-multiport-adapter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DELLのディスプレイの&lt;a href=&quot;https://www.dell.com/support/kbdoc/ja-jp/000132068/power-chime-noise-from-macbook-when-charging-via-usb-c-on-u3419w-or-u3818dw-monitors-while-the-macbook-is-in-sleep-mode&quot;&gt;問題&lt;/a&gt;により、MBPからUSB-Cで映像出力すると、別のPCで映像出力していても自動的に切り替わったり、電源を切っていても自動的に起動してしまうといった現象が起きていた。&lt;/p&gt;
&lt;p&gt;そこで、ディスプレイをHDMIで接続するためにUSB-CとHDMIのアダプタを買った。このアダプタはUSB-Aのポートもあるので先述したUSB切替器と接続できるのが良い。アダプタと切替器を経由しても目立った接続不良は起きていない。&lt;/p&gt;
&lt;h1&gt;PC周りの配線図&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;./wires.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./wires.png&quot; alt=&quot;配線図&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
    <title>PC周りの環境改善</title>
    <updated>2022-10-27T21:22:00+00:00</updated>
    <dc:date>2022-10-27T21:22:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/492/</id>
    <link href="https://blog.naoty.dev/492/"/>
    <summary>&lt;p&gt;仕事でkubernetesを使うようになりそうだったので、minikubeでRailsアプリを動かしてkubernetesに馴染んでいきたい。これはRailsアプリが動くまでにおこなったことのメモだ。&lt;/p&gt;
&lt;h1&gt;minikubeのセットアップ&lt;/h1&gt;
&lt;p&gt;minikubeはmacOSやWindowsなどでローカルにkubernetesクラスターを立ち上げるツール。このクラスターはノードを1つしか持たず、VMを利用して立ち上げる。今回はDocker for Macが管理するVMを使う。&lt;/p&gt;
&lt;p&gt;minikubeはHomebrewでインストールできる。そして、&lt;code&gt;minikube start&lt;/code&gt;によってVMを起動し、その中にクラスターに必要なPodをいくつか立ち上げる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% brew install minikube
% minikube start
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Railsアプリを用意する&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;rails new&lt;/code&gt;してプロジェクトを作り、Dockerfileを用意しておく。あと、今回はMySQLもkubernetesで立ち上げ、クラスター内でRailsアプリと接続できるようにしたいので、database.ymlで環境変数からホスト等を設定できるようにしておく。&lt;/p&gt;
&lt;p&gt;イメージをビルドする際、docker CLIが接続するdockerデーモンをminikubeが管理するものに向ける必要がある。&lt;code&gt;minikube docker-env&lt;/code&gt;を使うと、そのために必要な環境変数を出力してくれるので、これを&lt;code&gt;direnv&lt;/code&gt;などを使い環境変数にセットする。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% minikube docker-env
export DOCKER_TLS_VERIFY=&quot;1&quot;
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;RailsアプリのService&lt;/h1&gt;
&lt;p&gt;Serviceとは、Deploymentによって立ち上がったPodを他のPodや外部からトラフィックを受けれるようにするやつ。Serviceには何種類かタイプがあるが、今回はRailsアプリを外部と接続できるようにしたいので、NodePortと呼ばれるタイプを使う。&lt;/p&gt;
&lt;pre lang=&quot;yaml&quot; class=&quot;highlight highlight-yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# kubernetes.yaml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rails-service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NodePort&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rails&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3000&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3000&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;こういう設定ファイルをYAMLに書く。この設定の意味としては、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;selector&lt;/code&gt;で指定したキーとバリューをラベルとしてもつPodを対象に、Serviceはトラフィックを転送する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;port&lt;/code&gt;のポート番号はクラスター内の他のPodからアクセスする際に、クラスターIPと一緒に指定して使う。クラスターIPというのはクラスター内でのみ有効なIPアドレスのこと。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;targetPort&lt;/code&gt;のポート番号にServiceからトラフィックが転送される。今回はRailsアプリが使う3000にしてある。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;kubectl apply&lt;/code&gt;コマンドでServiceを作成する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% kubectl apply -f kubernetes.yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;NodePort&lt;/code&gt;で作成したので、クラスター内のすべてのノード、つまりminikubeが管理するVMの&lt;code&gt;3000&lt;/code&gt;番ポートへのトラフィックがRailsアプリのPodに転送されるようになった。&lt;/p&gt;
&lt;h1&gt;RailsアプリのDeployment&lt;/h1&gt;
&lt;p&gt;Deploymentとは、Podのデプロイやオートヒーリング（起動すべきPod数を維持すること）などをやってくれるやつ。&lt;/p&gt;
&lt;pre lang=&quot;yaml&quot; class=&quot;highlight highlight-yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rails-deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rails&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rails&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rails&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hello-kubernetes/rails:58da317&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3000&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;replicas&lt;/code&gt;で起動するPodの数を指定する。DeploymentはPodが異常終了してもこの数を維持するように自動的にPodを起動してくれる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;labels&lt;/code&gt;で&lt;code&gt;app=rails&lt;/code&gt;というラベルをつけることで、先ほど作ったServiceがこのPodにトラフィックを転送するようになる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;image&lt;/code&gt;で指定するイメージは先述したminikubeが管理しているdockerデーモンに登録されている必要がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Secret&lt;/h1&gt;
&lt;p&gt;RailsアプリからMySQLに接続する際にusernameやpasswordを環境変数で指定することになる。ただし、機密情報なので設定ファイルに平文でパスワードなどを保存したくない。そういったケースでSecretを使う。&lt;/p&gt;
&lt;p&gt;今回はファイルに保存せず&lt;code&gt;kubectl&lt;/code&gt;でSecretを作成する。作成方法にはいくつかあるが、以下のような.envを使ってみる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;username=root
password=password
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;% kubectl create secret generic \
  --save-config mysql-credentials \
  --from-env-file=.env
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで.envの中身をSecretとして保存できた。&lt;/p&gt;
&lt;h1&gt;MySQLのService&lt;/h1&gt;
&lt;p&gt;次にRailsアプリから接続するMySQLもkubernetesで管理する。Railsアプリのときとは異なり、MySQLのPodはクラスター内だけで接続できるようにしたいので、&lt;code&gt;NodePort&lt;/code&gt;ではなく&lt;code&gt;ClusterIP&lt;/code&gt;を指定する。&lt;/p&gt;
&lt;pre lang=&quot;yaml&quot; class=&quot;highlight highlight-yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql-service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterIP&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3306&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3306&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;MySQLのDeployment&lt;/h1&gt;
&lt;p&gt;Railsアプリとほとんど同じだけど、&lt;code&gt;env&lt;/code&gt;以下で&lt;code&gt;mysql-credentials&lt;/code&gt;というSecretの&lt;code&gt;password&lt;/code&gt;というキーの値を環境変数にセットしている。&lt;/p&gt;
&lt;pre lang=&quot;yaml&quot; class=&quot;highlight highlight-yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql-deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql:8&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;valueFrom&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;secretKeyRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql-credentials&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;password&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;RailsのPodにも環境変数を追加&lt;/h1&gt;
&lt;p&gt;MySQLのパスワードとホスト名をRailsのPodに渡すためにDeploymentで環境変数に指定する。ここでMySQLのPodのIPアドレスはServiceが提供するDNSによってService名より名前解決できる。&lt;/p&gt;
&lt;pre lang=&quot;yaml&quot; class=&quot;highlight highlight-yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rails-deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rails&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rails&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rails&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hello-kubernetes/rails:58da317&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3000&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MYSQL_HOST&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql-service&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MYSQL_PASSWORD&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;valueFrom&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;secretKeyRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql-credentials&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;password&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;macとVMの間のトンネリング&lt;/h1&gt;
&lt;p&gt;ここまででVMとRailsアプリの間、RailsアプリとMySQLの間では通信できるようにになったものの、まだmacとVMの間で通信できるようになっていないので、ブラウザからRailsアプリにアクセスできない。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;minikube service&lt;/code&gt;コマンドを使うと、トラフィックを指定したServiceに転送するトンネルをmac上に起動する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% minikube service rails-service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;おおざっぱな図で整理するとこんな感じで各コンポーネントが接続していて、ブラウザからRailsアプリにアクセスできるようになっている。正確には、VM上のネットワーク、kubernetesクラスターのネットワークは別なので、この図だと微妙なのだけど、まぁこんな感じ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;./network.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./network.png&quot; alt=&quot;ネットワーク&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
    <title>minikubeでRailsアプリを動かす</title>
    <updated>2022-10-23T11:18:00+00:00</updated>
    <dc:date>2022-10-23T11:18:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/491/</id>
    <link href="https://blog.naoty.dev/491/"/>
    <summary>&lt;h1&gt;Domain Modeling Made Functional&lt;/h1&gt;
&lt;p&gt;最近、&lt;a href=&quot;https://pragprog.com/titles/swdddf/domain-modeling-made-functional/&quot;&gt;Domain Modeling Made Functional&lt;/a&gt;という本を読んでいる。ドメイン駆動設計を関数型プログラミングで実践するという内容（たぶん）で、まだ冒頭の4章くらいしか読めてないけど、ドメイン駆動設計そのもののいい振り返りになっている。&lt;/p&gt;
&lt;p&gt;なんでこの本を読もうと思ったかと言えば、2つくらい要因があって、まず新しい職場で新しいアプリケーションを作るにあたって、新しい技術や難しい技術を使いこなして技術的なチャレンジをしていくぞという気持ちよりも、ドメインに寄り添って顧客にとって価値の高い、かつそれでいて堅牢なアプリケーションを作っていくぞという気持ちが強まっているのが1つ目の要因。もう一つの要因としては、これまで10年近く触ってきたRuby on Railsから離れて、確固たるレールがないフレームワーク上でコードを書いていくことが予想できるため、Railsのときは実践しにくかったドメイン駆動設計を学び直すことにしたのが大きい。&lt;/p&gt;
&lt;h1&gt;第2次ポッドキャストブーム&lt;/h1&gt;
&lt;p&gt;だいぶ昔にRebuild.fmが始まった頃にポッドキャストを聞いていたけど、そこまで自分にハマるものが少なくていつの間にか聞かなくなっていた。なんだけど、最近、新しい職場がポッドキャストやっていて雰囲気を知るために聞き始めたのをきっかけに、またポッドキャスト聞くようになってきた。&lt;/p&gt;
&lt;p&gt;昔に比べて、敷居が下がったおかげなのか、ポッドキャストが増えた気がする。気づいたらGoogle公式のPodcastアプリもあったので、それで気になるポッドキャストをいくつか登録し、気になるエピソードをキューに入れ、出社するときなんかに聞いている。この流れに乗って、本（≠技術書）を音声でインプットしてみたい。&lt;/p&gt;
&lt;h1&gt;新しい職場&lt;/h1&gt;
&lt;p&gt;今月から新しい職場で1週間たったわけだけど、久々の電車通勤、慣れない環境、人間関係、はてしないインプット、うまくやっていけるかといった不安なんかがいっぺんに押し寄せてきて土日はぼーっと過ごしていた。ようやく回復して、こうして文章を書けるようになった。それなりの評価をいただいてこうして働けているわけだから、あせらずに自分のペースでやっていきたい。&lt;/p&gt;</summary>
    <title>2022-10-10</title>
    <updated>2022-10-10T19:06:00+00:00</updated>
    <dc:date>2022-10-10T19:06:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/490/</id>
    <link href="https://blog.naoty.dev/490/"/>
    <summary>&lt;h1&gt;cloud_firestore以外の選択肢&lt;/h1&gt;
&lt;p&gt;FlutterからFirestoreを利用する場合、&lt;a href=&quot;https://pub.dev/packages/cloud_firestore&quot;&gt;cloud_firestore&lt;/a&gt;というパッケージを使えばいい。ただ、Flutter以外のDartのコードでFirestoreにアクセスする場合、&lt;a href=&quot;https://pub.dev/packages/googleapis&quot;&gt;googleapis&lt;/a&gt;というパッケージを使うことになる。このパッケージはおそらくgRPCのサービス定義から自動生成されたクライアントを含んでいるのだと思うけど、ドキュメントにはgRPCかどうかは明記されていないようだ。また、認証には&lt;a href=&quot;https://pub.dev/packages/googleapis_auth&quot;&gt;googleapis_auth&lt;/a&gt;という別のパッケージも必要になる。&lt;/p&gt;
&lt;pre lang=&quot;yaml&quot; class=&quot;highlight highlight-yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;googleapis&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;^9.2.0&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;googleapis_auth&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;^1.3.1&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;認証&lt;/h1&gt;
&lt;p&gt;Firestoreにアクセスする際の認証については、いくつか方法がある。&lt;a href=&quot;https://cloud.google.com/docs/authentication&quot;&gt;公式ドキュメント&lt;/a&gt;によると、アプリケーションのデフォルト認証情報（以下、ADC）を利用する方式が今回のケースに適しているようだ。&lt;/p&gt;
&lt;p&gt;ADCを利用する場合、クライアントライブラリはいくつかの方法でADCを探索することになる。今回は以下のコマンドでADCを生成することで、クライアントライブラリがそれを利用できるようにした。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% gcloud auth application-default login
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dart側はgoogleapis_authパッケージを使い、以下のように実装することでADCを利用して認証できるようになる。&lt;/p&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clientViaApplicationDefaultCredentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;scopes:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FirestoreApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;datastoreScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;Firestoreへのアクセス&lt;/h1&gt;
&lt;p&gt;googleapisパッケージのコードを使うと、直感的なコードでFirestoreにアクセスできるようになる。以下の例では、ドキュメントのリストを取得している。&lt;/p&gt;
&lt;pre lang=&quot;dart&quot; class=&quot;highlight highlight-dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FirestoreApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;projects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;databases&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;documents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;'projects/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$project_id&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/databases/(default)/documents'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$collection_id&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>DartからFirestoreにアクセスする</title>
    <updated>2022-09-22T21:04:00+00:00</updated>
    <dc:date>2022-09-22T21:04:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/489/</id>
    <link href="https://blog.naoty.dev/489/"/>
    <summary>&lt;h1&gt;有給消化の過ごし方&lt;/h1&gt;
&lt;p&gt;転職まで3週間くらい有給消化でゆっくり過ごしている。&lt;/p&gt;
&lt;p&gt;だいたいの時間、次の職場で必要になりそうな技術、具体的にはFlutter、dart、gRPCなどに入門してみたり、サンプルアプリケーションを作って感触を確かめている。Flutterの第1印象としては、それっぽいアプリが簡単に実装できてすごいと思った。あとは、React的な状態管理手法がモバイルアプリ開発にも導入されていて、こういった開発手法はすっかり定着しているなと思った。5年以上前にSwiftでiOSアプリを書いている頃はそういった手法が導入されつつある雰囲気があったくらいだったと思う。dartは、今のところコンストラクタが異様に難しく感じるが、それ以外はすんなり飲み込める言語という感じ。Goは表現力が足りないけど、Rustは難しそうみたいな感想を持つ層には支持されるんじゃないだろうか、と思った。&lt;/p&gt;
&lt;h1&gt;2022-09-21&lt;/h1&gt;
&lt;p&gt;今日はプログラミングをお休みして、以前から気になっていた&lt;a href=&quot;https://www.shinkogeisha.com/&quot;&gt;新工芸舎さん&lt;/a&gt;の展示が東京で行われると聞いて、池上までいってきた。ついでに、乗り換え駅の五反田でおにやんまのうどんを久々に食べてきた。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;./tenji.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./tenji.jpg&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;展示の様子（撮影許可をいただきました）&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3Dプリンターで樹脂を編むように積み重ねて作られているとのことで、前々から気になっており、実物を見れてよかった。展示されているものの一部は購入可能だったため、HyotanStandというペンスタンドを1つ買ってみた。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;./hyotan-stand.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./hyotan-stand.jpg&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;HyotanStand&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;鮮やかなグラデーションからソフトウェアみを感じつつも、網目状の質感から不思議と温かみも感じられる魅力的なプロダクトだった。&lt;/p&gt;
&lt;p&gt;この頃は雨模様の天気だったけど、今日は天気もよく涼しく過ごしやすい陽気でとてもいい一日だった。&lt;/p&gt;</summary>
    <title>2022-09-21</title>
    <updated>2022-09-21T19:37:00+00:00</updated>
    <dc:date>2022-09-21T19:37:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/488/</id>
    <link href="https://blog.naoty.dev/488/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;./rubykaigi-2022.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./rubykaigi-2022.jpg&quot; alt=&quot;RubyKaigi 2022の看板&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;9/8-10に三重県津市でおこなわれたRubyKaigi 2022に参加してきた。RubyKaigiは2015年（寿司のアイコンのとき）に参加して以来で、地方で開催されるようになってからは初めての参加となった。&lt;/p&gt;
&lt;p&gt;自分自身はRubyそのものがどのように開発されているかとか、新しい機能だとかにそこまで興味を持ってないので、昔の知り合いに久々にオフラインで会えたり、お祭りのような雰囲気を楽しんでいた。新たにrubyistに知り合えたのもよかった。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://neko314.hatenablog.com/entry/2022/09/12/214415&quot;&gt;こっち&lt;/a&gt;にもある通りだけど、今回は妻と旅行も兼ねていたので、前日に三重県に入って、伊勢神宮に行ってみたり、松阪ですき焼きを食べたりした。あと、RubyKaigi期間中は会場近くのドーミーインに泊まっていた。初ドーミーインだったけど、夜鳴きそばと朝ごはんが食べられなかったのが少し心残り。コロナ禍に入ってから初めて遠出をしたので、旅行ってやっぱり楽しいなと思った。疲れたけど。&lt;/p&gt;</summary>
    <title>RubyKaigi 2022</title>
    <updated>2022-09-13T22:57:00+00:00</updated>
    <dc:date>2022-09-13T22:57:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/487/</id>
    <link href="https://blog.naoty.dev/487/"/>
    <summary>&lt;p&gt;9月末で2年10ヶ月ほど勤めていたReproを退職することになりました。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;./zenriren.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./zenriren.jpg&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;代々木駅前の全理連ビル&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1&gt;やったこと&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;GDPRやAppleの規約に対応するためにさまざまなデータストアからデータを削除する仕事をしていた。RDBに格納される構造化データだけでなく、半構造化データ、画像などの非構造化データまで含めると、削除すべきデータは多岐にわたり、削除作業は非常に複雑になる。データ（特に個人データ）を収集する際には「どの程度保持するか」や「どのように削除するか」も同時に検討すべきだし、保持期限や個人データかどうかといったデータ自体に関するメタデータを管理する仕組みも必要になってくるということを学んだ。&lt;/li&gt;
&lt;li&gt;プッシュ通知などの配信履歴と既読情報を収集する仕組みをつくる仕事をした。膨大な量のデータを書き込むためにCassandraを使うことになったが、なじみのあるRDBMSとは似て非なるもので、NoSQLにおけるスキーマ設計やクエリの際の注意点を学んだ。また、SQSを使って書き込みの結果整合性を担保するような実装も行い、ジョブキューの扱いや冪等な処理の実装について学んだ。&lt;/li&gt;
&lt;li&gt;巨大なデータパイプラインの中でメールを配信する仕組みをつくる仕事をした。Kafkaを扱うためにKafka streamsを使ったアプリケーションをJavaで書いていた。Kafkaを理解できたと言えるほど経験を積めたわけではなかったけど、データパイプラインを実装する上での課題については学べたと思う。&lt;/li&gt;
&lt;li&gt;GraphQL, React, TypeScriptを使ったいまどきのWebフロントエンド開発にも携わることができた。スキーマからの型の自動生成、型によるフィードバック、変更のホットリロードといった要素によってスムーズに開発が進められた。これもそこまで経験を積めたわけではなかったものの、経験できそうでできていなかった領域だったので貴重な経験がさせてもらえたと思う。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;今後&lt;/h1&gt;
&lt;p&gt;10月から新しい会社で働き始める。具体的な社名はまた別の機会に書くかもしれない。&lt;/p&gt;
&lt;p&gt;今回の転職活動では自分の生活に身近な事業領域であることを重要視していた。Reproで働いてみて、自分は「なぜ自分がこのプロダクトを開発する必要があるのか？」といったことを大事にしていることを自覚した。Reproに入社した当初はテクノロジードリブンな人間だと思っていたけど、どうやら違っていたみたいだった。新しい会社では非常に生活に身近なドメインの開発に携われることになりそうなので、楽しみにしている。&lt;/p&gt;
&lt;p&gt;いままでずっとRuby on Railsを採用する企業で働いてきたけど、今度は別の言語/FWを採用しているところなので、新鮮な気持ちでコードを書けることを期待している。また、久しぶりにモバイルアプリの開発にも携われそうなので、そのあたりも楽しみ。&lt;/p&gt;</summary>
    <title>退職のお知らせ</title>
    <updated>2022-09-13T17:52:00+00:00</updated>
    <dc:date>2022-09-13T17:52:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/486/</id>
    <link href="https://blog.naoty.dev/486/"/>
    <summary>&lt;p&gt;自分専用のTODO管理ツールである&lt;a href=&quot;https://github.com/naoty/todo&quot;&gt;naoty/todo&lt;/a&gt;にタグ機能を追加した。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;./tagged-todos.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./tagged-todos.png&quot; alt=&quot;タグつきTODO&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;個人開発のTODO&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#naoty/todo&lt;/code&gt;とついているのがタグで、以下のコマンドで複数つけることができる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% todo add '芝刈り機を買う' --tag '家' --tag '出費'
 1 | 芝刈り機を買う #家 #出費
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;タグは各TODOファイルのfront matterに配列として保持している。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: 芝刈り機を買う
state: undone
tags: [&quot;家&quot;, &quot;出費&quot;]
---

# 2022-08-20
* 駅前のホームセンターでいくつか見てみたが、もう少しネットで調査することにした。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これまで、TODOをグルーピングする際にこんな感じで親子関係を利用していたのだが、&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% todo list
  237 | review
        160 | https://github.com/naoty/todo/pull/1
        183 | https://github.com/naoty/todo/pull/2
        187 | https://github.com/naoty/todo/pull/3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;親TODOは実際にはTODOではなく、ただのフォルダとしてしか使っていないことに気づき、本来の用途とは違うと思ったため、代替手段としてタグで管理できるようにした。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% todo list
  160 | https://github.com/naoty/todo/pull/1 #review
  183 | https://github.com/naoty/todo/pull/2 #review
  187 | https://github.com/naoty/todo/pull/3 #review
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;今のところ、タグによってTODOをフィルタリングするような機能はないので、これから作っていきたい。&lt;/p&gt;</summary>
    <title>TODOをタグで管理できるようにする</title>
    <updated>2022-08-21T16:27:00+00:00</updated>
    <dc:date>2022-08-21T16:27:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/485/</id>
    <link href="https://blog.naoty.dev/485/"/>
    <summary>&lt;h1&gt;zshの補完機能からからFigへ&lt;/h1&gt;
&lt;p&gt;最近&lt;a href=&quot;https://fig.io/&quot;&gt;Fig&lt;/a&gt;を試している。これはターミナル上の入力をいい感じに補完してくれるツールで、さまざまなシェルやターミナルのソフトウェアをサポートしている。&lt;/p&gt;
&lt;p&gt;これまではzshの補完機能を利用していたけど、開発環境の見直しに伴ってFigに切り替えてみた。インストールとセットアップをしただけで、基本的なLinuxのコマンド以外にもgit、docker、bundle、npmなどよく使うコマンドの補完が自動的に有効になった。&lt;/p&gt;
&lt;h1&gt;補完設定の追加&lt;/h1&gt;
&lt;p&gt;Figは補完機能を簡単に追加できるようになっている。自分は日頃から&lt;a href=&quot;https://github.com/naoty/todo&quot;&gt;naoty/todo&lt;/a&gt;という自分用のTODO管理コマンドを使っており、シェルで補完できるようにしたいと思っていた。&lt;/p&gt;
&lt;p&gt;詳細な手順は&lt;a href=&quot;https://fig.io/docs/guides/autocomplete-for-internal-tools&quot;&gt;ドキュメント&lt;/a&gt;にある通りだけど、補完設定の開発環境がかなり充実していて、TypeScriptで必要な設定を型としてチェックしていたり、規約をeslintでチェックしていたり、開発用サーバーからすぐに動作確認できたりするので、体験がいい。&lt;/p&gt;
&lt;p&gt;おかげで、naoty/todoの補完が簡単に実装できてしまった。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;./todo-completion.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./todo-completion.png&quot; alt=&quot;completion&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;サブコマンドが補完される様子&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;かなり惜しいポイントとして、補完の候補となる引数のリストを生成する際に任意のコマンドの標準出力を利用するのだけど、そのコマンド実行が環境変数をうまく反映していなかったり、標準エラー出力を補完設定側から参照できないため、デバッグがやりにくいという問題がある。なので、本当は引数の候補もいい感じに補完できるようにしたいのだけど、そこまでは至っていない。&lt;/p&gt;</summary>
    <title>Fig</title>
    <updated>2022-08-14T11:18:00+00:00</updated>
    <dc:date>2022-08-14T11:18:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/484/</id>
    <link href="https://blog.naoty.dev/484/"/>
    <summary>&lt;p&gt;巷で話題の&lt;a href=&quot;https://www.amazon.co.jp/dp/B09MS8BML8&quot;&gt;チームトポロジー&lt;/a&gt;を読んでいる。読みながら感じたことが多いのでそれを雑に残しておきたい。まだ半分くらいしか読んでないので、その2に続くかもしれないし、続かないかもしれない。&lt;/p&gt;
&lt;p&gt;読もうと思ったきっかけは、開発組織のあり方やチームの編成を議論するための前提知識のように感じることが増えてきたためだ。なんとなく聞いたことはあるが、具体的なことは何もわからなかったので、そろそろ読んでみようと思った。&lt;/p&gt;
&lt;h1&gt;チームの自律性&lt;/h1&gt;
&lt;p&gt;Chapter 2で、アプリケーションチーム（以下、本書に倣いストリームアラインドチーム）にデータベースに関するスキルが乏しく、データベース管理チームに依存するようになると、データベースを共有するアーキテクチャになってしまう、という話があり、納得感があった。異なるアプリケーションがデータベースを共有してしまうと、アプリケーション間で依存関係が生まれ、独立して開発を進めることが困難になり、生産性が落ちるため、アンチパターンと言われていたはず。&lt;/p&gt;
&lt;p&gt;そういった自体を回避するため、ストリームアラインドチームには開発、デリバリー、そしてその後の運用に至るまで幅広くスキルが求められる。さもなくば、チーム間に依存関係が生まれ、それがコンウェイの法則によってアーキテクチャ上の依存関係につながってしまう。本書では、そういったチーム内で開発が完結することを自律性と呼んでいる（と理解した）。&lt;/p&gt;
&lt;h1&gt;自律性とモチベーション&lt;/h1&gt;
&lt;p&gt;本書ではダニエル・ピンクを援用して内発的動機づけには自律性が重要であると書いてある。そして、それは複数のチーム間の調整によって失われていくと書いてある。&lt;/p&gt;
&lt;p&gt;自らの実感として、これは本当にそうで、自分たちの手に負えない要件を扱うときや、関係者が多すぎてコミュニケーションパスがカオスになっているときに、強い無力感に陥ってモチベーションが無になる。モチベーションがどうこうという話は本書の主題ではないと思うが、自分としては強く共感できた。&lt;/p&gt;
&lt;h1&gt;イネイブリングチーム&lt;/h1&gt;
&lt;p&gt;ストリームアラインドチームのスキル不足を解消するために、イネイブリングチームがあると理解した。&lt;/p&gt;
&lt;p&gt;ありがちなのは、アプリケーションを開発するチームにはAWS上にリソースを作成し管理するスキルがないため、別のチームからインフラエンジニアの工数を借りてきて、一部のタスクを依頼するみたいな状況は過去に何度も見てきた。こういった動きはそのチーム自体にインフラを管理するスキルがない状況を根本的に解決するわけではないから、自律的に運用を進めるのが困難になり、アーキテクチャ上のひずみにつながるかもしれない。&lt;/p&gt;
&lt;p&gt;対してイネイブリングチームとしての動きは、チームにそういったスキルを獲得するための支援をすることにあり、場合によってはペアプログラミングしたり、詳細なガイドラインを書いたり、コードレビューを引き受けたりする、といった動きになるのだろう。これにより、チームが自分たちで運用するためのスキルを獲得し、自律的に開発できるようになるのだろうと理解した。&lt;/p&gt;</summary>
    <title>チームトポロジーを読んだ</title>
    <updated>2022-08-08T19:46:00+00:00</updated>
    <dc:date>2022-08-08T19:46:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/483/</id>
    <link href="https://blog.naoty.dev/483/"/>
    <summary>&lt;p&gt;このブログを生成するためのプログラムである&lt;a href=&quot;https://github.com/naoty/blog&quot;&gt;naoty/blog&lt;/a&gt;には、プレビュー機能がある。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% blog serve &amp;lt;記事を含むディレクトリ&amp;gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-07-27 21:49:33] INFO  WEBrick 1.7.0
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-07-27 21:49:33] INFO  ruby 3.1.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2021-12-25&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;x86_64-darwin20]
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-07-27 21:49:33] INFO  WEBrick::HTTPServer#start: &lt;span class=&quot;nv&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2299 &lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8080
&lt;/pre&gt;
&lt;p&gt;このアプリケーションは、リクエストを受け取ったら、パスにマッチするmarkdownファイルをパースしてHTMLを生成し、それを静的ファイルとして返す。シンプルなRackアプリケーションとして実装し、webrick上で動かしている。&lt;/p&gt;
&lt;p&gt;最近、このプレビュー機能にLive reloadの機能を実装した。記事の元になるmarkdownファイルを編集し保存すると、その変更が自動的にブラウザに反映される。といっても、モダンなWebフロントエンド開発に備わっているような高度なものではなく、&lt;code&gt;setInterval&lt;/code&gt;で定期的にリクエストを送り続けるだけのものだ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/483/sequence.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/483/sequence.png&quot; alt=&quot;sequence&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;図にしてみた。&lt;code&gt;[200, env, HTML]&lt;/code&gt;とか書いてあるのはRackアプリケーションの&lt;code&gt;#call&lt;/code&gt;の返り値のイメージ。&lt;/p&gt;
&lt;p&gt;定期的にリクエストを送るスクリプトは、サーバーがHTMLをmarkdownから生成したあとに&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;を挿入してからブラウザに返すことでブラウザから実行される。&lt;code&gt;fetch&lt;/code&gt;を使ってリクエストを送り、レスポンスに含まれるHTMLを&lt;code&gt;document.write&lt;/code&gt;を使って雑にページごと書き換えるようにした。&lt;/p&gt;
&lt;p&gt;それと同時に、サーバー側でHTTPキャッシュの仕様に準拠するようにし、元となるmarkdownファイルに変更がなければ&lt;code&gt;304&lt;/code&gt;を返すようにした。具体的には、ブラウザから送られた&lt;code&gt;If-Modified-Since&lt;/code&gt;ヘッダの値とファイルの&lt;code&gt;mtime&lt;/code&gt;を比較して判定した。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;こういった実装のおかげで、ブログの執筆作業がかなりスムーズにできるようになった。&lt;/p&gt;
&lt;p&gt;naoty/blogに手を入れるのは1年ぶりくらいのはずだけど、手に馴染んだRubyでフルスクラッチしていたおかげで改修もスムーズだった。まだ足りていない機能がいくつかあるので、naoty/blogを継続的にメンテナンスしていきたい。&lt;/p&gt;</summary>
    <title>Live reloadの実装</title>
    <updated>2022-07-27T21:49:00+00:00</updated>
    <dc:date>2022-07-27T21:49:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/482/</id>
    <link href="https://blog.naoty.dev/482/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;/481/&quot;&gt;前回&lt;/a&gt;に続いて、今回はDELETEの空振りによってデッドロックが発生するケースをテストコードによって再現させてみる。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bundler/inline'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gemfile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://rubygems.org'&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'minitest'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'activerecord'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;require: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'active_record'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mysql2'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'minitest/autorun'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'logger'&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;STDOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;adapter: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mysql2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;host: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'127.0.0.1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;username: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;password: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'password'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;establish_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recreate_database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mysql_test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;establish_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;database: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mysql_test'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;create_table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DeadlockTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;teardown&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete_all&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_deadlock&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert_raises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Deadlocked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# (1)suprenumのネクストキーロックを取得する&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'naoty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# (3)挿入インテンションロックを取得するため、(2)のロック解除待ち&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'naoty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# (2)suprenumのネクストキーロックを取得する&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'naoty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# (4)挿入インテンションロックを取得するため、(1)のロック解除待ち -&amp;gt; デッドロック&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'naoty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_avoid_deadlock&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'naoty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'naoty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'naoty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'naoty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'naoty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;DELETE&lt;/code&gt;の条件に一致するレコードがない場合、条件の値を含む区間に対してギャップロックが取得される（&lt;a href=&quot;/446/&quot;&gt;参考&lt;/a&gt;）。今回のように1件もレコードがない場合や指定した値が最大の値より大きい場合は&lt;code&gt;suprenum&lt;/code&gt;に対するネクストキーロックになる。ギャップロックはINSERTを停止させるものの、ギャップロック同士では影響を与えないため（&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.6/ja/innodb-record-level-locks.html&quot;&gt;参考&lt;/a&gt;）、2回目の&lt;code&gt;DELETE&lt;/code&gt;がロック取得待ちになることはない。その結果、2つのトランザクションで&lt;code&gt;INSERT&lt;/code&gt;がギャップロックによってロック取得待ちになり、デッドロックが発生する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#test_avoid_deadlock&lt;/code&gt;のように条件に一致するレコードがあった場合、セカンダリインデックスのマッチしたレコードに対してネクストキーロックを取得する。つまり、マッチしたレコードの前にギャップロックを取得するため、条件と同じ値の&lt;code&gt;INSERT&lt;/code&gt;はロック取得待ちにならずに成功する。&lt;/p&gt;</summary>
    <title>DELETEの空振りによるデッドロック</title>
    <updated>2022-07-24T21:30:00+00:00</updated>
    <dc:date>2022-07-24T21:30:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/481/</id>
    <link href="https://blog.naoty.dev/481/"/>
    <summary>&lt;p&gt;デッドロックをテキストや図で理解するのはなかなか難しかったので、最小限のアプリケーションコードで再現できないか試してみた。こうすることで、実際に自分がデッドロックを引き起こすコードを書かないように注意できたり、同僚が書いたコードをレビューできるようになるだろう。&lt;/p&gt;
&lt;p&gt;今回は見落としがちな外部キー制約がからむデッドロックを再現してみた。&lt;/p&gt;
&lt;p&gt;再現にあたりなるべく簡潔に書けるようにRubyとActiveRecordを使い、デッドロックが起きたかどうかをテストによって検証する。以下のコードはローカルにMySQLが起動していれば動作する。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bundler/inline'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gemfile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://rubygems.org'&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'minitest'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'activerecord'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;require: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'active_record'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mysql2'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'minitest/autorun'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'logger'&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;STDOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;adapter: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mysql2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;host: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'127.0.0.1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;username: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;password: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'password'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;establish_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recreate_database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mysql_test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;establish_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;database: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mysql_test'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;create_table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:last_tweeted_at&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:last_followed_at&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;create_table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:tweets&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;foreign_key: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:tweets&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tweet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MysqlTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_deadlock_by_foreign_keys&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert_raises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Deadlocked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'naoty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# (1)外部キー制約により親テーブルのレコードに対して共有ロックを取得する&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tweets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;body: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# (3)排他ロックを取得するため、(2)のロック解除待ち -&amp;gt; デッドロック&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;last_tweeted_at: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# (2)排他ロックを取得するため、(1)のロック解除待ち&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;last_followed_at: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_avoid_deadlock_by_foreign_keys&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'naoty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# (1)親テーブルのレコードに排他ロックを取得する&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lock!&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# (2)排他ロックを取得済み&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tweets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;body: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# (4)排他ロックを取得済みなので、ロックの解除を待つ必要がない -&amp;gt; デッドロックは起きない&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;last_tweeted_at: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# (3)排他ロックを取得するため、(1)のロック解除待ち&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;last_followed_at: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;#test_deadlock_by_foreign_keys&lt;/code&gt;はデッドロックを再現させるテスト、&lt;code&gt;#test_avoid_deadlock_by_foreign_keys&lt;/code&gt;はそれを避ける実装のテスト（例外が起きないテストは何もassertする必要がない）を表している。&lt;/p&gt;
&lt;p&gt;比べてみると、子テーブルへのINSERTの前に親テーブルのレコードに排他ロックを取得しておくことで、デッドロックを回避できていることがわかる。&lt;/p&gt;
&lt;p&gt;また、子テーブルを持つ親テーブルに&lt;code&gt;last_tweeted_at&lt;/code&gt;や&lt;code&gt;last_followed_at&lt;/code&gt;といった更新を必要とするカラムを定義すると、デッドロックを引き起こしやすいこともわかる。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今回は、外部キー制約が関わるデッドロックを再現してみたが、他のパターンについても同様の方法で再現させることでデッドロックについて理解を深めていきたい。&lt;/p&gt;</summary>
    <title>外部キー制約によるデッドロックの再現</title>
    <updated>2022-07-18T11:35:00+00:00</updated>
    <dc:date>2022-07-18T11:35:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/480/</id>
    <link href="https://blog.naoty.dev/480/"/>
    <summary>&lt;p&gt;最近、GraphQLのフロントエンドとバックエンドを実装していて、GraphQLのベストプラクティスを学んでみようと思い、&lt;a href=&quot;https://productionreadygraphql.myshopify.com/&quot;&gt;Production Ready GraphQL&lt;/a&gt;という本をななめ読みした。&lt;/p&gt;
&lt;h1&gt;Client First&lt;/h1&gt;
&lt;p&gt;RESTful APIを設計する際、ドメインからリソースを抽出してCRUDを考えていくことになるけど、GraphQLではそういったリソース中心の設計ではなく、クライアントのユースケースを中心に設計していくことになる。&lt;/p&gt;
&lt;p&gt;分かりやすい例が、作成や更新に対する考え方の違いで、RESTful APIであれば、CREATEとUPDATEを同じようなパラメータを受け取るように実装するけど、GraphQLでは&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;coarse-grained create mutation and finer-grained mutations to update an entity&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;と本書で表現されているように、作成時は対象のオブジェクトの属性をまとめて受け取れるようにし、更新時は属性ごとに細かく更新できるようにすることが多い。これは、なにかを更新するときはすべての属性を変更するわけではなく一部の属性だけを更新するユースケースが圧倒的に多いからだ。&lt;/p&gt;
&lt;h1&gt;Expressive Schemas&lt;/h1&gt;
&lt;p&gt;GraphQLはnullability, enum, interface, unionといった静的型付け言語のような型システムを持っていて、表現力の高いスキーマを定義できる。これによって、例えば、不整合なデータを返さないようにスキーマで強制することができたり、クライアントからの入力に制約を設けることで、アプリケーション側で入力のバリデーションを実装する手間を省くことができるなどのメリットがある。&lt;/p&gt;
&lt;p&gt;個人的に一番印象的だったのは、mutationの結果をunionで表現する使い方だった。&lt;/p&gt;
&lt;pre lang=&quot;graphql&quot; class=&quot;highlight highlight-graphql&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mutation&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!):&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SignUpPayload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SignUpPayload&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SignUpSuccess&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserNameTaken&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PasswordTooWeek&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;signUp&lt;/code&gt;の結果は&lt;code&gt;SignUpSuccess&lt;/code&gt;, &lt;code&gt;UserNameTaken&lt;/code&gt;, &lt;code&gt;PasswordTooWeek&lt;/code&gt;のいずれかの型で表現できる。このように定義するメリットとしては、nullableなフィールドを用意する必要がないことが挙げられる。&lt;/p&gt;
&lt;p&gt;以下のようなスキーマで結果を表現するのがよくある形だが、sign upに失敗した場合には&lt;code&gt;account&lt;/code&gt;フィールドがnullになるなど、ある程度のnullabilityを許容することになったり、さまざまな種類のエラーを&lt;code&gt;UserError&lt;/code&gt;という抽象的な型で表現する必要が出てくる。&lt;/p&gt;
&lt;pre lang=&quot;graphql&quot; class=&quot;highlight highlight-graphql&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SignUpPayload&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!]!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;そうすると、「&lt;code&gt;account === null&lt;/code&gt;の場合は失敗である」という判断をクライアントアプリケーションに委ねることになる。union型を使うことで、より明確にエラーとその種類をクライアントに返すことができる。&lt;/p&gt;
&lt;p&gt;当然、unionを使った表現にもデメリットがあるわけだけど、これ以上は長くなるので、ここまでにする。&lt;/p&gt;
&lt;h1&gt;Resolver Design&lt;/h1&gt;
&lt;p&gt;本書はスキーマのベストプラクティスだけでなく、GraphQLサービスのバックエンドを実装する際の設計についてもある程度触れられている。その中でも、Resolverの設計について触れられている章があった。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A great resolver often contains very little code. It deals with user input, calls down to our domain layer, and transforms the result into an API result.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Resolverの責務とはこのようなことで、Resolverにドメインロジックを書いてはいけない。&lt;/p&gt;
&lt;p&gt;ただ、これはRESTful APIを実装する際にcontrollerにドメインロジックを書かないみたいなことで、さほど驚きはなかった。やっぱりそうだよね、という確認ができてよかった。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本書は、これ以外にもセキュリティ、パフォーマンス、バージョニングなど多岐にわたって解説されており、まだすべて目を通せていないものの、現時点でかなり良い本であることは間違いないので、GraphQLとの向き合い方に悩んでいる方にはオススメしたい。&lt;/p&gt;</summary>
    <title>Production Ready GraphQL</title>
    <updated>2022-06-14T22:04:00+00:00</updated>
    <dc:date>2022-06-14T22:04:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/479/</id>
    <link href="https://blog.naoty.dev/479/"/>
    <summary>&lt;p&gt;昨年10月くらいに外構の工事をしてもらったときに、グランドカバーとしてヒメイワダレソウを植えてもらった。芝生よりも繁殖力が強くて安いのが特徴とのことだった。&lt;/p&gt;
&lt;p&gt;いま調べたら、繁殖力が強すぎて海外では規制されているらしい。まじか。&lt;/p&gt;
&lt;h1&gt;3月&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;./march.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./march.jpg&quot; alt=&quot;3月&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;こんな感じで間をあけてポツポツ植えられている。まだ寒いので成長してない頃。&lt;/p&gt;
&lt;h1&gt;5月&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;./may.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./may.jpg&quot; alt=&quot;5月&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;暖かくなって急成長してきた。小さい花も咲いている。このままいくとコンクリート部分も多いそうな勢い。&lt;/p&gt;</summary>
    <title>ヒメイワダレソウ</title>
    <updated>2022-06-04T13:57:00+00:00</updated>
    <dc:date>2022-06-04T13:57:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/478/</id>
    <link href="https://blog.naoty.dev/478/"/>
    <summary>&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;./route.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./route.jpg&quot; alt=&quot;route&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;my new gear...&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2ヶ月くらい前のことなんだけど、自転車を買った。&lt;/p&gt;
&lt;p&gt;引っ越してきてもう半年以上経って、こちらの生活にはすっかり慣れてしまったけど、駅まで徒歩20分以上かかるのが少し億劫だった。一人で出かけるときは家から数分歩いたところにあるドラッグストアでレンタル自転車を借りていた。それも悪くはなかったけど、運が悪いとタイヤの空気がほぼ抜けている自転車を引いたりすることがあったので、自分の自転車を買うことにした。&lt;/p&gt;
&lt;p&gt;隣町にミニベロ専門店がたまたまあったので、その中で予算におさまるいい感じのものにした。買い物にも使うだろうし、カゴもつけてもらった。いざ乗ってみると、思っていた以上にサドルが狭くて尻が痛い。2ヶ月経った今はだんだん慣れてきたけど、当初は30分も乗ってられなかった。&lt;/p&gt;
&lt;p&gt;自転車のおかげで近所のスーパーに買い物に行ったり、駅前のゲーセン行ったり、市役所行ったりするのが本当に楽になった。うちの市は道路が整備されていて、自転車レーンも確保されている。そして、並木が必ず立っているので、走っていて気持ちがいい。東京オリンピックで自転車競技が行われたような場所だから、それはそうか。いい買い物をしたと思う。&lt;/p&gt;</summary>
    <title>Dahon Route</title>
    <updated>2022-05-28T13:37:00+00:00</updated>
    <dc:date>2022-05-28T13:37:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/477/</id>
    <link href="https://blog.naoty.dev/477/"/>
    <summary>&lt;p&gt;最近はこれといってまとまった内容の記事を書くことがないので、バラバラと最近の出来事を残しておきたい。&lt;/p&gt;
&lt;h1&gt;仕事&lt;/h1&gt;
&lt;p&gt;最近、仕事ではKafkaとやり取りするプログラムをJavaで書くようになった。おそらく新卒の頃にAndroidアプリをJava 1.6で書いていたときぶりで、ずいぶんとJavaもモダンな形に進化しており、とっつきにくかった印象が変わった。&lt;/p&gt;
&lt;p&gt;このブログでもキャッチアップのためにいくつか記事を書いているけど、引き続きそういった状況は続きそうだ。&lt;/p&gt;
&lt;h1&gt;Exercism&lt;/h1&gt;
&lt;p&gt;Javaのキャッチアップのため、&lt;a href=&quot;https://exercism.org&quot;&gt;Exercism&lt;/a&gt;でJavaのtrackをちまちまやっている。Javaの文法だけじゃなくて、テストの書き方、StreamやOptionalの使い方を学べるので、本を読むのとは違った学習体験になっている。ただ、Javaというかプログラミングクイズ的な要素があるため、Javaの学習に寄与していないと感じた問題はスキップするようになってきた。&lt;/p&gt;
&lt;p&gt;だいたい平日の朝やお風呂上がって寝るまでの時間に2, 3問解くような過ごし方をしている。&lt;/p&gt;
&lt;h1&gt;週末キャッチアップ&lt;/h1&gt;
&lt;p&gt;週末はと言うと、Java以外にもキャッチアップしないといけないことが多々あって、まとまった時間で集中してキャッチアップするようにしている。例えば、最近だとviteとreact-hook-formの使い方を先々週、先週学んだ。&lt;/p&gt;
&lt;h1&gt;DB自作本&lt;/h1&gt;
&lt;p&gt;体力に余裕があるときは、以前&lt;a href=&quot;/466/&quot;&gt;記事&lt;/a&gt;に書いたDB自作本を読んだり、章末のExerciseを解いたりしている。かなりゆっくり進めているし、Exerciseもほぼ飛ばしているので、学習効果としては微妙な気もするけど、継続することを意識してやっている。&lt;/p&gt;
&lt;h1&gt;Toggl&lt;/h1&gt;
&lt;p&gt;週にどれだけ学習に時間を充てられているか計測するために、&lt;a href=&quot;https://toggl.com&quot;&gt;Toggl&lt;/a&gt;で時間を測るようにしている。これは将来的に大学等でCSを学びたいぞとなったときに、週の学習時間の実績から現実的に可能なのか判断できるだろうと見込んでやっている。&lt;/p&gt;
&lt;p&gt;仕事が忙しいとほとんど学習に充てられない週があったり、学習内容によっては（Exercismばっかりやっていれば）週10時間以上は学習に充てられそうとかが分かってきた。&lt;/p&gt;
&lt;h1&gt;振り返り&lt;/h1&gt;
&lt;p&gt;最近の活動をこうして振り返ってみると、頑張りすぎている感がある。きっかけは仕事で必要だから学習しているわけだけど、楽しいのでなんとかなっている気がする。それでいいのかと疑問に思うこともある。これまでの経験から、こうして新たに身につけたスキルによって、新しいキャリアが拓けたりするので、長期的には悪くないのかなと思ったりもする。頑張りすぎず、ゆるく続けていきたい。&lt;/p&gt;</summary>
    <title>最近の仕事とかキャッチアップの話</title>
    <updated>2022-04-16T13:12:00+00:00</updated>
    <dc:date>2022-04-16T13:12:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/476/</id>
    <link href="https://blog.naoty.dev/476/"/>
    <summary>&lt;p&gt;はるか昔にAndroidアプリを開発していたときはJava 1.6を使っており、当時はラムダ式などはなく無名クラスを実装するしかなかった。Javaを書くのはそれ以来なので、ラムダ式やメソッド参照を確実に理解しておきたい。&lt;/p&gt;
&lt;h1&gt;関数型インターフェイス&lt;/h1&gt;
&lt;p&gt;ラムダ式の前に関数型インターフェイスを理解する必要がある。関数型インターフェイスは実装すべきメソッドが1つだけのインターフェイスだ。&lt;/p&gt;
&lt;pre lang=&quot;java&quot; class=&quot;highlight highlight-java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;java.util.function&lt;/code&gt;パッケージに汎用的な関数型インターフェイスが定義されており、以下のような命名規則に従っている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;*Function&lt;/code&gt;: 引数を受け取って、戻り値を返す&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;*Consumer&lt;/code&gt;: 引数を受け取って、戻り値を返さない（副作用をおこす）&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;*Predicate&lt;/code&gt;: 引数を受け取って、booleanを返す&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;*Supplier&lt;/code&gt;: 引数を受け取らず、戻り値を返す&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;さらに、引数を2つ受け取る場合は&lt;code&gt;BiFunction&lt;/code&gt;のように&lt;code&gt;Bi*&lt;/code&gt;というprefixがつき、特定の型を扱う場合は&lt;code&gt;IntConsumer&lt;/code&gt;というように型名がくっつく。&lt;/p&gt;
&lt;h1&gt;ラムダ式&lt;/h1&gt;
&lt;p&gt;関数型インターフェイスを実装する際に、以前のように無名クラスを定義する代わりに以下のようにラムダ式を渡せる。&lt;/p&gt;
&lt;p&gt;以下の2つのコードは同じ結果になる。&lt;/p&gt;
&lt;pre lang=&quot;java&quot; class=&quot;highlight highlight-java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;java&quot; class=&quot;highlight highlight-java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Comparator&lt;/code&gt;インターフェイスも&lt;code&gt;compare&lt;/code&gt;しか抽象メソッドをもたない関数型インターフェイスで、&lt;code&gt;compare&lt;/code&gt;の実装部分をラムダ式として渡すことができる。&lt;/p&gt;
&lt;h1&gt;メソッド参照&lt;/h1&gt;
&lt;p&gt;ラムダ式を定義する際にただメソッドを呼び出しているだけの場合、メソッド参照を使うことでさらに簡潔に書けるようになる。&lt;/p&gt;
&lt;p&gt;上記の例だと、ラムダ式はただ&lt;code&gt;compareTo()&lt;/code&gt;を呼び出しているだけなので、メソッド参照を使って下のように書ける。&lt;/p&gt;
&lt;pre lang=&quot;java&quot; class=&quot;highlight highlight-java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;String:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;メソッド参照は4種類ある。以下の2つ並んだコードはいずれも同じ結果になる。&lt;/p&gt;
&lt;h2&gt;staticメソッドへの参照&lt;/h2&gt;
&lt;pre lang=&quot;java&quot; class=&quot;highlight highlight-java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;java&quot; class=&quot;highlight highlight-java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Integer:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;h2&gt;特定のオブジェクトに対するインスタンスメソッドへの参照&lt;/h2&gt;
&lt;pre lang=&quot;java&quot; class=&quot;highlight highlight-java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;java&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ruby&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;java&quot; class=&quot;highlight highlight-java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;java&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ruby&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;h2&gt;引数のオブジェクトに対するインスタンスメソッドの参照&lt;/h2&gt;
&lt;pre lang=&quot;java&quot; class=&quot;highlight highlight-java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;java&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ruby&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;java&quot; class=&quot;highlight highlight-java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;java&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ruby&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;String:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;h2&gt;コンストラクタへの参照&lt;/h2&gt;
&lt;pre lang=&quot;java&quot; class=&quot;highlight highlight-java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;java&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ruby&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;java&quot; class=&quot;highlight highlight-java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;java&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ruby&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;StringBuilder:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;おさらい&lt;/h1&gt;
&lt;p&gt;関数型インターフェイスや4種類のメソッド参照を理解できると、&lt;code&gt;Stream#collect&lt;/code&gt;が理解できてくる。下のコードは同じ結果になる。&lt;/p&gt;
&lt;pre lang=&quot;java&quot; class=&quot;highlight highlight-java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;java&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ruby&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(),&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;java&quot; class=&quot;highlight highlight-java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;java&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ruby&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;ArrayList:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ArrayList:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ArrayList:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;collect&lt;/code&gt;の引数は順に&lt;code&gt;Supplier&lt;/code&gt;, &lt;code&gt;BiConsumer&lt;/code&gt;, &lt;code&gt;BiConsumer&lt;/code&gt;となっている。上述のとおり、&lt;code&gt;Supplier&lt;/code&gt;は引数を受け取らず、今回だと&lt;code&gt;ArrayList&lt;/code&gt;を返す。&lt;code&gt;BiConsumer&lt;/code&gt;は&lt;code&gt;Bi&lt;/code&gt;とあるとおり2つの引数を受け取り、戻り値がない。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;collect&lt;/code&gt;の第一引数ではコンストラクタへの参照を利用し、第二、第三引数ではラムダ式の引数に対するインスタンスメソッドへの参照を応用している。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>ラムダ式・メソッド参照</title>
    <updated>2022-03-27T19:56:00+00:00</updated>
    <dc:date>2022-03-27T19:56:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/475/</id>
    <link href="https://blog.naoty.dev/475/"/>
    <summary>&lt;p&gt;最近は&lt;a href=&quot;https://exercism.org&quot;&gt;Exercism&lt;/a&gt;でJavaの練習をしているのだけど、Streamの扱いで少しハマったので頭を整理して定着させるためにブログを書いておきたい。&lt;/p&gt;
&lt;pre lang=&quot;java&quot; class=&quot;highlight highlight-java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acronym&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Arrays.stream()&lt;/code&gt;や&lt;code&gt;Stream.of()&lt;/code&gt;で配列からStreamへ変換できる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toArray()&lt;/code&gt;でStreamから配列へ変換できる。ただし、引数を指定しないと&lt;code&gt;Object[]&lt;/code&gt;を返すため、&lt;code&gt;IntStream&lt;/code&gt;を渡す必要がある。&lt;code&gt;IntStream&lt;/code&gt;は配列のサイズを表すintegerを受け取ってStreamの要素の型の配列を返す関数で、この例だと&lt;code&gt;String[]::new&lt;/code&gt;にあたる。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Streamと配列の変換</title>
    <updated>2022-03-23T09:48:00+00:00</updated>
    <dc:date>2022-03-23T09:48:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/474/</id>
    <link href="https://blog.naoty.dev/474/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;/473/&quot;&gt;前回&lt;/a&gt;とりあげたwindowに続いて、joinも動かしながら理解してみる。joinはいろいろなバリエーションがあるため、基本的なinner joinに絞ってKStream同士の場合とKStreamとKTableの場合を動かしてみた。&lt;/p&gt;
&lt;h1&gt;KStream同士のinner join&lt;/h1&gt;
&lt;pre lang=&quot;java&quot; class=&quot;highlight highlight-java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;StreamsBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StreamsBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;KStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;streams-plaintext-left-input&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;KStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;streams-plaintext-right-input&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leftValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rightValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;left: %s, right: %s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;formatted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leftValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rightValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;JoinWindows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofTimeDifferenceWithNoGrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofSeconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Printed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toSysOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello:alice&quot;&lt;/span&gt; | kcat &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; localhost:9092 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; streams-plaintext-left-input &lt;span class=&quot;nt&quot;&gt;-K&lt;/span&gt; :
% &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello:bob&quot;&lt;/span&gt; | kcat &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; localhost:9092 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; streams-plaintext-right-input &lt;span class=&quot;nt&quot;&gt;-K&lt;/span&gt; :
&lt;span class=&quot;c&quot;&gt;#=&amp;gt; [KSTREAM-MERGE-0000000006]: hello, left: alice, right: bob&lt;/span&gt;
% &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello:naoty&quot;&lt;/span&gt; | kcat &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; localhost:9092 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; streams-plaintext-left-input &lt;span class=&quot;nt&quot;&gt;-K&lt;/span&gt; :
&lt;span class=&quot;c&quot;&gt;#=&amp;gt; [KSTREAM-MERGE-0000000006]: hello, left: naoty, right: bob&lt;/span&gt;
% &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello:naoty&quot;&lt;/span&gt; | kcat &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; localhost:9092 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; streams-plaintext-right-input &lt;span class=&quot;nt&quot;&gt;-K&lt;/span&gt; :
&lt;span class=&quot;c&quot;&gt;#=&amp;gt; [KSTREAM-MERGE-0000000006]: hello, left: naoty, right: naoty&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 30秒経過後&lt;/span&gt;
% &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello:alice&quot;&lt;/span&gt; | kcat &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; localhost:9092 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; streams-plaintext-left-input &lt;span class=&quot;nt&quot;&gt;-K&lt;/span&gt; :
% &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello:bob&quot;&lt;/span&gt; | kcat &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; localhost:9092 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; streams-plaintext-right-input &lt;span class=&quot;nt&quot;&gt;-K&lt;/span&gt; :
&lt;span class=&quot;c&quot;&gt;#=&amp;gt; [KSTREAM-MERGE-0000000006]: hello, left: alice, right: bob&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;キーが一致するレコードがもう片方のKStreamに流れるのをwindowで指定した期間だけ待つ。&lt;/li&gt;
&lt;li&gt;キーが一致するレコードを受けとったら、joinerを呼んでその結果を下流に流す。&lt;/li&gt;
&lt;li&gt;期間内にキーが一致するレコードを受け取らなかったら、windowが閉じる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;KStreamとKTableのinner join&lt;/h1&gt;
&lt;pre lang=&quot;java&quot; class=&quot;highlight highlight-java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;StreamsBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StreamsBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;KStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;streams-plaintext-left-input&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;KTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;streams-plaintext-right-input&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leftValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rightValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;left: %s, right: %s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;formatted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leftValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rightValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Printed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toSysOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello:naoty&quot;&lt;/span&gt; | kcat &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; localhost:9092 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; streams-plaintext-left-input &lt;span class=&quot;nt&quot;&gt;-K&lt;/span&gt; :
% &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello:alice&quot;&lt;/span&gt; | kcat &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; localhost:9092 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; streams-plaintext-right-input &lt;span class=&quot;nt&quot;&gt;-K&lt;/span&gt; :
% &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello:naoty&quot;&lt;/span&gt; | kcat &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; localhost:9092 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; streams-plaintext-left-input &lt;span class=&quot;nt&quot;&gt;-K&lt;/span&gt; :
&lt;span class=&quot;c&quot;&gt;#=&amp;gt; [KSTREAM-JOIN-0000000004]: hello, left: naoty, right: alice&lt;/span&gt;
% &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello:bob&quot;&lt;/span&gt; | kcat &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; localhost:9092 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; streams-plaintext-right-input &lt;span class=&quot;nt&quot;&gt;-K&lt;/span&gt; :
% &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello:naoty&quot;&lt;/span&gt; | kcat &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; localhost:9092 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; streams-plaintext-left-input &lt;span class=&quot;nt&quot;&gt;-K&lt;/span&gt; :
&lt;span class=&quot;c&quot;&gt;#=&amp;gt; [KSTREAM-JOIN-0000000004]: hello, left: naoty, right: bob&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;KTableとのjoinの場合は時間の制限が必要ないため、windowは指定しなくていい。&lt;/li&gt;
&lt;li&gt;KStreamで受け取ったレコードのキーがKTableにも存在すれば、下流にjoinerの結果を流す。&lt;/li&gt;
&lt;li&gt;KTableの更新時には下流にはレコードが流れないが、次にKStreamで同じキーを受け取った場合には更新が反映されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;tips：kcatでtombstoneを送る方法&lt;/h1&gt;
&lt;p&gt;KTableのレコードを削除したい場合などでkcatでtombstoneを送りたい場合、ただ空文字列を指定するだけでは空文字列が登録されるだけなので、&lt;code&gt;-Z&lt;/code&gt;オプションが必要になる。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello:&quot;&lt;/span&gt; | kcat &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; localhost:9092 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; streams-plaintext-right-input &lt;span class=&quot;nt&quot;&gt;-K&lt;/span&gt; : &lt;span class=&quot;nt&quot;&gt;-Z&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>Kafka Streams入門4(Join)</title>
    <updated>2022-03-01T22:00:00+00:00</updated>
    <dc:date>2022-03-01T22:00:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/473/</id>
    <link href="https://blog.naoty.dev/473/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;/472/&quot;&gt;前回&lt;/a&gt;では簡単なstatefulな操作を扱ったので、今回はwindowを伴う操作を動かしてみた。&lt;/p&gt;
&lt;h1&gt;Hopping time windows&lt;/h1&gt;
&lt;p&gt;Hopping time windowはお互いに重なり合う一定期間のtime windowのことで、期間のことをwindow size、time windowが生成される感覚をhopと呼ぶ。&lt;/p&gt;
&lt;pre lang=&quot;java&quot; class=&quot;highlight highlight-java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;StreamsBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StreamsBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;KStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;streams-plaintext-input&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;groupByKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;windowedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;nc&quot;&gt;TimeWindows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofSizeWithNoGrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofMinutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                     &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;advanceBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofSeconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Printed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toSysOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[KTABLE-TOSTREAM-0000000002]: [a@1645928070000/1645928130000], 1
[KTABLE-TOSTREAM-0000000002]: [a@1645928100000/1645928160000], 1
[KTABLE-TOSTREAM-0000000002]: [a@1645928070000/1645928130000], 2
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;1645928070000&lt;/code&gt;のような数値はミリ秒単位のunixtimeで、&lt;code&gt;[a@1645928070000/1645928130000]&lt;/code&gt;はキー&lt;code&gt;a&lt;/code&gt;の1分間の（window size = 1分）time windowを表している。&lt;/li&gt;
&lt;li&gt;確かに30秒ずつずれた（hop = 30秒）time windowごとに集計されていることがわかる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Tumbling time windows&lt;/h1&gt;
&lt;p&gt;Tumbling time windowsはお互いに重なり合わない一定期間のtime windowのことで、window sizeとhopが同じ値のhopping time windowsとも言える。&lt;/p&gt;
&lt;pre lang=&quot;java&quot; class=&quot;highlight highlight-java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;StreamsBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StreamsBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;KStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;streams-plaintext-input&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;groupByKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;windowedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;nc&quot;&gt;TimeWindows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofSizeWithNoGrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofMinutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Printed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toSysOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[KTABLE-TOSTREAM-0000000002]: [a@1645967820000/1645967880000], 2
[KTABLE-TOSTREAM-0000000002]: [a@1645967880000/1645967940000], 1
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;1分間のtime windowで、重複がないことがわかる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Sliding time windows&lt;/h1&gt;
&lt;p&gt;joinで使われるようなので、joinのときにあらためて理解したい。&lt;/p&gt;
&lt;h1&gt;Session windows&lt;/h1&gt;
&lt;p&gt;Session windowsは一連のレコードをセッション化するためのwindowで、あるレコードから一定期間（inactivity gap）内に同じキーをもつレコードを受け取ると同じwindowに含める。ユーザー行動分析などの用途で便利。&lt;/p&gt;
&lt;pre lang=&quot;java&quot; class=&quot;highlight highlight-java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;StreamsBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StreamsBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;KStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;streams-plaintext-input&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;groupByKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;windowedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;nc&quot;&gt;SessionWindows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofInactivityGapWithNoGrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofSeconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Materialized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wordcounts&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Printed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toSysOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[KTABLE-TOSTREAM-0000000002]: [a@1646006322519/1646006327264], 3
[KTABLE-TOSTREAM-0000000002]: [a@1646006357869/1646006357869], 1
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;最後のレコードを受け取ってから30秒後に下流にレコードが送られているようだ。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Kafka Streams入門3(Window)</title>
    <updated>2022-02-27T10:39:00+00:00</updated>
    <dc:date>2022-02-27T10:39:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/472/</id>
    <link href="https://blog.naoty.dev/472/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;/470/&quot;&gt;前回&lt;/a&gt;はstatelessな操作を試してみたので、statefulな操作のうち簡単なものだけ動かしてみた。&lt;/p&gt;
&lt;p&gt;sourceとなるtopicには以下のようにしてレコードを流している。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a:naoty&quot;&lt;/span&gt; | kcat &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; localhost:9092 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; streams-plaintext-input &lt;span class=&quot;nt&quot;&gt;-K&lt;/span&gt; :
% &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a:naoty&quot;&lt;/span&gt; | kcat &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; localhost:9092 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; streams-plaintext-input &lt;span class=&quot;nt&quot;&gt;-K&lt;/span&gt; :
% &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b:naoty&quot;&lt;/span&gt; | kcat &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; localhost:9092 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; streams-plaintext-input &lt;span class=&quot;nt&quot;&gt;-K&lt;/span&gt; :
&lt;/pre&gt;
&lt;h1&gt;count&lt;/h1&gt;
&lt;pre lang=&quot;java&quot; class=&quot;highlight highlight-java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StreamsBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StreamsBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;streams-plaintext-input&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;groupByKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Printed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toSysOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[KTABLE-TOSTREAM-0000000003]: a, 1
[KTABLE-TOSTREAM-0000000003]: a, 2
[KTABLE-TOSTREAM-0000000003]: b, 1
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;reduce&lt;/h1&gt;
&lt;pre lang=&quot;java&quot; class=&quot;highlight highlight-java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StreamsBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StreamsBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;streams-plaintext-input&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;groupByKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Printed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toSysOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[KTABLE-TOSTREAM-0000000003]: a, naoty
[KTABLE-TOSTREAM-0000000003]: a, naotynaoty
[KTABLE-TOSTREAM-0000000003]: b, naoty
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;aggregate&lt;/h1&gt;
&lt;pre lang=&quot;java&quot; class=&quot;highlight highlight-java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StreamsBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StreamsBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;streams-plaintext-input&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;groupByKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;aggregate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Printed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toSysOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[KTABLE-TOSTREAM-0000000003]: a, �������NAOTY
[KTABLE-TOSTREAM-0000000003]: a, �������NAOTYNAOTY
[KTABLE-TOSTREAM-0000000003]: b, �������NAOTY
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;なぜか先頭にゴミが入ってしまった。&lt;/p&gt;
&lt;h1&gt;整理&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;groupByKey&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;などのメソッドで集約する単位を定義した&lt;code&gt;KGroupedStream&lt;/code&gt;を返す。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;KGroupedStream&lt;/code&gt;に対して&lt;code&gt;count&lt;/code&gt;などの集約するメソッドが実行でき、これらは&lt;code&gt;KTable&lt;/code&gt;を返す。上流から流れてきたレコードはState Storeと呼ばれるローカルのキーバリューストアに保存され、更新があったレコードを下流に流す。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;KTable&lt;/code&gt;に対して&lt;code&gt;toStream()&lt;/code&gt;を実行すると、更新されたレコードが流れる&lt;code&gt;KStream&lt;/code&gt;が返る。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Kafka Streams入門2(Statefulな操作)</title>
    <updated>2022-02-27T10:24:00+00:00</updated>
    <dc:date>2022-02-27T10:24:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/471/</id>
    <link href="https://blog.naoty.dev/471/"/>
    <summary>&lt;p&gt;なりすましメールかどうかを見分けるために送信元メールアドレスを検証する仕組みについて調べたので自分なりに整理してみた。もっとわかりやすい記事はたくさんあるので、これは自分のためのメモにすぎない。&lt;/p&gt;
&lt;h1&gt;エンベロープFromとヘッダFrom&lt;/h1&gt;
&lt;p&gt;検証する仕組みを説明する前に、なぜなりすましが可能なのか前提を踏まえておく必要がある。&lt;/p&gt;
&lt;p&gt;送信元メールアドレスと呼ばれるものは、エンベロープFromとヘッダFromの2つ存在する。エンベロープFromはメールの送信に使われる情報で、ヘッダFromはメールクライアントで表示される情報だ。封筒に書かれた送信元と手紙に書かれた送信元が違う、といった説明がよく見られるけど分かりやすい例えだと思う。&lt;/p&gt;
&lt;p&gt;エンベロープFromとヘッダFromは異なるアドレスを設定できる。2つが異なることによって、例えば、転送機能（転送者のアドレスがエンベロープFrom、転送者にメール送信したアドレスがヘッダFromになる）やメールの送信代行といったことが可能になる。一方で、悪意のある攻撃者が別人のアドレスをヘッダFromに設定することでなりすますことが可能になる。&lt;/p&gt;
&lt;p&gt;また、ヘッダFromだけでなく、エンベロープFromも悪意のある攻撃者によってなりすまされる可能性がある。エンベロープFromはSMTPの&lt;code&gt;MAIL FROM&lt;/code&gt;コマンドによって設定されるが、SMTPではそのメールアドレスの所有者本人が設定しているかどうかを検証できない。&lt;/p&gt;
&lt;h1&gt;SPF&lt;/h1&gt;
&lt;p&gt;SPFはエンベロープFromにあるメールアドレスが送信者本人のものかどうかをDNSを利用して検証する。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;./spf.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./spf.png&quot; alt=&quot;spf&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;受信者はエンベロープFromのドメイン（図だとnaoty.dev）のDNSサーバーにSPFレコードを問い合わせる。&lt;/li&gt;
&lt;li&gt;SPFレコードにはそのドメインで送信できるIPアドレスが記載されている。&lt;/li&gt;
&lt;li&gt;受信者は送信者のIPアドレスがSPFレコードに含まれているか確認する。含まれていなければ、なりすましと見なす。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;DKIM&lt;/h1&gt;
&lt;p&gt;DKIMは公開鍵暗号を使ってメールの中身が改ざんされていないかを検証する。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;./dkim.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./dkim.png&quot; alt=&quot;dkim&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;送信者はあらかじめDNSに公開鍵を登録しておく。&lt;/li&gt;
&lt;li&gt;送信者は秘密鍵を使ってメールのメッセージ等から電子署名を生成し、&lt;code&gt;DKIM-Signature&lt;/code&gt;ヘッダに設定してメールを送信する。その際、公開鍵が登録されたDNSサーバーや公開鍵の識別子（セレクタ）を&lt;code&gt;DKIM-Signature&lt;/code&gt;に設定する。&lt;/li&gt;
&lt;li&gt;受信者は&lt;code&gt;DKIM-Signature&lt;/code&gt;で指定されたDNSサーバーから公開鍵を取得し、電子署名をデコードしてハッシュ値を取り出す。もし、メールが改ざんされていれば受信したメールから計算したハッシュ値と一致しないはずなので、改ざんされたと見なす。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;DMARC&lt;/h1&gt;
&lt;p&gt;DMARCはSPFやDKIMで認証に失敗したメールをどう扱うかを送信者側で設定できる仕組みを提供する。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;./dmarc.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./dmarc.png&quot; alt=&quot;dmarc&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;送信者はあらかじめDMARCレコードをDNSに登録しておく。&lt;/li&gt;
&lt;li&gt;受信者はDMARCレコードを取得して、そこにある&lt;code&gt;p&lt;/code&gt;タグで指定された方法で認証に失敗したメールを処理する。&lt;/li&gt;
&lt;li&gt;受信者は認証に失敗したメールに関するレポートをDMARCレコードで設定されたメールアドレスに送る。レポートを集めることで、認証に失敗したメールがどういったものなのか（認証に失敗してはいけないメールを失敗させていないか等）を知ることができる。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>送信元メールアドレスの検証</title>
    <updated>2022-02-23T13:03:00+00:00</updated>
    <dc:date>2022-02-23T13:03:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/470/</id>
    <link href="https://blog.naoty.dev/470/"/>
    <summary>&lt;p&gt;Kafka Streamsに入門する機運が出てきたため、実際に動かしてみながら学んでみることにした。&lt;/p&gt;
&lt;h1&gt;Kafka Streamsとは&lt;/h1&gt;
&lt;p&gt;Kafkaとのメッセージの送信/取得、そしてメッセージの処理のためのJavaのライブラリ。&lt;/p&gt;
&lt;p&gt;Kafkaからメッセージを取得して、それをリアルタイムに処理して、またKafkaに送ったり、別のデータストアに書き込んだりするようなアプリケーションを書く際にフレームワークとして使われている。&lt;/p&gt;
&lt;h1&gt;開発環境のセットアップ&lt;/h1&gt;
&lt;p&gt;以前の&lt;a href=&quot;/427/&quot;&gt;記事&lt;/a&gt;でDockerコンテナでKafkaの動作環境をセットアップする方法を紹介した。今回もそれに沿ってセットアップした。以下再掲。&lt;/p&gt;
&lt;pre lang=&quot;yaml&quot; class=&quot;highlight highlight-yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;kafka&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;confluentinc/cp-kafka&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;KAFKA_ZOOKEEPER_CONNECT&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;zookeeper:2181&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;KAFKA_ADVERTISED_LISTENERS&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PLAINTEXT://localhost:9092&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;9092:9092&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;zookeeper&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;zookeeper&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;confluentinc/cp-zookeeper&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ZOOKEEPER_CLIENT_PORT&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2181&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;また、Kafka Streamsアプリケーションのプロジェクトのセットアップについては、これも以前の&lt;a href=&quot;/467/&quot;&gt;記事&lt;/a&gt;で紹介したミニマムなgradleプロジェクトを参考にセットアップして動作するようになった。build.gradleはこんな感じ。&lt;/p&gt;
&lt;pre lang=&quot;groovy&quot; class=&quot;highlight highlight-groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'application'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mainClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dev.naoty.kafka.Main'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.apache.kafka:kafka-streams:3.1.0'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;動かしてみる&lt;/h1&gt;
&lt;p&gt;Kafka StreamsにはStreams DSLとProcessor APIという2種類の書き方が存在するが、今回はより簡単なStreams DSLを使って動かしてみる。&lt;/p&gt;
&lt;p&gt;実際のコード全体は記事の一番下に載せたけど、重要な箇所だけを切り抜く。&lt;/p&gt;
&lt;pre lang=&quot;java&quot; class=&quot;highlight highlight-java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StreamsBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StreamsBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;streams-plaintext-input&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key:%s, value:%s\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Printed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toSysOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mapValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Printed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toSysOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KeyValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Printed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toSysOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Printed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toSysOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;selectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Printed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toSysOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;StreamsBuilder#stream&lt;/code&gt;で&lt;code&gt;streams-plaintext-input&lt;/code&gt;というtopicからメッセージを取得する&lt;code&gt;KStream&lt;/code&gt;を生成している&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;KStream&lt;/code&gt;に対して&lt;code&gt;map&lt;/code&gt;や&lt;code&gt;filter&lt;/code&gt;などのおなじみのメソッドでメッセージを処理できる。当然メソッドチェーンもできる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;peek&lt;/code&gt;は受け取ったメッセージに何もしないため、処理のチェーンの中で副作用を発生させるのに便利。例えば、この例のようにログを出力できる。Rubyの&lt;code&gt;#tap&lt;/code&gt;みたいなやつ。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;selectKey&lt;/code&gt;を使うとキーを変更できる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;print&lt;/code&gt;を使うと標準出力やファイルにメッセージを出力できるが、これは終端でしか使えないため、メソッドチェーンできない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;kcat（旧kafkacat）を使って&lt;code&gt;streams-plaintext-input&lt;/code&gt;にメッセージを送ると、標準出力に処理されたメッセージが出力された。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello:naoty&quot;&lt;/span&gt; | kcat &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; localhost:9092 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; streams-plaintext &lt;span class=&quot;nt&quot;&gt;-K&lt;/span&gt; :
&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;key:hello, value:naoty
[KSTREAM-PEEK-0000000001]: hello, naoty
[KSTREAM-MAPVALUES-0000000003]: hello, NAOTY
[KSTREAM-MAP-0000000005]: HELLO, NAOTY
[KSTREAM-FILTER-0000000007]: hello, naoty
[KSTREAM-KEY-SELECT-0000000009]: naoty, naoty
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;コード全体&lt;/h1&gt;
&lt;pre lang=&quot;java&quot; class=&quot;highlight highlight-java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Properties&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;StreamsConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_ID_CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;my-first-streams-app&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;StreamsConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BOOTSTRAP_SERVERS_CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;localhost:9092&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;StreamsConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DEFAULT_KEY_SERDE_CLASS_CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Serdes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;StreamsConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DEFAULT_VALUE_SERDE_CLASS_CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Serdes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StreamsBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StreamsBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;streams-plaintext-input&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key:%s, value:%s\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Printed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toSysOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mapValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Printed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toSysOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KeyValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Printed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toSysOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Printed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toSysOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;selectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Printed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toSysOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Topology&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topology&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaStreams&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;streams&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaStreams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topology&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CountDownLatch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;latch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CountDownLatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRuntime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addShutdownHook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;streams-shutdown-hook&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;streams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;latch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;countDown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;streams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;latch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;await&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>Kafka Streams入門1(環境構築とStatelessな操作)</title>
    <updated>2022-02-19T21:13:00+00:00</updated>
    <dc:date>2022-02-19T21:13:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/469/</id>
    <link href="https://blog.naoty.dev/469/"/>
    <summary>&lt;p&gt;Javaを使った開発を初めてしていくことになりそうなので、Javaの開発環境をセットアップするにあたって調べたことを整理した。初めてのJavaなので、間違った内容もあるかもしれない。&lt;/p&gt;
&lt;p&gt;まずはデフォルトでインストールされているJavaを確認する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% /usr/libexec/java_home -V
Matching Java Virtual Machines (2):
    1.8.202.08 (x86_64) &quot;Oracle Corporation&quot; - &quot;Java&quot; /Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home
    1.8.0_202 (x86_64) &quot;Oracle Corporation&quot; - &quot;Java SE 8&quot; /Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home
/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OracleのJDK 8（1.8）がデフォルトではインストールされているようだ。Oracle版OpenJDKビルド済みバイナリではなく、Oracle JDKと思われる。&lt;/p&gt;
&lt;p&gt;Oracle JDKは現在は無償での利用に制限があるようなので、使わないようにしたい。その代わり、OpenJDKを使うようにする。OpenJDKのビルド済みバイナリにはさまざまなディストリビューションがあるが、&lt;a href=&quot;https://adoptium.net/&quot;&gt;Adoptium&lt;/a&gt;（旧AdoptOpenJDK）が配布しているTemurinを使ってみる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% brew install --cask temurin 
% /usr/libexec/java_home -V
Matching Java Virtual Machines (3):
    17.0.2 (x86_64) &quot;Eclipse Temurin&quot; - &quot;Eclipse Temurin 17&quot; /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home
    1.8.202.08 (x86_64) &quot;Oracle Corporation&quot; - &quot;Java&quot; /Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home
    1.8.0_202 (x86_64) &quot;Oracle Corporation&quot; - &quot;Java SE 8&quot; /Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home
/Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;java_home 17&lt;/code&gt;でインストールしたTemurinのホームディレクトリが返るため、&lt;code&gt;JAVA_HOME&lt;/code&gt;にセットする。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;/usr/libexec/java_home 17&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;% java -version
openjdk version &quot;17.0.2&quot; 2022-01-18
OpenJDK Runtime Environment Temurin-17.0.2+8 (build 17.0.2+8)
OpenJDK 64-Bit Server VM Temurin-17.0.2+8 (build 17.0.2+8, mixed mode, sharing)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Temurinが使われるようになった。&lt;/p&gt;
&lt;p&gt;IntelliJ IDEAで利用する場合にはプロジェクト設定からSDKをTemurinに設定する。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;./intellij-idea.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./intellij-idea.png&quot; alt=&quot;IntelliJ IDEA&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;プロジェクト設定&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;</summary>
    <title>macOSにJavaをインストールする</title>
    <updated>2022-02-15T21:47:00+00:00</updated>
    <dc:date>2022-02-15T21:47:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/468/</id>
    <link href="https://blog.naoty.dev/468/"/>
    <summary>&lt;p&gt;昨年9月に家を建ててから数ヶ月が経って、計画段階からの目玉機能（？）でもあったスマートキー付き勝手口（以下、スマート勝手口）がようやく運用に乗ったので、記念に日記をつけたい。&lt;/p&gt;
&lt;h1&gt;スマート勝手口とは&lt;/h1&gt;
&lt;p&gt;スマート勝手口というのはスマートキーがついた勝手口のことで、配達員の方がこちらで事前に設定した暗証番号を入力して勝手口を開け、荷物を屋内に置き配してくれるようになっている。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;./outside.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./outside.jpg&quot; alt=&quot;外側&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;スマートキーと使い方を説明するシール&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;勝手口内は1畳くらいの小さい空間で、念のため監視カメラを設置してある。勝手口のとなりはパントリーになっていて、置き配してもらった荷物はすぐに収納できるようにしてあるんだけど、その間の扉には当然カギが中からかかっているため、配達員の方が家に上がりこんでくることはない。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;./inside.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./inside.jpg&quot; alt=&quot;内側&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;ここに置いてもらう&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我が家は警備会社と契約していて防犯センサーが各所に設置してあるが、スマート勝手口に防犯センサーがあると配達員の方に反応してしまうため、勝手口内とパントリーの間のドアにセンサーをとりつけるようにした。&lt;/p&gt;
&lt;h1&gt;運用&lt;/h1&gt;
&lt;p&gt;スマート勝手口の暗証番号はECサイト毎のprefixと伝票番号から生成していて、スマートキーの専用アプリから設定する必要がある。そのため、伝票番号が書かれたメールを見落とさないようにフィルターを設定してラベリングするなどの苦しい運用を強いられている。&lt;/p&gt;
&lt;p&gt;専用アプリとスマートキーはおそらくBluetoothで通信しているはずなので、ハックして自動的に暗証番号を設定できるようにしたい。&lt;/p&gt;
&lt;h1&gt;運用までの道のり&lt;/h1&gt;
&lt;p&gt;スマート勝手口のアイデア自体はハウスメーカー側から提案いただいたもので、自分たちのニーズにも合致していたため、採用させてもらった。どうやら全国初の採用案件だったらしい。&lt;/p&gt;
&lt;p&gt;間取りを決める時点でスマート勝手口を前提としてパントリーやキッチンの配置を決め、工事段階では上記のとおり警備会社とも連携が必要になるため、打ち合わせを行ったりした。&lt;/p&gt;
&lt;p&gt;引き渡し後もスマートキーの設定につまづき、ハウスメーカーやスマートキーのメーカーに何度も問い合わせしてようやく専用アプリから接続できるようになった。&lt;/p&gt;
&lt;p&gt;スマートキーの設定ができるようになっても、配達員の方に利用してもらうまでもかなり時間がかかった。置き配の指定オプションにスマート勝手口というものがないため（それはそう）、それに近しいオプションを選び補足で細かく説明を書いた。それでも何度も失敗し、文言の微調整やインターフォン横に配達員の方向けのメッセージプレートを設置したりするなどし、ようやくスマート勝手口を利用してもらえるようになった。&lt;/p&gt;</summary>
    <title>スマート勝手口に置き配してもらう</title>
    <updated>2022-01-31T23:13:00+00:00</updated>
    <dc:date>2022-01-31T23:13:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/467/</id>
    <link href="https://blog.naoty.dev/467/"/>
    <summary>&lt;p&gt;なにかを理解するときにミニマムな単位から一つずつステップアップして理解していきたいんだけど、gradleの場合、&lt;code&gt;gradle init&lt;/code&gt;で対話型のセットアップを求められてしまうため、ミニマムなプロジェクト構成を探ってみた。&lt;/p&gt;
&lt;h1&gt;起動&lt;/h1&gt;
&lt;p&gt;無から始める。まずは作業用ディレクトリを作る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir hello-gradle
$ cd hello-gradle
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;まだ何もないけど、タスクのリストを出すコマンドを実行してみる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gradle tasks

FAILURE: Build failed with an exception.

* What went wrong:
Directory '/Users/naoty/src/github.com/naoty/hello-gradle' does not contain a Gradle build.

A Gradle build should contain a 'settings.gradle' or 'settings.gradle.kts' file in its root directory. It may also contain a 'build.gradle' or 'build.gradle.kts' file.

To create a new Gradle build in this directory run 'gradle init'

(snip)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;gradle init&lt;/code&gt;を実行してくれ、と言われるけどいろいろできてしまうので無視する。メッセージによると&lt;code&gt;settings.gradle&lt;/code&gt;があるとよさそうなので、作る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ touch settings.gradle
$ gradle tasks

&amp;gt; Task :tasks

------------------------------------------------------------
Tasks runnable from root project 'hello-gradle'
------------------------------------------------------------

Build Setup tasks
-----------------
init - Initializes a new Gradle build.
wrapper - Generates Gradle wrapper files.

Help tasks
----------

(snip)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;タスクのリストが表示された。&lt;/p&gt;
&lt;h1&gt;ビルド&lt;/h1&gt;
&lt;p&gt;次にJavaのソースコードをクラスファイルにコンパイルしたい。&lt;/p&gt;
&lt;p&gt;「gradle java」で検索するとJavaプラグインというものがあると知る。&lt;a href=&quot;https://docs.gradle.org/current/userguide/java_plugin.html&quot;&gt;公式ドキュメント&lt;/a&gt;に目を通す。&lt;code&gt;build.gradle&lt;/code&gt;を作って次のように書くとよさそう。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt;&lt;span class=&quot;gi&quot;&gt;+plugins {
+  id 'java'
+}
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;タスクのリストを表示してみる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gradle tasks

&amp;gt; Task :tasks

------------------------------------------------------------
Tasks runnable from root project 'hello-gradle'
------------------------------------------------------------

Build tasks
-----------
assemble - Assembles the outputs of this project.
build - Assembles and tests this project.
buildDependents - Assembles and tests this project and all projects that depend on it.
buildNeeded - Assembles and tests this project and all projects it depends on.
classes - Assembles main classes.
clean - Deletes the build directory.
jar - Assembles a jar archive containing the main classes.
testClasses - Assembles test classes.

Build Setup tasks
-----------------
init - Initializes a new Gradle build.
wrapper - Generates Gradle wrapper files.

(snip)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ビルド用のタスクが追加された。さっそく実行してみる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gradle build

BUILD SUCCESSFUL in 1s
1 actionable task: 1 executed
$ tree .
.
├── build
│   ├── libs
│   │   └── hello-gradle.jar
│   └── tmp
│       └── jar
│           └── MANIFEST.MF
├── build.gradle
└── settings.gradle

4 directories, 4 files
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;build&lt;/code&gt;ディレクトリにjarファイルが作られている。jarの中身はマニフェストファイルのみだった。&lt;/p&gt;
&lt;p&gt;もう少しドキュメントを見ていると&lt;a href=&quot;https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_project_layout&quot;&gt;Project layout&lt;/a&gt;という章があるので、これを参考にビルドしたいソースコードを置いてみる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir -p src/main/java/hello
$ touch src/main/java/hello/App.java
$ gradle build

BUILD SUCCESSFUL in 1s
2 actionable tasks: 2 executed
$ tree .
.
├── build
│   ├── classes
│   │   └── java
│   │       └── main
│   ├── generated
│   │   └── sources
│   │       ├── annotationProcessor
│   │       │   └── java
│   │       │       └── main
│   │       └── headers
│   │           └── java
│   │               └── main
│   ├── libs
│   │   └── hello-gradle.jar
│   └── tmp
│       ├── compileJava
│       │   └── previous-compilation-data.bin
│       └── jar
│           └── MANIFEST.MF
├── build.gradle
├── settings.gradle
└── src
    └── main
        └── java
            └── hello
                └── App.java

19 directories, 6 files
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;いろいろなファイルが生成されるようになった。&lt;/p&gt;
&lt;h1&gt;実行&lt;/h1&gt;
&lt;p&gt;次に実行可能ファイルを生成して実行できるようにしたい。まずは空の&lt;code&gt;src/main/java/hello/App.java&lt;/code&gt;を編集して&lt;code&gt;main&lt;/code&gt;を実装しておく。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt;&lt;span class=&quot;gi&quot;&gt;+package hello;
+
+public class App {
+    public static void main(String[] args) {
+        System.out.println(&quot;Hello, gradle!&quot;);
+    }
+}
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;gradleで実行可能ファイルを生成するにはApplicationプラグインというものを使うといいらしい。&lt;a href=&quot;https://docs.gradle.org/current/userguide/application_plugin.html&quot;&gt;公式ドキュメント&lt;/a&gt;によると、ApplicationプラグインはJavaプラグインを内包しているようなので、これまでの設定をそのまま使うことができる。&lt;/p&gt;
&lt;p&gt;公式ドキュメントに沿ってbuild.gradleに必要最小限の設定を追加する。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; plugins {
&lt;span class=&quot;gd&quot;&gt;-  id 'java'
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+  id 'application'
&lt;/span&gt; }
&lt;span class=&quot;gi&quot;&gt;+
+application {
+  mainClass = 'hello.App'
+}
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;タスクのリストを確認すると、確かにこれまでのタスクに加えて&lt;code&gt;run&lt;/code&gt;が追加されている。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gradle tasks

&amp;gt; Task :tasks

------------------------------------------------------------
Tasks runnable from root project 'hello-gradle'
------------------------------------------------------------

Application tasks
-----------------
run - Runs this project as a JVM application

Build tasks
-----------
(snip)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;では、実行してみる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gradle run

&amp;gt; Task :run
Hello, gradle!

BUILD SUCCESSFUL in 1s
2 actionable tasks: 2 executed
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;依存ライブラリ&lt;/h1&gt;
&lt;p&gt;次に依存するライブラリを追加したい。依存ライブラリの追加はJavaプラグインの機能なので、Applicationプラグインでも利用できる。Apache Commons Lang 3を追加してみる。&lt;/p&gt;
&lt;p&gt;依存関係の設定を&lt;a href=&quot;https://docs.gradle.org/current/userguide/dependency_management_for_java_projects.html&quot;&gt;公式ドキュメント&lt;/a&gt;を見ながら書いてみる。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; plugins {
     id 'application'
 }
 
 application {
     mainClass = 'hello.App'
 }
&lt;span class=&quot;gi&quot;&gt;+
+repositories {
+    mavenCentral()
+}
+
+dependencies {
+    implementation 'org.apache.commons:commons-lang3:3.12.0'
+}
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;そして、ソースコードから利用する。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; package hello;
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+import org.apache.commons.lang3.StringUtils;
+
&lt;/span&gt; public class App {
     public static void main(String[] args) {
&lt;span class=&quot;gd&quot;&gt;-        System.out.println(&quot;Hello, gradle!&quot;);
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+        String text = null;
+        if (StringUtils.isEmpty(text)) {
+            System.out.println(&quot;text is empty!&quot;);
+        } else {
+            System.out.println(&quot;text is not empty!&quot;);
+        }
+    }
&lt;/span&gt; }
&lt;/pre&gt;
&lt;p&gt;実行してみる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gradle run

&amp;gt; Task :run
text is empty!

BUILD SUCCESSFUL in 1s
2 actionable tasks: 2 executed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;無からライブラリを使ったコードを実行できるところまで構築できた。他にもテストのための設定も必要になるだろうけど、Javaプラグインや依存関係の設定方法をもう少し調べれば難しくないだろう。&lt;/p&gt;
&lt;h1&gt;まとめ&lt;/h1&gt;
&lt;p&gt;ここまでで学んだことを整理する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ルートディレクトリに&lt;code&gt;build.gradle&lt;/code&gt;があればgradleはとりあえず動く。&lt;/li&gt;
&lt;li&gt;JavaプラグインでJavaのソースコードのビルドや依存関係に関するタスクが使えるようになる。&lt;code&gt;src/{main,text}/java/&lt;/code&gt;以下にソースコードを置くことでビルドできる。&lt;/li&gt;
&lt;li&gt;さらに、Javaプラグインを内包するApplicationプラグインを使うことで実行できるようになる。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>ミニマムなgradleプロジェクト</title>
    <updated>2022-01-25T23:39:00+00:00</updated>
    <dc:date>2022-01-25T23:39:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/466/</id>
    <link href="https://blog.naoty.dev/466/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;./database-design-and-implementation.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./database-design-and-implementation.jpg&quot; alt=&quot;Database Design and Implementation&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://link.springer.com/book/10.1007/978-3-030-33836-7&quot;&gt;https://link.springer.com/book/10.1007/978-3-030-33836-7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;昨年末に注文して1ヶ月くらい経ってようやく届いた。データベースについて深く理解したいと思って&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873118703/&quot;&gt;データ指向アプリケーションデザイン&lt;/a&gt;などを読んでいたんだけど、文字だけだと理解できない派なので、今年はデータベースを自作する本に挑戦してみようと思った。&lt;/p&gt;
&lt;p&gt;前書きだけ読んでみたけど、どうやらボストン大学でCSを教えている方が書いている本で、大学のテキストとして使われているみたいだ。DBはJavaで作るみたいなので、Javaの復習にもなりそう。洋書だし続けられるか若干不安ではあるけど、手を動かしながらコツコツ読み進めていきたい。&lt;/p&gt;</summary>
    <title>Database Design and Implementationを読み始めた</title>
    <updated>2022-01-21T22:08:00+00:00</updated>
    <dc:date>2022-01-21T22:08:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/465/</id>
    <link href="https://blog.naoty.dev/465/"/>
    <summary>&lt;p&gt;VSCodeで作業メモをとりながら作業していると、作業した時間を記録しておくために現在時刻のタイムスタンプをｽｯと出したくなる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Preferences: Configure User Snippets&lt;/code&gt;からmarkdownを選んで、以下のようにスニペットを登録しておくと便利。&lt;code&gt;$CURRENT_YEAR&lt;/code&gt;みたいな変数が組み込みで備わっているようだ。&lt;/p&gt;
&lt;pre lang=&quot;json&quot; class=&quot;highlight highlight-json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;prefix&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[$CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND]&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Insert timestamp&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;ただし、デフォルトだとmarkdownでは補完が効かないはずなので、以下の設定も追加する必要がある。&lt;/p&gt;
&lt;pre lang=&quot;json&quot; class=&quot;highlight highlight-json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;[markdown]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;editor.quickSuggestions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;</summary>
    <title>VSCodeで現在時刻をｽｯと出す</title>
    <updated>2022-01-17T21:43:00+00:00</updated>
    <dc:date>2022-01-17T21:43:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/464/</id>
    <link href="https://blog.naoty.dev/464/"/>
    <summary>&lt;p&gt;古くからある有名な問題なのだけど、文章で何回読んでも頭にすんなり入らないので、できるだけシンプルに理解するため図を書いて整理してみた。&lt;/p&gt;
&lt;h1&gt;Dirty Reads&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;./dirty-reads.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./dirty-reads.png&quot; alt=&quot;Dirty Reads&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コミットしていない変更が他のトランザクションから見える。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Dirty Writes&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;./dirty-writes.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./dirty-writes.png&quot; alt=&quot;Dirty Writes&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コミットしていない変更が他のトランザクションに上書きされる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Non-Repeatable Reads&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;./nonrepeatable-reads.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./nonrepeatable-reads.png&quot; alt=&quot;Non-Repeatable Reads&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同じトランザクションでも読み取るタイミングによって結果が変わり整合性がとれなくなる。&lt;/li&gt;
&lt;li&gt;Dirty Readsとの違いはコミットされた変更によっても影響を受ける点。&lt;/li&gt;
&lt;li&gt;バックアップや分析用途でのクエリで問題になりうる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Lost Updates&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;./lost-updates.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./lost-updates.png&quot; alt=&quot;Lost Updates&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2つ目の変更が1つ目の変更を踏まえていないため、1つ目の変更が失われる。&lt;/li&gt;
&lt;li&gt;前の値に基づいて変更する処理が並行する場合に発生する。&lt;/li&gt;
&lt;li&gt;例: カウンターの更新、JSONの書き換え&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Phantom Reads&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;./phantom-reads.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./phantom-reads.png&quot; alt=&quot;Phantom Reads&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;変更すべきか判断する条件が判断後に別のトランザクションによって影響を受ける。&lt;/li&gt;
&lt;li&gt;「条件の確認」「変更すべきか判断」「変更」という3ステップの処理が並行する場合に発生する。&lt;/li&gt;
&lt;li&gt;例: 会議室の予約（会議室が空いていれば予約）、商品の購入（在庫があれば購入）&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>図で理解するトランザクション競合パターン</title>
    <updated>2022-01-15T23:16:00+00:00</updated>
    <dc:date>2022-01-15T23:16:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/463/</id>
    <link href="https://blog.naoty.dev/463/"/>
    <summary>&lt;p&gt;MySQLのネクストキーロックについて理解できていない気がしてきたので、あらためて手を動かしながら動作を理解する。前提として、分離レベルは&lt;code&gt;REPEATABLE-READ&lt;/code&gt;で考える。&lt;/p&gt;
&lt;p&gt;下のようなテーブルを例にとる。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;また、すでに下のようにデータが入っているとする。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+----+-------+-----+
| id | name  | age |
+----+-------+-----+
| 1  | alice | 20  |
| 2  | bob   | 30  |
| 3  | carol | 40  |
| 4  | dave  | 50  |
+----+-------+-----+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このとき、下のクエリがどのような範囲にロックを取得するか確認する。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BETWEEN&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FOR&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;インデックスあり&lt;/h1&gt;
&lt;p&gt;まずは&lt;code&gt;age&lt;/code&gt;カラムにインデックスがある場合のネクストキーロックの動作を確認する。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;START&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRANSACTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BETWEEN&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FOR&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;+----+-------+-----+
| id | name  | age |
+----+-------+-----+
| 2  | bob   | 30  |
| 3  | carol | 40  |
+----+-------+-----+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この状態で別セッションから&lt;code&gt;users&lt;/code&gt;テーブルに操作を試みる。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'naoty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Query OK, 1 row affected&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'naoty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Lock wait timeout exceeded; try restarting transaction&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'naoty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Lock wait timeout exceeded; try restarting transaction&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'naoty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Query OK, 1 row affected&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Query OK, 1 row affected&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Lock wait timeout exceeded; try restarting transaction&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Lock wait timeout exceeded; try restarting transaction&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Lock wait timeout exceeded; try restarting transaction&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ネクストキーロックの範囲を整理するとこうなる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;マッチした行とその前の行の間（末端含む）のギャップロック&lt;/li&gt;
&lt;li&gt;マッチした行のレコードロック&lt;/li&gt;
&lt;li&gt;マッチした行の次の行のレコードロック&lt;/li&gt;
&lt;li&gt;マッチした行とその次の行の間（末端含まない）のギャップロック&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分かりづらいので図にしてみた（赤い部分がロック）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;next-key-lock.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;next-key-lock.png&quot; alt=&quot;next key lock&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;インデックスなし&lt;/h1&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;START&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRANSACTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BETWEEN&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FOR&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'naoty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Lock wait timeout exceeded; try restarting transaction&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'naoty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Lock wait timeout exceeded; try restarting transaction&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'naoty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Lock wait timeout exceeded; try restarting transaction&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'naoty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Lock wait timeout exceeded; try restarting transaction&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Lock wait timeout exceeded; try restarting transaction&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Lock wait timeout exceeded; try restarting transaction&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Lock wait timeout exceeded; try restarting transaction&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Lock wait timeout exceeded; try restarting transaction&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;スキャンされた行すべてに対してネクストキーロックを取得しているため、ことごとく操作が失敗している。&lt;/p&gt;</summary>
    <title>ネクストキーロックの範囲</title>
    <updated>2022-01-09T22:07:00+00:00</updated>
    <dc:date>2022-01-09T22:07:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/462/</id>
    <link href="https://blog.naoty.dev/462/"/>
    <summary>&lt;p&gt;終盤力に課題を感じていたため、詰将棋の本を探していたところ、ひと目シリーズの「&lt;a href=&quot;https://amzn.to/3zHabzP&quot;&gt;将棋・ひと目の詰み&lt;/a&gt;」がKindle Unlimitedにあったのでさっそく読んでみた。&lt;/p&gt;
&lt;p&gt;通常の詰将棋とは違い、使わない持ち駒があったり実戦的な形が多いのが特徴的だった。第2章の「振り飛車対居飛車編」が振り飛車目線で居飛車側を詰ませる問題が60問以上あり、振り飛車党の自分にはとても勉強になった。また、第3章の「居飛車対振り飛車編」も逆に居飛車目線で振り飛車を詰ませる問題となっており、詰まされる形を勉強することができてよかった。&lt;/p&gt;
&lt;p&gt;ひと目で解けなかった問題をブックマークして忘れた頃にもう一度解きたい。&lt;/p&gt;</summary>
    <title>「将棋・ひと目の詰み」を読んだ</title>
    <updated>2022-01-09T11:46:00+00:00</updated>
    <dc:date>2022-01-09T11:46:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/461/</id>
    <link href="https://blog.naoty.dev/461/"/>
    <summary>&lt;p&gt;年末、Pixel 3がホームボタンを押していないのに押されたときのような動作を繰り返したり、再起動を繰り返すようになってしまった。修理店に持ち込んだところ、ゴーストタッチと呼ばれる現象とリンゴ（Google）ループと呼ばれる現象が同時に起きているとのことだった。修理には4万円程度かかるとのことだったので、Pixel 6を買うことにした。&lt;/p&gt;
&lt;p&gt;覚えている限りだと、スマートフォン遍歴はこうなる。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;iPhone 3GS&lt;/li&gt;
&lt;li&gt;iPhone 5&lt;/li&gt;
&lt;li&gt;iPhone 6&lt;/li&gt;
&lt;li&gt;Pixel 3&lt;/li&gt;
&lt;li&gt;Pixel 6&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pixel 3を買ったのが&lt;a href=&quot;./351/&quot;&gt;当時の記事&lt;/a&gt;によると3年前だったので値段の割には短命だった。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;./pixel6.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./pixel6.jpg&quot; alt=&quot;Pixel 6&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;Pixel 6とPopGrip Slide Stretch&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;写真のとおり、Pixel 6の裏に&lt;a href=&quot;https://amzn.to/33ai1WN&quot;&gt;PopGrip Slide Stretch&lt;/a&gt;というスマートフォンホルダーを取り付けてみた。以前は貼り付けるタイプのホルダーを使っていたけど、粘着力が徐々に弱くなって剥がれてしまうのと、ケースに貼り付けるのに抵抗感があったため、取り付けるタイプにしてみた。&lt;/p&gt;
&lt;p&gt;2, 3日操作してみた印象はこんな感じ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;縦が長くなったのでTwitterが見やすくなった&lt;/li&gt;
&lt;li&gt;指紋認証が後ろから前になったので使いやすくなった&lt;/li&gt;
&lt;li&gt;PopGripのおかげで片手で操作できるようになったものの、かなり重く感じる&lt;/li&gt;
&lt;li&gt;写真は正直あんまり違いがわからなかった&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Pixel 6を買った</title>
    <updated>2022-01-06T19:23:00+00:00</updated>
    <dc:date>2022-01-06T19:23:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/460/</id>
    <link href="https://blog.naoty.dev/460/"/>
    <summary>&lt;h1&gt;作ったもの&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://github.com/naoty/todo&quot;&gt;naoty/todo&lt;/a&gt;&lt;/strong&gt;: 細かいバグがあったのと、長期的にメンテナンスしていくことを踏まえてTODO管理ツールをGoからRubyで書き直した。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://github.com/naoty/blog&quot;&gt;naoty/blog&lt;/a&gt;&lt;/strong&gt;: このブログを生成するツールをRubyで書いた。また、過去のブログなどのコンテンツを &lt;a href=&quot;https://blog.naoty.dev&quot;&gt;https://blog.naoty.dev&lt;/a&gt; に移した。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;家計管理アプリケーション&lt;/strong&gt;: 家を建てた結果、修繕費の積立や固定資産税など今までなかった費用が発生するようになった。毎月発生する費用だけでなく年単位で発生する費用まで管理するためのWebアプリケーションをいま作っている。学習目的も兼ねてフロントエンドにNext.js in TypeScriptを使い、バックエンドにRailsを使い、GraphQLで通信するようにしている。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;読んだもの&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873118703/&quot;&gt;データ指向アプリケーションデザイン&lt;/a&gt;&lt;/strong&gt;: 最後まで読むことを目標としていたけど、達成できなかった。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/mastering-apache-cassandra/9781789131499/&quot;&gt;Mastering Apache Cassandra 3.x&lt;/a&gt;&lt;/strong&gt;: 仕事でCassandraを扱っていたので、気になるところだけ読んだ。日本語では3系のCassandraのまとまった情報がないため、とても助かった。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;買ったもの&lt;/h1&gt;
&lt;p&gt;金を借り、土地を買い、家を建て、庭を作った。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;./441/&quot;&gt;家づくり振り返り 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;./445/&quot;&gt;家づくり振り返り 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あとは&lt;a href=&quot;./459/&quot;&gt;前回の記事&lt;/a&gt;に書いた。&lt;/p&gt;
&lt;h1&gt;仕事&lt;/h1&gt;
&lt;p&gt;だいたい以下のようなことをした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Railsアプリケーションのチューニング&lt;/li&gt;
&lt;li&gt;大量に書き込まれるデータを非同期にCassandraに書き込んでRailsアプリケーションから配信する機能の開発&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;将棋&lt;/h1&gt;
&lt;p&gt;今年は将棋にハマってた一年だった。もともと高校時代の部活で将棋をやっていたんだけど、YouTubeでプロ棋士の動画を見たり、Abemaトーナメントを見ていたりして、将棋熱が再燃してきた。&lt;/p&gt;
&lt;h1&gt;新しい生活&lt;/h1&gt;
&lt;p&gt;9月に5年以上住んでいた練馬を離れて新しい街に住み始めた。近くの大きな駅まで徒歩25分くらいかかるけど、駅まで行けばいろんなお店があってとても便利。歩道が広いし、自転車レーンもあるし、通行しやすくていい。また、大きめの道はすべて並木が植えられているので、歩いていて気持ちいい。&lt;/p&gt;
&lt;h1&gt;来年の目標&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;プログラミング&lt;/strong&gt;: データベースの仕組みに興味があるので、引き続き勉強していきたい。まずは&lt;a href=&quot;https://link.springer.com/book/10.1007/978-3-030-33836-7&quot;&gt;Database Design and Implementation&lt;/a&gt;を買ったので読破したい。そして、仕事でKafkaを扱う機会がありそうなので、Kafkaについても勉強していきたい。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;将棋&lt;/strong&gt;: 二段に昇段したい。終盤力に課題があるので、詰将棋をこなしていきたい。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;その他&lt;/strong&gt;: 来年35歳になるので、そろそろ健康を意識してなんでもいいから運動習慣を身につけたい。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>2021年振り返り</title>
    <updated>2021-12-31T14:29:00+00:00</updated>
    <dc:date>2021-12-31T14:29:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/459/</id>
    <link href="https://blog.naoty.dev/459/"/>
    <summary>&lt;p&gt;今年は家を建てて生活がガラッと変わったため、買うものが多かった。その中でも特によかったものをまとめてみた。家とか土地とかその他設備類はあんまり参考にならないと思うので除いた。&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;https://jp.sharp/hotcook/products/knhw24f/&quot;&gt;シャープ ヘルシオ ホットクック KN-HW24F&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;./hotcook.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./hotcook.jpg&quot; alt=&quot;ホットクック&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;おたまスタンドとホットクック&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;買ったというよりはキャンペーンでたまたまもらった。後述するぶんぶんチョッパーと合わせて料理の手間がかなり減ったため、noshを注文する頻度が減り、食費を節約できた。一番大きいサイズのものをもらったので、夫婦2人ではやや多いと感じることがある。スープを作ってもなかなか消費できない。メインや作りおきは大きめでいいけど、別の用途でもう1台買うかもしれない。&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;https://k-and-a.jp/bbc-24.html&quot;&gt;K&amp;amp;A ぶんぶんチョッパー強化版SUPER 5&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;ホットクックのレシピにはみじん切りがよく出てくる。そこで、ぶんぶんチョッパーを使ってみじん切りにしてホットクックに投入するようになった。従来のモデルでは食洗機に対応していなかったけど、ちょうどいいタイミングで食洗機に対応したモデルが登場したので買ってみた。おかげで料理だけでなく後片付けも時短につながった。&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;https://www.keyuca.com/shopping/user_data/dustbox.php&quot;&gt;KEYUCA arrotsダストボックス&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;フタがしまるとき静かなのがいい。シンプルなので目立たない。複数のゴミ袋をつけられるのも便利だった。&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;https://kinto.co.jp/products/27654&quot;&gt;KINTO SCSトレイ&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;今までランチョンマットを使っていたけど、配膳とマットを兼用できるトレイを買った。はじめは無印のトレイを使っていたけど、角がテーブルに当たってキズができたため、角が丸いトレイを買い直した。持ち手が浮いているため、持ちやすくて便利。&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;https://www.yamajitsu.co.jp/lab/item/%E7%9B%AE%E9%9A%A0%E3%81%97%E5%88%86%E5%88%A5%E3%83%80%E3%82%B9%E3%83%88%E3%83%AF%E3%82%B4%E3%83%B3-%E3%83%88%E3%82%B9%E3%82%AB-3%E5%88%86%E5%88%A5.html&quot;&gt;山崎実業 目隠し分別ダストワゴン&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;./pantry.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./pantry.jpg&quot; alt=&quot;パントリー&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;棚の下にダストワゴン&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ビン、カン、ペットボトル、牛乳パック、もえないゴミを分別して捨てるために買った。ゴミ袋をきれいに隠してくれる。パントリーの棚にちょうどマッチしていて、雰囲気を損ねずにゴミ袋を設置できた。&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;https://www.yamajitsu.co.jp/lab/item/%E3%83%80%E3%83%B3%E3%83%9C%E3%83%BC%E3%83%AB%E3%82%B9%E3%83%88%E3%83%83%E3%82%AB%E3%83%BC%E3%82%BF%E3%83%AF%E3%83%BC.html&quot;&gt;山崎実業 ダンボールストッカー&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;引っ越しやその後の買い物で大量に段ボールが出たので、それらをまとめておくのに役に立った。日常的にもAmazonやnoshやウォーターサーバーの水など頻繁に段ボールが届くので助かっている。&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;https://koncent.jp/?pid=36821193&quot;&gt;+d ペーパーナイフ バーディ&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;インテリアとして出しておけるので、封筒が届いたらすぐにこれで開封できる。&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;https://acchikocchi.jp/%e3%81%82%e3%81%a3%e3%81%a1%e3%81%93%e3%81%a3%e3%81%a1%e3%81%b5%e3%81%8d%e3%82%93-%e5%8e%9a%e6%89%8b%e7%89%88/&quot;&gt;TEIJIN あっちこっちふきん 厚手版&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;食器拭き、台拭き、窓拭きなどいろんなところで使っている。異常に吸水するので家事の時短になっている。ピンクとかグリーンとか浮きやすい色はキッチンでは使わないようにしている。グレーの厚手版が出てほしい。&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;https://www.nitori-net.jp/ec/product/5850422s/&quot;&gt;デコホーム ラバーマルチハンガー&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;室内干しと収納を兼用できるし、襟元を広げずにかけられるので洗濯がとても楽になった。また、プラスチック製なので金属製のポールと擦れたときのイヤな音が出ないのもポイントが高い。こんな感じのズボン/スカートハンガーがあったらほしいんだけど、見当たらない。&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;https://www.nichi-bei.co.jp/jsp/category/tb/arp/&quot;&gt;ニチベイ アルペジオ&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;自分のワークスペースの窓掛けとしてニチベイのアルペジオというバーティカルブラインドを買った。ブラインドの角度をつけて部屋に入る日光を微調整できるだけでなく、カーテンのように横にスライドして窓を開けることもできる。ワークスペースの外がちょうどベランダになっているので、通常のブラインドよりも都合がよかった。また、部屋の一面がすべて窓となっているため、窓掛けにこだわることで部屋の雰囲気がかなり良くなった。&lt;/p&gt;</summary>
    <title>今年買ってよかったもの</title>
    <updated>2021-12-28T18:31:00+00:00</updated>
    <dc:date>2021-12-28T18:31:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/458/</id>
    <link href="https://blog.naoty.dev/458/"/>
    <summary>&lt;p&gt;Cassandraでテーブルを設計する際、どのようなクエリが実行されるのか想定する必要がある。というのも、Cassandraではテーブルへのクエリに多くの制約があるため、これを知らずにテーブルを設計すると期待していたクエリが実行できない事態になってしまう。&lt;/p&gt;
&lt;p&gt;そこで、クエリにどのような制約があるかまとめることにした。例に使うテーブルは以下のようなスキーマで作成した。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access_logs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clustering&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;asc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;asc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;他にもあるかもしれないし、バージョンによって変わりうるが、v3.11.10で検証したところ以下のような制約が見つかった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;パーティションキーは必須&lt;/li&gt;
&lt;li&gt;クラスタリングキーは前方のカラムを省略できない&lt;/li&gt;
&lt;li&gt;プライマリーキーに含まれていないカラムを指定できない&lt;/li&gt;
&lt;li&gt;ORは使えない&lt;/li&gt;
&lt;li&gt;NOTは使えない&lt;/li&gt;
&lt;li&gt;不等号は最後に指定するカラムにしか使えない&lt;/li&gt;
&lt;li&gt;OFFSETは使えない&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;パーティションキーは必須&lt;/h1&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;c1&quot;&gt;--- NG&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;access_logs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2021-01-01 00:00:00'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;--- OK&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;access_logs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20210101&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2021-01-01 00:00:00'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;データを返すノードを決定するためにパーティションキーをすべて指定する必要がある。&lt;/p&gt;
&lt;h1&gt;クラスタリングキーは前方のカラムを省略できない&lt;/h1&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;c1&quot;&gt;--- NG&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;access_logs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20210101&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;--- OK&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;access_logs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20210101&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2021-01-01 00:00:00'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;あるクラスタリングキーよりも前に定義されているクラスタリングキーがあれば、それも指定する必要がある。&lt;/p&gt;
&lt;h1&gt;プライマリーキーに含まれていないカラムを指定できない&lt;/h1&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;c1&quot;&gt;--- NG&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;access_logs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20210101&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2021-01-01 00:00:00'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'GET'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;--- OK&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;access_logs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20210101&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2021-01-01 00:00:00'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'GET'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;ORは使えない&lt;/h1&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;c1&quot;&gt;--- NG&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;access_logs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20210101&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2021-01-01 00:00:00'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2021-01-02 00:00:00'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;--- OK&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;access_logs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20210101&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2021-01-01 00:00:00'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2021-01-02 00:00:00'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;NOTは使えない&lt;/h1&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;c1&quot;&gt;--- NG&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;access_logs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20210101&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2021-01-01 00:00:00'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;--- OK&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;access_logs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20210101&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2021-01-01 00:00:00'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Cassandraがシーケンシャルリードのために設計されており、ランダムリードを生じさせる&lt;code&gt;OR&lt;/code&gt;や&lt;code&gt;NOT&lt;/code&gt;はサポートされていない。&lt;/p&gt;
&lt;h1&gt;不等号は最後に指定するカラムにしか使えない&lt;/h1&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;c1&quot;&gt;--- NG&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;access_logs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20210101&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2021-01-01 00:00:00'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;--- OK&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;access_logs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20210101&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2021-01-01 00:00:00'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;OFFSETは使えない&lt;/h1&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;c1&quot;&gt;--- NG&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;access_logs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20210101&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;limit&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;offset&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;--- OK&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;access_logs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20210101&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;limit&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;LIMIT&lt;/code&gt;は使えるものの&lt;code&gt;OFFSET&lt;/code&gt;が使えないため、SQLのようにページネーションを実装できない。ページネーションの実装については&lt;a href=&quot;/456/&quot;&gt;以前の記事&lt;/a&gt;に書いた。&lt;/p&gt;
&lt;h1&gt;ALLOW FILTERING&lt;/h1&gt;
&lt;p&gt;これらの制約はエラーメッセージにもあるとおり&lt;code&gt;ALLOW FILTERING&lt;/code&gt;で回避することができるが、パフォーマンスに重大な影響をあたえる可能性があるため推奨されていない。詳細については&lt;a href=&quot;/444/&quot;&gt;以前の記事&lt;/a&gt;にも書いている。&lt;/p&gt;</summary>
    <title>Cassandraへのクエリの注意点</title>
    <updated>2021-11-29T18:11:00+00:00</updated>
    <dc:date>2021-11-29T18:11:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/457/</id>
    <link href="https://blog.naoty.dev/457/"/>
    <summary>&lt;p&gt;Cassandraではデータがsstableと呼ばれるファイルにデータを格納している。sstabledumpというツールを使ってこのファイルの中身を見ることでどのようにデータが格納されているか確認してみた。&lt;/p&gt;
&lt;p&gt;まず、例となるテーブルを作ってデータを追加する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cqlsh:hello&amp;gt; create table access_logs (
         ...   date int,
         ...   time timestamp,
         ...   path text,
         ...   method text,
         ...   user_id bigint,
         ...   primary key ((date), time)
         ... ) with clustering order by (time desc);
cqlsh:hello&amp;gt; insert into access_logs (date, time, path, method, user_id) values (20210101, '2021-01-01 00:00:00', '/', 'GET', 1);
cqlsh:hello&amp;gt; insert into access_logs (date, time, path, method, user_id) values (20210101, '2021-01-01 01:00:00', '/', 'GET', 1);
cqlsh:hello&amp;gt; insert into access_logs (date, time, path, method, user_id) values (20210102, '2021-01-02 00:00:00', '/', 'GET', 1);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;書き込まれたデータはすぐにsstableに格納されるわけではなく、memtableと呼ばれるメモリ上の領域に書き込まれ、その後flushによってsstableに書き込まれる。そこで、&lt;code&gt;nodetool flush&lt;/code&gt;を使って手動でflushしてからsstableの中身を確認する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ nodetool flush -- hello access_logs
$ sstabledump data/data/hello/access_logs-725f76b04e4d11ec9a87738bc243f3cf/nb-1-big-Data.db
[
  {
    &quot;partition&quot; : {
      &quot;key&quot; : [ &quot;20210101&quot; ],
      &quot;position&quot; : 0
    },
    &quot;rows&quot; : [
      {
        &quot;type&quot; : &quot;row&quot;,
        &quot;position&quot; : 18,
        &quot;clustering&quot; : [ &quot;2021-01-01 01:00:00.000Z&quot; ],
        &quot;liveness_info&quot; : { &quot;tstamp&quot; : &quot;2021-11-26T00:12:04.653070Z&quot; },
        &quot;cells&quot; : [
          { &quot;name&quot; : &quot;method&quot;, &quot;value&quot; : &quot;GET&quot; },
          { &quot;name&quot; : &quot;path&quot;, &quot;value&quot; : &quot;/&quot; },
          { &quot;name&quot; : &quot;user_id&quot;, &quot;value&quot; : 1 }
        ]
      },
      {
        &quot;type&quot; : &quot;row&quot;,
        &quot;position&quot; : 51,
        &quot;clustering&quot; : [ &quot;2021-01-01 00:00:00.000Z&quot; ],
        &quot;liveness_info&quot; : { &quot;tstamp&quot; : &quot;2021-11-26T00:11:57.459111Z&quot; },
        &quot;cells&quot; : [
          { &quot;name&quot; : &quot;method&quot;, &quot;value&quot; : &quot;GET&quot; },
          { &quot;name&quot; : &quot;path&quot;, &quot;value&quot; : &quot;/&quot; },
          { &quot;name&quot; : &quot;user_id&quot;, &quot;value&quot; : 1 }
        ]
      }
    ]
  },
  {
    &quot;partition&quot; : {
      &quot;key&quot; : [ &quot;20210102&quot; ],
      &quot;position&quot; : 82
    },
    &quot;rows&quot; : [
      {
        &quot;type&quot; : &quot;row&quot;,
        &quot;position&quot; : 100,
        &quot;clustering&quot; : [ &quot;2021-01-02 00:00:00.000Z&quot; ],
        &quot;liveness_info&quot; : { &quot;tstamp&quot; : &quot;2021-11-26T00:12:12.925794Z&quot; },
        &quot;cells&quot; : [
          { &quot;name&quot; : &quot;method&quot;, &quot;value&quot; : &quot;GET&quot; },
          { &quot;name&quot; : &quot;path&quot;, &quot;value&quot; : &quot;/&quot; },
          { &quot;name&quot; : &quot;user_id&quot;, &quot;value&quot; : 1 }
        ]
      }
    ]
  }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sstabledumpの結果からいくつかのことが分かる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;パーティション毎に行がまとめられている。&lt;/li&gt;
&lt;li&gt;パーティション内の各行はクラスタリングキーでソートされている（&lt;code&gt;clustering order&lt;/code&gt;で指定したとおり&lt;code&gt;time&lt;/code&gt;の降順になっている）。&lt;/li&gt;
&lt;li&gt;プライマリーキー以外の値は各行のセルと呼ばれる領域に格納されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このことからも以下のようなことが自然と理解できる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プライマリーキー以外のカラムを&lt;code&gt;where&lt;/code&gt;に指定するとパーティションをまたいで取得することになる&lt;/li&gt;
&lt;li&gt;クラスタリングキーのソート順と異なる&lt;code&gt;order by&lt;/code&gt;が非効率&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;sstabledumpを通じてまたひとつCassandraへの理解が深まった。&lt;/p&gt;</summary>
    <title>sstabledump</title>
    <updated>2021-11-26T09:13:00+00:00</updated>
    <dc:date>2021-11-26T09:13:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/456/</id>
    <link href="https://blog.naoty.dev/456/"/>
    <summary>&lt;p&gt;Cassandraのさまざまな操作に使われるCQLは見た目こそSQLに似ているものの、実態はかなり異なるため、Cassandraとやり取りをおこなうアプリケーションを実装する際にはその差分をよく理解しておく必要がある。&lt;/p&gt;
&lt;p&gt;今回はページネーションの実装について詳しく調べた。&lt;/p&gt;
&lt;h1&gt;CQLでの実装&lt;/h1&gt;
&lt;p&gt;CQLには&lt;code&gt;LIMIT&lt;/code&gt;はあるものの&lt;code&gt;OFFSET&lt;/code&gt;がないため、SQLのようにページネーションを実装することができない。&lt;/p&gt;
&lt;h1&gt;Native Protocol&lt;/h1&gt;
&lt;p&gt;Cassandraと各言語のDriverとのやり取りに関する仕様をまとめたNative Protocolには、ページネーションに関する仕様が含まれている（&lt;a href=&quot;https://github.com/apache/cassandra/blob/trunk/doc/native_protocol_v4.spec#L1009&quot;&gt;リンク&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;result_page_size&lt;/code&gt;を指定すると、クエリ結果を指定した値の行数にページを分割する。また、クエリ結果には&lt;code&gt;paging_state&lt;/code&gt;と呼ばれる値が含まれており、それを使って次ページを取得できるようになっている。&lt;/p&gt;
&lt;h1&gt;Railsでの実装&lt;/h1&gt;
&lt;p&gt;Ruby Driverを使ってRailsアプリケーションからCassandraへのクエリ結果をページネーションする例を考える。以下のようなテーブルからアクセスログを取得したいとする。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access_logs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TIMESTAMP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLUSTERING&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DESC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;access_logs&lt;/code&gt;テーブルにアクセスするためのmodelを以下のように実装する。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# app/models/access_log.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccessLog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CassandraRecord&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;limit: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;paging_state: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
        SELECT
          time, method, path
        FROM
          &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyspace&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;.access_logs
        WHERE
          day = :day
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;      CQL&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;arguments: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;day: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%Y%m%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;page_size: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;paging_state: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paging_state&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Native Protocolに従い&lt;code&gt;Session#execute&lt;/code&gt;に&lt;code&gt;page_size&lt;/code&gt;を渡すことでページネーションを有効にしている。また、&lt;code&gt;paging_state&lt;/code&gt;を渡すことで次ページを取得できるようにしている。&lt;/p&gt;
&lt;p&gt;親クラスの&lt;code&gt;CassandraRecord&lt;/code&gt;でCassandraと接続するためのセットアップをRuby Driverで実装する。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# app/models/cassandra_record.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CassandraRecord&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;session&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:cassandra_session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cluster&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Cassandra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;hosts: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CASSANDRA_HOSTS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;keyspace&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CASSANDRA_KEYSPACE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;次にcontrollerは以下のように実装する。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccessLogsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;PAGING_STATE_SALT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cc79c9014617e4b3d4fd2e7326619913&quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;before_action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:decrypt_paging_state&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AccessLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;day: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;paging_state: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@paging_state&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last_page?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;encrypted_paging_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encryptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encrypt_and_sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;paging_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;next_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access_logs_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;paging_state: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encrypted_paging_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Link&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%[&amp;lt;#{next_url}&amp;gt;; rel=&quot;next&quot;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;time: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;path: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;method: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decrypt_paging_state&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:paging_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@paging_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encryptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decrypt_and_verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:paging_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encryptor&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@encryptor&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@encryptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;key_generator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;KeyGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;secret_key_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MessageEncryptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key_len&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key_generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;generate_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PAGING_STATE_SALT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@encryptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MessageEncryptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;クエリ結果に含まれる&lt;code&gt;paging_state&lt;/code&gt;を&lt;code&gt;ActiveSupport::MessageEncryptor&lt;/code&gt;を使い暗号化し次ページのクエリパラメータとして付与している。また、クエリパラメータの&lt;code&gt;paging_state&lt;/code&gt;を復号しmodelに渡している。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;paging_state&lt;/code&gt;にはCassandraに内部情報がエンコードされているため、外部に公開する際には暗号化することが推奨されている。&lt;code&gt;ActiveSupport::MessageEncryptor&lt;/code&gt;はこのようなデータを暗号化、復号する用途に合っていそうなので使ってみた。&lt;/p&gt;
&lt;h1&gt;traceで走査行数を確認する&lt;/h1&gt;
&lt;p&gt;Native Protocolを使ったページネーションが本当に一部の行のみを取得しているのか確認するため、traceを有効にする。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# app/models/access_log.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccessLog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CassandraRecord&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;limit: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;paging_state: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
        SELECT
          time, method, path
        FROM
          &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyspace&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;.access_logs
        WHERE
          day = :day
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;      CQL&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;day: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%Y%m%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;arguments: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;page_size: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;paging_state: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paging_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;trace: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;log_trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execution_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;log_trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;

      &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Cassandra trace&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;  &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Session#execute&lt;/code&gt;に&lt;code&gt;trace: true&lt;/code&gt;を渡すことでtraceを有効にしている。そして、traceで取得したアクティビティをログに出力すると以下のようになった。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Started GET &quot;/access_logs?limit=1&amp;amp;paging_state=3FRoptnPMhywVQ3dLdDDj87slY0XshvxltQ%3D--7E6TsIMY7px87omJ--n8sLyC7y5qyU5Cm5L0wJ4Q%3D%3D&quot; for 172.19.0.1 at 2021-10-24 13:07:03 +0000
Processing by AccessLogsController#index as */*
  Parameters: {&quot;limit&quot;=&amp;gt;&quot;1&quot;, &quot;paging_state&quot;=&amp;gt;&quot;3FRoptnPMhywVQ3dLdDDj87slY0XshvxltQ=--7E6TsIMY7px87omJ--n8sLyC7y5qyU5Cm5L0wJ4Q==&quot;}
Cassandra trace
  Executing single-partition query on access_logs
  Acquiring sstable references
  Skipped 0/0 non-slice-intersecting sstables, included 0 due to tombstones
  Merged data from memtables and 0 sstables
  Read 1 live rows and 0 tombstone cells
Completed 200 OK in 116ms (Views: 1.2ms | Allocations: 1192)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;page_size&lt;/code&gt;を1にした場合はたしかに1件のみreadしているようだ。&lt;/p&gt;</summary>
    <title>Cassandraでのページネーションの実装</title>
    <updated>2021-10-24T23:07:00+00:00</updated>
    <dc:date>2021-10-24T23:07:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/455/</id>
    <link href="https://blog.naoty.dev/455/"/>
    <summary>&lt;h1&gt;これまで&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;2020/8 ~ 2021/4の出来事は&lt;a href=&quot;/441/&quot;&gt;前回の記事&lt;/a&gt;に書きました。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;2021/5&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;地鎮祭をおこなった。地鎮祭自体はやってもやらなくてもよかったけど、どちらかと言うと、これを機に工事担当の方や近所へのあいさつをしておきたかった。&lt;/li&gt;
&lt;li&gt;地鎮祭が済んだあと、工事がはじまった。以後、隔週で休日に現地まで行って進捗を確認していた。5月末くらいには基礎はほぼできており、思っていた以上のスピードで工事が進んでいた。&lt;/li&gt;
&lt;li&gt;4月の契約後にハウスメーカー（以下、HM）の担当者と外構計画の打ち合わせがあると思って待っていたけど、おこなわれなかった。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;2021/6&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;6月中には外側は完成した。内装工事の方が時間がかかるとのことだった。&lt;/li&gt;
&lt;li&gt;HM担当者をつついてみたところ、外構についての打ち合わせが6月下旬にようやくおこなわれ、HMとは別の業者に外構の設計を依頼するために必要な図面を手に入れた。&lt;/li&gt;
&lt;li&gt;セコムとの打ち合わせをおこなった。セキュリティ機器の工事が家の内装工事のタイミングにギリギリ間に合うことがここでわかったので、変更契約後、工事が始まるまでに本来ならセコムなどと話を済ませておいた方が本当はいいのかもしれない。&lt;/li&gt;
&lt;li&gt;火災保険の担当者と打ち合わせをおこない、保障内容を決定した。うちの土地はハザードマップ上は安全なので、水害の保証は最小限に抑えた。&lt;/li&gt;
&lt;li&gt;入居2ヶ月前のタイミングでNURO光の工事予約を引き渡しから数日後にとった。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;./%E9%9D%92%E7%A9%BA%E3%81%A8%E9%89%84%E9%AA%A8.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./%E9%9D%92%E7%A9%BA%E3%81%A8%E9%89%84%E9%AA%A8.jpg&quot; alt=&quot;青空と鉄骨&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;青空と鉄骨&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1&gt;2021/7&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;工事は内装工事がおこなわれていた。断熱材や柱がむきだしの状態の家におじゃまして柱に落書きした。&lt;/li&gt;
&lt;li&gt;この頃は家づくりに疲れ果てて仕事や開発に専念していたかもしれない。ほぼ進捗がない。&lt;/li&gt;
&lt;li&gt;あんまり関係ないけどコロナワクチンを摂取した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;2021/8&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;HMとは別の外構業者に図面を渡して、おおまかな提案をしてもらった。HMからの提案よりも内容がよかった。ただ、業者も繁忙期らしく着手が11月になるとのことだった。もっと早く外構も進められたらよかった。&lt;/li&gt;
&lt;li&gt;ダイニングテーブルやベッド、冷蔵庫など必要な家具・家電を買いに行った。&lt;/li&gt;
&lt;li&gt;月末に最終確認をおこない、家が引き渡された。引っ越しまで3週間ほど猶予がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;./%E8%A7%A3%E4%BD%93%E3%81%95%E3%82%8C%E3%82%8B%E4%BC%9A%E5%A0%B4.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./%E8%A7%A3%E4%BD%93%E3%81%95%E3%82%8C%E3%82%8B%E4%BC%9A%E5%A0%B4.jpg&quot; alt=&quot;解体される会場&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;家具を買った帰りに見た光景&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1&gt;2021/9&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;引っ越したあとに必要となる細々としたものを注文し、休日に新居で受け取っていた。&lt;/li&gt;
&lt;li&gt;カーテンを買いに行ったが、タイミングがおそすぎて受け取りが10月頭（これを書いている日の朝方）になってしまった。カーテンも採寸などちゃんとやろうとすると、そこそこ時間がかかるので早めに動いた方がよかった。&lt;/li&gt;
&lt;li&gt;外構業者と具体的な打ち合わせを進めた。これからの季節は植物の選択肢がどんどん少なくなってくるため、植栽だけ春ごろに延期する可能性も出てきた。キャッシュフローを考えるとそのほうがありがたい気もする。&lt;/li&gt;
&lt;li&gt;連休を使って引っ越しした。役所での手続きや前の家の退去手続を連休中に済ませた。&lt;/li&gt;
&lt;li&gt;住宅ローンの契約をおこなった。具体的な毎月支払う金額が判明した。事前にFPとかなり相談して予算を決めていたものの、あらためて無理なく支払える範囲に収まってよかった。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;今後&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;住宅ローンが振り込まれ、HMに工事代金を支払う。&lt;/li&gt;
&lt;li&gt;生活を整えて家のポテンシャルを引き出していきたい。&lt;/li&gt;
&lt;li&gt;家はできたものの外構がまだで庭が手つかずの状態になっているため、外構業者との打ち合わせを進める。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>家づくり振り返り 2</title>
    <updated>2021-10-02T22:02:00+00:00</updated>
    <dc:date>2021-10-02T22:02:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/454/</id>
    <link href="https://blog.naoty.dev/454/"/>
    <summary>&lt;p&gt;テストに関連するパラメータが複数あると、その組み合わせの数が膨れ上がる。ただし、あるパラメータがある値の場合は別のパラメータがどんな値であってもテスト結果には影響しない、ということがある。&lt;/p&gt;
&lt;p&gt;こうしたどれでもいいパラメータの値を扱う方針は3つあると思う。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;どれか1つの値に固定してテストする&lt;/li&gt;
&lt;li&gt;とりうる値すべてをテストする&lt;/li&gt;
&lt;li&gt;とりうる値から1つランダムに選んでテストする&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;例: ユーザー登録&lt;/h1&gt;
&lt;p&gt;emailとpasswordがどちらも入力されていれば成功、いずれかが入力されていなければ失敗、という単純化した例で考えてみる。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;email&lt;/th&gt;
&lt;th&gt;password&lt;/th&gt;
&lt;th&gt;結果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;有&lt;/td&gt;
&lt;td&gt;有&lt;/td&gt;
&lt;td&gt;成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;有&lt;/td&gt;
&lt;td&gt;無&lt;/td&gt;
&lt;td&gt;失敗&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;無&lt;/td&gt;
&lt;td&gt;有&lt;/td&gt;
&lt;td&gt;失敗&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;無&lt;/td&gt;
&lt;td&gt;無&lt;/td&gt;
&lt;td&gt;失敗&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;この場合、emailが入力されていない場合はpasswordがどの値であっても失敗するので、passwordの値をどう扱うかそれぞれの方針で考えてみる。&lt;/p&gt;
&lt;p&gt;例としてRubyとRSpecを使うけど、言語とフレームワークには依存しない。&lt;/p&gt;
&lt;h2&gt;1. どれか1つの値に固定してテストする&lt;/h2&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;POST /users&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when email is empty&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# passwordの値を固定する&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;fails to create a user&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;pros&lt;/strong&gt;: 組み合わせの数を抑えられる。実行時間が短くなるし、テストコードも読みやすくなる。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;cons&lt;/strong&gt;: passwordの値が空でも結果が変わらないというのが実装者の勘違いだった場合、テストすべきケースを取りこぼすことになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2. とりうる値すべてをテストする&lt;/h2&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;POST /users&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when email is empty&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# passwordがとりうる値どちらもテストする&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;and password is empty&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;fails to create a user&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;but password isn't empty&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;fails to create a user&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;pros&lt;/strong&gt;: 上記のようなテストケースのとりこぼしが少なくなる。それでもとりうる値が網羅できていなければとりこぼしは生じうる。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;cons&lt;/strong&gt;: 組み合わせの数が膨れ上がる。今回のような単純化したケースでは問題にはならないものの、現実にははるかに多くのパラメータととりうる値の組み合わせが存在する。その分、実行時間が伸び、テストコードも複雑になる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;consの補足として、現実世界ではすべての組み合わせを網羅できず、とりうる値の一部をテストすることが多いと思う。その場合はprosで上げたような利点も部分的にしか享受できないことになる。&lt;/p&gt;
&lt;h2&gt;3. とりうる値から1つランダムに選んでテストする&lt;/h2&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;POST /users&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when email is empty&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# passwordの値をとりうる値からランダムに選ぶ&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;fails to create a user&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;pros&lt;/strong&gt;: 組み合わせの数を抑えられる。実行するテストケースは1つのみなので1.と同じ。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;pros&lt;/strong&gt;: CIで継続的にテストを実行することでとりうる値の組み合わせを網羅でき、上記のようなテストケースのとりこぼしが少なくなる。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;cons&lt;/strong&gt;: 予期しない形でテストが失敗することが出てくるため、チームに混乱をもたらすかもしれない。例えば、自分の変更とは無関係な場所でテストが落ちることがあると、誰がそのテストをパスさせるかコミュニケーションが必要になる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;補足としては、テストで乱数を使うと再現できないのでは？というツッコミが考えられる。テスティングフレームワークによるかもしれないが、失敗したときのシード値を再利用することで再現できるため、この点は特に問題はないと思う。&lt;/p&gt;
&lt;h1&gt;個人的見解&lt;/h1&gt;
&lt;p&gt;個人的にはまず3.を採用したいと考える。その上で開発上の懸念が出てくるようであれば1.を採用する。2.は現実的にはconsがprosを上回っていると感じるため、採用しないだろう。&lt;/p&gt;</summary>
    <title>どれでもいいテストパラメータの扱い</title>
    <updated>2021-09-05T19:43:00+00:00</updated>
    <dc:date>2021-09-05T19:43:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/453/</id>
    <link href="https://blog.naoty.dev/453/"/>
    <summary>&lt;p&gt;最近&lt;a href=&quot;https://github.com/naoty/todo&quot;&gt;naoty/todo&lt;/a&gt;をGoからRubyで書き直したのだけど、これまで何度もCLIアプリケーションを異なる言語で書き直してきて、設計方針が自分の中で固まってきたので、忘れないうちに言語化しておきたいと思う。&lt;/p&gt;
&lt;p&gt;CLIアプリケーションを作るとき、Command、Model、Repositoryの3つの責務を分けて実装している。アプリケーションによってはここに異なる責務を追加している。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;./diagram.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./diagram.png&quot; alt=&quot;diagram&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;責務と依存関係&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1&gt;Command&lt;/h1&gt;
&lt;p&gt;Commandはシェルとのやり取りを行う。コマンドライン引数、標準入出力、標準エラー出力、終了ステータス、環境変数などを扱う。Rubyで言うと、&lt;code&gt;ARGV&lt;/code&gt;や&lt;code&gt;STDIN&lt;/code&gt;、さらに&lt;code&gt;Kernel#.exit&lt;/code&gt;といったシステムコールはCommandで扱う。&lt;/p&gt;
&lt;p&gt;コマンドライン引数をパースして、実行すべき処理を判定し、RepositoryやModelを呼び出す。RepositoryやModelで標準入出力を扱いたい場合、Commandから入出力のインターフェイスを持つオブジェクトを渡す。Rubyだと&lt;code&gt;IO&lt;/code&gt;オブジェクト、Goだと&lt;code&gt;io.Reader&lt;/code&gt;や&lt;code&gt;io.Writer&lt;/code&gt;が該当する。&lt;/p&gt;
&lt;h1&gt;Model&lt;/h1&gt;
&lt;p&gt;Modelはアプリケーションが扱うドメインを表現する。CLIアプリケーションであっても、Webアプリケーションであっても、Modelのコードは扱うドメインが変わらない限り不変のはず。&lt;/p&gt;
&lt;p&gt;他の責務を持つオブジェクトには依存せず、プレーンな実装になることが多い。ただ、GoだとJSONのためのアノテーションがModelに含まれることがあり、含めるべきか個人的には迷いがある。&lt;/p&gt;
&lt;h1&gt;Repository&lt;/h1&gt;
&lt;p&gt;RepositoryはModelが表すオブジェクトをストレージに永続化したり、ストレージからModelを取得したりする。ストレージはファイルシステムかもしれないし、Webサービスかもしれない。CLIアプリケーションを作るときはファイルシステムをストレージに使うことが多い。Modelを永続化可能な形式にエンコードしたり、逆に取得する際にはデコードしたりする実装も含まれる。経験上、Repositoryの実装が一番泥臭くて複雑になりやすい。&lt;/p&gt;
&lt;p&gt;RepositoryのおかげでCommandはどうやってModelを永続化し、どこから取得するか詳細を知る必要がなくなり、テストが非常にやりやすくなる。&lt;/p&gt;</summary>
    <title>CLIアプリケーションの設計</title>
    <updated>2021-08-08T18:15:00+00:00</updated>
    <dc:date>2021-08-08T18:15:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/452/</id>
    <link href="https://blog.naoty.dev/452/"/>
    <summary>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/451/&quot;&gt;その1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;その2&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Redisで予約数を管理する&lt;/h1&gt;
&lt;p&gt;予約数をMySQLではなくRedisで管理することで高速化できないか試してみる。&lt;/p&gt;
&lt;p&gt;すでにRedisはセットアップされているので起動する。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;isucon@ubuntu-focal:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start redis-server
&lt;/pre&gt;
&lt;p&gt;バルクでの取得を高速化するためにredisとともにhiredisをセットアップする。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt;&lt;span class=&quot;gi&quot;&gt;+gem 'redis'
+gem 'hiredis'
&lt;/span&gt;&lt;/pre&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; class App &amp;lt; Sinatra::Base
   helpers do
     # snip
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    def redis
+      Thread.current[:redis] ||= Redis.new(driver: :hiredis)
+    end
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;     # snip
   end
 end
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;POST /initialize&lt;/code&gt;でデータが初期化されるようにする。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; post '/initialize' do
   transaction do |tx|
     tx.query('TRUNCATE `reservations`')
     tx.query('TRUNCATE `schedules`')
     tx.query('TRUNCATE `users`')
 
     id = generate_id('users', tx)
     tx.xquery('INSERT INTO `users` (`id`, `email`, `nickname`, `staff`, `created_at`) VALUES (?, ?, ?, true, NOW(6))', id, 'isucon2021_
   end
 
&lt;span class=&quot;gi&quot;&gt;+  redis.flushall
+
&lt;/span&gt;   json(language: 'ruby')
 end
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;POST /api/reservations&lt;/code&gt;で予約数をインクリメントし、予約数をRedisから取得するようにする。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; post '/api/reservations' do
   required_login!
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;   transaction do |tx|
     id = generate_id('reservations', tx)
     schedule_id = params[:schedule_id].to_s
     user_id = current_user[:id]
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;     halt(403, JSON.generate(error: 'schedule not found')) if tx.xquery('SELECT 1 FROM `schedules` WHERE `id` = ? LIMIT 1', schedule_id)
     halt(403, JSON.generate(error: 'already taken')) if tx.xquery('SELECT 1 FROM `reservations` WHERE `schedule_id` = ? AND `user_id` =
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;     capacity = tx.xquery('SELECT `capacity` FROM `schedules` WHERE `id` = ? LIMIT 1', schedule_id).first[:capacity]
&lt;span class=&quot;gd&quot;&gt;-    reserved = tx.xquery('SELECT COUNT(*) AS count FROM `reservations` WHERE `schedule_id` = ?', schedule_id).first[:count]
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    reserved = redis.get(&quot;schedules:#{schedule_id}:reserved&quot;).to_i
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;     halt(403, JSON.generate(error: 'capacity is already full')) if reserved &amp;gt;= capacity
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;     tx.xquery('INSERT INTO `reservations` (`id`, `schedule_id`, `user_id`, `created_at`) VALUES (?, ?, ?, NOW(6))', id, schedule_id, us
     created_at = tx.xquery('SELECT `created_at` FROM `reservations` WHERE `id` = ?', id).first[:created_at]
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    redis.incr(&quot;schedules:#{schedule_id}:reserved&quot;)
+
&lt;/span&gt;     json({ id: id, schedule_id: schedule_id, user_id: user_id, created_at: created_at})
   end
 end
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;GET /api/schedules&lt;/code&gt;でRedisから予約数をまとめて取得するようにする。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; get '/api/schedules' do
   schedules = db.xquery('SELECT * FROM `schedules` ORDER BY `id` DESC')
&lt;span class=&quot;gd&quot;&gt;-  schedules.each do |schedule|
-    get_reservations_count(schedule)
-  end
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+  reserved_keys = schedules.map { |schedule| &quot;schedules:#{schedule[:id]}:reserved&quot; }
+  reserved_counts = reserved_keys.empty? ? {} : redis.mapped_mget(*reserved_keys)
+  schedules.each do |schedule|
+    schedule[:reserved] = reserved_counts[&quot;schedules:#{schedule[:id]}:reserved&quot;].to_i
+  end
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;   if current_user.nil? || !current_user[:staff]
     schedules = schedules.select { |schedule| schedule[:capacity] &amp;gt; schedule[:reserved] }
   end
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;   json(schedules.to_a)
 end
&lt;/pre&gt;
&lt;p&gt;ベンチマークの結果はそこまで変化がなかった。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;09:34:48.277101 score: 1951&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1953 - 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : pass
09:34:48.277114 deduction: 2 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 0
&lt;/pre&gt;
&lt;h1&gt;JSONエンコーダーの変更&lt;/h1&gt;
&lt;p&gt;flamegraphを見ると、JSONの生成で時間がかかっていることがわかる。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; require 'sinatra/json'
&lt;span class=&quot;gd&quot;&gt;-require 'active_support/json'
&lt;/span&gt; require 'active_support/time'
 require_relative 'db'
&lt;/pre&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; set :session_secret, 'tagomoris'
 set :sessions, key: 'session_isucon2021_prior', expire_after: 3600
 set :show_exceptions, false
&lt;span class=&quot;gd&quot;&gt;-set :json_encoder, ActiveSupport::JSON
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+set :json_encoder, :to_json
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;すると、JSONのフォーマットがinvalidというエラーが出てしまった。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;22:03:47.963385 ERR: prepare: json: invalid JSON at /api/login
22:03:47.964026 score: 0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 - 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : fail: critical
22:03:47.964593 deduction: 0 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 0
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ActiveSupport::JSON.encode&lt;/code&gt;と&lt;code&gt;JSON.generate&lt;/code&gt;の仕様の差によるものと思われる。&lt;code&gt;Time#iso8601&lt;/code&gt;を使って文字列に変換したものをJSONに渡すことでこの差分を埋めることができそう。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;{\&quot;created_at\&quot;:\&quot;2021-07-13T22:07:25.346+09:00\&quot;}&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;created_at: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;{\&quot;created_at\&quot;:\&quot;2021-07-13 22:07:12 +0900\&quot;}&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;created_at: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;iso8601&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;{\&quot;created_at\&quot;:\&quot;2021-07-13T22:11:44.003+09:00\&quot;}&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;レスポンスに渡している&lt;code&gt;created_at&lt;/code&gt;を&lt;code&gt;created_at.iso8601(3)&lt;/code&gt;として形式を変換した。&lt;/p&gt;
&lt;p&gt;ベンチマークをとるとスコアが上がった。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;22:20:27.911849 score: 2103&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2103 - 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : pass
22:20:27.911866 deduction: 0 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 0
&lt;/pre&gt;
&lt;h1&gt;POST /api/reservations&lt;/h1&gt;
&lt;p&gt;JSONの修正によってflamegraphの形が大きく変わった。次はどうやら予約の作成に時間がかかっているようなので、再度見直してみる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;created_at&lt;/code&gt;を取得するためのクエリを省くためにRubyで生成した現在時刻を使い回すようにした。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt;&lt;span class=&quot;gd&quot;&gt;-tx.xquery('INSERT INTO `reservations` (`id`, `schedule_id`, `user_id`, `created_at`) VALUES (?, ?, ?, NOW(6))', id, schedule_id, user_id)
-created_at = tx.xquery('SELECT `created_at` FROM `reservations` WHERE `id` = ?', id).first[:created_at]
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+created_at = Time.now
+tx.xquery('INSERT INTO `reservations` (`id`, `schedule_id`, `user_id`, `created_at`) VALUES (?, ?, ?, ?)', id, schedule_id, user_id, created_at.iso8601(6))
&lt;/span&gt;&lt;/pre&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;09:08:25.905845 score: 2225&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2225 - 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : pass
09:08:25.905860 deduction: 0 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 0
&lt;/pre&gt;
&lt;p&gt;スケジュールを2回取得していたので1回にする。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt;&lt;span class=&quot;gd&quot;&gt;-halt(403, JSON.generate(error: 'schedule not found')) if tx.xquery('SELECT 1 FROM `schedules` WHERE `id` = ? LIMIT 1', schedule_id).first.nil?
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+schedule = tx.xquery('SELECT `capacity` FROM `schedules` WHERE `id` = ? LIMIT 1', schedule_id).first
+halt(403, JSON.generate(error: 'schedule not found')) if schedule.nil?
&lt;/span&gt; halt(403, JSON.generate(error: 'already taken')) if tx.xquery('SELECT 1 FROM `reservations` WHERE `schedule_id` = ? AND `user_id` = ? LIMIT 1', schedule_id, user_id).first
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;-capacity = tx.xquery('SELECT `capacity` FROM `schedules` WHERE `id` = ? LIMIT 1', schedule_id).first[:capacity]
&lt;/span&gt; reserved = redis.get(&quot;schedules:#{schedule_id}:reserved&quot;).to_i
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;-halt(403, JSON.generate(error: 'capacity is already full')) if reserved &amp;gt;= capacity
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+halt(403, JSON.generate(error: 'capacity is already full')) if reserved &amp;gt;= schedule[:capacity]
&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;09:09:39.008965 ERR: load: invalid: 存在しないはずのスケジュール ID です: 01FAH5HZDT68S0519B4PNJBFX6
09:09:39.499605 ERR: load: invalid: 存在しないはずのスケジュール ID です: 01FAH5HZX6YW4S72110SHX75SF
09:10:48.801984 ERR: validation: invalid: overbooking at 01FAH5HZRE7F7C0TFQ0J269Z1P
09:10:49.004425 score: 2255(2307 - 52) : pass
09:10:49.004439 deduction: 52 / timeout: 0
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;GET /api/schedules/:id&lt;/h1&gt;
&lt;p&gt;次にスケジュールと予約しているユーザーの取得にやはり時間がかかっているため、再度見直す。&lt;/p&gt;
&lt;p&gt;コード自体は変更できそうなところはないので、今までは保留していたけど、予約テーブルにインデックスを追加することで改善しないか試してみる。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; CREATE TABLE `reservations` (
   `id`          VARCHAR(255) PRIMARY KEY NOT NULL,
   `schedule_id` VARCHAR(255) NOT NULL,
   `user_id`     VARCHAR(255) NOT NULL,
&lt;span class=&quot;gd&quot;&gt;-  `created_at`  DATETIME(6) NOT NULL
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+  `created_at`  DATETIME(6) NOT NULL,
+  KEY (`schedule_id`)
&lt;/span&gt; ) ENGINE=InnoDB DEFAULT CHARACTER SET=utf8mb4;
&lt;/pre&gt;
&lt;p&gt;大きな変化は見られなかった。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;09:38:16.792266 ERR: load: invalid: 存在しないはずのスケジュール ID です: 01FAH76CYJPV68QY935P3SJ2EB
09:38:16.941098 ERR: load: invalid: 存在しないはずのスケジュール ID です: 01FAH76D325T6CFGBHGDB03JMS
09:38:16.950073 ERR: load: invalid: 存在しないはずのスケジュール ID です: 01FAH76D325T6CFGBHGDB03JMS
09:39:26.331983 score: 2222&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2225 - 3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : pass
09:39:26.331998 deduction: 3 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 0
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;EXPLAIN&lt;/code&gt;をしてみる。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;explain&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reservations&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reservations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reservations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedule_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'01FAH77NGEVQ4Y9WDNYBCFN5PK'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                  
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------------+--------------+------------+--------+---------------+-------------+---------+---------------------------------------+------+----------+-------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partitions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;possible_keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt;                                   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filtered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Extra&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------------+--------------+------------+--------+---------------+-------------+---------+---------------------------------------+------+----------+-------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SIMPLE&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reservations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedule_id&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedule_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1022&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt;                                 &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SIMPLE&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq_ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1022&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isucon2021_prior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reservations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------------+--------------+------------+--------+---------------+-------------+---------+---------------------------------------+------+----------+-------+&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warning&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;type&lt;/code&gt;列を見ると&lt;code&gt;ref&lt;/code&gt;となっているため、追加したインデックスが使われていることがわかる。&lt;/p&gt;
&lt;p&gt;まだ改善できるところがないか探してみると、&lt;code&gt;key_len&lt;/code&gt;がやや大きいように見える。これは&lt;code&gt;id&lt;/code&gt;をULIDにしている影響と思われるため、すべてのテーブルの&lt;code&gt;id&lt;/code&gt;を&lt;code&gt;int&lt;/code&gt;型にし、&lt;code&gt;AUTO_INCREMENT&lt;/code&gt;を設定する。&lt;/p&gt;
&lt;p&gt;なお、マニュアルには&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;各エンドポイントの URI の変更は認められませんが、以下の点については明確に許可されます。&lt;br&gt;
ID 発行形式の変更&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;とわざわざ書かれているため、問題ないはず。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; DROP TABLE IF EXISTS `users`;
 CREATE TABLE `users` (
&lt;span class=&quot;gd&quot;&gt;-  `id`         VARCHAR(255) PRIMARY KEY NOT NULL,
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+  `id`         INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
&lt;/span&gt;   `email`      VARCHAR(255) NOT NULL DEFAULT '',
   `nickname`   VARCHAR(120) NOT NULL DEFAULT '',
   `staff`      BOOLEAN NOT NULL DEFAULT false,
 ) ENGINE=InnoDB DEFAULT CHARACTER SET=utf8mb4;
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt; DROP TABLE IF EXISTS `schedules`;
 CREATE TABLE `schedules` (
&lt;span class=&quot;gd&quot;&gt;-  `id`         VARCHAR(255) PRIMARY KEY NOT NULL,
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+  `id`         INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
&lt;/span&gt;   `title`      VARCHAR(255) NOT NULL DEFAULT '',
   `capacity`   INT UNSIGNED NOT NULL DEFAULT 0,
   `created_at` DATETIME(6) NOT NULL
 ) ENGINE=InnoDB DEFAULT CHARACTER SET=utf8mb4;
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt; DROP TABLE IF EXISTS `reservations`;
 CREATE TABLE `reservations` (
&lt;span class=&quot;gd&quot;&gt;-  `id`          VARCHAR(255) PRIMARY KEY NOT NULL,
-  `schedule_id` VARCHAR(255) NOT NULL,
-  `user_id`     VARCHAR(255) NOT NULL,
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+  `id`          INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
+  `schedule_id` INT NOT NULL,
+  `user_id`     INT NOT NULL,
&lt;/span&gt;   `created_at`  DATETIME(6) NOT NULL,
   KEY (`schedule_id`)
 ) ENGINE=InnoDB DEFAULT CHARACTER SET=utf8mb4;
&lt;/pre&gt;
&lt;p&gt;ULIDを発番して挿入している箇所もすべてやめる。すると、validation errorになってしまった。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;10:09:08.050628 ERR: prepare: json: invalid JSON at /api/login
10:09:08.052437 score: 0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 - 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : fail: critical
10:09:08.052819 deduction: 0 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 0
&lt;/pre&gt;
&lt;p&gt;どうやらJSONの&lt;code&gt;id&lt;/code&gt;フィールドを文字列にする必要がありそうなので、&lt;code&gt;to_s&lt;/code&gt;しておく。&lt;/p&gt;
&lt;p&gt;そこまでスコアは上がらなかった。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;22:55:06.307661 ERR: validation: invalid: overbooking at 7
22:55:06.334715 score: 2205&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2255 - 50&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : pass
22:55:06.335481 deduction: 50 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 0
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;EXPLAIN&lt;/code&gt;の結果を見ると確かに&lt;code&gt;key_len&lt;/code&gt;が小さくなった。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;explain&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reservations&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reservations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reservations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedule_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------------+--------------+------------+--------+---------------+-------------+---------+---------------------------------------+------+----------+-------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partitions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;possible_keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt;                                   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filtered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Extra&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------------+--------------+------------+--------+---------------+-------------+---------+---------------------------------------+------+----------+-------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SIMPLE&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reservations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedule_id&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedule_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt;                                 &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SIMPLE&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq_ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isucon2021_prior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reservations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------------+--------------+------------+--------+---------------+-------------+---------+---------------------------------------+------+----------+-------+&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warning&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;シナリオを調べる&lt;/h1&gt;
&lt;p&gt;視点を変えてログインユーザーがどのような行動をとっているのか調べてみることにした。そこで、アクセスログにユーザーIDを出力するようにする。&lt;/p&gt;
&lt;p&gt;まず、sinatraでユーザーIDをレスポンスヘッダに追加する。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt;&lt;span class=&quot;gi&quot;&gt;+if ENV['ENABLE_PROFILE'].to_i.nonzero?
+  after do
+    response.headers['X-User-ID'] = session[:user_id]
+  end
+end
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;次にnginxのアクセスログにレスポンスヘッダの中身を出力する。&lt;code&gt;$upstream_http_&amp;lt;ヘッダ&amp;gt;&lt;/code&gt;という形式でレスポンスヘッダの値に参照できる。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; log_format ltsv &quot;time:$time_local&quot;
   &quot;\thost:$remote_addr&quot;
   &quot;\tforwardedfor:$http_x_forwarded_for&quot;
   &quot;\treq:$request&quot;
   &quot;\tmethod:$request_method&quot;
   &quot;\turi:$request_uri&quot;
   &quot;\tstatus:$status&quot;
   &quot;\tsize:$body_bytes_sent&quot;
   &quot;\treferer:$http_referer&quot;
   &quot;\tua:$http_user_agent&quot;
   &quot;\treqtime:$request_time&quot;
   &quot;\truntime:$upstream_http_x_runtime&quot;
   &quot;\tapptime:$upstream_response_time&quot;
   &quot;\tcache:$upstream_http_x_cache&quot;
&lt;span class=&quot;gi&quot;&gt;+  &quot;\tuserid:$upstream_http_x_user_id&quot;
&lt;/span&gt;   &quot;\tvhost:$host&quot;
&lt;/pre&gt;
&lt;p&gt;ユーザー毎の行動をアクセスログから調べられるようになった。例えば、ユーザーID 1を持つ管理者はスケジュール一覧を大量に閲覧しており、各スケジュールに1回だけアクセスしているのがわかる。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;isucon@ubuntu-focal:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo grep&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;userid:1[[:space:]]&quot;&lt;/span&gt; /var/log/nginx/access.log | alp ltsv
+-------+-----+-----+-----+-----+-----+--------+-------------------+-------+-------+-------+-------+-------+-------+-------+--------+-----------+-----------+------------+-----------+
| COUNT | 1XX | 2XX | 3XX | 4XX | 5XX | METHOD |        URI        |  MIN  |  MAX  |  SUM  |  AVG  |  P1   |  P50  |  P99  | STDDEV | MIN&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;BODY&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; | MAX&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;BODY&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; | SUM&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;BODY&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  | AVG&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;BODY&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; |
+-------+-----+-----+-----+-----+-----+--------+-------------------+-------+-------+-------+-------+-------+-------+-------+--------+-----------+-----------+------------+-----------+
|     1 |   0 |   1 |   0 |   0 |   0 | POST   | /api/login        | 0.008 | 0.008 | 0.008 | 0.008 | 0.008 | 0.008 | 0.008 |  0.000 |   108.000 |   108.000 |    108.000 |   108.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/4  | 0.156 | 0.156 | 0.156 | 0.156 | 0.156 | 0.156 | 0.156 |  0.000 |  8140.000 |  8140.000 |   8140.000 |  8140.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/2  | 0.152 | 0.152 | 0.152 | 0.152 | 0.152 | 0.152 | 0.152 |  0.000 | 20684.000 | 20684.000 |  20684.000 | 20684.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/7  | 0.140 | 0.140 | 0.140 | 0.140 | 0.140 | 0.140 | 0.140 |  0.000 |  9104.000 |  9104.000 |   9104.000 |  9104.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/1  | 0.004 | 0.004 | 0.004 | 0.004 | 0.004 | 0.004 | 0.004 |  0.000 | 15758.000 | 15758.000 |  15758.000 | 15758.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/22 | 0.012 | 0.012 | 0.012 | 0.012 | 0.012 | 0.012 | 0.012 |  0.000 |   132.000 |   132.000 |    132.000 |   132.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/19 | 0.016 | 0.016 | 0.016 | 0.016 | 0.016 | 0.016 | 0.016 |  0.000 |  6464.000 |  6464.000 |   6464.000 |  6464.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/20 | 0.024 | 0.024 | 0.024 | 0.024 | 0.024 | 0.024 | 0.024 |  0.000 |  5570.000 |  5570.000 |   5570.000 |  5570.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/18 | 0.036 | 0.036 | 0.036 | 0.036 | 0.036 | 0.036 | 0.036 |  0.000 |  8765.000 |  8765.000 |   8765.000 |  8765.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/21 | 0.040 | 0.040 | 0.040 | 0.040 | 0.040 | 0.040 | 0.040 |  0.000 |  2408.000 |  2408.000 |   2408.000 |  2408.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/16 | 0.044 | 0.044 | 0.044 | 0.044 | 0.044 | 0.044 | 0.044 |  0.000 | 10125.000 | 10125.000 |  10125.000 | 10125.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/17 | 0.056 | 0.056 | 0.056 | 0.056 | 0.056 | 0.056 | 0.056 |  0.000 | 10333.000 | 10333.000 |  10333.000 | 10333.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/15 | 0.068 | 0.068 | 0.068 | 0.068 | 0.068 | 0.068 | 0.068 |  0.000 | 16018.000 | 16018.000 |  16018.000 | 16018.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/12 | 0.076 | 0.076 | 0.076 | 0.076 | 0.076 | 0.076 | 0.076 |  0.000 | 16046.000 | 16046.000 |  16046.000 | 16046.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/14 | 0.076 | 0.076 | 0.076 | 0.076 | 0.076 | 0.076 | 0.076 |  0.000 | 13767.000 | 13767.000 |  13767.000 | 13767.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/13 | 0.088 | 0.088 | 0.088 | 0.088 | 0.088 | 0.088 | 0.088 |  0.000 |  8788.000 |  8788.000 |   8788.000 |  8788.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/9  | 0.100 | 0.100 | 0.100 | 0.100 | 0.100 | 0.100 | 0.100 |  0.000 | 10721.000 | 10721.000 |  10721.000 | 10721.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/10 | 0.108 | 0.108 | 0.108 | 0.108 | 0.108 | 0.108 | 0.108 |  0.000 | 11670.000 | 11670.000 |  11670.000 | 11670.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/8  | 0.120 | 0.120 | 0.120 | 0.120 | 0.120 | 0.120 | 0.120 |  0.000 | 22467.000 | 22467.000 |  22467.000 | 22467.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/6  | 0.128 | 0.128 | 0.128 | 0.128 | 0.128 | 0.128 | 0.128 |  0.000 | 19817.000 | 19817.000 |  19817.000 | 19817.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/11 | 0.132 | 0.132 | 0.132 | 0.132 | 0.132 | 0.132 | 0.132 |  0.000 | 26703.000 | 26703.000 |  26703.000 | 26703.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/5  | 0.132 | 0.132 | 0.132 | 0.132 | 0.132 | 0.132 | 0.132 |  0.000 | 21596.000 | 21596.000 |  21596.000 | 21596.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/3  | 0.156 | 0.156 | 0.156 | 0.156 | 0.156 | 0.156 | 0.156 |  0.000 | 16882.000 | 16882.000 |  16882.000 | 16882.000 |
|    22 |   0 |  22 |   0 |   0 |   0 | POST   | /api/schedules    | 0.004 | 0.152 | 0.576 | 0.026 | 0.068 | 0.012 | 0.008 |  0.032 |   100.000 |   111.000 |   2306.000 |   104.818 |
|   365 |   0 | 365 |   0 |   0 |   0 | GET    | /api/schedules    | 0.000 | 0.320 | 6.344 | 0.017 | 0.000 | 0.008 | 0.000 |  0.032 |     2.000 |  2505.000 | 561496.000 |  1538.345 |
|   365 |   0 |   0 |   0 | 365 |   0 | GET    | /favicon.ico      | 0.004 | 0.272 | 3.808 | 0.010 | 0.052 | 0.004 | 0.000 |  0.023 |   377.000 |   377.000 | 137605.000 |   377.000 |
+-------+-----+-----+-----+-----+-----+--------+-------------------+-------+-------+-------+-------+-------+-------+-------+--------+-----------+-----------+------------+-----------+
&lt;/pre&gt;
&lt;p&gt;管理者ではない一般ユーザーはスケジュール一覧を1回だけ見て、各スケジュールにアクセスして予約をとっているのがわかる。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;isucon@ubuntu-focal:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo grep&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;userid:100[[:space:]]&quot;&lt;/span&gt; /var/log/nginx/access.log | alp ltsv
+-------+-----+-----+-----+-----+-----+--------+-------------------+-------+-------+-------+-------+-------+-------+-------+--------+-----------+-----------+-----------+-----------+
| COUNT | 1XX | 2XX | 3XX | 4XX | 5XX | METHOD |        URI        |  MIN  |  MAX  |  SUM  |  AVG  |  P1   |  P50  |  P99  | STDDEV | MIN&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;BODY&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; | MAX&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;BODY&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; | SUM&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;BODY&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; | AVG&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;BODY&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; |
+-------+-----+-----+-----+-----+-----+--------+-------------------+-------+-------+-------+-------+-------+-------+-------+--------+-----------+-----------+-----------+-----------+
|     1 |   0 |   1 |   0 |   0 |   0 | POST   | /api/login        | 0.052 | 0.052 | 0.052 | 0.052 | 0.052 | 0.052 | 0.052 |  0.000 |   112.000 |   112.000 |   112.000 |   112.000 |
|     1 |   0 |   0 |   0 |   1 |   0 | GET    | /favicon.ico      | 0.000 | 0.000 | 0.000 | 0.000 | 0.000 | 0.000 | 0.000 |  0.000 |   377.000 |   377.000 |   377.000 |   377.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules    | 0.008 | 0.008 | 0.008 | 0.008 | 0.008 | 0.008 | 0.008 |  0.000 |   675.000 |   675.000 |   675.000 |   675.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/10 | 0.004 | 0.004 | 0.004 | 0.004 | 0.004 | 0.004 | 0.004 |  0.000 |  1311.000 |  1311.000 |  1311.000 |  1311.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/9  | 0.020 | 0.020 | 0.020 | 0.020 | 0.020 | 0.020 | 0.020 |  0.000 |  1705.000 |  1705.000 |  1705.000 |  1705.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/8  | 0.000 | 0.000 | 0.000 | 0.000 | 0.000 | 0.000 | 0.000 |  0.000 |  2482.000 |  2482.000 |  2482.000 |  2482.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/6  | 0.020 | 0.020 | 0.020 | 0.020 | 0.020 | 0.020 | 0.020 |  0.000 | 16049.000 | 16049.000 | 16049.000 | 16049.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/5  | 0.060 | 0.060 | 0.060 | 0.060 | 0.060 | 0.060 | 0.060 |  0.000 | 16436.000 | 16436.000 | 16436.000 | 16436.000 |
|     1 |   0 |   1 |   0 |   0 |   0 | GET    | /api/schedules/2  | 0.028 | 0.028 | 0.028 | 0.028 | 0.028 | 0.028 | 0.028 |  0.000 | 16430.000 | 16430.000 | 16430.000 | 16430.000 |
|     6 |   0 |   6 |   0 |   0 |   0 | POST   | /api/reservations | 0.004 | 0.060 | 0.128 | 0.021 | 0.016 | 0.024 | 0.060 |  0.018 |    87.000 |    88.000 |   523.000 |    87.167 |
+-------+-----+-----+-----+-----+-----+--------+-------------------+-------+-------+-------+-------+-------+-------+-------+--------+-----------+-----------+-----------+-----------+
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;GET /api/schedules&lt;/code&gt;が管理者から大量にアクセスされているけど、予約数を出す以上はキャッシュすることも難しそう。特にこれといって方針が決まるかと言うとそこまでではなさそうだった。&lt;/p&gt;
&lt;h1&gt;GET /favicon.ico&lt;/h1&gt;
&lt;p&gt;alpによるプロファイリング結果を見ていると&lt;code&gt;GET /favicon.ico&lt;/code&gt;へのアクセスがそれなりに遅いことがわかる。試しに&lt;code&gt;curl&lt;/code&gt;でリクエストを送ると、sinatraから返していることがわかる。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;isucon@ubuntu-focal:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl localhost/favicon.ico
&amp;lt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;&lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &amp;lt;style &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  body &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; text-align:center&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;font-family:helvetica,arial&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;font-size:22px&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    color:#888&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;margin:20px&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#c {margin:0 auto;width:500px;text-align:left}&lt;/span&gt;
  &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h2&amp;gt;Sinatra doesn’t know this ditty.&amp;lt;/h2&amp;gt;
  &amp;lt;img &lt;span class=&quot;nv&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'http://localhost/__sinatra__/404.png'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &amp;lt;div &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    Try this:
    &amp;lt;pre&amp;gt;# &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;app.rb
class App
  get &amp;amp;#x27&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&amp;amp;#x2F&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;favicon.ico&amp;amp;#x27&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &amp;amp;quot&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;Hello World&amp;amp;quot&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  end
end
&amp;lt;/pre&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
&lt;p&gt;そこで、nginxから404を返すように変更する。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt;&lt;span class=&quot;gi&quot;&gt;+# favicon
+location = /favicon.ico {
+  return 404;
+}
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;nginxの404ページが返るようになった。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;isucon@ubuntu-focal:~/webapp/ruby&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl localhost/favicon.ico
&amp;lt;html&amp;gt;
&amp;lt;&lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&amp;lt;title&amp;gt;404 Not Found&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;404 Not Found&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;
&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx/1.18.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ubuntu&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&amp;lt;/center&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
&lt;p&gt;スコアには特に影響しなかった。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;10:00:28.076825 score: 2092&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2092 - 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : pass
10:00:28.076840 deduction: 0 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 0
&lt;/pre&gt;</summary>
    <title>isucon11-priorでisuconの練習をした2</title>
    <updated>2021-07-12T08:33:00+00:00</updated>
    <dc:date>2021-07-12T08:33:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/451/</id>
    <link href="https://blog.naoty.dev/451/"/>
    <summary>&lt;ul&gt;
&lt;li&gt;その1&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/452/&quot;&gt;その2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;初期値&lt;/h1&gt;
&lt;p&gt;なにもしていない時点でベンチマークをとると、こうなった。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;isucon@ubuntu-focal:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bin/benchmarker
10:32:35.193616 ERR: load: invalid: 存在しないはずのスケジュール ID です: 01FA4EA7ZJ85KFEPYZD8KBYPTY
10:33:45.648291 score: 882&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;883 - 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : pass
10:33:45.648307 deduction: 1 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 0
&lt;/pre&gt;
&lt;h1&gt;プロファイリング&lt;/h1&gt;
&lt;p&gt;まずはボトルネックを調査していく。&lt;a href=&quot;https://github.com/tkuchiki/alp&quot;&gt;alp&lt;/a&gt;を使ってアクセスログを分析する。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;isucon@ubuntu-focal:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://github.com/tkuchiki/alp/releases/download/v1.0.4/alp_linux_mips64.zip
isucon@ubuntu-focal:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;unzip alp_linux_mips64.zip
isucon@ubuntu-focal:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo cat&lt;/span&gt; /var/log/nginx/access.log | alp ltsv &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/api/schedules/.+'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--reverse&lt;/span&gt;
+-------+-----+-----+-----+-----+-----+--------+-------------------+-------+-------+--------+-------+-------+-------+-------+--------+-----------+-------------+---------------+------------+
| COUNT | 1XX | 2XX | 3XX | 4XX | 5XX | METHOD |        URI        |  MIN  |  MAX  |  SUM   |  AVG  |  P1   |  P50  |  P99  | STDDEV | MIN&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;BODY&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; |  MAX&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;BODY&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  |   SUM&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;BODY&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   | AVG&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;BODY&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  |
+-------+-----+-----+-----+-----+-----+--------+-------------------+-------+-------+--------+-------+-------+-------+-------+--------+-----------+-------------+---------------+------------+
|   530 |   0 | 530 |   0 |   0 |   0 | GET    | /                 | 0.012 | 0.364 |  3.576 | 0.007 | 0.000 | 0.008 | 0.000 |  0.024 |   195.000 |     195.000 |    103350.000 |    195.000 |
|   530 |   0 |  88 | 442 |   0 |   0 | GET    | /esm/index.js     | 0.000 | 0.000 |  0.000 | 0.000 | 0.000 | 0.000 | 0.000 |  0.000 |     0.000 | 1442198.000 | 126913424.000 | 239459.291 |
|   530 |   0 | 530 |   0 |   0 |   0 | GET    | /favicon.ico      | 0.020 | 0.376 |  3.884 | 0.007 | 0.000 | 0.004 | 0.004 |  0.024 |   195.000 |     195.000 |    103350.000 |    195.000 |
|   462 |   0 | 461 |   0 |   1 |   0 | GET    | /api/schedules/.+ | 0.008 | 1.300 | 62.155 | 0.135 | 0.016 | 0.872 | 0.416 |  0.143 |   151.000 |   24310.000 |   3890160.000 |   8420.260 |
|   450 |   0 | 448 |   0 |   2 |   0 | POST   | /api/reservations | 0.004 | 1.004 | 11.848 | 0.026 | 0.028 | 0.060 | 0.016 |  0.052 |    56.000 |     157.000 |     70459.000 |    156.576 |
|   443 |   0 | 443 |   0 |   0 |   0 | GET    | /api/schedules    | 0.008 | 0.304 | 12.788 | 0.029 | 0.000 | 0.012 | 0.032 |  0.034 |     2.000 |    1412.000 |    457613.000 |   1032.986 |
|    88 |   0 |  77 |   0 |  11 |   0 | POST   | /api/login        | 0.004 | 0.100 |  1.356 | 0.015 | 0.004 | 0.044 | 0.020 |  0.019 |    55.000 |     163.000 |     11529.000 |    131.011 |
|    87 |   0 |  87 |   0 |   0 |   0 | POST   | /api/signup       | 0.004 | 0.224 |  1.852 | 0.021 | 0.012 | 0.052 | 0.028 |  0.027 |   130.000 |     163.000 |     12353.000 |    141.989 |
|    10 |   0 |  10 |   0 |   0 |   0 | POST   | /api/schedules    | 0.008 | 0.036 |  0.208 | 0.021 | 0.036 | 0.024 | 0.008 |  0.010 |   120.000 |     130.000 |      1262.000 |    126.200 |
|     1 |   0 |   1 |   0 |   0 |   0 | POST   | /initialize       | 0.064 | 0.064 |  0.064 | 0.064 | 0.064 | 0.064 | 0.064 |  0.000 |    19.000 |      19.000 |        19.000 |     19.000 |
+-------+-----+-----+-----+-----+-----+--------+-------------------+-------+-------+--------+-------+-------+-------+-------+--------+-----------+-------------+---------------+------------+
&lt;/pre&gt;
&lt;p&gt;レギュレーションによると&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;POST /api/schedules&lt;/code&gt;: 10点&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;POST /api/login&lt;/code&gt;: 1点&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;POST /api/reservations&lt;/code&gt;: 1点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;となっており、予約はそこそこ成功しているものの、スケジュールの作成が少ないために点数が伸びてないことがわかる。&lt;/p&gt;
&lt;p&gt;次にクエリのボトルネックを調べるために、スロークエリログを有効にする。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt;&lt;span class=&quot;gi&quot;&gt;+slow_query_log = 1
+slow_query_log_file = /var/log/mysql/mysql-slow.log
+long_query_time = 0.2
+log-queries-not-using-indexes
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;pt-query-digest&lt;/code&gt;を使うためpercona toolkitをインストールする。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;isucon@ubuntu-focal:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
isucon@ubuntu-focal:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; percona-toolkit
isucon@ubuntu-focal:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pt-query-digest /var/log/mysql/mysql-slow.log

&lt;span class=&quot;c&quot;&gt;# 990ms user time, 30ms system time, 30.30M rss, 37.25M vsz&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Current date: Mon Jul  5 01:28:59 2021&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Hostname: ubuntu-focal&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Files: /var/log/mysql/mysql-slow.log&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Overall: 6.92k total, 3 unique, 85.43 QPS, 0.06x concurrency ___________&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Time range: 2021-07-04T16:27:20 to 2021-07-04T16:28:41&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Attribute          total     min     max     avg     95%  stddev  median&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ============     ======= ======= ======= ======= ======= ======= =======&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Exec time             5s    97us    26ms   733us     3ms     1ms   348us&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Lock time          503ms    29us    10ms    72us   138us   189us    44us&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Rows sent        244.43k       0      96   36.17   84.10   27.55   33.28&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Rows examine       2.71M       0     712  410.65  685.39  210.55  420.77&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Query size       572.33k      79     132   84.69  130.47   16.49   76.28&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Profile&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Rank Query ID                       Response time Calls R/Call V/M   Ite&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ==== ============================== ============= ===== ====== ===== ===&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    1 0x8AF515F23C6557EC1A32EFCBB...  4.8160 94.9%  6073 0.0008  0.00 SELECT reservations&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    2 0x91FE50B3151F73CAA931F4943...  0.2187  4.3%   712 0.0003  0.00 SELECT reservations&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# MISC 0xMISC                          0.0425  0.8%   135 0.0003   0.0 &amp;lt;1 ITEMS&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Query 1: 74.98 QPS, 0.06x concurrency, ID 0x8AF515F23C6557EC1A32EFCBB5E06C9B at byte 1972228&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This item is included in the report because it matches --limit.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Scores: V/M = 0.00&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Time range: 2021-07-04T16:27:20 to 2021-07-04T16:28:41&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Attribute    pct   total     min     max     avg     95%  stddev  median&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ============ === ======= ======= ======= ======= ======= ======= =======&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Count         87    6073&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Exec time     94      5s    97us    26ms   793us     3ms     2ms   366us&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Lock time     89   449ms    29us    10ms    73us   144us   200us    44us&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Rows sent     99 244.32k       0      96   41.20   88.31   25.88   34.95&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Rows examine  90   2.46M       0     712  424.74  685.39  206.80  441.81&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Query size    81 468.52k      79      79      79      79       0      79&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# String:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Databases    isucon2021_prior&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Hosts        localhost&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Users        isucon&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Query_time distribution&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   1us&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  10us  #&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 100us  ################################################################&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   1ms  ########&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  10ms  #&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 100ms&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    1s&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  10s+&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Tables&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    SHOW TABLE STATUS FROM `isucon2021_prior` LIKE 'reservations'\G&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    SHOW CREATE TABLE `isucon2021_prior`.`reservations`\G&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# EXPLAIN /*!50100 PARTITIONS*/&lt;/span&gt;
SELECT &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; FROM &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;reservations&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; WHERE &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;schedule_id&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'01F9S5H0MKDF0HG05FECEK3BTM'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\G&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Query 2: 15.48 QPS, 0.00x concurrency, ID 0x91FE50B3151F73CAA931F494357A001F at byte 1208837&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This item is included in the report because it matches --limit.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Scores: V/M = 0.00&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Time range: 2021-07-04T16:27:20 to 2021-07-04T16:28:06&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Attribute    pct   total     min     max     avg     95%  stddev  median&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ============ === ======= ======= ======= ======= ======= ======= =======&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Count         10     712&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Exec time      4   219ms   114us     5ms   307us   568us   244us   260us&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Lock time      7    37ms    35us   588us    52us    89us    43us    40us&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Rows sent      0       0       0       0       0       0       0       0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Rows examine   8 247.13k       0     711  355.42  652.75  200.75  346.17&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Query size    16  91.78k     132     132     132     132       0     132&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# String:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Databases    isucon2021_prior&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Hosts        localhost&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Users        isucon&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Query_time distribution&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   1us&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  10us&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 100us  ################################################################&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   1ms  #&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  10ms&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 100ms&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    1s&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  10s+&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Tables&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    SHOW TABLE STATUS FROM `isucon2021_prior` LIKE 'reservations'\G&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    SHOW CREATE TABLE `isucon2021_prior`.`reservations`\G&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# EXPLAIN /*!50100 PARTITIONS*/&lt;/span&gt;
SELECT 1 FROM &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;reservations&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; WHERE &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;schedule_id&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'01F9S5HW06RF9V13Z3PGT3B0YW'&lt;/span&gt; AND &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;user_id&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'01F9S5J076VP0H37MF2SZP05E1'&lt;/span&gt; LIMIT 1&lt;span class=&quot;se&quot;&gt;\G&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;スケジュールに関連する予約を取得する箇所がスロークエリになっていることがわかる。&lt;/p&gt;
&lt;p&gt;次に&lt;a href=&quot;https://github.com/osyoyu/stackprof&quot;&gt;osyoyu/stackprof&lt;/a&gt;を使ってアプリケーションコードのプロファイリングをおこなう。&lt;code&gt;config.ru&lt;/code&gt;でRackミドルウェアを追加する。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt;&lt;span class=&quot;gi&quot;&gt;+gem 'stackprof', github: 'osyoyu/stackprof'
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;元の&lt;a href=&quot;https://github.com/tmm1/stackprof&quot;&gt;tmm1/stackprof&lt;/a&gt;と比べると &lt;a href=&quot;https://github.com/tmm1/stackprof/issues/80&quot;&gt;https://github.com/tmm1/stackprof/issues/80&lt;/a&gt; にあるような問題が修正されているものっぽい。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt;&lt;span class=&quot;gi&quot;&gt;+require 'stackprof'
+use StackProf::Middleware,
+  enabled: ENV['ENABLE_PROFILE'].to_i.nonzero?,
+  mode: :cpu,
+  raw: ENV['ENABLE_RAW_PROFILE'].to_i.nonzero?,
+  interval: 1000,
+  save_every: 5
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt; run App.new
&lt;/pre&gt;
&lt;p&gt;d3-flame-graphを使うために&lt;code&gt;raw: true&lt;/code&gt;を追加してある。systemdは&lt;code&gt;~/env&lt;/code&gt;をRailsサーバーの環境変数として設定するため、これを変更すればオン/オフを切り替えられる。&lt;/p&gt;
&lt;p&gt;Railsサーバーを再起動させてベンチマーカーを実行する。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;isucon@ubuntu-focal:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart web-ruby
isucon@ubuntu-focal:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bin/benchmarker
isucon@ubuntu-focal:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;webapp/ruby
isucon@ubuntu-focal:~webapp/ruby&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;stackprof &lt;span class=&quot;nt&quot;&gt;--d3-flamegraph&lt;/span&gt; tmp/stackprof-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.dump &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; tmp/flamegraph.html
&lt;/pre&gt;
&lt;p&gt;こんな感じのflamegraphが生成されるため、ボトルネックがわかりやすくなった。&lt;code&gt;App#get_reservations&lt;/code&gt;が占める割合が大きそうだ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;flamegraph.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;flamegraph.png&quot; alt=&quot;flamegraph&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;benchmarker --progress&lt;/h1&gt;
&lt;p&gt;ベンチマーカーには&lt;code&gt;--progress&lt;/code&gt;というオプションがあるようなので、これも試してみる。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;isucon@ubuntu-focal:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bin/benchmarker &lt;span class=&quot;nt&quot;&gt;--progress&lt;/span&gt;
02:51:43.810051 score: 0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 - 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : fail: score
02:51:43.810096 deduction: 0 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 0
02:51:44.161112 ERR: load: invalid: 存在しないはずのスケジュール ID です: 01F9SABH0GZRNF4QYJ7H07HK40
02:51:46.811650 score: 144&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;145 - 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : pass
02:51:46.811808 deduction: 1 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 0
02:51:49.814398 score: 223&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;224 - 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : pass
02:51:49.814416 deduction: 1 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 0
02:51:52.815522 score: 284&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;285 - 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : pass
02:51:52.815538 deduction: 1 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 0
&lt;span class=&quot;c&quot;&gt;# snip&lt;/span&gt;
02:52:31.889060 score: 718&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;719 - 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : pass
02:52:31.889083 deduction: 1 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 8
02:52:34.892716 score: 722&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;724 - 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : pass
02:52:34.893451 deduction: 1 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 10
02:52:37.893911 score: 726&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;728 - 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : pass
02:52:37.894326 deduction: 1 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 10
02:52:40.895119 score: 726&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;728 - 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : pass
02:52:40.901700 deduction: 1 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 10
02:52:43.900161 score: 726&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;728 - 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : pass
02:52:43.900926 deduction: 1 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 10
02:52:46.900517 score: 726&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;728 - 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : pass
02:52:46.900537 deduction: 1 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 11
02:52:49.904001 score: 726&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;728 - 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : pass
02:52:49.904036 deduction: 1 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 11
02:52:52.904344 score: 726&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;728 - 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : pass
02:52:52.904365 deduction: 1 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 11
02:53:04.475732 score: 726&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;728 - 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : pass
02:53:04.476582 deduction: 1 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 11
&lt;/pre&gt;
&lt;p&gt;途中からスコアが伸びなくなっている。ベンチマーカーの仕様によるものに見えるので、ここもレギュレーションを見ながら対応したい。&lt;/p&gt;
&lt;h1&gt;下準備&lt;/h1&gt;
&lt;p&gt;普段Railsで開発していると陥りがちだけど、修正したコードは実行中のsinatraアプリケーションに反映されないので、ベンチマーカーを実行する前には一度再起動する必要がある。それを毎回やるのは面倒なので、スクリプトを用意しておく。また、stackprofのダンプファイルもクリーンアップしたいので、それもスクリプトで行う。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash -e&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart web-ruby
&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;30
&lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;webapp/ruby/tmp/stackprof-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
bin/benchmarker
&lt;/pre&gt;
&lt;h1&gt;get_reservations&lt;/h1&gt;
&lt;p&gt;flamegraphを見ると、&lt;code&gt;#get_reservations&lt;/code&gt;に時間がかかっているため、修正していく。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/api/schedules/:id'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xquery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SELECT * FROM `schedules` WHERE id = ? LIMIT 1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;halt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;get_reservations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_reservations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;reservations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xquery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SELECT * FROM `reservations` WHERE `schedule_id` = ?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reservation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reservation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reservation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reservation&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:reservations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reservations&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:reserved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reservations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xquery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SELECT * FROM `users` WHERE `id` = ? LIMIT 1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:staff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;スケジュールに関連する予約を取得し、各予約に対して関連するユーザーを取得しているため、N+1クエリとなっている。1回のクエリでこれらを取得するように直す。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; def get_reservations(schedule)
&lt;span class=&quot;gd&quot;&gt;-  reservations = db.xquery('SELECT * FROM `reservations` WHERE `schedule_id` = ?', schedule[:id]).map do |reservation|
-    reservation[:user] = get_user(reservation[:user_id])
-    reservation
-  end
-  schedule[:reservations] = reservations
-  schedule[:reserved] = reservations.size
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+  reservations = db.xquery(&amp;lt;&amp;lt;~SQL
+    SELECT
+      r.`id` AS `r_id`,
+      r.`schedule_id` AS `r_schedule_id`,
+      r.`user_id` AS `r_user_id`,
+      r.`created_at` AS `r_created_at`,
+      u.`id` AS `u_id`,
+      u.`email` AS `u_email`,
+      u.`nickname` AS `u_nickname`,
+      u.`staff` AS `u_staff`,
+      u.`created_at` AS `u_created_at`
+    FROM
+      `reservations` AS r
+    JOIN
+      `users` AS u ON r.`user_id` = u.`id`
+    WHERE
+      r.`schedule_id` = ?
+  SQL)
+
+  schedule[:reservations] = reservations.map do |reservation|
+    {
+      id: reservation[:r_id],
+      schedule_id: reservation[:r_schedule_id],
+      user_id: reservation[:r_user_id],
+      created_at: reservation[:r_created_at],
+      user: {
+        id: reservation[:u_id],
+        email: (!current_user || !current_user[:staff]) ? '' : reservation[:u_email],
+        nickname: reservation[:u_nickname],
+        staff: reservation[:u_staff],
+        created_at: reservation[:u_created_at],
+      }
+    }
+  end
+  schedule[:reserved] = reservations.size
&lt;/span&gt; end
&lt;/pre&gt;
&lt;p&gt;ベンチマークをとる。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;isucon@ubuntu-focal:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bin/benchmarker
06:15:41.612683 score: 910&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;910 - 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : pass
06:15:41.612698 deduction: 0 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 0
&lt;/pre&gt;
&lt;p&gt;少し改善されたように見える。次にflamegraphでボトルネックとして出ていた&lt;code&gt;#current_user&lt;/code&gt;も見る。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;current_user&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xquery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SELECT * FROM `users` WHERE `id` = ? LIMIT 1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;メモ化していないため、&lt;code&gt;reservations.map&lt;/code&gt;のブロック内で毎回ユーザーを取得してしまっている。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; def current_user
&lt;span class=&quot;gd&quot;&gt;-  db.xquery('SELECT * FROM `users` WHERE `id` = ? LIMIT 1', session[:user_id]).first
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+  @current_user ||= db.xquery('SELECT * FROM `users` WHERE `id` = ? LIMIT 1', session[:user_id]).first
&lt;/span&gt; end
&lt;/pre&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;isucon@ubuntu-focal:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bin/benchmarker
06:20:51.566789 score: 1512&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1512 - 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : pass
06:20:51.566804 deduction: 0 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 0
&lt;/pre&gt;
&lt;p&gt;一気にスコアが上がった。flamegraphを見ると、&lt;code&gt;#current_user&lt;/code&gt;の中で最も時間がかかっているのはクエリの実行だけど、PKを指定したクエリなのでこれ以上は最適化できない。&lt;/p&gt;
&lt;p&gt;そこで、上で修正したクエリを最適化する。&lt;code&gt;EXPLAIN&lt;/code&gt;で実行計画を確認する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql&amp;gt; explain select * from reservations join users on reservations.user_id = users.id where reservations.schedule_id = '01F9VB8MP2Y5S0K4CZQY8K5VRK';
+----+-------------+--------------+------------+--------+---------------+---------+---------+---------------------------------------+------+----------+-------------+
| id | select_type | table        | partitions | type   | possible_keys | key     | key_len | ref                                   | rows | filtered | Extra       |
+----+-------------+--------------+------------+--------+---------------+---------+---------+---------------------------------------+------+----------+-------------+
|  1 | SIMPLE      | reservations | NULL       | ALL    | NULL          | NULL    | NULL    | NULL                                  |  769 |    10.00 | Using where |
|  1 | SIMPLE      | users        | NULL       | eq_ref | PRIMARY       | PRIMARY | 1022    | isucon2021_prior.reservations.user_id |    1 |   100.00 | NULL        |
+----+-------------+--------------+------------+--------+---------------+---------+---------+---------------------------------------+------+----------+-------------+
2 rows in set, 1 warning (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;type&lt;/code&gt;が&lt;code&gt;ALL&lt;/code&gt;となっており、フルテーブルスキャンになっている。&lt;code&gt;schedule_id&lt;/code&gt;に対してインデックスを追加する。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; CREATE TABLE `reservations` (
   `id`          VARCHAR(255) PRIMARY KEY NOT NULL,
   `schedule_id` VARCHAR(255) NOT NULL,
   `user_id`     VARCHAR(255) NOT NULL,
&lt;span class=&quot;gd&quot;&gt;-   `created_at`  DATETIME(6) NOT NULL
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+  `created_at`  DATETIME(6) NOT NULL,
+  KEY (`schedule_id`)
&lt;/span&gt; ) ENGINE=InnoDB DEFAULT CHARACTER SET=utf8mb4;
&lt;/pre&gt;
&lt;p&gt;DBを作り直してベンチマークをとる。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;isucon@ubuntu-focal:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;webapp/tools/initdb
isucon@ubuntu-focal:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bin/benchmarker
06:25:40.386718 score: 1328&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1328 - 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : pass
06:25:40.386733 deduction: 0 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 0
&lt;/pre&gt;
&lt;p&gt;スコアが下がってしまったが、実行計画は改善されている。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql&amp;gt; explain select * from reservations join users on reservations.user_id = users.id where reservations.schedule_id = '01F9VC5Q34QARA1A77H2WQWHM6';
+----+-------------+--------------+------------+--------+---------------+-------------+---------+---------------------------------------+------+----------+-------+
| id | select_type | table        | partitions | type   | possible_keys | key         | key_len | ref                                   | rows | filtered | Extra |
+----+-------------+--------------+------------+--------+---------------+-------------+---------+---------------------------------------+------+----------+-------+
|  1 | SIMPLE      | reservations | NULL       | ref    | schedule_id   | schedule_id | 1022    | const                                 |    8 |   100.00 | NULL  |
|  1 | SIMPLE      | users        | NULL       | eq_ref | PRIMARY       | PRIMARY     | 1022    | isucon2021_prior.reservations.user_id |    1 |   100.00 | NULL  |
+----+-------------+--------------+------------+--------+---------------+-------------+---------+---------------------------------------+------+----------+-------+
2 rows in set, 1 warning (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;もしかすると、インデックスによってINSERTの性能が落ちているかもしれないので、インデックスの追加は保留する。&lt;/p&gt;
&lt;h1&gt;get_reservations_count&lt;/h1&gt;
&lt;p&gt;flamegraphを見ると、依然として&lt;code&gt;#get_reservations&lt;/code&gt;が占める割合が高いままだけど、それはリクエスト数が多いからなので、他をあたることにする。次に多いのは&lt;code&gt;#get_reservations_count&lt;/code&gt;なので実装を見ていく。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/api/schedules'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;schedules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xquery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SELECT * FROM `schedules` ORDER BY `id` DESC'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;schedules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get_reservations_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_reservations_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;reservations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xquery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SELECT * FROM `reservations` WHERE `schedule_id` = ?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:reserved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reservations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;必要なのは予約数のみなので、すべてのカラムを取得せずに件数だけ取得する。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; def get_reservations_count(schedule)
&lt;span class=&quot;gd&quot;&gt;-  reservations = db.xquery('SELECT * FROM `reservations` WHERE `schedule_id` = ?', schedule[:id])
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+  reservations = db.xquery('SELECT COUNT(*) AS count FROM `reservations` WHERE `schedule_id` = ?', schedule[:id])
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;-  schedule[:reserved] = reservations.size
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+  schedule[:reserved] = reservations.first[:count]
&lt;/span&gt; end
&lt;/pre&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;18:03:08.151453 score: 1806&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1806 - 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : pass
18:03:08.151469 deduction: 0 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 1
&lt;/pre&gt;
&lt;p&gt;スコアが上がった。&lt;/p&gt;
&lt;h1&gt;POST /api/reservations&lt;/h1&gt;
&lt;p&gt;再度flamegraphを生成すると、&lt;code&gt;post '/api/reservations'&lt;/code&gt;全体が占める割合が増えたため、実装を見ていく。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/api/reservations'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;required_login!&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'reservations'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;schedule_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:schedule_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;halt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;403&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;error: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'schedule not found'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xquery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SELECT 1 FROM `schedules` WHERE `id` = ? LIMIT 1 FOR UPDATE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedule_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;halt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;403&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;error: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'user not found'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xquery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SELECT 1 FROM `users` WHERE `id` = ? LIMIT 1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;halt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;403&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;error: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'already taken'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xquery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SELECT 1 FROM `reservations` WHERE `schedule_id` = ? AND `user_id` = ? LIMIT 1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedule_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# snip&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;user not found&lt;/code&gt;エラーは&lt;code&gt;#required_login!&lt;/code&gt;ですでにチェックしていることを二重にチェックしているため不要なはず。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; post '/api/reservations' do
   required_login!
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;   transaction do |tx|
     id = generate_id('reservations', tx)
     schedule_id = params[:schedule_id].to_s
     user_id = current_user[:id]
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;     halt(403, JSON.generate(error: 'schedule not found')) if tx.xquery('SELECT 1 FROM `schedules` WHERE `id` = ? LIMIT 1 FOR UPDATE', schedule_id).first.nil?
&lt;span class=&quot;gd&quot;&gt;-    halt(403, JSON.generate(error: 'user not found')) unless tx.xquery('SELECT 1 FROM `users` WHERE `id` = ? LIMIT 1', user_id).first
&lt;/span&gt;     halt(403, JSON.generate(error: 'already taken')) if tx.xquery('SELECT 1 FROM `reservations` WHERE `schedule_id` = ? AND `user_id` = ? LIMIT 1', schedule_id, user_id).first
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;     # snip
   end
 end
&lt;/pre&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;18:22:16.026245 score: 1556&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1556 - 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : pass
18:22:16.026260 deduction: 0 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 1
&lt;/pre&gt;
&lt;p&gt;スコアは減っているけど、おそらく誤差の範囲のはずなので続きを見る。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/api/reservations'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;required_login!&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# snip&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xquery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SELECT `capacity` FROM `schedules` WHERE `id` = ? LIMIT 1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedule_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:capacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reserved&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xquery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SELECT * FROM `reservations` WHERE `schedule_id` = ?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedule_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;reserved&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# snip&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;reserved&lt;/code&gt;をインクリメントしているので、&lt;code&gt;COUNT(*)&lt;/code&gt;を取得するように直す。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; post '/api/reservations' do
   required_login!
 
   transaction do |tx|
     # snip
 
     capacity = tx.xquery('SELECT `capacity` FROM `schedules` WHERE `id` = ? LIMIT 1', schedule_id).first[:capacity]
&lt;span class=&quot;gd&quot;&gt;-    reserved = 0
-    tx.xquery('SELECT * FROM `reservations` WHERE `schedule_id` = ?', schedule_id).each do
-      reserved += 1
-    end
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    reserved = tx.xquery('SELECT COUNT(*) AS count FROM `reservations` WHERE `schedule_id` = ?', schedule_id).first[:count]
&lt;/span&gt; 
     # snip
   end
 end
&lt;/pre&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;18:33:05.264692 score: 1786&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1786 - 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : pass
18:33:05.264705 deduction: 0 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 0
&lt;/pre&gt;
&lt;p&gt;もう少しよく見てみると、予約を更新していないのに排他ロックを取得しているため、これをやめる。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; post '/api/reservations' do
   required_login!
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;   transaction do |tx|
     id = generate_id('reservations', tx)
     schedule_id = params[:schedule_id].to_s
     user_id = current_user[:id]
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;-    halt(403, JSON.generate(error: 'schedule not found')) if tx.xquery('SELECT 1 FROM `schedules` WHERE `id` = ? LIMIT 1 FOR UPDATE', schedule_id).first.nil?
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    halt(403, JSON.generate(error: 'schedule not found')) if tx.xquery('SELECT 1 FROM `schedules` WHERE `id` = ? LIMIT 1', schedule_id).first.nil?
&lt;/span&gt;     halt(403, JSON.generate(error: 'already taken')) if tx.xquery('SELECT 1 FROM `reservations` WHERE `schedule_id` = ? AND `user_id` = ? LIMIT 1', schedule_id, user_id).first
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;     # snip
   end
 end
&lt;/pre&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;18:42:40.103174 score: 1789&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1789 - 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : pass
18:42:40.103188 deduction: 0 / &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;: 0
&lt;/pre&gt;
&lt;h1&gt;仕様から見直し&lt;/h1&gt;
&lt;p&gt;flamegraphから見ても手がかりが見当たらなくなってきたため、仕様を見直してみる。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;API は予約を受け付けているスケジュールの一覧をレスポンスしてください。ただし、管理者が全スケジュールの一覧を要求した時は、予約が埋まっていてもすべてのスケジュールを返してください。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;現状の実装だと、この仕様が満たせていないことがわかる。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/api/schedules'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;schedules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xquery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SELECT * FROM `schedules` ORDER BY `id` DESC'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;schedules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get_reservations_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;仕様に沿うように修正する。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; get '/api/schedules' do
   schedules = db.xquery('SELECT * FROM `schedules` ORDER BY `id` DESC');
   schedules.each do |schedule|
     get_reservations_count(schedule)
   end
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+  if current_user.nil? || !current_user[:staff]
+    schedules = schedules.select { |schedule| schedule[:capacity] &amp;gt; schedule[:reserved] }
+  end
&lt;/span&gt; 
   json(schedules.to_a)
 end
&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;21:08:56.729009 score: 1778(1778 - 0) : pass
21:08:56.729022 deduction: 0 / timeout: 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ベンチマーカーの仕様というか、お題の設定を確認する。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;とある日から世界各地で Webinar が開催されます。&lt;br&gt;
受け付けられる参加申込上限は、各 Webinar ごとに設定されています。&lt;br&gt;
管理者は Webinar の申し込みが埋まってくると、新たな Webinar の予定を設定します。&lt;br&gt;
ユーザーは1度の Webinar 参加では満足せず、複数回参加しようとします。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ベンチマーカー走行後の予約の埋まり具合を確認すると、そこまで予約が埋まっていない予定もまだありそうだった。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedules&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reservations&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reservations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedule_id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----------------------------+----------+-------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;                         &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----------------------------+----------+-------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA864ZF243KEES0AD1RYP58Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA864ZK8W9RXPYK29TBVZSNA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;92&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;92&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA864ZQV5H9R23DJSQVV9JCN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA864ZW6KY01AVS47GR8E3EJ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA86500PX63PH9P07NH46ZXY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA86504JY07NJAM9CJVPBMVV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;88&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;88&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA86560C28TCP8XPFN3Q914Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA865CRMPTJFZKWH86H1W06D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA865DYMY0R2441PBAR85D9P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;82&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;82&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA865DTDN7RVX0AVMXJ14TWM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA865GNSMGZH7RNPDHDGKHQK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;113&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;113&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA865H7Z25AZ55Q7380E5J00&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA865J3T90ADJFM4AMRZV90N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;39&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;39&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA865N5P6EW1B5K8WDMJM59G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;124&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;106&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA865R660AK2QC1R3JD3VA6N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;39&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;39&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA865T3JKEXGETJ5XYMNMDEK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA865TV03V3Z3DQ7YRFS9ZWT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;106&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA865Z0HK75NF4SVX5PWH3R8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;59&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA8660P2Y2GT2TMSXDN32V27&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA866372TPJG09G1ZB7VFJVQ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;37&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA8668JK4SAP3B1G6B64KDXJ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----------------------------+----------+-------+&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;次にユーザーごとの予約回数を見てみると、ほぼすべてのユーザーが6回で打ち止めになっており、ここがスコアが伸びない原因のように見える。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reservations&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reservations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----------------------------+-------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;                         &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----------------------------+-------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA864ZD35SD8ED82VSTCQYG2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA864ZPQBCAT79NMYK77ZAW5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA8650765HP9ZPE77WW3Z1N0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA86506KC7T955XGAWM8ZBRA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA8650GF8XS85A2NA39H66D2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA8650H7G6EV0JM96JBMYP1B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- snip&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA866A5HQH99A4X9A8B6FHK5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA866AE3MMMZVGJV7S2F8T53&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA866AS78FFQSP2RX2SYZT74&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA866AS8Z7A4R26PEK3BSEN3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FA866B61T85RBTZ7XZJH4TYE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----------------------------+-------+&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;218&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;POST /api/signup&lt;/h1&gt;
&lt;p&gt;ユーザー登録を改善することでスコアが伸びないか試してみる。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/api/signup'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;nickname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'users'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nickname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:nickname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xquery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'INSERT INTO `users` (`id`, `email`, `nickname`, `created_at`) VALUES (?, ?, ?, NOW(6))'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;created_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xquery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SELECT `created_at` FROM `users` WHERE `id` = ? LIMIT 1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:created_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;email: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;nickname: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;created_at: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;created_at&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ULID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xquery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SELECT 1 FROM `&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;` WHERE `id` = ? LIMIT 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ULID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ULIDが衝突する可能性は無視できるはずなので、重複チェックをやめる。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; def generate_id(table, tx)
&lt;span class=&quot;gd&quot;&gt;-  id = ULID.generate
-  while tx.xquery(&quot;SELECT 1 FROM `#{table}` WHERE `id` = ? LIMIT 1&quot;, id).first
-    id = ULID.generate
-  end
-  id
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+  ULID.generate
&lt;/span&gt; end
&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;08:17:46.688947 score: 1843(1843 - 0) : pass
08:17:46.688961 deduction: 0 / timeout: 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;created_at&lt;/code&gt;もアプリケーションで生成してクエリを減らす。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt;&lt;span class=&quot;p&quot;&gt;post '/api/signup' do
&lt;/span&gt;  id = ''
  nickname = ''
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;  user = transaction do |tx|
    id = generate_id('users', tx)
    email = params[:email]
    nickname = params[:nickname]
&lt;span class=&quot;gd&quot;&gt;-   tx.xquery('INSERT INTO `users` (`id`, `email`, `nickname`, `created_at`) VALUES (?, ?, ?, NOW(6))', id, email, nickname)
-   created_at = tx.xquery('SELECT `created_at` FROM `users` WHERE `id` = ? LIMIT 1', id).first[:created_at]
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+   created_at = Time.now.iso8601(6)
+   tx.xquery('INSERT INTO `users` (`id`, `email`, `nickname`, `created_at`) VALUES (?, ?, ?, ?)', id, email, nickname, created_at)
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;    { id: id, email: email, nickname: nickname, created_at: created_at }
  end
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;  json(user)
&lt;span class=&quot;p&quot;&gt;end
&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;08:23:51.263969 score: 1909(1909 - 0) : pass
08:23:51.263984 deduction: 0 / timeout: 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ユーザー登録自体はこれ以上改善できなさそうなので、ここまでにする。&lt;/p&gt;</summary>
    <title>isucon11-priorでisuconの練習をした1</title>
    <updated>2021-07-11T23:08:00+00:00</updated>
    <dc:date>2021-07-11T23:08:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/450/</id>
    <link href="https://blog.naoty.dev/450/"/>
    <summary>&lt;h1&gt;クラスターの起動&lt;/h1&gt;
&lt;p&gt;docker for macのVMに割り当てるメモリを4GBまで上げたら起動した。&lt;/p&gt;
&lt;pre lang=&quot;yaml&quot; class=&quot;highlight highlight-yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;cassandra1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cassandra&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;CASSANDRA_SEEDS&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cassandra1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;cassandra2&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cassandra&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;CASSANDRA_SEEDS&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cassandra1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cassandra1&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;コンテナにログインして&lt;code&gt;nodetool status&lt;/code&gt;を実行すると、複数台のノードでクラスターが構成されていることがわかる。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% nodetool status

Datacenter: datacenter1
&lt;span class=&quot;o&quot;&gt;=======================&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Up/Down
|/ &lt;span class=&quot;nv&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Normal/Leaving/Joining/Moving
&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;  Address     Load       Tokens       Owns &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;effective&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  Host ID                               Rack
UN  172.18.0.2  146.6 KiB  256          100.0%            410c863f-f3e8-41e6-b297-f0f1e3bd7d33  rack1
UN  172.18.0.3  70.72 KiB  256          100.0%            a8585f68-ab42-4c87-a416-49fd48daadf7  rack1
&lt;/pre&gt;
&lt;h1&gt;パーティションの確認&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;nodetool ring&lt;/code&gt;を実行すると、各ノードが担当するトークンの範囲がわかる。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% nodetool ring

Datacenter: datacenter1
&lt;span class=&quot;o&quot;&gt;==========&lt;/span&gt;
Address     Rack        Status State   Load            Owns                Token
                                                                           9205355899184488755
172.18.0.3  rack1       Up     Normal  227.44 KiB      100.00%             &lt;span class=&quot;nt&quot;&gt;-9182155964809320561&lt;/span&gt;
172.18.0.3  rack1       Up     Normal  227.44 KiB      100.00%             &lt;span class=&quot;nt&quot;&gt;-9173740678595215345&lt;/span&gt;
172.18.0.2  rack1       Up     Normal  215.57 KiB      100.00%             &lt;span class=&quot;nt&quot;&gt;-9155666247780803709&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# (snip)&lt;/span&gt;
172.18.0.3  rack1       Up     Normal  227.44 KiB      100.00%             9151380247043298877
172.18.0.2  rack1       Up     Normal  215.57 KiB      100.00%             9160375385280096791
172.18.0.2  rack1       Up     Normal  215.57 KiB      100.00%             9205355899184488755
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;172.18.0.2&lt;/code&gt;と&lt;code&gt;172.18.0.3&lt;/code&gt;のノードそれぞれに&lt;code&gt;Token&lt;/code&gt;が割り当てられている。&lt;code&gt;Token&lt;/code&gt;の値は担当範囲の最後の値を表している。トークンはリング状に配置されるため、上の例で言うと最大値&lt;code&gt;9205355899184488755&lt;/code&gt;の次の値は最小値&lt;code&gt;-9182155964809320561&lt;/code&gt;ということになる。&lt;/p&gt;
&lt;p&gt;次に実際にデータがどのパーティションに保存されているか確認する。まずは、適当なテーブルを追加してデータを入れる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cqlsh:hello&amp;gt; create table users (id bigint primary key, name text);
cqlsh:hello&amp;gt; insert into users (id, name) values (1, 'alice');
cqlsh:hello&amp;gt; insert into users (id, name) values (2, 'bob');
cqlsh:hello&amp;gt; select * from users;

 id | name
----+-------
  2 |   bob
  1 | alice

(2 rows)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;TOKEN&lt;/code&gt;関数を使うと、渡した値からトークンとなる値を計算できる。パーティションキーを渡してトークンを計算してみる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cqlsh:hello&amp;gt; select id, token(id) from users;

 id | system.token(id)
----+----------------------
  2 | -8218881827949364593
  1 |  6292367497774912474

(2 rows)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これらの値と&lt;code&gt;nodetool ring&lt;/code&gt;で見たトークンの範囲と見比べることで、その行がどのノードに保存されているか確認できる。先程の&lt;code&gt;nodetool ring&lt;/code&gt;の結果を再掲すると以下のようになっている。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;172.18.0.3  rack1       Up     Normal  227.44 KiB      100.00%             &lt;span class=&quot;nt&quot;&gt;-8312964340927482628&lt;/span&gt;
172.18.0.2  rack1       Up     Normal  215.57 KiB      100.00%             &lt;span class=&quot;nt&quot;&gt;-8169459460287760239&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# (snip)&lt;/span&gt;
172.18.0.2  rack1       Up     Normal  215.57 KiB      100.00%             6147470985463054203
172.18.0.2  rack1       Up     Normal  215.57 KiB      100.00%             6312725102659141435
&lt;/pre&gt;
&lt;p&gt;よって、&lt;code&gt;id:2&lt;/code&gt;の行は&lt;code&gt;172.18.0.2&lt;/code&gt;のノードに、&lt;code&gt;id:1&lt;/code&gt;の行は同じく&lt;code&gt;172.18.0.2&lt;/code&gt;のノードに保存されていることがわかった。&lt;/p&gt;</summary>
    <title>docker composeでcassandraクラスターを動かす</title>
    <updated>2021-06-30T23:53:00+00:00</updated>
    <dc:date>2021-06-30T23:53:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/449/</id>
    <link href="https://blog.naoty.dev/449/"/>
    <summary>&lt;p&gt;Cassandraを本格的に扱う機会ができたので、CQL実際に試しながら覚えていきたい。CassandraにはDocker公式のイメージがあるため、これを利用する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% docker run --name hello-cassandra cassandra
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;cqlsh&lt;/code&gt;でCQLを実際に試していく。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% docker exec --interactive --tty hello-cassandra cqlsh
Connected to Test Cluster at 127.0.0.1:9042.
[cqlsh 5.0.1 | Cassandra 3.11.10 | CQL spec 3.4.4 | Native protocol v4]
Use HELP for help.
cqlsh&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;キースペースの作成&lt;/h1&gt;
&lt;p&gt;Cassandraはキースペースと呼ばれるものの中にテーブルが存在し、1つのアプリケーションにつき1つのキースペースを用意するとのことなので、まずはキースペースを作る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cqlsh&amp;gt; create keyspace hello with replication = {'class' : 'SimpleStrategy', 'replication_factor' : 1};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;キースペースを作成する際にレプリケーションストラテジーとレプリケーション係数を指定する必要がある。今回はテストなので、&lt;code&gt;SimpleStrategy&lt;/code&gt;を選択しレプリケーション係数も1にする。&lt;/p&gt;
&lt;p&gt;キースペースの一覧は&lt;code&gt;desc keyspaces&lt;/code&gt;で確認できる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cqlsh&amp;gt; desc keyspaces;

system_schema  system_auth  system  system_distributed  system_traces  hello
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以降の操作で扱うキースペースを選択するにはSQLと同様に&lt;code&gt;use&lt;/code&gt;を使う。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cqlsh&amp;gt; use hello;
cqlsh:hello&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;テーブルの作成&lt;/h1&gt;
&lt;p&gt;作成したキースペース内にテーブルを作成する。これもSQLと同様に&lt;code&gt;create table&lt;/code&gt;を使う。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cqlsh:hello&amp;gt; create table users (
         ...   user_id bigint primary key,
         ...   name varchar,
         ...   birthday date
         ... );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cassandraがサポートするデータ型は&lt;a href=&quot;https://docs.datastax.com/ja/dse/5.1/cql/cql/cql_reference/refDataTypes.html&quot;&gt;ここ&lt;/a&gt;を参考にするといい。&lt;/p&gt;
&lt;p&gt;テーブルのリストはキースペースと同様に&lt;code&gt;desc tables&lt;/code&gt;で見れる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cqlsh:hello&amp;gt; desc tables;

users
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;各テーブルのスキーマはSQLと同様に&lt;code&gt;desc &amp;lt;table名&amp;gt;&lt;/code&gt;で見れる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cqlsh:hello&amp;gt; desc users;

CREATE TABLE hello.users (
    user_id bigint PRIMARY KEY,
    birthday date,
    name text
) WITH bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99PERCENTILE';
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;データの挿入・更新&lt;/h1&gt;
&lt;p&gt;これもSQL同様に&lt;code&gt;insert into &amp;lt;table名&amp;gt; (&amp;lt;カラム1&amp;gt;, ...) values (&amp;lt;値1&amp;gt;, ...)&lt;/code&gt;でデータを挿入できる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cqlsh:hello&amp;gt; insert into users (user_id, birthday, name)
         ... values (1, '2021-01-01', 'naoty');
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;SQLと違う部分は複数行を一度に&lt;code&gt;insert&lt;/code&gt;できない。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cqlsh:hello&amp;gt; insert into users (user_id, birthday, name)
         ... values (1, '2021-01-01', 'naoty'),
                    (2, '2021-02-01', 'naoty2');
SyntaxException: line 2:33 mismatched input ',' expecting EOF (... (1, '2021-01-01', 'naoty')[,]...)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;さらに、primary keyが同じレコードを&lt;code&gt;insert&lt;/code&gt;すると更新処理になる。upsertと呼ばれる処理になっている。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cqlsh:hello&amp;gt; insert into users (user_id, birthday, name)
         ... values (1, '2021-01-01', 'naoty2');
cqlsh:hello&amp;gt; select * from users where user_id = 1;

 user_id | birthday   | name
---------+------------+--------
       1 | 2021-01-01 | naoty2

(1 rows)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;クエリ実行&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;cqlsh:hello&amp;gt; select * from users;

 user_id | birthday   | name
---------+------------+--------
       1 | 2021-01-01 | naoty2

(1 rows)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件を指定する場合は&lt;code&gt;where&lt;/code&gt;で指定できる。ただし、&lt;a href=&quot;/444/&quot;&gt;以前の記事&lt;/a&gt;でも書いた通り、プライマリーキー以外のカラムを&lt;code&gt;where&lt;/code&gt;で指定することは制限されている。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cqlsh:hello&amp;gt; select * from users where user_id = 1;

 user_id | birthday   | name
---------+------------+--------
       1 | 2021-01-01 | naoty2

(1 rows)
cqlsh:hello&amp;gt; select * from users where name = 'naoty2';
InvalidRequest: Error from server: code=2200 [Invalid query] message=&quot;Cannot execute this query as it might involve data filtering and thus may have unpredictable performance. If you want to execute this query despite the performance unpredictability, use ALLOW FILTERING&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;データの削除&lt;/h1&gt;
&lt;p&gt;SQLと同様に&lt;code&gt;delete from&lt;/code&gt;で削除できる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cqlsh:hello&amp;gt; delete from users where user_id = 1;
cqlsh:hello&amp;gt; select * from users;

 user_id | birthday | name
---------+----------+------

(0 rows)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;カラムの追加&lt;/h1&gt;
&lt;p&gt;SQLと同様に&lt;code&gt;alter table &amp;lt;table名&amp;gt; add &amp;lt;カラム名&amp;gt; &amp;lt;データ型&amp;gt;&lt;/code&gt;でできる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cqlsh:hello&amp;gt; alter table users add lastname text;
cqlsh:hello&amp;gt; desc users;

CREATE TABLE hello.users (
    user_id bigint PRIMARY KEY,
    birthday date,
    lastname text,
    name text
) WITH bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99PERCENTILE';
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;カラムのリネーム&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;alter table &amp;lt;table名&amp;gt; rename &amp;lt;古いカラム名&amp;gt; to &amp;lt;新しいカラム名&amp;gt;&lt;/code&gt;でできる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cqlsh:hello&amp;gt; alter table users rename name to firstname;
InvalidRequest: Error from server: code=2200 [Invalid query] message=&quot;Cannot rename non PRIMARY KEY part name&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ただし、リネームができるのはprimary keyのclustering columnだけのようだ。&lt;/p&gt;
&lt;h1&gt;カラムの削除&lt;/h1&gt;
&lt;p&gt;SQLと同様に&lt;code&gt;alter table &amp;lt;table名&amp;gt; drop &amp;lt;カラム名&amp;gt;&lt;/code&gt;でできる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cqlsh:hello&amp;gt; alter table users drop lastname;
cqlsh:hello&amp;gt; desc users;

CREATE TABLE hello.users (
    user_id bigint PRIMARY KEY,
    birthday date,
    name text
) WITH bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99PERCENTILE';
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.datastax.com/ja/dse/5.1/cql/index.html&quot;&gt;https://docs.datastax.com/ja/dse/5.1/cql/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>CQL入門</title>
    <updated>2021-06-28T22:17:00+00:00</updated>
    <dc:date>2021-06-28T22:17:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/448/</id>
    <link href="https://blog.naoty.dev/448/"/>
    <summary>&lt;p&gt;今さらながら雰囲気でRSpecを書いているところがあったのでブログにしてみた。&lt;/p&gt;
&lt;p&gt;テスト対象に影響を与えるパラメータが複数あると、テスト対象の値がとりうるパターンが膨大な組み合わせになる。例えば、あるパラメータ&lt;code&gt;a&lt;/code&gt;がテスト結果に影響を及ぼしうるパターンが2つあり、さらにパラメータ&lt;code&gt;b&lt;/code&gt;に2つパターンがあれば合計4パターンのテストが必要になる。&lt;/p&gt;
&lt;p&gt;RSpecでは&lt;code&gt;context&lt;/code&gt;をつかってテストの事前条件をスコープとして分割できるので、こういった組み合わせをネストされたスコープとして表現することになってしまう。&lt;/p&gt;
&lt;h1&gt;ナイーブな実装&lt;/h1&gt;
&lt;p&gt;まずは何も考えずに&lt;code&gt;context&lt;/code&gt;のネストによって事前条件の組み合わせを実装した例を載せる。このコードはそのまま一つのファイルとして実行可能になっている。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bundler/inline&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gemfile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://rubygems.org&quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rspec&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rspec/autorun&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Something&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Something&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;formatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:documentation&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Something&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;described_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#do_something_with_arguments&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when a is nil&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when b is nil&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;returns empty array&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;do_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when b isn't nil&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;returns array containing value for b&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;do_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when a isn't nil&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when b is nil&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;returns array containing value for a&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;do_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when b isn't nil&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;returns array containing value for a and b&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;do_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;個人的には&lt;code&gt;subject { ... }&lt;/code&gt;があまり好みじゃないので同じコードをあえて何度も書いている。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% ruby app.rb
Struct::Something
  #do_something_with_arguments
    when a is nil
      when b is nil
        returns empty array
      when b isn't nil
        returns array containing value for b
    when a isn't nil
      when b is nil
        returns array containing value for a
      when b isn't nil
        returns array containing value for a and b

Finished in 0.00539 seconds (files took 0.20052 seconds to load)
4 examples, 0 failures
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上の例ではパラメータが2つしかないため、そこまでひどいネストにはならなかったが、現実世界ではパラメータはユーザーから渡されるパラメータやDBに保存されたデータの状態など無数に存在する。それらを愚直に&lt;code&gt;context&lt;/code&gt;で実装するととんでもないことになる。&lt;/p&gt;
&lt;p&gt;そんなことをする人はいないのもまた現実であり、テストすべきパラメータの組み合わせが網羅できているかがわからないあいまいなテストコードが生まれることになる。&lt;/p&gt;
&lt;h1&gt;shared_contextをつかった実装&lt;/h1&gt;
&lt;p&gt;次に&lt;code&gt;shared_context&lt;/code&gt;を使って事前条件を定義し、&lt;code&gt;context&lt;/code&gt;内で&lt;code&gt;include_context&lt;/code&gt;を複数回呼び出すことでそれらの組み合わせを実装する例を載せる。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bundler/inline&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gemfile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://rubygems.org&quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rspec&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rspec/autorun&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Something&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Something&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;formatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:documentation&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Something&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;described_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#do_something_with_arguments&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shared_context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when a is nil&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;shared_context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when a isn't nil&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;shared_context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when b is nil&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;shared_context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when b isn't nil&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when a and b is nil&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;include_context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when a is nil&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;include_context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when b is nil&quot;&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;returns empty array&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;do_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when a is nil and b isn't nil&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;include_context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when a is nil&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;include_context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when b isn't nil&quot;&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;returns array containing value for b&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;do_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when a isn't nil and b is nil&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;include_context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when a isn't nil&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;include_context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when b is nil&quot;&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;returns array containing value for a&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;do_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when a and b isn't nil&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;include_context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when a isn't nil&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;include_context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when b isn't nil&quot;&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;returns array containing value for a and b&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;do_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;% ruby app.rb
Struct::Something
  #do_something_with_arguments
    when a and b is nil
      returns empty array
    when a is nil and b isn't nil
      returns array containing value for b
    when a isn't nil and b is nil
      returns array containing value for a
    when a and b isn't nil
      returns array containing value for a and b

Finished in 0.00564 seconds (files took 0.20556 seconds to load)
4 examples, 0 failures
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;shared_context&lt;/code&gt;で再利用可能な事前条件を定義し、&lt;code&gt;include_context&lt;/code&gt;でそれを利用している。&lt;code&gt;include_context&lt;/code&gt;は複数呼び出せるので、事前条件の組み合わせを親の&lt;code&gt;context&lt;/code&gt;内で宣言でき、&lt;code&gt;context&lt;/code&gt;が深くネストしていくような事態にはならなくなった。&lt;/p&gt;
&lt;p&gt;この方法であれば、あるパラメータがとりうるパターンをそれぞれ&lt;code&gt;shared_context&lt;/code&gt;で定義しておくことでどれだけ組み合わせが増えてもネストがこれ以上は深くならずテストコードの読みやすさを維持できると思う。&lt;/p&gt;
&lt;h1&gt;補足&lt;/h1&gt;
&lt;p&gt;そもそも、とりうるすべての組み合わせをテストすることはテスト全体の実行時間を遅らせることになる。必要十分なテストケースのみ列挙することで、テストとしての有効性を保ちつつこうしたデメリットを回避する方法もある。&lt;a href=&quot;/400/&quot;&gt;以前の記事&lt;/a&gt;ではそうしたテストケースの生成方法についてまとめたので参考になるかもしれない。&lt;/p&gt;</summary>
    <title>深すぎるcontextのネストを読みやすくする</title>
    <updated>2021-06-27T20:56:00+00:00</updated>
    <dc:date>2021-06-27T20:56:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/447/</id>
    <link href="https://blog.naoty.dev/447/"/>
    <summary>&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;/445/&quot;&gt;Part 1&lt;/a&gt;: &lt;code&gt;select&lt;/code&gt;による特定の一行に対するロック&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;/446/&quot;&gt;Part 2&lt;/a&gt;: &lt;code&gt;select&lt;/code&gt;による複数行に対するロック&lt;/li&gt;
&lt;li&gt;Part 3: &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;によるロック&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は&lt;code&gt;insert&lt;/code&gt;等の操作がどのようなロックをとるのか調べてみる。前回と同様にworldデータベースを使い、同じ下準備を済ませる。&lt;/p&gt;
&lt;h1&gt;insert&lt;/h1&gt;
&lt;p&gt;外部キー制約の有無で結果が変わったため、先に外部キー制約がない場合を見る。&lt;/p&gt;
&lt;p&gt;外部キー制約がない&lt;code&gt;country&lt;/code&gt;テーブルに&lt;code&gt;insert&lt;/code&gt;してみる。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affected&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;001&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;country&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`Code`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`Name`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`Region`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`LocalName`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`GovernmentForm`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`Code2`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'AFZ'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dummy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dummy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dummy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dummy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'AZ'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affected&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;002&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;------------
TRANSACTIONS
------------
Trx id counter 2664
Purge done for trx's n:o &amp;lt; 2662 undo n:o &amp;lt; 0 state: running but idle
History list length 0
LIST OF TRANSACTIONS FOR EACH SESSION:
---TRANSACTION 421394077937904, not started
0 lock struct(s), heap size 1136, 0 row lock(s)
---TRANSACTION 421394077936192, not started
0 lock struct(s), heap size 1136, 0 row lock(s)
---TRANSACTION 421394077935336, not started
0 lock struct(s), heap size 1136, 0 row lock(s)
---TRANSACTION 2663, ACTIVE 3 sec
1 lock struct(s), heap size 1136, 0 row lock(s), undo log entries 1
MySQL thread id 47, OS thread handle 139918963160832, query id 355 localhost root
TABLE LOCK table `world`.`country` trx id 2663 lock mode IX
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;RECORD LOCKS&lt;/code&gt;から始まる行が出力されなかった。&lt;/p&gt;
&lt;p&gt;次に&lt;code&gt;country&lt;/code&gt;テーブルへの外部キー制約をもつ&lt;code&gt;city&lt;/code&gt;テーブルへの&lt;code&gt;insert&lt;/code&gt;を試してみる。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affected&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;001&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`Name`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`CountryCode`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`District`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`Population`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dummy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'AFG'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dummy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affected&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;013&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;------------
TRANSACTIONS
------------
Trx id counter 2059
Purge done for trx's n:o &amp;lt; 2054 undo n:o &amp;lt; 0 state: running but idle
History list length 0
LIST OF TRANSACTIONS FOR EACH SESSION:
---TRANSACTION 421226401721752, not started
0 lock struct(s), heap size 1136, 0 row lock(s)
---TRANSACTION 421226401720896, not started
0 lock struct(s), heap size 1136, 0 row lock(s)
---TRANSACTION 421226401720040, not started
0 lock struct(s), heap size 1136, 0 row lock(s)
---TRANSACTION 2058, ACTIVE 20 sec
3 lock struct(s), heap size 1136, 1 row lock(s), undo log entries 1
MySQL thread id 11, OS thread handle 139751396103936, query id 40 localhost root
TABLE LOCK table `world`.`city` trx id 2058 lock mode IX
TABLE LOCK table `world`.`country` trx id 2058 lock mode IS
RECORD LOCKS space id 3 page no 5 n bits 120 index PRIMARY of table `world`.`country` trx id 2058 lock mode S locks rec but not gap
Record lock, heap no 3 PHYSICAL RECORD: n_fields 17; compact format; info bits 0
 0: len 3; hex 414647; asc AFG;;
 1: len 6; hex 000000000647; asc      G;;
 2: len 7; hex 820000008f011c; asc        ;;
 3: len 30; hex 41666768616e697374616e20202020202020202020202020202020202020; asc Afghanistan                   ; (total 52 bytes);
 4: len 1; hex 01; asc  ;;
 5: len 26; hex 536f75746865726e20616e642043656e7472616c204173696120; asc Southern and Central Asia ;;
 6: len 5; hex 8009f33a00; asc    : ;;
 7: len 2; hex 877f; asc   ;;
 8: len 4; hex 815aae00; asc  Z  ;;
 9: len 2; hex ad09; asc   ;;
 10: len 5; hex 8000175800; asc    X ;;
 11: SQL NULL;
 12: len 30; hex 416667616e697374616e2f416671616e657374616e202020202020202020; asc Afganistan/Afqanestan         ; (total 45 bytes);
 13: len 30; hex 49736c616d696320456d6972617465202020202020202020202020202020; asc Islamic Emirate               ; (total 45 bytes);
 14: len 30; hex 4d6f68616d6d6164204f6d61722020202020202020202020202020202020; asc Mohammad Omar                 ; (total 60 bytes);
 15: len 4; hex 80000001; asc     ;;
 16: len 2; hex 4146; asc AF;;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;RECORD LOCKS space id 3 page no 5 n bits 120 index PRIMARY of table &lt;code&gt;world&lt;/code&gt;.&lt;code&gt;country&lt;/code&gt; trx id 2058 lock mode S locks rec but not gap&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;country&lt;/code&gt;テーブルのクラスタインデックスにおいて外部キーである&lt;code&gt;AFG&lt;/code&gt;にマッチするレコードに対してレコードロックを取得している。ただし、排他ロックではなく共有ロックとなっている。&lt;/p&gt;
&lt;p&gt;そこで、別トランザクションで&lt;code&gt;country&lt;/code&gt;テーブルに対して排他ロックを取得してみようとしたが、やっぱりできなかった。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affected&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;001&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;country&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1205&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Lock wait timeout exceeded; try restarting transaction'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;update&lt;/h1&gt;
&lt;p&gt;まずはプライマリーキーで特定の列のみ&lt;code&gt;update&lt;/code&gt;してみる。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affected&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;000&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`Population`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`Population`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`ID`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affected&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;001&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;このときのロックを確認する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;------------
TRANSACTIONS
------------
Trx id counter 2666
Purge done for trx's n:o &amp;lt; 2662 undo n:o &amp;lt; 0 state: running but idle
History list length 0
LIST OF TRANSACTIONS FOR EACH SESSION:
---TRANSACTION 421394077937904, not started
0 lock struct(s), heap size 1136, 0 row lock(s)
---TRANSACTION 421394077936192, not started
0 lock struct(s), heap size 1136, 0 row lock(s)
---TRANSACTION 421394077935336, not started
0 lock struct(s), heap size 1136, 0 row lock(s)
---TRANSACTION 2665, ACTIVE 16 sec
2 lock struct(s), heap size 1136, 1 row lock(s), undo log entries 1
MySQL thread id 47, OS thread handle 139918963160832, query id 363 localhost root
TABLE LOCK table `world`.`city` trx id 2665 lock mode IX
RECORD LOCKS space id 2 page no 6 n bits 248 index PRIMARY of table `world`.`city` trx id 2665 lock_mode
X locks rec but not gap
Record lock, heap no 2 PHYSICAL RECORD: n_fields 7; compact format; info bits 0
 0: len 4; hex 80000001; asc     ;;
 1: len 6; hex 000000000a69; asc      i;;
 2: len 7; hex 02000001250151; asc     % Q;;
 3: len 30; hex 4b6162756c20202020202020202020202020202020202020202020202020; asc Kabul
       ; (total 35 bytes);
 4: len 3; hex 414647; asc AFG;;
 5: len 20; hex 4b61626f6c202020202020202020202020202020; asc Kabol               ;;
 6: len 4; hex 802a6b60; asc  *k`;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;プライマリーキーで条件を指定しているので、クラスタインデックスに対してレコードロックを取得している。これは&lt;a href=&quot;/446/&quot;&gt;前回&lt;/a&gt;で&lt;code&gt;select ... for update&lt;/code&gt;でプライマリーキーを条件とした場合と同じということになる。&lt;/p&gt;
&lt;p&gt;次にセカンダリインデックスに対して条件を指定して複数行を&lt;code&gt;update&lt;/code&gt;してみる。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affected&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;001&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`Population`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`Population`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`CountryCode`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'AFG'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affected&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;001&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ロックを確認する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;------------
TRANSACTIONS
------------
Trx id counter 3085
Purge done for trx's n:o &amp;lt; 3084 undo n:o &amp;lt; 0 state: running but idle
History list length 1
LIST OF TRANSACTIONS FOR EACH SESSION:
---TRANSACTION 421984916573592, not started
0 lock struct(s), heap size 1136, 0 row lock(s)
---TRANSACTION 421984916572736, not started
0 lock struct(s), heap size 1136, 0 row lock(s)
---TRANSACTION 421984916571880, not started
0 lock struct(s), heap size 1136, 0 row lock(s)
---TRANSACTION 3084, ACTIVE 7 sec
4 lock struct(s), heap size 1136, 9 row lock(s), undo log entries 4
MySQL thread id 10, OS thread handle 140509924382464, query id 44 localhost root
TABLE LOCK table `world`.`city` trx id 3084 lock mode IX
RECORD LOCKS space id 2 page no 14 n bits 1272 index CountryCode of table `world`.`city` trx id 3084 lock_mode X
Record lock, heap no 3 PHYSICAL RECORD: n_fields 2; compact format; info bits 0
 0: len 3; hex 414647; asc AFG;;
 1: len 4; hex 80000001; asc     ;;

Record lock, heap no 4 PHYSICAL RECORD: n_fields 2; compact format; info bits 0
 0: len 3; hex 414647; asc AFG;;
 1: len 4; hex 80000002; asc     ;;

Record lock, heap no 5 PHYSICAL RECORD: n_fields 2; compact format; info bits 0
 0: len 3; hex 414647; asc AFG;;
 1: len 4; hex 80000003; asc     ;;

Record lock, heap no 6 PHYSICAL RECORD: n_fields 2; compact format; info bits 0
 0: len 3; hex 414647; asc AFG;;
 1: len 4; hex 80000004; asc     ;;

RECORD LOCKS space id 2 page no 6 n bits 248 index PRIMARY of table `world`.`city` trx id 3084 lock_mode X locks rec but not gap
Record lock, heap no 2 PHYSICAL RECORD: n_fields 7; compact format; info bits 0
 0: len 4; hex 80000001; asc     ;;
 1: len 6; hex 000000000c0c; asc       ;;
 2: len 7; hex 010000011c0151; asc       Q;;
 3: len 30; hex 4b6162756c20202020202020202020202020202020202020202020202020; asc Kabul                         ; (total 35 bytes);
 4: len 3; hex 414647; asc AFG;;
 5: len 20; hex 4b61626f6c202020202020202020202020202020; asc Kabol               ;;
 6: len 4; hex 801cafc0; asc     ;;

Record lock, heap no 3 PHYSICAL RECORD: n_fields 7; compact format; info bits 0
 0: len 4; hex 80000002; asc     ;;
 1: len 6; hex 000000000c0c; asc       ;;
 2: len 7; hex 010000011c0174; asc       t;;
 3: len 30; hex 51616e646168617220202020202020202020202020202020202020202020; asc Qandahar                      ; (total 35 bytes);
 4: len 3; hex 414647; asc AFG;;
 5: len 20; hex 51616e6461686172202020202020202020202020; asc Qandahar            ;;
 6: len 4; hex 8005265c; asc   &amp;amp;\;;

Record lock, heap no 4 PHYSICAL RECORD: n_fields 7; compact format; info bits 0
 0: len 4; hex 80000003; asc     ;;
 1: len 6; hex 000000000c0c; asc       ;;
 2: len 7; hex 010000011c0197; asc        ;;
 3: len 30; hex 486572617420202020202020202020202020202020202020202020202020; asc Herat                         ; (total 35 bytes);
 4: len 3; hex 414647; asc AFG;;
 5: len 20; hex 4865726174202020202020202020202020202020; asc Herat               ;;
 6: len 4; hex 80046050; asc   `P;;

Record lock, heap no 5 PHYSICAL RECORD: n_fields 7; compact format; info bits 0
 0: len 4; hex 80000004; asc     ;;
 1: len 6; hex 000000000c0c; asc       ;;
 2: len 7; hex 010000011c01ba; asc        ;;
 3: len 30; hex 4d617a61722d652d53686172696620202020202020202020202020202020; asc Mazar-e-Sharif                ; (total 35 bytes);
 4: len 3; hex 414647; asc AFG;;
 5: len 20; hex 42616c6b68202020202020202020202020202020; asc Balkh               ;;
 6: len 4; hex 800379d8; asc   y ;;

RECORD LOCKS space id 2 page no 14 n bits 1272 index CountryCode of table `world`.`city` trx id 3084 lock_mode X locks gap before rec
Record lock, heap no 7 PHYSICAL RECORD: n_fields 2; compact format; info bits 0
 0: len 3; hex 41474f; asc AGO;;
 1: len 4; hex 80000038; asc    8;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これも同様に&lt;code&gt;select ... for update&lt;/code&gt;でセカンダリインデックスを指定した場合のロック範囲と一致する。&lt;/p&gt;
&lt;h1&gt;delete&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;update&lt;/code&gt;と同じ結果になったので割愛する。&lt;/p&gt;
&lt;h1&gt;まとめ&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;insert&lt;/code&gt;は外部キー制約がある場合、外部テーブルに対して共有ロックでのレコードロックを取得する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;update&lt;/code&gt;と&lt;code&gt;delete&lt;/code&gt;は&lt;code&gt;select ... for update&lt;/code&gt;と同じ。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>手を動かしながらロックを学ぶ 3</title>
    <updated>2021-06-10T08:52:00+00:00</updated>
    <dc:date>2021-06-10T08:52:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/446/</id>
    <link href="https://blog.naoty.dev/446/"/>
    <summary>&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;/445/&quot;&gt;Part 1&lt;/a&gt;: &lt;code&gt;select&lt;/code&gt;による特定の一行に対するロック&lt;/li&gt;
&lt;li&gt;Part 2: &lt;code&gt;select&lt;/code&gt;による複数行に対するロック&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;/447/&quot;&gt;Part 3&lt;/a&gt;: &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;によるロック&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前回に続いて、今度は&lt;code&gt;select ... for update&lt;/code&gt;で複数件取得した場合のロックについて試してみる。&lt;/p&gt;
&lt;p&gt;前回同様にworldデータベースの&lt;code&gt;city&lt;/code&gt;テーブルを使う。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;G&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;***************************&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;***************************&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Table&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`city`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`ID`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`Name`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`CountryCode`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`District`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`Population`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`ID`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`CountryCode`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`CountryCode`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;CONSTRAINT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`city_ibfk_1`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FOREIGN&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`CountryCode`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;REFERENCES&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`country`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`Code`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InnoDB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4080&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHARSET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8mb4&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COLLATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8mb4_0900_ai_ci&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;017&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;下準備&lt;/h1&gt;
&lt;p&gt;ロック待ちの確認にかかる時間を減らすため、timeoutを1秒にしておく。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innodb_lock_wait_timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affected&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;001&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;あとで&lt;code&gt;show engine innodb status&lt;/code&gt;でトランザクションの状態を確認するため、出力するようにする。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innodb_status_output_locks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affected&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;002&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;クラスタインデックスによるロック&lt;/h1&gt;
&lt;p&gt;プライマリーキーを条件に指定して&lt;code&gt;select ... for update&lt;/code&gt;してみる。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affected&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;000&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`ID`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------+-------------+----------+------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CountryCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;District&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Population&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------+-------------+----------+------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kabul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AFG&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kabol&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1780000&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------+-------------+----------+------------+&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;011&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;どのようなロックがかかっているか確認するため&lt;code&gt;show engine innodb status&lt;/code&gt;を実行して&lt;code&gt;TRANSACTIONS&lt;/code&gt;を見る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;------------
TRANSACTIONS
------------
Trx id counter 2668
Purge done for trx's n:o &amp;lt; 2667 undo n:o &amp;lt; 0 state: running but idle
History list length 0
LIST OF TRANSACTIONS FOR EACH SESSION:
---TRANSACTION 421394077937904, not started
0 lock struct(s), heap size 1136, 0 row lock(s)
---TRANSACTION 421394077936192, not started
0 lock struct(s), heap size 1136, 0 row lock(s)
---TRANSACTION 421394077935336, not started
0 lock struct(s), heap size 1136, 0 row lock(s)
---TRANSACTION 2667, ACTIVE 4 sec
2 lock struct(s), heap size 1136, 1 row lock(s)
MySQL thread id 47, OS thread handle 139918963160832, query id 369 localhost root
TABLE LOCK table `world`.`city` trx id 2667 lock mode IX
RECORD LOCKS space id 2 page no 6 n bits 248 index PRIMARY of table `world`.`city` trx id 2667 lock_mode X locks rec but not gap
Record lock, heap no 2 PHYSICAL RECORD: n_fields 7; compact format; info bits 0
 0: len 4; hex 80000001; asc     ;;
 1: len 6; hex 00000000063a; asc      :;;
 2: len 7; hex 820000008a0110; asc        ;;
 3: len 30; hex 4b6162756c20202020202020202020202020202020202020202020202020; asc Kabul
       ; (total 35 bytes);
 4: len 3; hex 414647; asc AFG;;
 5: len 20; hex 4b61626f6c202020202020202020202020202020; asc Kabol               ;;
 6: len 4; hex 801b2920; asc   ) ;;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;RECORD LOCKS space id 2 page no 6 n bits 248 index PRIMARY of table &lt;code&gt;world&lt;/code&gt;.&lt;code&gt;city&lt;/code&gt; trx id 2667 lock_mode X locks rec but not gap&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;RECORD LOCKS&lt;/code&gt;から始まる行に着目すると、クラスタインデックスに対するレコードロックを取得していることがわかる。レコードロックはそのまま、そのレコード自身に対するロックを指している。&lt;/p&gt;
&lt;p&gt;試しに取得したレコードを&lt;code&gt;update&lt;/code&gt;してみる。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affected&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;001&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`Population`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`Population`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`ID`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1205&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Lock wait timeout exceeded; try restarting transaction'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;次に、条件にマッチするレコードがなかったときのロックの範囲を確認する。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affected&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;003&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`ID`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+------+-------------+----------+------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CountryCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;District&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Population&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+------+-------------+----------+------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+------+-------------+----------+------------+&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;011&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;------------
TRANSACTIONS
------------
Trx id counter 7005
Purge done for trx's n:o &amp;lt; 7001 undo n:o &amp;lt; 0 state: running but idle
History list length 0
LIST OF TRANSACTIONS FOR EACH SESSION:
---TRANSACTION 421497825593776, not started
0 lock struct(s), heap size 1128, 0 row lock(s)
---TRANSACTION 421497825592968, not started
0 lock struct(s), heap size 1128, 0 row lock(s)
---TRANSACTION 7004, ACTIVE 162 sec
2 lock struct(s), heap size 1128, 1 row lock(s)
MySQL thread id 91, OS thread handle 140022380754688, query id 647 172.21.0.1 root starting
show engine innodb status
TABLE LOCK table `world`.`city` trx id 7004 lock mode IX
RECORD LOCKS space id 2 page no 35 n bits 232 index PRIMARY of table `world`.`city` trx id 7004 lock_mode X
Record lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info bits 0
 0: len 8; hex 73757072656d756d; asc supremum;;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;RECORD LOCKS space id 2 page no 35 n bits 232 index PRIMARY of table &lt;code&gt;world&lt;/code&gt;.&lt;code&gt;city&lt;/code&gt; trx id 7004 lock_mode X&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今度はレコードロックではなくネクストキーロックを取得している。ネクストキーロックとは、そのレコード自身とそのレコードと一つ前のレコードの間のギャップに対するロックを指している。&lt;/p&gt;
&lt;p&gt;この場合は&lt;code&gt;suprenum&lt;/code&gt;と呼ばれる、上限値を表す内部的なレコードに対するネクストキーロックが取得されている。よって、&lt;code&gt;suprenum&lt;/code&gt;とその前のレコード、すなわち&lt;code&gt;id&lt;/code&gt;が最大のレコードとの間のギャップに対してロックが取得されたということになる。&lt;/p&gt;
&lt;p&gt;この状態で別セッションから新たな&lt;code&gt;city&lt;/code&gt;を&lt;code&gt;insert&lt;/code&gt;してみる。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affected&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;003&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`Name`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`CountryCode`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`District`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`Population`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dummy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DUM'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dummy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1205&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Lock wait timeout exceeded; try restarting transaction'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;id&lt;/code&gt;が最大のレコードと&lt;code&gt;suprenum&lt;/code&gt;との間のギャップロックが取得されているため、&lt;code&gt;insert&lt;/code&gt;がロック解除待ちになってしまった。&lt;/p&gt;
&lt;p&gt;条件をいろいろ変えてみると、インデックスのどの範囲に含まれるかによってロックの種類や範囲は変わることがわかった。指定した条件を含むレコードの区間のギャップロックが取得されると考えてよさそうだ。&lt;/p&gt;
&lt;h1&gt;セカンダリインデックスによるロック&lt;/h1&gt;
&lt;p&gt;セカンダリインデックス&lt;code&gt;CountryCode&lt;/code&gt;を条件に指定して&lt;code&gt;select ... for update&lt;/code&gt;してみる。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affected&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;001&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`CountryCode`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'AFG'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+----------------+-------------+----------+------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CountryCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;District&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Population&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+----------------+-------------+----------+------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kabul&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AFG&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kabol&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1780000&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Qandahar&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AFG&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Qandahar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;237500&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Herat&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AFG&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Herat&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;186800&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mazar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sharif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AFG&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Balkh&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;127800&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+----------------+-------------+----------+------------+&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;013&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;先程と同様にロックを確認する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;------------
TRANSACTIONS
------------
--- (snip) ---
---TRANSACTION 2650, ACTIVE 3 sec
4 lock struct(s), heap size 1136, 9 row lock(s)
MySQL thread id 36, OS thread handle 139918963455744, query id 301 localhost root
TABLE LOCK table `world`.`city` trx id 2650 lock mode IX
RECORD LOCKS space id 2 page no 14 n bits 1272 index CountryCode of table `world`.`city` trx id 2650 lock_mode X
Record lock, heap no 3 PHYSICAL RECORD: n_fields 2; compact format; info bits 0
 0: len 3; hex 414647; asc AFG;;
 1: len 4; hex 80000001; asc     ;;

Record lock, heap no 4 PHYSICAL RECORD: n_fields 2; compact format; info bits 0
 0: len 3; hex 414647; asc AFG;;
 1: len 4; hex 80000002; asc     ;;

Record lock, heap no 5 PHYSICAL RECORD: n_fields 2; compact format; info bits 0
 0: len 3; hex 414647; asc AFG;;
 1: len 4; hex 80000003; asc     ;;

Record lock, heap no 6 PHYSICAL RECORD: n_fields 2; compact format; info bits 0
 0: len 3; hex 414647; asc AFG;;
 1: len 4; hex 80000004; asc     ;;

RECORD LOCKS space id 2 page no 6 n bits 248 index PRIMARY of table `world`.`city` trx id 2650 lock_mode X locks rec but not gap
Record lock, heap no 2 PHYSICAL RECORD: n_fields 7; compact format; info bits 0
 0: len 4; hex 80000001; asc     ;;
 1: len 6; hex 00000000063a; asc      :;;
 2: len 7; hex 820000008a0110; asc        ;;
 3: len 30; hex 4b6162756c20202020202020202020202020202020202020202020202020; asc Kabul    ; (total 35 bytes);
 4: len 3; hex 414647; asc AFG;;
 5: len 20; hex 4b61626f6c202020202020202020202020202020; asc Kabol               ;;
 6: len 4; hex 801b2920; asc   ) ;;

Record lock, heap no 3 PHYSICAL RECORD: n_fields 7; compact format; info bits 0
 0: len 4; hex 80000002; asc     ;;
 1: len 6; hex 00000000063a; asc      :;;
 2: len 7; hex 820000008a011d; asc        ;;
 3: len 30; hex 51616e646168617220202020202020202020202020202020202020202020; asc Qandahar    ; (total 35 bytes);
 4: len 3; hex 414647; asc AFG;;
 5: len 20; hex 51616e6461686172202020202020202020202020; asc Qandahar            ;;
 6: len 4; hex 80039fbc; asc     ;;

Record lock, heap no 4 PHYSICAL RECORD: n_fields 7; compact format; info bits 0
 0: len 4; hex 80000003; asc     ;;
 1: len 6; hex 00000000063a; asc      :;;
 2: len 7; hex 820000008a012a; asc       *;;
 3: len 30; hex 486572617420202020202020202020202020202020202020202020202020; asc Herat    ; (total 35 bytes);
 4: len 3; hex 414647; asc AFG;;
 5: len 20; hex 4865726174202020202020202020202020202020; asc Herat               ;;
 6: len 4; hex 8002d9b0; asc     ;;

Record lock, heap no 5 PHYSICAL RECORD: n_fields 7; compact format; info bits 0
 0: len 4; hex 80000004; asc     ;;
 1: len 6; hex 00000000063a; asc      :;;
 2: len 7; hex 820000008a0137; asc       7;;
 3: len 30; hex 4d617a61722d652d53686172696620202020202020202020202020202020; asc Mazar-e-Sharif    ; (total 35 bytes);
 4: len 3; hex 414647; asc AFG;;
 5: len 20; hex 42616c6b68202020202020202020202020202020; asc Balkh               ;;
 6: len 4; hex 8001f338; asc    8;;

RECORD LOCKS space id 2 page no 14 n bits 1272 index CountryCode of table `world`.`city` trx id 2650 lock_mode X locks gap before rec
Record lock, heap no 7 PHYSICAL RECORD: n_fields 2; compact format; info bits 0
 0: len 3; hex 41474f; asc AGO;;
 1: len 4; hex 80000038; asc    8;;
--- (snip) ---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;RECORD LOCKS&lt;/code&gt;から始まる行に注目すると、3種類のロックを取得していることがわかる。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RECORD LOCKS space id 2 page no 14 n bits 1272 index CountryCode of table &lt;code&gt;world&lt;/code&gt;.&lt;code&gt;city&lt;/code&gt; trx id 2650 lock_mode X&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;これは&lt;code&gt;CountryCode&lt;/code&gt;インデックスレコードに対してネクストキーロックを取得していることを表している。&lt;/p&gt;
&lt;p&gt;今回は&lt;code&gt;AFG&lt;/code&gt;にマッチする&lt;code&gt;Kabol&lt;/code&gt;, &lt;code&gt;Qandahar&lt;/code&gt;, &lt;code&gt;Herat&lt;/code&gt;, &lt;code&gt;Balkh&lt;/code&gt;を含むレコードと、それらのレコードの前のギャップにロックを取得することになる。また、&lt;code&gt;Kabol&lt;/code&gt;は最小の値のはずなので、無限に小さい論理的なレコードとの間のギャップがロックされることになる。&lt;/p&gt;
&lt;p&gt;試しに別のトランザクションから&lt;code&gt;AFG&lt;/code&gt;かつ&lt;code&gt;Kabol&lt;/code&gt;より小さい値を&lt;code&gt;insert&lt;/code&gt;してみる。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`Name`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`CountryCode`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`District`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`Population`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'aaa'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'AFG'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'aaa'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1205&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Lock wait timeout exceeded; try restarting transaction'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;RECORD LOCKS space id 2 page no 6 n bits 248 index PRIMARY of table &lt;code&gt;world&lt;/code&gt;.&lt;code&gt;city&lt;/code&gt; trx id 2650 lock_mode X locks rec but not gap&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;これはクラスタインデックスに対してレコードロックを取得していることを表している。&lt;/p&gt;
&lt;p&gt;試しに別のトランザクションからクラスタインデックスに含まれる値を&lt;code&gt;update&lt;/code&gt;してみる。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`Population`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`Population`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`ID`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1205&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Lock wait timeout exceeded; try restarting transaction'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;RECORD LOCKS space id 2 page no 14 n bits 1272 index CountryCode of table &lt;code&gt;world&lt;/code&gt;.&lt;code&gt;city&lt;/code&gt; trx id 2650 lock_mode X locks gap before rec&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;これは&lt;code&gt;CountryCode&lt;/code&gt;インデックスレコードに対するギャップロックを取得していることを表している。ギャップロックとは、あるレコードとその前のレコードの間のギャップに対するロックを指している。&lt;/p&gt;
&lt;p&gt;この行の下の方に以下のように出力されており、&lt;code&gt;CountryCode&lt;/code&gt;が&lt;code&gt;AGO&lt;/code&gt;はちょうど&lt;code&gt;AFG&lt;/code&gt;の次の値になっているため、&lt;code&gt;AFG&lt;/code&gt;と&lt;code&gt;AGO&lt;/code&gt;の間のギャップをロックしていることになる。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;0: len 3; hex 41474f; asc AGO;;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;試しに別のトランザクションでこの間に新たな&lt;code&gt;CountryCode&lt;/code&gt;を&lt;code&gt;insert&lt;/code&gt;してみる。&lt;code&gt;CountryCode&lt;/code&gt;には外部キー制約があるため&lt;code&gt;country&lt;/code&gt;にも&lt;code&gt;insert&lt;/code&gt;してから&lt;code&gt;insert&lt;/code&gt;する。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;country&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`Code`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`Name`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`Region`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`LocalName`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`GovernmentForm`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`Code2`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'AFZ'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dummy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dummy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dummy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dummy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'AZ'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affected&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;002&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`Name`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`CountryCode`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`District`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`Population`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'aaa'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'AFZ'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'aaa'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1205&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Lock wait timeout exceeded; try restarting transaction'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;次に、条件にマッチしなかった場合も確認する。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affected&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;003&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`CountryCode`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'NTY'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+------+-------------+----------+------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CountryCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;District&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Population&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+------+-------------+----------+------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+------+-------------+----------+------------+&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;014&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;------------
TRANSACTIONS
------------
Trx id counter 7010
Purge done for trx's n:o &amp;lt; 7001 undo n:o &amp;lt; 0 state: running but idle
History list length 0
LIST OF TRANSACTIONS FOR EACH SESSION:
---TRANSACTION 421497825593776, not started
0 lock struct(s), heap size 1128, 0 row lock(s)
---TRANSACTION 421497825592968, not started
0 lock struct(s), heap size 1128, 0 row lock(s)
---TRANSACTION 7009, ACTIVE 24 sec
2 lock struct(s), heap size 1128, 1 row lock(s)
MySQL thread id 99, OS thread handle 140022381811456, query id 705 172.21.0.1 root starting
show engine innodb status
TABLE LOCK table `world`.`city` trx id 7009 lock mode IX
RECORD LOCKS space id 2 page no 20 n bits 1272 index CountryCode of table `world`.`city` trx id 7009 lock_mode X locks gap before rec
Record lock, heap no 178 PHYSICAL RECORD: n_fields 2; compact format; info bits 0
 0: len 3; hex 4e5a4c; asc NZL;;
 1: len 4; hex 80000da6; asc     ;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;lock_mode X locks gap before rec&lt;/code&gt;とあるので、ギャップロックが取得されている。この場合、&lt;code&gt;NTY&lt;/code&gt;という&lt;code&gt;CountryCode&lt;/code&gt;はなかったので、&lt;code&gt;NZL&lt;/code&gt;という&lt;code&gt;CountryCode&lt;/code&gt;の手前のギャップロックが取得されている。&lt;/p&gt;
&lt;p&gt;マッチした場合とは異なり、セカンダリインデックスのみロックが取得され、クラスタリングインデックスには影響がなかった。&lt;/p&gt;
&lt;h1&gt;インデックスなしでのロック&lt;/h1&gt;
&lt;p&gt;最後にインデックスを使わない条件を指定して&lt;code&gt;select ... for update&lt;/code&gt;してみる。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affected&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;001&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`Population`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1200000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;------+-------------------+-------------+----------------------+------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CountryCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;District&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Population&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;------+-------------------+-------------+----------------------+------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;71&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ó&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdoba&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARG&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ó&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdoba&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1157507&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;133&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Perth&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUS&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;West&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Australia&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1096829&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;216&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bel&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;é&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BRA&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Par&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;á&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1186926&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;217&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Guarulhos&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BRA&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ã&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Paulo&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1095874&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--- (snip) ---&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;同様にしてロックを確認する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;------------
TRANSACTIONS
------------
Trx id counter 2671
Purge done for trx's n:o &amp;lt; 2667 undo n:o &amp;lt; 0 state: running but idle
History list length 0
LIST OF TRANSACTIONS FOR EACH SESSION:
---TRANSACTION 421394077937904, not started
0 lock struct(s), heap size 1136, 0 row lock(s)
---TRANSACTION 421394077936192, not started
0 lock struct(s), heap size 1136, 0 row lock(s)
---TRANSACTION 421394077935336, not started
0 lock struct(s), heap size 1136, 0 row lock(s)
---TRANSACTION 2670, ACTIVE 6 sec
25 lock struct(s), heap size 3520, 4103 row lock(s)
MySQL thread id 47, OS thread handle 139918963160832, query id 381 localhost root
TABLE LOCK table `world`.`city` trx id 2670 lock mode IX
RECORD LOCKS space id 2 page no 6 n bits 248 index PRIMARY of table `world`.`city` trx id 2670 lock_mode X
Record lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info bits 0
 0: len 8; hex 73757072656d756d; asc supremum;;

Record lock, heap no 2 PHYSICAL RECORD: n_fields 7; compact format; info bits 0
 0: len 4; hex 80000001; asc     ;;
 1: len 6; hex 00000000063a; asc      :;;
 2: len 7; hex 820000008a0110; asc        ;;
 3: len 30; hex 4b6162756c20202020202020202020202020202020202020202020202020; asc Kabul                         ; (total 35 bytes);
 4: len 3; hex 414647; asc AFG;;
 5: len 20; hex 4b61626f6c202020202020202020202020202020; asc Kabol               ;;
 6: len 4; hex 801b2920; asc   ) ;;

Record lock, heap no 3 PHYSICAL RECORD: n_fields 7; compact format; info bits 0
 0: len 4; hex 80000002; asc     ;;
 1: len 6; hex 00000000063a; asc      :;;
 2: len 7; hex 820000008a011d; asc        ;;
 3: len 30; hex 51616e646168617220202020202020202020202020202020202020202020; asc Qandahar                      ; (total 35 bytes);
 4: len 3; hex 414647; asc AFG;;
 5: len 20; hex 51616e6461686172202020202020202020202020; asc Qandahar            ;;
 6: len 4; hex 80039fbc; asc     ;;

Record lock, heap no 4 PHYSICAL RECORD: n_fields 7; compact format; info bits 0
 0: len 4; hex 80000003; asc     ;;
 1: len 6; hex 00000000063a; asc      :;;
 2: len 7; hex 820000008a012a; asc       *;;
 3: len 30; hex 486572617420202020202020202020202020202020202020202020202020; asc Herat                         ; (total 35 bytes);
 4: len 3; hex 414647; asc AFG;;
 5: len 20; hex 4865726174202020202020202020202020202020; asc Herat               ;;
 6: len 4; hex 8002d9b0; asc     ;;
--- (snip) ---
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;RECORD LOCKS space id 2 page no 6 n bits 248 index PRIMARY of table &lt;code&gt;world&lt;/code&gt;.&lt;code&gt;city&lt;/code&gt; trx id 2670 lock_mode X&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;とあるので、取得したクラスタインデックスすべてに対してネクストキーロックを取得していることがわかる。&lt;/p&gt;
&lt;h1&gt;まとめ&lt;/h1&gt;
&lt;p&gt;まとめると、こういうことがわかった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;クラスタインデックスを使った&lt;code&gt;select ... for update&lt;/code&gt;はマッチした行のレコードロックを取得する。マッチしなかった場合、条件の値を含む区間のギャップロックを取得する。&lt;/li&gt;
&lt;li&gt;セカンダリインデックスを使った&lt;code&gt;select ... for update&lt;/code&gt;はマッチしたセカンダリインデックスのネクストキーロックと次のレコードとの間のギャップロック、そしてマッチした行のレコードロックを取得する。マッチしなかった場合、セカンダリインデックスのみ条件の値を含む区間のギャップロックを取得する。&lt;/li&gt;
&lt;li&gt;インデックスを使わない&lt;code&gt;select ... for update&lt;/code&gt;はマッチした行のネクストキーロックを取得する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当たり前といえばそうなるけど、ロックを取得する場合でも可能な限りインデックスを利用してロックの範囲を狭めることが重要ということがわかった。&lt;/p&gt;
&lt;p&gt;また、セカンダリインデックスを使った場合のロックの範囲は直感的には理解しにくいため、ハマりやすいポイントかもしれないが、今回いろいろ試してみることで理解が深まってよかった。&lt;/p&gt;</summary>
    <title>手を動かしながらロックを学ぶ 2</title>
    <updated>2021-06-09T22:19:00+00:00</updated>
    <dc:date>2021-06-09T22:19:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/445/</id>
    <link href="https://blog.naoty.dev/445/"/>
    <summary>&lt;ul&gt;
&lt;li&gt;Part 1: &lt;code&gt;select&lt;/code&gt;による特定の一行に対するロック&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;/446/&quot;&gt;Part 2&lt;/a&gt;: &lt;code&gt;select&lt;/code&gt;による複数行に対するロック&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;/447/&quot;&gt;Part 3&lt;/a&gt;: &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;によるロック&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;いつまで経ってもロックについて理解したと言えなかったので、ロックについて手を動かしながら学んでみることにした。&lt;/p&gt;
&lt;p&gt;MySQLが公式にサンプルデータとして提供している&lt;a href=&quot;https://dev.mysql.com/doc/world-setup/en/&quot;&gt;world&lt;/a&gt;データベースと、補完が使えて便利なMySQLクライアントである&lt;a href=&quot;https://www.mycli.net/&quot;&gt;mycli&lt;/a&gt;をインストールした&lt;a href=&quot;https://github.com/naoty/mysql-playground&quot;&gt;Dockerイメージ&lt;/a&gt;を作ったので、それを使って試してみる。&lt;/p&gt;
&lt;p&gt;今回は以下のような&lt;code&gt;city&lt;/code&gt;テーブルに対して特定の一行へのロックをとったときについて試してみる。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;G&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;***************************&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;***************************&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Table&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`city`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`ID`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`Name`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`CountryCode`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`District`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`Population`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`ID`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`CountryCode`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`CountryCode`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;CONSTRAINT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`city_ibfk_1`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FOREIGN&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`CountryCode`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;REFERENCES&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`country`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`Code`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InnoDB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4080&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHARSET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8mb4&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COLLATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8mb4_0900_ai_ci&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;003&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;共有ロック&lt;/h1&gt;
&lt;p&gt;トランザクションT1で&lt;code&gt;select ... lock in share mode&lt;/code&gt;を実行して共有ロックをとる。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affected&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;001&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;share&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mode&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------+-------------+----------+------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CountryCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;District&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Population&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------+-------------+----------+------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kabul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AFG&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kabol&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1780000&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------+-------------+----------+------------+&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;010&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;別のトランザクションT2で同じ行を&lt;code&gt;select&lt;/code&gt;することはできたが、&lt;code&gt;update&lt;/code&gt;することはできなかった。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affected&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;001&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------+-------------+----------+------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CountryCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;District&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Population&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------+-------------+----------+------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kabul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AFG&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kabol&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1780000&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------+-------------+----------+------------+&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;009&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;share&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------+-------------+----------+------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CountryCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;District&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Population&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------+-------------+----------+------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kabul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AFG&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kabol&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1780000&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------+-------------+----------+------------+&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;009&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1205&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Lock wait timeout exceeded; try restarting transaction'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`Population`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`ID`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1205&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Lock wait timeout exceeded; try restarting transaction'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;排他ロック&lt;/h1&gt;
&lt;p&gt;トランザクションT1で&lt;code&gt;select ... for update&lt;/code&gt;を実行して排他ロックをとる。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affected&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;000&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`ID`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------+-------------+----------+------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CountryCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;District&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Population&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------+-------------+----------+------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kabul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AFG&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kabol&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1780000&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------+-------------+----------+------------+&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;011&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;別のトランザクションT2で同じ行を&lt;code&gt;select&lt;/code&gt;することはできたが、&lt;code&gt;select ... lock in share mode&lt;/code&gt;や&lt;code&gt;select ... for update&lt;/code&gt;や&lt;code&gt;update&lt;/code&gt;はロック取得待ちになった。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affected&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;001&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------+-------------+----------+------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CountryCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;District&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Population&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------+-------------+----------+------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kabul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AFG&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kabol&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1780000&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------+-------------+----------+------------+&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;012&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;share&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1205&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Lock wait timeout exceeded; try restarting transaction'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1205&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Lock wait timeout exceeded; try restarting transaction'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`Population`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`ID`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1205&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Lock wait timeout exceeded; try restarting transaction'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;まとめ&lt;/h1&gt;
&lt;p&gt;特定の行に対するロックをとったとき、別のトランザクションからの操作がどうなるかまとめるとこうなった。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;T1\T2&lt;/th&gt;
&lt;th&gt;select&lt;/th&gt;
&lt;th&gt;select ... lock in share mode&lt;/th&gt;
&lt;th&gt;select ... for update&lt;/th&gt;
&lt;th&gt;update&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;select ... lock in share mode&lt;/td&gt;
&lt;td&gt;可&lt;/td&gt;
&lt;td&gt;可&lt;/td&gt;
&lt;td&gt;ロック待ち&lt;/td&gt;
&lt;td&gt;ロック待ち&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;select ... for update&lt;/td&gt;
&lt;td&gt;可&lt;/td&gt;
&lt;td&gt;ロック待ち&lt;/td&gt;
&lt;td&gt;ロック待ち&lt;/td&gt;
&lt;td&gt;ロック待ち&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</summary>
    <title>手を動かしながらロックを学ぶ 1</title>
    <updated>2021-06-07T22:47:00+00:00</updated>
    <dc:date>2021-06-07T22:47:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/444/</id>
    <link href="https://blog.naoty.dev/444/"/>
    <summary>&lt;p&gt;こんなテーブルがあるとする。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shopping_cart&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;userid&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;item_count&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;last_update_timestamp&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;timestamp&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bloom_filter_fp_chance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caching&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'keys'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ALL'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rows_per_partition'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'NONE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compaction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'class'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'max_threshold'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'32'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'min_threshold'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'4'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compression&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'chunk_length_in_kb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'64'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'class'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.apache.cassandra.io.compress.LZ4Compressor'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crc_check_chance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dclocal_read_repair_chance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_time_to_live&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gc_grace_seconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;864000&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_index_interval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memtable_flush_period_in_ms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_index_interval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_repair_chance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speculative_retry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'99PERCENTILE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;適当にSELECT文を実行するとエラーになる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cassandra@cql&amp;gt; SELECT * FROM store.shopping_cart WHERE item_count &amp;gt; 0;
InvalidRequest: Error from server: code=2200 [Invalid query] message=&quot;Cannot execute this query as it might involve data filtering and thus may have unpredictable performance. If you want to execute this query despite the performance unpredictability, use ALLOW FILTERING&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;言われた通り、&lt;code&gt;ALLOW FILTERING&lt;/code&gt;をつけるとエラーがでなくなる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cassandra@cqlsh&amp;gt; select * from shopping_cart where item_count &amp;gt; 0 ALLOW FILTERING;

 userid | item_count | last_update_timestamp
--------+------------+-----------------------
   4567 |         20 |                  null

(1 rows)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こういったエラーが出るクエリはテーブルからすべてのレコードを取得してからフィルタリングをおこなうため、場合によっては非常に効率が悪くなる。例えば、100万件中2件だけの結果になる場合でも100万件を取得することになってしまう。逆に、100万件中99万件を返すことになるならそこまで非効率ではない。そういう場合は&lt;code&gt;ALLOW FILTERING&lt;/code&gt;をつけて実行すればいい。&lt;/p&gt;
&lt;p&gt;すべてのレコードを取得しないようにするには、partitionを特定できるように条件を指定する必要がある。以下のようにPRIMARY KEYである&lt;code&gt;userid&lt;/code&gt;カラムに対する一致条件を指定した場合、partitionが特定されるためエラーメッセージが出ない。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cassandra@cqlsh&amp;gt; select * from shopping_cart where userid = '4567';

 userid | item_count | last_update_timestamp
--------+------------+-----------------------
   4567 |         20 |                  null

(1 rows)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.datastax.com/blog/allow-filtering-explained&quot;&gt;ALLOW FILTERING explained&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>ALLOW FILTERING</title>
    <updated>2021-05-23T16:31:00+00:00</updated>
    <dc:date>2021-05-23T16:31:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/443/</id>
    <link href="https://blog.naoty.dev/443/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873118703/&quot;&gt;データ指向アプリケーションデザイン&lt;/a&gt;（以下、本書）のレプリケーションの章を読み終わった。非同期的なレプリケーションにおいてネットワークの遅延などによってレプリケーションラグが大きくなると、以下の3つの問題が起こると説明されていた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自分が書いた内容の読み取り&lt;/li&gt;
&lt;li&gt;モノトニックな読み取り&lt;/li&gt;
&lt;li&gt;一貫性のあるプレフィックス読み取り&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Railsアプリケーションを実装する際、これらのうち自分が書いた内容の読み取りに具体的にどう対処するか考えてみる。&lt;/p&gt;
&lt;h1&gt;read-after-write一貫性&lt;/h1&gt;
&lt;p&gt;これはあるユーザーが書いた内容がレプリケーションラグによってリードレプリカになかなか反映されず読み取れない問題を指している。自分が書いたデータを自分で読み取れることをread-after-write一貫性とか、read-your-writes一貫性とか呼ぶ。&lt;/p&gt;
&lt;p&gt;この問題の解決策としては、書き込み後から一定期間までは必ずプライマリーから読み取るようにするといい。&lt;/p&gt;
&lt;p&gt;Rails 6から導入された複数データベースのサポートには、こういった実装が簡単にできるようになっている。&lt;a href=&quot;https://github.com/rails/rails/blob/85c6823b77b60f2a3a6a25d7a1013032e8c580ef/activerecord/lib/active_record/middleware/database_selector.rb&quot;&gt;&lt;code&gt;ActiveRecord::Middleware::DatabaseSelector&lt;/code&gt;&lt;/a&gt;と関連するクラスによって、最後に書き込まれてからデフォルトで2秒間はプライマリーから読み取るようになる。設定でこの時間は変更できる。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;active_record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;database_selector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;delay: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;seconds&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;デフォルトでは最後に書き込まれた時間はセッション情報の中に記録される（&lt;a href=&quot;https://github.com/rails/rails/blob/85c6823b77b60f2a3a6a25d7a1013032e8c580ef/activerecord/lib/active_record/middleware/database_selector/resolver/session.rb#L38-L40&quot;&gt;実装&lt;/a&gt;）ため、クロスデバイスでのread-after-write一貫性を保証するには、セッションストアにcookieではなくRedisなどを使うことになりそう。&lt;/p&gt;</summary>
    <title>Railsでのread-after-write一貫性の保証</title>
    <updated>2021-05-03T22:39:00+00:00</updated>
    <dc:date>2021-05-03T22:39:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/442/</id>
    <link href="https://blog.naoty.dev/442/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873118703/&quot;&gt;データ指向アプリケーションデザイン&lt;/a&gt;（以下、本書）のレプリケーションの章を読んだ。そこで、MySQL互換のAmazon Auroraのレプリケーションについて調べてみた。&lt;/p&gt;
&lt;p&gt;Aurora MySQLのレプリケーションはAurora組み込みのものと、MySQLのものを選択できる。今回は前者について調べた。&lt;/p&gt;
&lt;h1&gt;クラスターボリューム&lt;/h1&gt;
&lt;p&gt;Auroraのデータはクラスターボリュームと呼ばれる単一の論理ボリュームに保存される。クラスターボリュームは1つのリージョンの3つのAZにある各2個のノード、計6個のノードから構成される。&lt;/p&gt;
&lt;p&gt;クラスターボリュームはDBインスタンスとは独立しており、クラスターに含まれるDBインスタンスはこれを共有している。プライマリのみがこれへの書き込みを許可されており、レプリカは読み取りしかできない。&lt;/p&gt;
&lt;h1&gt;クオラム書き込み&lt;/h1&gt;
&lt;p&gt;プライマリに書き込まれたデータは6個のノードにコピーされる。ただし、6個のうち4個のノードに書き込まれた時点でプライマリへの書き込みに対して成功を返す。こうすることで、ネットワーク障害などで一部のノードに遅延が発生した際でも影響を受けにくくなる。こういった手法を本書ではクオラム書き込みと読んでいる。&lt;/p&gt;
&lt;p&gt;リーダーレスレプリケーションの説明のなかで登場したけど、シングルリーダーのレプリケーションでもクオラム書き込みが使われているのは発見だった。&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/jp/blogs/news/amazon-aurora-under-the-hood-quorum-and-correlated-failure/&quot;&gt;https://aws.amazon.com/jp/blogs/news/amazon-aurora-under-the-hood-quorum-and-correlated-failure/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://aws.typepad.com/sajp/2017/02/introducing-the-aurora-storage-engine.html&quot;&gt;https://aws.typepad.com/sajp/2017/02/introducing-the-aurora-storage-engine.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Auroraのレプリケーション</title>
    <updated>2021-05-02T16:49:00+00:00</updated>
    <dc:date>2021-05-02T16:49:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/441/</id>
    <link href="https://blog.naoty.dev/441/"/>
    <summary>&lt;h1&gt;2020/8&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;軽いノリで住宅展示場に行く。後にこのときになんとなく入ったハウスメーカー（以下、HM）で家を建てることになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;./%E4%BD%8F%E5%AE%85%E5%B1%95%E7%A4%BA%E5%A0%B4.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./%E4%BD%8F%E5%AE%85%E5%B1%95%E7%A4%BA%E5%A0%B4.jpg&quot; alt=&quot;住宅展示場&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;住宅展示場はその後も打ち合わせで何度も行った&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1&gt;2020/9&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;家を建てることを検討しはじめる。&lt;/li&gt;
&lt;li&gt;ファイナンシャルプランナー（以下、FP）に住宅ローンとか資産運用とかの相談にのってもらう。情報量が多すぎるので住宅ローンだけに絞って相談すればよかった。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;2020/10&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;HMの営業さんから耐震性だとか断熱性だとか住宅の基本的な説明を受ける。&lt;/li&gt;
&lt;li&gt;セカンドオピニオンを求めてSUUMOカウンターにも相談する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;2020/11&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;SUUMOカウンターに薦められて他のHMの話も聞きに行く。最初に話を聞いたHMと合わせると5社に話を聞いたことになる。&lt;/li&gt;
&lt;li&gt;同時に、土地選びのために中央線、京王線、西武線などの沿線をぶらぶらする。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;./%E3%81%8A%E5%A5%BD%E3%81%BF%E7%84%BC%E3%81%8D.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./%E3%81%8A%E5%A5%BD%E3%81%BF%E7%84%BC%E3%81%8D.jpg&quot; alt=&quot;お好み焼き.jpg&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;仙川で食べた広島のお好み焼き&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1&gt;2020/12&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;HMを3社に絞って実例の見学会や詳細な説明を受けた。&lt;/li&gt;
&lt;li&gt;この頃、ちょっとした出来事で相談していたFPに不信感を抱く。他のHMが紹介してくれた別のFPにも相談し現実的な予算を決めた。&lt;/li&gt;
&lt;li&gt;年末に最初に話を聞いたHMで家を建てることに決めた。どのHMも耐震性能など十分に高かったため、最終的な決め手は営業さんとの相性だったと思う。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;2021/1&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;年始から本格的に土地探しを始めた。良いと思っていた土地が先にとられているなど難航したものの、無事に好条件の土地が決まる。当初は候補に入っていないエリアだったものの、よくよく調べてみると住みやすい環境であることがわかった。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;./%E5%80%99%E8%A3%9C%E5%9C%B0.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./%E5%80%99%E8%A3%9C%E5%9C%B0.jpg&quot; alt=&quot;候補地&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;10ヶ所以上の候補地を回った&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;間取りについての打ち合わせが始まる。夫婦それぞれのワークスペースを確保しつつ、効率的な家事動線を意識して工夫した。また、厳しい建ぺい率によってできた空き地を活用するために外構計画を念頭におきキッチンや窓の位置を決めた。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;./%E3%81%8A%E3%82%8C%E3%81%AE%E3%81%8B%E3%82%93%E3%81%8C%E3%81%88%E3%81%9F%E3%81%95%E3%81%84%E3%81%8D%E3%82%87%E3%81%86%E3%81%AE%E9%96%93%E5%8F%96%E3%82%8A.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./%E3%81%8A%E3%82%8C%E3%81%AE%E3%81%8B%E3%82%93%E3%81%8C%E3%81%88%E3%81%9F%E3%81%95%E3%81%84%E3%81%8D%E3%82%87%E3%81%86%E3%81%AE%E9%96%93%E5%8F%96%E3%82%8A.jpg&quot; alt=&quot;おれのかんがえたさいきょうの間取り&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;ボツになった間取り&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1&gt;2021/2&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;インテリアの打ち合わせが始まった。決めることがとにかく多い。床材、壁紙、収納、照明、窓掛などをすべての部屋について考えることになった。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;./%E5%A3%81%E7%B4%99%E9%81%B8%E3%81%B3.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;./%E5%A3%81%E7%B4%99%E9%81%B8%E3%81%B3.jpg&quot; alt=&quot;壁紙選び&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;床材・壁紙・ドアの組み合わせを検討中&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1&gt;2021/3&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;設備の打ち合わせが始まった。キッチン、お風呂、トイレ、洗面台、冷暖房などのメーカー、製品、細かい仕様を決めていく。特にキッチンが難航した。HMが提携しているメーカーや製品ラインナップに制限があり、気に入った組み合わせが採用できないことがあるためだ。&lt;/li&gt;
&lt;li&gt;インターネット環境についてもこのタイミングで決める。各ワークスペースに有線LANケーブルを引き込み、将来的にCAT6のケーブルに入れ替えられるように配管を依頼した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;2021/4&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;土地の決済を行い、所有権が移転された。見たことのない金額が口座に振り込まれ、そして消える経験をした。&lt;/li&gt;
&lt;li&gt;予算を予想以上にオーバーしたため、大幅にコストカットする。それでも当初の予算を超えることになった。また、補助金についても調査した。各省庁、都道府県、市区町村それぞれがバラバラに窓口があったため、HMの営業さんに協力してもらうことにした。&lt;/li&gt;
&lt;li&gt;変更契約をおこなった。決定した仕様をもとに発注だったり工事の手続きが進むらしい。予算の都合で外構はHMではなく他の業者に依頼することにした。変更契約後に外構計画を引き続き進めることになった。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;今後&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;5月に地鎮祭をおこない、いよいよ着工する。現場にも顔を出していきたい。&lt;/li&gt;
&lt;li&gt;引き渡しまでの間に家具を買ったり、火災保険やインターネットなどの手続きを進める。&lt;/li&gt;
&lt;li&gt;8月末くらいに引き渡し予定。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;追記&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;/455/&quot;&gt;その後&lt;/a&gt;について書きました。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>家づくり振り返り 1</title>
    <updated>2021-04-25T18:07:00+00:00</updated>
    <dc:date>2021-04-25T18:07:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/440/</id>
    <link href="https://blog.naoty.dev/440/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;%E4%BC%8A%E7%A4%BC%E6%99%BA%E3%81%AE%E3%80%8C%E5%B0%8F%E3%81%95%E3%81%AA%E5%AE%B6%E3%80%8D70%E3%81%AE%E3%83%AC%E3%82%B7%E3%83%94.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;%E4%BC%8A%E7%A4%BC%E6%99%BA%E3%81%AE%E3%80%8C%E5%B0%8F%E3%81%95%E3%81%AA%E5%AE%B6%E3%80%8D70%E3%81%AE%E3%83%AC%E3%82%B7%E3%83%94.jpg&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;新しい家のインテリアや間取りを考えるために&lt;a href=&quot;https://www.amazon.co.jp/dp/4767816920&quot;&gt;伊礼智の「小さな家」70のレシピ&lt;/a&gt;という本を読んだ。居心地のいい空間を作り出すヒントが詰まった良い本だった。&lt;/p&gt;
&lt;p&gt;心地いい居場所が連続した空間が心地いい家だとすると、心地いい居場所は何によって作り上げられるのか、この本にはこのような要素を取り上げている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;金物のような手で触れる部分の手触り感&lt;/li&gt;
&lt;li&gt;長い時間の中で経年美化した素材感&lt;/li&gt;
&lt;li&gt;よい景色が望める窓&lt;/li&gt;
&lt;li&gt;内部と外部がゆるやかに繋がったデッキ&lt;/li&gt;
&lt;li&gt;小さくて籠もれる空間&lt;/li&gt;
&lt;li&gt;浮いた家具や吊り戸によって繋がって見える床&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;反対に、こういった要素によって心地いい居場所は死んでしまうとも書いてあった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;天井につけられた明るすぎる照明&lt;/li&gt;
&lt;li&gt;作りすぎた窓&lt;/li&gt;
&lt;li&gt;白すぎる壁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;明るい家にしようとするあまり、すべての空間が一様に照らされてしまい単調な居場所になってしまうのは確かに陥りやすいミスなのかもしれない。間取りやインテリアを検討するこのタイミングで読めたことはとても幸運だったと思う。&lt;/p&gt;</summary>
    <title>伊礼智の「小さな家」70のレシピを読んだ</title>
    <updated>2021-02-17T19:55:00+00:00</updated>
    <dc:date>2021-02-17T19:55:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/439/</id>
    <link href="https://blog.naoty.dev/439/"/>
    <summary>&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;%E5%BB%BA%E7%AF%89%E7%9F%A5%E8%AD%982017%E5%B9%B49%E6%9C%88%E5%8F%B7.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;%E5%BB%BA%E7%AF%89%E7%9F%A5%E8%AD%982017%E5%B9%B49%E6%9C%88%E5%8F%B7.jpg&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;建築知識2017年9月号&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/B072KPNKYS&quot;&gt;https://www.amazon.co.jp/dp/B072KPNKYS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;家を建てるにあたって情報収集していると、建築知識という雑誌の2017年9月号がとても良かったという話を見つけたのでさっそく買って読んだ。&lt;/p&gt;
&lt;p&gt;内容は、さまざまなパターンの動線を網羅した間取り、各場所で収納すべきものと収納設計、造作家具の部材資料集、家の中のあらゆるものの寸法集といった構成になっていた。&lt;/p&gt;
&lt;p&gt;特によかったのは、さまざまな動線のパターンを間取り図付きで解説してあったところがよかった。「LDKが1Fか2Fか」「脱衣所、ランドリースペース、クローゼットがそれぞれどの階にあるか」みたいな組み合わせごとにおすすめの動線と間取り例が紹介されており、非常に参考になった。&lt;/p&gt;
&lt;p&gt;また、どこに何を収納すべきかもイラスト付きで解説されているのもよかった。自分の頭だけでは必ず抜け漏れが出てくるので、例えばホットプレートどこに収納するんだっけ？といったこともあとになって気づくようなことがなくなりそう。&lt;/p&gt;
&lt;p&gt;90ページほどの内容だったけど、豊富なイラストや図と小さい文字が並んだ非常に内容が詰まった一冊だった。これから家を建てたい人にはおすすめしたい。&lt;/p&gt;</summary>
    <title>建築知識2017年9月号を読んだ</title>
    <updated>2021-02-09T20:52:00+00:00</updated>
    <dc:date>2021-02-09T20:52:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/438/</id>
    <link href="https://blog.naoty.dev/438/"/>
    <summary>&lt;p&gt;令和2年度の確定申告が終わった。今年は医療費控除を受けるために2年ぶり2度目の確定申告だった。前回は2,3時間ほど待たされた上に用意した資料が間違っていて最悪の体験だったし、このコロナ禍の中で同じような体験は絶対にしたくなかったので、e-Taxで行うことにした。&lt;/p&gt;
&lt;p&gt;マイナンバーカードは持っているので、カードリーダーで読み取る方式にしてみた。I-O DATAの&lt;a href=&quot;https://www.amazon.co.jp/dp/B089SRDDYN&quot;&gt;USB-NFC3&lt;/a&gt;というカードリーダーを買った。Windows、macOSともに対応しているのがよかった。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;USB-NFC3.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;USB-NFC3.jpg&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;USB-NFC3&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;カードリーダーでのログイン方式のセットアップに多少手間取ったものの、e-Taxでの確定申告は思っていた以上に簡単で、領収書を集計する作業を除くと15分程度で終わったと思う。半角で入力した文字列が全角に変換されていたりして、役所にありがちなストレスフルなフォームではなかった。これなら毎年確定申告することになってもそこまで苦痛には感じずに済む。&lt;/p&gt;</summary>
    <title>令和2年度確定申告</title>
    <updated>2021-02-07T23:52:00+00:00</updated>
    <dc:date>2021-02-07T23:52:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/437/</id>
    <link href="https://blog.naoty.dev/437/"/>
    <summary>&lt;p&gt;一戸建てを建てるため都内某所に土地を買った。&lt;/p&gt;
&lt;p&gt;昨年11月くらいから不動産屋さんといろんなエリアの土地を見てきて、今年に入ってから本格的に購入を検討した。自分たちが土地を選ぶにあたって考えた条件はこんな感じだった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ハザードマップは黄色まで&lt;/li&gt;
&lt;li&gt;建物価格も含めたときに予算に収まるか&lt;/li&gt;
&lt;li&gt;延床面積が十分に確保できるか&lt;/li&gt;
&lt;li&gt;日当たりが良いか&lt;/li&gt;
&lt;li&gt;徒歩圏内にスーパーがあるか&lt;/li&gt;
&lt;li&gt;近所が散歩に適しているか&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;夫婦ともフルリモートで勤務していてコロナ禍が終わってもそれは続けていきたいと考えているため、都心へのアクセスを妥協し、その分自宅での生活が快適になるようにかなり広めの土地を買った。また、ずっと家にいると息が詰まるので、周辺環境が緑豊かで街並みがきれいな場所を選んだ。&lt;/p&gt;
&lt;p&gt;良いと思っていたところが数日前に買い手がついていたり、より良い条件で競り負けてしまったりして、良い条件の土地は聞いていた以上に競争が激しかった。当初見ていたエリアとは違うエリアになったものの、不動産屋さんのおかげで非常に条件が良い土地にめぐりあえた。&lt;/p&gt;
&lt;p&gt;先日売主様との契約を済ませ、無事に住宅ローンも通ったので、あとはお楽しみの家づくりがこれから始まっていく。年末年始から間取りやインテリアの本を読んだりアイデアをNotionにまとめたりしているので楽しみだ。&lt;/p&gt;</summary>
    <title>土地を買った</title>
    <updated>2021-01-26T23:24:00+00:00</updated>
    <dc:date>2021-01-26T23:24:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/436/</id>
    <link href="https://blog.naoty.dev/436/"/>
    <summary>&lt;p&gt;まったく知らなくて驚いたので、以下のデータを例に試してみた。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;pokedex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Bulbasaur'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Grass'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Poisson'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Ivysaur'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Grass'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Poisson'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;配列内の配列を分割代入&lt;/h1&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;pokedex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;id:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; name:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; types:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; id:1 name:Bulbasaur types:[&quot;Grass&quot;, &quot;Poisson&quot;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; id:2 name:Ivysaur types:[&quot;Grass&quot;, &quot;Poisson&quot;]&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;ネストした配列を分割代入&lt;/h1&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;pokedex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;id:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; name:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; type1:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; type2:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type2&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; id:1 name:Bulbasaur type1:Grass type2:Poisson&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; id:2 name:Ivysaur type1:Grass type2:Poisson&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Enumerable#with_index&lt;/code&gt;を使うときは特に便利。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;pokedex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with_index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;index:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; id:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; name:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; type1:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; type2:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type2&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; index:0 id:1 name:Bulbasaur type1:Grass type2:Poisson&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; index:1 id:2 name:Ivysaur type1:Grass type2:Poisson&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>ブロック引数の分割代入</title>
    <updated>2021-01-23T13:40:00+00:00</updated>
    <dc:date>2021-01-23T13:40:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/435/</id>
    <link href="https://blog.naoty.dev/435/"/>
    <summary>&lt;h1&gt;課題&lt;/h1&gt;
&lt;p&gt;関連先のテーブルのカラムを絞りつつ、N+1問題を回避するため&lt;code&gt;preload&lt;/code&gt;したい。&lt;/p&gt;
&lt;h1&gt;解決&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;select&lt;/code&gt;で取得するカラムを絞るscopeを用意し、&lt;code&gt;has_many&lt;/code&gt;の第2引数で指定する。&lt;/p&gt;
&lt;p&gt;例として下のようなテーブル定義とモデルがあるとする。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;books&lt;/code&gt;テーブルの&lt;code&gt;body&lt;/code&gt;カラムはTEXT型でサイズが大きくなりうるため、&lt;code&gt;body&lt;/code&gt;カラム以外をロードするための&lt;code&gt;metadata&lt;/code&gt;というscopeを定義し、関連元の&lt;code&gt;Author&lt;/code&gt;に&lt;code&gt;metadata&lt;/code&gt;を利用した&lt;code&gt;books_metadata&lt;/code&gt;という関連を定義しておく。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;create_table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:authors&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;create_table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:books&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt;     &lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;       &lt;span class=&quot;ss&quot;&gt;:body&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;references&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:author&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:books&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:books_metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;class_name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Book'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:author&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:author_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;データを作って&lt;code&gt;preload&lt;/code&gt;で実行されるSQLを比較すると、確かに&lt;code&gt;preload(:books_metadata)&lt;/code&gt;をした場合は&lt;code&gt;SELECT &quot;books&quot;.* FROM &quot;books&quot;&lt;/code&gt;としていないことがわかる。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'naoty'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;002&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dummy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;body: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dummy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;003&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;14.445409&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#4400] DEBUG -- :   Author Load (0.2ms)  SELECT &quot;authors&quot;.* FROM &quot;authors&quot; ORDER BY &quot;authors&quot;.&quot;id&quot; ASC LIMIT ?  [[&quot;LIMIT&quot;, 1]]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;14.446208&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#4400] DEBUG -- :   Book Load (0.1ms)  SELECT &quot;books&quot;.* FROM &quot;books&quot; WHERE &quot;books&quot;.&quot;author_id&quot; = ?  [[&quot;author_id&quot;, 1]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;004&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:books_metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;47.793620&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#4400] DEBUG -- :   Author Load (0.2ms)  SELECT &quot;authors&quot;.* FROM &quot;authors&quot; ORDER BY &quot;authors&quot;.&quot;id&quot; ASC LIMIT ?  [[&quot;LIMIT&quot;, 1]]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;47.794626&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#4400] DEBUG -- :   Book Load (0.1ms)  SELECT &quot;books&quot;.&quot;id&quot;, &quot;books&quot;.&quot;author_id&quot;, &quot;books&quot;.&quot;title&quot; FROM &quot;books&quot; WHERE &quot;books&quot;.&quot;author_id&quot; = ?  [[&quot;author_id&quot;, 1]]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;だけど、&lt;code&gt;preload(:books_metadata)&lt;/code&gt;でロードした&lt;code&gt;Author&lt;/code&gt;に対して&lt;code&gt;#books&lt;/code&gt;を呼ぶと、&lt;code&gt;books&lt;/code&gt;テーブルへのSQLが実行されてしまう。なので、N+1クエリが発生することになる。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;004&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:books_metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;005&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;books_metadata&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;006&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;books&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;38&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;27.058462&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#4400] DEBUG -- :   Book Load (0.3ms)  SELECT &quot;books&quot;.* FROM &quot;books&quot; WHERE &quot;books&quot;.&quot;author_id&quot; = ? /* loading for inspect */ LIMIT ?  [[&quot;author_id&quot;, 1], [&quot;LIMIT&quot;, 11]]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ある&lt;code&gt;Author&lt;/code&gt;インスタンスが&lt;code&gt;preload(:books)&lt;/code&gt;されていれば&lt;code&gt;#books&lt;/code&gt;を呼ぶことでN+1クエリを回避できるし、&lt;code&gt;preload(:books_metadata)&lt;/code&gt;されていれば&lt;code&gt;#books_metadata&lt;/code&gt;を呼ぶことでN+1クエリを回避できるということになる。&lt;/p&gt;
&lt;p&gt;だけど、どちらで&lt;code&gt;preload&lt;/code&gt;されているか事前にわからない場合、どうすればいいのか。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ActiveRecord::Associations::CollectionProxy#loaded?&lt;/code&gt;を使うと、どちらで&lt;code&gt;preload&lt;/code&gt;されているか判別できる。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;004&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:books_metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;005&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;association&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loaded?&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;006&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;association&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:books_metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loaded?&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;そこで、このようなラッパーを用意することで、どの関連が&lt;code&gt;preload&lt;/code&gt;されているか事前にわからない場合でも対処できるようになる。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Author&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;books&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;association&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;association&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loaded?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books_metadata&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;association&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:books_metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loaded?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;association&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reader&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;従来の&lt;code&gt;books&lt;/code&gt;は&lt;code&gt;association(:books).reader&lt;/code&gt;と同じなので、無限ループを避けるためにこのような書き方をしている。&lt;/p&gt;</summary>
    <title>カラムを絞ってpreloadする</title>
    <updated>2021-01-11T22:10:00+00:00</updated>
    <dc:date>2021-01-11T22:10:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/434/</id>
    <link href="https://blog.naoty.dev/434/"/>
    <summary>&lt;p&gt;ブログのホスティングを &lt;a href=&quot;https://naoty.dev/posts/&quot;&gt;https://naoty.dev/posts/&lt;/a&gt; から &lt;a href=&quot;https://blog.naoty.dev&quot;&gt;https://blog.naoty.dev&lt;/a&gt; に移した。同時にこういったことも行った。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;はてなブログの記事とQiitaの記事を統合した。&lt;/li&gt;
&lt;li&gt;ブログを生成する仕組みをフルスクラッチした。&lt;/li&gt;
&lt;li&gt;ブログを生成するコードとブログのコンテンツを管理するリポジトリを分けた。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;記事の統合&lt;/h1&gt;
&lt;p&gt;これまでインターネットで公開している記事ははてなブログ（はてなダイアリー）、Qiita、naoty.devの3つのサービスに分散していた。これらを統合してblog.naoty.devで公開するようにした。&lt;/p&gt;
&lt;p&gt;理由は、自分が公開してきたテキストを手元で管理して、10年後、20年後も読めるようにしておきたかったからだ。プログラミングを始めた頃に書いたテキストが今も読めるという体験はとても尊いことなので、これを引き継いでいきたい。&lt;/p&gt;
&lt;h1&gt;ブログを生成する仕組みのフルスクラッチ&lt;/h1&gt;
&lt;p&gt;これまでgulp -&amp;gt; Gatsby.js -&amp;gt; Nuxt.js -&amp;gt; Gatsby.jsとブログを生成する仕組みを作り変えてきたけど、今回は既存のフレームワークを使わずにRubyでフルスクラッチした。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/blog&quot;&gt;https://github.com/naoty/blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;理由は、既存のフレームワークを使ってブログを作ってから長い期間が経つとフレームワークの知識を忘れてしまいメンテナンスが難しくなることがしばしばあったからだ。&lt;/p&gt;
&lt;p&gt;そこで、一番慣れているRubyを使って可読性が高いコードを書き、仕組みを忘れてしまってもコードを読めばメンテナンスができるようにした。&lt;/p&gt;
&lt;h1&gt;別リポジトリでの管理&lt;/h1&gt;
&lt;p&gt;上で書いた&lt;a href=&quot;https://github.com/naoty/blog&quot;&gt;naoty/blog&lt;/a&gt;とは別に&lt;a href=&quot;https://github.com/naoty/posts&quot;&gt;naoty/posts&lt;/a&gt;というリポジトリで記事コンテンツを管理するようにした。&lt;/p&gt;
&lt;p&gt;理由は、ブログを生成するコードとブログのコンテンツそのものの寿命が異なるからだ。ブログを生成するコードは今回5回目のリニューアルとなり、（ないとは思うけど）また別の仕組みに一新されるかもしれない。&lt;/p&gt;</summary>
    <title>blog.naoty.dev</title>
    <updated>2021-01-10T19:56:00+00:00</updated>
    <dc:date>2021-01-10T19:56:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/433/</id>
    <link href="https://blog.naoty.dev/433/"/>
    <summary>&lt;h1&gt;プライベート&lt;/h1&gt;
&lt;h2&gt;作ったもの&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://github.com/naoty/naoty.dev&quot;&gt;naoty/naoty.dev&lt;/a&gt;&lt;/strong&gt;: このブログを再びGatsby.jsで書き直した（&lt;a href=&quot;/401/&quot;&gt;詳細&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://github.com/naoty/todo&quot;&gt;naoty/todo&lt;/a&gt;&lt;/strong&gt;: タスク管理用のCLIを数年ぶりに書き直した（&lt;a href=&quot;/416/&quot;&gt;詳細&lt;/a&gt;）。タスク管理の考え方を見直したため、使っていた自作ツールも書き直した。今も使い続けていて助けられている。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://github.com/naoty/table&quot;&gt;naoty/table&lt;/a&gt;&lt;/strong&gt;: Rustの勉強のため、以前Goで実装していたツールをRustで書いてみた（&lt;a href=&quot;/426/&quot;&gt;詳細&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://github.com/naoty/blog&quot;&gt;naoty/blog&lt;/a&gt;&lt;/strong&gt;: このブログをJavaScriptのフレームワークを使わずにプレーンなRubyで書き直している。まだこのツールを使った仕組みは運用には至ってないけど、ほぼ完成しているので、来月あたりには運用に乗るはず。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;読んだもの&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://tatsu-zine.com/books/hadoop-tettei-nyumon-2nd&quot;&gt;Hadoop徹底入門&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873116174/&quot;&gt;プログラミングHive&lt;/a&gt;&lt;/strong&gt;: 仕事で初めてHiveやHadoop界隈のツールを触ることになったので勉強していた。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://www.shoeisha.co.jp/book/detail/9784798128436&quot;&gt;Cassandra実用システムインテグレーション&lt;/a&gt;&lt;/strong&gt;: Cassandraについても初めてだったのでこの本を読んでいたけど、この本だけでは足りずDataStax社のドキュメントをよく読んでいた気がする。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://www.shoeisha.co.jp/book/detail/9784798152370&quot;&gt;Apache Kafka分散メッセージングシステムの構築と活用&lt;/a&gt;&lt;/strong&gt;: Kafkaも同様にこの本で入門した。Kafka以前に分散メッセージングシステムがどのようなものなのかわかりやすく解説してあって良書という印象だった。Kafkaについては公式ドキュメントがかなり詳細なので、ドキュメントを重点的に読み込んでいくことになりそう。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;買ったもの&lt;/h2&gt;
&lt;p&gt;リモートワークへの全面移行に合わせて作業環境に投資した一年となった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://www.archisite.co.jp/products/mistel/barocco-md770/&quot;&gt;Mistel BAROCCO MD770&lt;/a&gt;&lt;/strong&gt;: 巻き肩を矯正し首・肩の負担を減らすために分割キーボードを買った。自作するほどの情熱はないので既製品で評判がよさそうなものにした（&lt;a href=&quot;/398/&quot;&gt;詳細&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://www.dell.com/ja-jp/shop/accessories/apd/210-aqwn&quot;&gt;Dell U3419W&lt;/a&gt;&lt;/strong&gt;: より大画面で首への負担を減らすためにウルトラワイドディスプレイを買った。これが今年買ったもので一番よかったかも（&lt;a href=&quot;/403/&quot;&gt;詳細&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://www.hermanmiller.com/ja_jp/products/seating/office-chairs/aeron-chairs/&quot;&gt;ハーマンミラー アーロンチェア&lt;/a&gt;&lt;/strong&gt;: これまで新卒のときにIKEAで買った適当なイスを使い続けていたけど、ちゃんとしたイスがほしくなって政府の給付金を使った。もしかすると自分には合ってなかったかもしれないと思いつつ、高額な買い物をしたのでしばらくはこれでがんばりたい。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;家にいる時間が多い分、ゲームもそれなりに買った。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://www.nintendo.co.jp/switch/acbaa/index.html&quot;&gt;あつまれ どうぶつの森&lt;/a&gt;&lt;/strong&gt;: 世間の流行に乗っかってあつ森を一時期やっていた。海産物を素潜りで見つけるあたりで飽きてしまったけど、テイストと呼ばれる概念がありいろんなテイストがあること等、インテリアについて少し興味をもつきっかけとなり、後に一戸建てを検討する際に役に立つことがあった。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://www.pokemon.co.jp/ex/sword_shield_expansion/&quot;&gt;ポケットモンスター盾 EXPANSION PASS&lt;/a&gt;&lt;/strong&gt;: 昨年からポケモンをやっていたけど、エキスパンションパスが出て強個体を出しやすくなったおかげでネット対戦が楽しめるようになった。けど、やっぱり同じような戦略、同じような展開にだんだん飽きてしまった。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://www.spike-chunsoft.co.jp/shiren5plus/&quot;&gt;風来のシレン 5plus&lt;/a&gt;&lt;/strong&gt;: 以前からシレン1のスマホ版をやっていたので、発売初日に買って未だにやっている。スマホ版と比べるとマゼルン種の存在や装備の成熟度のシステムなど、考慮すべきことが大幅に増えて格段に面白い。だけど、無限にプレイできてしまうのでどうにか自制したい。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;その他&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;COVID-19の大流行によって3月頃から全面的にリモートワークに移行したが、前職からリモートワークには慣れていたため、COVID-19によるストレスというものはそれほど感じることはなかった。それ以上に家族と一緒にいれる時間が増えたことがよかった。&lt;/li&gt;
&lt;li&gt;リモートワーク時に昼食を用意するのがとても面倒だったので&lt;a href=&quot;https://nosh.jp/&quot;&gt;nosh&lt;/a&gt;を始めてみたんだけど、これがすごくよかった。そこそこおいしく、かつ栄養にもバランスがとれた昼食が毎週ランダムに来るようになったので昼食なにを食べるか考えるストレスからも解放された。&lt;/li&gt;
&lt;li&gt;9月くらいから一戸建てを検討し始め、それから週末はいろんなハウスメーカーの話を聞いたりモデルハウスや土地を見学しにいった。家や土地について学んでいくと奥が深くて楽しいことがわかってきた。人生1度きりだと思うけど、あと3回くらいやりたい。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;仕事&lt;/h1&gt;
&lt;p&gt;以前に&lt;a href=&quot;/410/&quot;&gt;記事&lt;/a&gt;に書いた通り、今年1月から新しい職場に転職した。やっていたことは、Presto関連のタスクやGDPR対応のタスクをやっていたり、Railsアプリケーションのパフォーマンス改善などをやっていた。&lt;/p&gt;
&lt;p&gt;Presto関連のタスクやGDPR対応のタスクではHive、BigQuery、Cassandraなど多種多様なデータストアやデータ処理パイプラインについて理解する必要があり、上で書いたとおりいろんな本を読んで勉強できたのがとてもよかった。&lt;/p&gt;
&lt;p&gt;新しい職場のやり方や人間関係、仕様、システム構成を理解して適応するのにとても苦労した。そこに時間とエネルギーをとられすぎたなという反省があるので、来年はもう少し技術的な取り組みを増やしていきたい。&lt;/p&gt;</summary>
    <title>2020年振り返り</title>
    <updated>2020-12-31T15:55:00+00:00</updated>
    <dc:date>2020-12-31T15:55:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/432/</id>
    <link href="https://blog.naoty.dev/432/"/>
    <summary>&lt;p&gt;minitestでテストを書いたことがなかったので、まずはテストの実行方法を調べてみた。すると、&lt;a href=&quot;https://docs.ruby-lang.org/ja/latest/class/Rake=3a=3aTestTask.html&quot;&gt;&lt;code&gt;rake/testtask&lt;/code&gt;&lt;/a&gt;というライブラリを使うと簡単にテストのためのrakeタスクを定義できることがわかった。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Rakefile&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rake/testtask&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;libs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test_files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FileList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test/**/*.rb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;#libs=&lt;/code&gt;でテスト実行前に&lt;code&gt;$LOAD_PATH&lt;/code&gt;に指定したパスを追加できる。&lt;code&gt;require &quot;test_helper&quot;&lt;/code&gt;みたいに書けるのはこれのおかげ。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;#test_files=&lt;/code&gt;でテスト対象を指定できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;テストの実行はこんな感じ。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 全テストを実行&lt;/span&gt;
% rake &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ファイルを指定して実行&lt;/span&gt;
% rake &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/foo_test.rb
&lt;span class=&quot;c&quot;&gt;# メソッドを指定して実行&lt;/span&gt;
% rake &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TESTOPTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--name=test_foo&quot;&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>rake/testtask</title>
    <updated>2020-10-17T23:23:00+00:00</updated>
    <dc:date>2020-10-17T23:23:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/431/</id>
    <link href="https://blog.naoty.dev/431/"/>
    <summary>&lt;h1&gt;家計&lt;/h1&gt;
&lt;p&gt;最近、ファイナンシャルプランナーに相談する機会があり、家計の運用を改善していきたい機運が高まっている。&lt;/p&gt;
&lt;p&gt;さっそくMoneyforwardの運用を見直した。&lt;a href=&quot;https://nosh.jp/&quot;&gt;nosh&lt;/a&gt;やuber eatsなどのデリバリーの出費とスーパーでの買い物を区別したかったので、「中食」という中項目を食費に作った。あとは、コンビニでの支出はコスパが悪いことが多く減らしていきたいと思っているので、これも「コンビニ」という中項目を作って見える化した。&lt;/p&gt;
&lt;h1&gt;チーム替え&lt;/h1&gt;
&lt;p&gt;先月から仕事で所属するチームが替わり、インフラ寄りの業務からRailsアプリケーションをVue.jsと共に実装する業務に替わった。運用の仕事も学びが多くて楽しかったけど、アプリケーションを実装する方が性に合っている気がする。&lt;/p&gt;
&lt;p&gt;およそ3年ぶりにスクラムによる開発現場に入ることになった。違う会社の違うスクラムにとまどうことが多い。開発者が自らステークホルダーとプロダクトバックログアイテムの具体化やリリーススケジュールの調整までおこなうことを期待されている。そういった業務はプロダクトオーナーがやるものだと思っていたけど、どうやら違うようなので適応していくしかない。&lt;/p&gt;
&lt;p&gt;そういうわけで最近はプログラミングに関することがらよりも、プロダクト開発のプロセスに関心が高まっている。この前、IPAが公開している&lt;a href=&quot;https://www.ipa.go.jp/sec/reports/20180327.html&quot;&gt;「家づくりで理解する要求明確化の勘どころ」&lt;/a&gt;という資料を読んでいた。今は&lt;a href=&quot;https://beyondagile.info/&quot;&gt;「正しいものを正しくつくる」&lt;/a&gt;という本を読んでいる。&lt;/p&gt;
&lt;h1&gt;過去記事のインポート&lt;/h1&gt;
&lt;p&gt;このホームページより前にはてなブログやQiitaに書いていた記事をこのホームページにインポートする作業をしている。プログラミングを始めた頃の貴重な記録はいつまでも残しておきたい。&lt;/p&gt;
&lt;p&gt;Qiitaの記事はmarkdownとしてエクスポートできるためスムーズにインポートできそう。一方ではてなブログの全記事はMovable Type形式の1ファイルにまとめてエクスポートされ、ブログ本文はHTMLとして出力されるため、不要なタグを取り除いてmarkdown形式に変換するのに苦労している。はてなキーワードへのリンク、シンタックスハイライト用のspanタグ、コードスニペット内のtabインデント、はてなブログ独自のウィジェットなど、そのままmarkdown形式に変換できないものを泥臭く処理する必要がある。&lt;/p&gt;
&lt;p&gt;変換作業が一通り済んだらブログ記事だけのリポジトリをブログを生成するコードとは別に作ったり、ブログだけをblog.naoty.devのようなサブドメインに移したりしたい。&lt;/p&gt;</summary>
    <title>2020-10-04</title>
    <updated>2020-10-04T17:18:00+00:00</updated>
    <dc:date>2020-10-04T17:18:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/430/</id>
    <link href="https://blog.naoty.dev/430/"/>
    <summary>&lt;h1&gt;背景&lt;/h1&gt;
&lt;p&gt;仕事で複雑なシステムを理解するためにデータフロー図を書くことが多い。esaでmermaid.jsの記法で書いている。例えばこんな感じ。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;graph TD
  e_user[&quot;User&quot;]
  p_api_post_sign_up(&quot;API&amp;lt;br&amp;gt;(POST /sign_up)&quot;)
  d_mysql_users[(&quot;MySQL&amp;lt;br&amp;gt;(users)&quot;)]
  p_fluentd(&quot;Fluentd&quot;)
  d_s3_my-access-logs[(&quot;S3&amp;lt;br&amp;gt;(my-access-logs)&quot;)]
  p_embulk(&quot;Embulk&quot;)
  d_bigquery_users[(&quot;BigQuery&amp;lt;br&amp;gt;(users)&quot;)]

  e_user -- params --&amp;gt; p_api_post_sign_up
  p_api_post_sign_up -- user --&amp;gt; d_mysql_users
  p_api_post_sign_up -- access log --&amp;gt; p_fluentd
  p_fluentd -- access log --&amp;gt; d_s3_my-access-logs
  d_mysql_users -- users --&amp;gt; p_embulk
  p_embulk -- users --&amp;gt; d_bigquery_users
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これはこうなる（このブログのレンダリングの実装の問題で潰れているけどしょうがない）。&lt;/p&gt;
&lt;pre lang=&quot;mermaid&quot;&gt;&lt;code&gt;graph TD
  e_user[&quot;User&quot;]
  p_api_post_sign_up(&quot;API&amp;lt;br&amp;gt;(POST /sign_up)&quot;)
  d_mysql_users[(&quot;MySQL&amp;lt;br&amp;gt;(users)&quot;)]
  p_fluentd(&quot;Fluentd&quot;)
  d_s3_my-access-logs[(&quot;S3&amp;lt;br&amp;gt;(my-access-logs)&quot;)]
  p_embulk(&quot;Embulk&quot;)
  d_bigquery_users[(&quot;BigQuery&amp;lt;br&amp;gt;(users)&quot;)]

  e_user -- params --&amp;gt; p_api_post_sign_up
  p_api_post_sign_up -- user --&amp;gt; d_mysql_users
  p_api_post_sign_up -- access log --&amp;gt; p_fluentd
  p_fluentd -- access log --&amp;gt; d_s3_my-access-logs
  d_mysql_users -- users --&amp;gt; p_embulk
  p_embulk -- users --&amp;gt; d_bigquery_users
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実際の現場ではこれよりもはるかに複雑なデータフロー図を書いている。&lt;/p&gt;
&lt;h1&gt;問題&lt;/h1&gt;
&lt;p&gt;だんだんとテキストエディタで複雑なデータフロー図を書いていくのが難しいことに気づいてきた。1箇所直そうとすると、それに依存する部分も直さないといけないからだ。また、多数のnodeを規則的に書けるように命名規則を導入したくなる。&lt;/p&gt;
&lt;h1&gt;解決策&lt;/h1&gt;
&lt;p&gt;Next.js + TypeScriptの練習がてら、フォームから上のようなデータフロー図とmermaid.jsの記法のテキストを生成するアプリケーションを作った。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/dfd-editor&quot;&gt;naoty/dfd-editor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;dfd-editor.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;dfd-editor.png&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;dfd-editor&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;左側のテーブルでポチポチに入力していくと、右側にデータフロー図がリアルタイムに生成される。また、別タブでmermaid.jsのテキストも生成されるので、データフロー図の作成だけこれでやって結果をesaにコピペするみたいな使い方ができる。&lt;/p&gt;
&lt;p&gt;最低限必要な機能を作っただけでまだどこかにデプロイもしていないけど、とりあえずこれで解決したい問題は解決できそうだ。&lt;/p&gt;</summary>
    <title>データフロー図を簡単に書くやつを作った</title>
    <updated>2020-09-13T15:08:00+00:00</updated>
    <dc:date>2020-09-13T15:08:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/429/</id>
    <link href="https://blog.naoty.dev/429/"/>
    <summary>&lt;pre lang=&quot;rust&quot; class=&quot;highlight highlight-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[derive(Debug)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;InvalidFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Display&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Formatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InvalidFormat&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;write!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;invalid format&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;dyn&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;MyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InvalidFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;eprintln!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;error: {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;std::error::Error&lt;/code&gt;トレイトは基本的なエラーの振る舞いを表す。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;std::error::Error&lt;/code&gt;トレイトは&lt;code&gt;Debug&lt;/code&gt;トレイトと&lt;code&gt;Display&lt;/code&gt;トレイトを継承しているため、まずはこの2つを実装する必要がある。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;impl error::Error for MyError {}&lt;/code&gt;という空の定義がないと、下のようなエラーになってしまうためこれも必要になる。
&lt;pre&gt;&lt;code&gt;error[E0277]: the trait bound `MyError: std::error::Error` is not satisfied
  --&amp;gt; src/main.rs:19:40
   |
19 |     let error: Box&amp;lt;dyn error::Error&amp;gt; = Box::new(MyError::InvalidFormat);
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::error::Error` is not implemented for `MyError`
   |
   = note: required for the cast to the object type `dyn std::error::Error`
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>カスタムエラー型の定義</title>
    <updated>2020-08-19T21:24:00+00:00</updated>
    <dc:date>2020-08-19T21:24:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/428/</id>
    <link href="https://blog.naoty.dev/428/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;/427/&quot;&gt;前回&lt;/a&gt;、cp-kafkaを使ってKafkaの検証環境を用意したので、今度はRubyで簡単なproducerとconsumerを書いてみる。&lt;/p&gt;
&lt;p&gt;前回用意したdocker-composeから&lt;code&gt;kafka-topic&lt;/code&gt;コマンドで&lt;code&gt;greetings&lt;/code&gt;トピックを作っておく。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% docker-compose &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;kafka kafka-topic &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--create&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--zookeeper&lt;/span&gt; zookeeper:32181 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--partitions&lt;/span&gt; 1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--replication-factor&lt;/span&gt; 1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--topic&lt;/span&gt; greetings
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;--partitions 1&lt;/code&gt;でこのトピックのパーティション数が1つだけ。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;--replication-factor 1&lt;/code&gt;でパーティションのレプリカの数を表している。この値はパーティション数に対する倍数なので、1の場合はレプリカなしになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;producer&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zendesk/ruby-kafka&quot;&gt;ruby-kafka&lt;/a&gt;を使って簡単なproducerを作る。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# producer.rb&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bundler/inline&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gemfile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://rubygems.org&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ruby-kafka&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;kafka&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Kafka&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;localhost:9092&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;client_id: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello-kafka&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kafka&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deliver_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;key: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;topic: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;greetings&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Kafka.new&lt;/code&gt;の第1引数はseed brokerのホスト名のリスト。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Kafka.new&lt;/code&gt;の第2引数はclient idで、任意だけどクライアントを識別するために使うので指定するのが推奨。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% ruby producer.rb
&lt;/pre&gt;
&lt;p&gt;kafkacatでconsumerを起動してproducerが送った値を受け取る。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% kafka &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; localhost:9092 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; greetings
% Auto-selecting consumer mode &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; or &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; to override&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
% Reached end of topic greetings &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0] at offset 0
Hello, World!
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-b&lt;/code&gt;はbrokerのホストを指す。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-t&lt;/code&gt;はトピックを指す。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rubyで書いたproducerから送ったメッセージをconsumerから確認できた。&lt;/p&gt;
&lt;h1&gt;consumer&lt;/h1&gt;
&lt;p&gt;同様にruby-kafkaで簡単なconsumerを作る。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# consumer.rb&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bundler/inline&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gemfile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://rubygems.org&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ruby-kafka&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;kafka&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Kafka&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;localhost:9092&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kafka&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;topic: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;greetings&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;offset:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;key:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;value:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;kafkacatでproducerを起動してメッセージを送る。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello:Hello, World&quot;&lt;/span&gt; | kafkacat &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; localhost:9092 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; greetings &lt;span class=&quot;nt&quot;&gt;-K&lt;/span&gt; :
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-K&lt;/code&gt;でメッセージとキーを分割するデリミタを指定できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% ruby consumer.rb
offset:0    key:hello   value:Hello, World
&lt;/pre&gt;
&lt;p&gt;producerから送ったメッセージをRubyで書いたconsumerで取得することができた。&lt;/p&gt;</summary>
    <title>cp-kafkaでruby-kafkaを試してみる</title>
    <updated>2020-07-19T19:09:00+00:00</updated>
    <dc:date>2020-07-19T19:09:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/427/</id>
    <link href="https://blog.naoty.dev/427/"/>
    <summary>&lt;p&gt;以前書いた&lt;a href=&quot;/421/&quot;&gt;記事&lt;/a&gt;でKafka用のDockerイメージを自作していたけど、Kafkaのマネージドサービスを提供しているConfluent社が公開している&lt;a href=&quot;https://hub.docker.com/r/confluentinc/cp-kafka/&quot;&gt;confluentinc/cp-kafka&lt;/a&gt;というDockerイメージを使うのが手っ取り早いことに気づいた。&lt;/p&gt;
&lt;pre lang=&quot;yaml&quot; class=&quot;highlight highlight-yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# docker-compose.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;kafka&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;confluentinc/cp-kafka&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;KAFKA_ZOOKEEPER_CONNECT&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;zookeeper:32181&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;KAFKA_ADVERTISED_LISTENERS&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PLAINTEXT://localhost:9092&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;9092:9092&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;zookeeper&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;zookeeper&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;confluentinc/cp-zookeeper&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ZOOKEEPER_CLIENT_PORT&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;32181&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Kafkaと一緒に使うzookeeperもConfluent社が用意しているものがあるのでそれを使う。各イメージの設定は環境変数から変更できるようになっている。Confluent社の&lt;a href=&quot;https://docs.confluent.io/current/installation/docker/config-reference.html&quot;&gt;ドキュメント&lt;/a&gt;を参考にするといい。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
% kafkacat &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; localhost:9092
Metadata &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;all topics &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;from broker 1001: localhost:9092/1001&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
 1 brokers:
  broker 1001 at localhost:9092 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;controller&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 1 topics:
  topic &lt;span class=&quot;s2&quot;&gt;&quot;__confluent.support.metrics&quot;&lt;/span&gt; with 1 partitions:
    partition 0, leader 1001, replicas: 1001, isrs: 1001
&lt;/pre&gt;
&lt;p&gt;ホストから&lt;a href=&quot;https://github.com/edenhill/kafkacat&quot;&gt;kafkacat&lt;/a&gt;でコンテナ上のKafkaと疎通確認ができた。&lt;/p&gt;</summary>
    <title>cp-kafkaでKafkaの動作環境を用意する</title>
    <updated>2020-07-18T20:17:00+00:00</updated>
    <dc:date>2020-07-18T20:17:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/426/</id>
    <link href="https://blog.naoty.dev/426/"/>
    <summary>&lt;p&gt;2017年頃にGoで書いた&lt;a href=&quot;https://github.com/naoty/table&quot;&gt;naoty/table&lt;/a&gt;をRustで書き直した。&lt;/p&gt;
&lt;p&gt;これはCSVやTSV形式のデータをASCIIテーブルやMarkdown形式のテーブルに変換する。主にGoogle SpreadsheetやBigQueryの結果をmarkdown形式にしてドキュメントに貼り付けるときに使ったり、ASCIIテーブルにしてコードブロックに含めてSlackに貼ったりするのに使うことが多い。かつて作ったものの中でも長い間使い続けているツールの一つだ。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% echo -e &quot;day\tDAU\n2017-01-01\t10000\n2017-01-02\t8000&quot; | table -H
+------------+-------+
| day        | DAU   |
+------------+-------+
| 2017-01-01 | 10000 |
| 2017-01-02 | 8000  |
+------------+-------+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rustの勉強のために書き直してみたけど、もっと多くのデータ形式に対応させることで用途が増えそうな気がするので気が向く限りもう少し開発を続けていきたい。&lt;/p&gt;</summary>
    <title>naoty/tableをRustで書き直した</title>
    <updated>2020-07-11T22:14:00+00:00</updated>
    <dc:date>2020-07-11T22:14:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/425/</id>
    <link href="https://blog.naoty.dev/425/"/>
    <summary>&lt;p&gt;下のディレクトリ構成のように複数ファイルから&lt;code&gt;reader&lt;/code&gt;モジュールを作りたい。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;src
├── lib.rs
├── main.rs
├── reader
│   ├── csv_reader.rs
│   ├── jsonl_reader.rs
│   └── ltsv_reader.rs
└── reader.rs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;csv_reader.rs&lt;/code&gt;, &lt;code&gt;jsonl_reader.rs&lt;/code&gt;, &lt;code&gt;ltsv_reader.rs&lt;/code&gt;にはそれぞれ&lt;code&gt;CsvReader&lt;/code&gt;, &lt;code&gt;JsonlReader&lt;/code&gt;, &lt;code&gt;LtsvReader&lt;/code&gt;がある。&lt;/p&gt;
&lt;h1&gt;ファイルごとにモジュールを公開する&lt;/h1&gt;
&lt;pre lang=&quot;rust&quot; class=&quot;highlight highlight-rust&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// lib.rs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;rust&quot; class=&quot;highlight highlight-rust&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// reader.rs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csv_reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonl_reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ltsv_reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;こうすると、&lt;code&gt;main.rs&lt;/code&gt;からはこうなる。&lt;/p&gt;
&lt;pre lang=&quot;rust&quot; class=&quot;highlight highlight-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mycrate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;csv_reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CsvReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mycrate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;jsonl_reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsonlReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mycrate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;ltsv_reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LtsvReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;各ファイルがモジュールとして公開されているため、冗長な感じになる。&lt;/p&gt;
&lt;h1&gt;モジュールをまとめて公開し直す&lt;/h1&gt;
&lt;pre lang=&quot;rust&quot; class=&quot;highlight highlight-rust&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// lib.rs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;rust&quot; class=&quot;highlight highlight-rust&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// reader.rs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csv_reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonl_reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ltsv_reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;csv_reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CsvReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json_reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsonlReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ltsv_reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LtsvReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;pub use&lt;/code&gt;を使い、各モジュールに含まれるstructを&lt;code&gt;reader&lt;/code&gt;モジュールとして公開している。こうすると、&lt;code&gt;main.rs&lt;/code&gt;からはこうなる。&lt;/p&gt;
&lt;pre lang=&quot;rust&quot; class=&quot;highlight highlight-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mycrate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CsvReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonlReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LtsvReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>モジュールをディレクトリで構成する</title>
    <updated>2020-07-08T22:56:00+00:00</updated>
    <dc:date>2020-07-08T22:56:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/424/</id>
    <link href="https://blog.naoty.dev/424/"/>
    <summary>&lt;p&gt;rustでCLIツールを作るときにフレームワークを調べるとclapしか出てこない。これがデファクトスタンダードなのだろうということで使ってみるが、微妙にカスタマイズしたかったのでメモ。&lt;/p&gt;
&lt;pre lang=&quot;rust&quot; class=&quot;highlight highlight-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mycli&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;crate_version!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Naoto Kaneko &amp;lt;naoty.k@gmail.com&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.about&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DESCRIPTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USAGE_TEMPLATE&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.version_short&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;v&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.get_matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ポイントは3つ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;crate_version!()&lt;/code&gt;マクロを使うと、Cargo.tomlで定義しているパッケージのバージョンを取得してくれるのでCLIが返すバージョンに設定できて便利。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;template()&lt;/code&gt;を使うと、デフォルトのヘルプメッセージが気に食わない、でもサブコマンドや各フラグの定義時に渡したヘルプメッセージも使いたいみたいなときにテンプレートを指定することでいい感じにカスタマイズができて便利。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;version_short()&lt;/code&gt;を使うと、バージョンの短縮形のフラグがデフォルトで&lt;code&gt;-V&lt;/code&gt;だったのが&lt;code&gt;-v&lt;/code&gt;など自由に変更できる。これがclapを使って最初に感じた違和感だったのでカスタマイズできてよかった。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;補足&lt;/h1&gt;
&lt;p&gt;僕はいつもCLIを作るときはdocopt形式のヘルプメッセージを使っているので、こんな感じのテンプレートを指定してclapでもdocopt風のヘルプメッセージを表示している。&lt;/p&gt;
&lt;pre lang=&quot;rust&quot; class=&quot;highlight highlight-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USAGE_TEMPLATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;r#&quot;
Usage:
    {usage}

Flags:
{flags}
&quot;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;{usage}&lt;/code&gt;, &lt;code&gt;{flags}&lt;/code&gt;の部分がそれぞれclapによって置換される。&lt;/p&gt;
&lt;h1&gt;追記（2020-08-10）&lt;/h1&gt;
&lt;p&gt;ドキュメントを読むと、&lt;code&gt;crate_version!&lt;/code&gt;以外にもCargo.tomlの情報を取得するマクロがあった。&lt;/p&gt;
&lt;pre lang=&quot;rust&quot; class=&quot;highlight highlight-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;crate_name!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;crate_version!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;crate_authors!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.about&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;crate_description!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USAGE_TEMPLATE&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.version_short&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;v&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.get_matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.get_matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>clapカスタマイズメモ</title>
    <updated>2020-07-05T22:49:00+00:00</updated>
    <dc:date>2020-07-05T22:49:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/423/</id>
    <link href="https://blog.naoty.dev/423/"/>
    <summary>&lt;p&gt;for式を書くと所有権まわりのエラーが出てしまい、よくわからなかったので整理する。&lt;/p&gt;
&lt;h1&gt;into_iter()&lt;/h1&gt;
&lt;pre lang=&quot;rust&quot; class=&quot;highlight highlight-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// numberは要素そのもの&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// numbersは再利用不可&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://doc.rust-lang.org/std/iter/index.html#for-loops-and-intoiterator&quot;&gt;公式ドキュメント&lt;/a&gt;にある通り、for式はコレクションに対して&lt;code&gt;IntoIterator&lt;/code&gt;トレイトの&lt;code&gt;into_iter()&lt;/code&gt;を呼び&lt;code&gt;Iterator&lt;/code&gt;トレイトを実装するものを生成する。そして、それに対し&lt;code&gt;next()&lt;/code&gt;を呼ぶことで要素を取り出す。&lt;/p&gt;
&lt;pre lang=&quot;rust&quot; class=&quot;highlight highlight-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;into_iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntoIter&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;定義によると&lt;code&gt;into_iter()&lt;/code&gt;は&lt;code&gt;self&lt;/code&gt;を受けるため、&lt;code&gt;Copy&lt;/code&gt;トレイトが実装されていなければmoveが発生する。なので、for式のあとで再利用しようとしてエラーが発生してしまう。&lt;/p&gt;
&lt;h1&gt;iter(), iter_mut()&lt;/h1&gt;
&lt;pre lang=&quot;rust&quot; class=&quot;highlight highlight-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// numberは要素への参照&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// numbersは再利用可&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ここからの話は&lt;code&gt;Vec&lt;/code&gt;型を想定する。moveを発生させたくない場合、&lt;code&gt;iter()&lt;/code&gt;や&lt;code&gt;iter_mut()&lt;/code&gt;を使う。&lt;/p&gt;
&lt;pre lang=&quot;rust&quot; class=&quot;highlight highlight-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;into_iter()&lt;/code&gt;とは違い、&lt;code&gt;&amp;amp;self&lt;/code&gt;を受けるのでmoveは発生しない。&lt;code&gt;Vec&lt;/code&gt;型の実装だと、&lt;code&gt;std::slice::Iter&lt;/code&gt;型を返す。なので、for式はこの&lt;code&gt;Iter&lt;/code&gt;型の&lt;code&gt;into_iter()&lt;/code&gt;を呼ぶことになるが、&lt;a href=&quot;https://doc.rust-lang.org/src/core/iter/traits/collect.rs.html#247-249&quot;&gt;実装&lt;/a&gt;を見ると&lt;code&gt;self&lt;/code&gt;を返しているだけ。&lt;code&gt;Iter&lt;/code&gt;型は&lt;code&gt;Iterator&lt;/code&gt;トレイトも実装しているということになる。&lt;/p&gt;
&lt;pre lang=&quot;rust&quot; class=&quot;highlight highlight-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;assert_eq!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;assert_eq!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Iter&lt;/code&gt;型の&lt;code&gt;next()&lt;/code&gt;の実装を見てみたけど、現時点では理解できそうになかった。ただ、上のコードの通り、&lt;code&gt;next()&lt;/code&gt;は要素の不変の参照を返す。一方で、&lt;code&gt;iter_mut()&lt;/code&gt;ではこれが可変の参照になる。&lt;/p&gt;</summary>
    <title>イテレータについて整理</title>
    <updated>2020-07-04T21:58:00+00:00</updated>
    <dc:date>2020-07-04T21:58:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/422/</id>
    <link href="https://blog.naoty.dev/422/"/>
    <summary>&lt;p&gt;&lt;code&gt;Read&lt;/code&gt;トレイトや&lt;code&gt;Write&lt;/code&gt;トレイトを実装するには、&lt;code&gt;io::Result&lt;/code&gt;を返す必要がある。これらの関数のなかで&lt;code&gt;std::result::Result&lt;/code&gt;を扱うとき、これを&lt;code&gt;io::Result&lt;/code&gt;に変換したい。&lt;/p&gt;
&lt;pre lang=&quot;rust&quot; class=&quot;highlight highlight-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_utf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.map_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;ErrorKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InvalidData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;io::Result&lt;/code&gt;にするために、&lt;code&gt;map_err&lt;/code&gt;を使ってエラーの型を&lt;code&gt;io::Error&lt;/code&gt;に変換する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;io::Error&lt;/code&gt;は&lt;code&gt;io::ErrorKind&lt;/code&gt;から&lt;code&gt;from&lt;/code&gt;関数で生成できる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;io::ErrorKind&lt;/code&gt;は&lt;a href=&quot;https://doc.rust-lang.org/std/io/enum.ErrorKind.html&quot;&gt;ドキュメント&lt;/a&gt;にあるようにenumとして定義されている。このコードのような不正なデータを受け取った場合は&lt;code&gt;InvalidData&lt;/code&gt;で表せそう。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Resultをio::Resultに変換する</title>
    <updated>2020-06-29T22:13:00+00:00</updated>
    <dc:date>2020-06-29T22:13:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/421/</id>
    <link href="https://blog.naoty.dev/421/"/>
    <summary>&lt;p&gt;そろそろKafkaを手を動かしながら学ぶ必要が出てきたので、簡単に試せるようにDockerイメージを用意した。&lt;/p&gt;
&lt;pre lang=&quot;dockerfile&quot; class=&quot;highlight highlight-dockerfile&quot;&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; openjdk:11-jre&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get update

&lt;span class=&quot;c&quot;&gt;# Kafka&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;wget &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; - http://ftp.meisei-u.ac.jp/mirror/apache/dist/kafka/2.5.0/kafka_2.12-2.5.0.tgz | &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xzf - &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;mv&lt;/span&gt; /kafka_2.12-2.5.0 /kafka
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; PATH=/kafka/bin:$PATH&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /root/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; start.sh  /root/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;./start.sh&quot;]&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Java 11がサポートされているのでOpenJDK 11をベースイメージにする。&lt;/li&gt;
&lt;li&gt;ダウンロードリンクからダウンロードして展開する。&lt;/li&gt;
&lt;li&gt;ZooKeeperとKafkaを同時に起動する必要があるので、起動スクリプトを用意する。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;shell&quot; class=&quot;highlight highlight-shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash -e&lt;/span&gt;

/kafka/bin/zookeeper-server-start.sh /kafka/config/zookeeper.properties &amp;amp;
/kafka/bin/kafka-server-start.sh /kafka/config/server.properties
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://kafka.apache.org/quickstart&quot;&gt;Quickstart&lt;/a&gt;に載っているようにZooKeeperとKafkaを起動する。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>KafkaのDockerイメージを用意する</title>
    <updated>2020-06-24T23:05:00+00:00</updated>
    <dc:date>2020-06-24T23:05:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/420/</id>
    <link href="https://blog.naoty.dev/420/"/>
    <summary>&lt;p&gt;ロジクールのC270nというWebカメラを買った。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;c270n.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;c270n.jpg&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;ロジクールのc270n&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;普段からMacbookをクラムシェルモードにして外付けのでかいディスプレイで作業しているため、今まではデスクの上のキーボードをどかしてそこにMacbookを開いて置き、内臓カメラを使ってHangoutをやっていた。&lt;/p&gt;
&lt;p&gt;そういったことが面倒なので、品薄状態が落ちついてきた頃合いを見計ってWebカメラを買うことにした。&lt;/p&gt;
&lt;p&gt;WebカメラはUSB Type-Aの出力端子を外付けディスプレイに接続して、ディスプレイからUSB Type-CでMacbookにつなげている。この方がType-A to Type-Cのアダプタを余計に買う必要がなくなってスッキリする。&lt;/p&gt;</summary>
    <title>Webカメラを買った</title>
    <updated>2020-06-17T20:53:00+00:00</updated>
    <dc:date>2020-06-17T20:53:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/419/</id>
    <link href="https://blog.naoty.dev/419/"/>
    <summary>&lt;p&gt;最近、Rustの勉強を再開した。最後にRustを勉強していたのは2018年-2019年の年末年始だった。&lt;/p&gt;
&lt;p&gt;再開しようと思ったきっかけは、&lt;a href=&quot;https://github.com/naoty/todo&quot;&gt;naoty/todo&lt;/a&gt;のコミットログをふと見返していたことだった。最初のコミットログからもう5年も経っていた。当初はGoを勉強し始めたころでGoの勉強をかねて作り始めたものだった。あれから5年も経つのかと過ぎ去った年月に思いを馳せつつ、もう一度プログラミング言語の習得にトライしたい気持ちになった。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gihyo.jp/book/2019/978-4-297-10559-4&quot;&gt;実践Rust入門&lt;/a&gt;の第1部をざっと流し読み、基本的な書き方や概念をなんとなく頭に入れた。まだ所有権やライフタイムについてはピンと来ていない。それから、&lt;a href=&quot;https://exercism.io&quot;&gt;Exercism&lt;/a&gt;でとりあえずRustのコードを書きながら、海外のRustaceanにアドバイスをもらっている。&lt;/p&gt;
&lt;p&gt;Goの勉強を始めてから5年たった今、ようやく仕事でGoに関わることができている。また5年後には仕事でRustに関われることを願いながら、今はコツコツ勉強を続けていきたい。&lt;/p&gt;</summary>
    <title>Rustの勉強を再開した</title>
    <updated>2020-06-15T21:50:00+00:00</updated>
    <dc:date>2020-06-15T21:50:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/418/</id>
    <link href="https://blog.naoty.dev/418/"/>
    <summary>&lt;p&gt;とある調査であるカラムを含むテーブルをリストアップしなくてはいけなくて、途中までschema.rbなどを眺めていたんだけど、途中から効率的なやり方があったのでメモをしておく。&lt;/p&gt;
&lt;p&gt;以下、&lt;code&gt;email&lt;/code&gt;または&lt;code&gt;address&lt;/code&gt;というカラムをもつテーブルをリストアップしたいとする。&lt;/p&gt;
&lt;h1&gt;MySQL&lt;/h1&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;information_schemas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COLUMNS&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;COLUMN_NAME&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'address'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;information_schemas&lt;/code&gt;データベースにメタデータがある。&lt;/p&gt;
&lt;h1&gt;BigQuery&lt;/h1&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;my_project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INFORMATION_SCHEMA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COLUMNS&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;column_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'address'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;beta版だけどBigQueryにもメタデータを含むデータセットがある。&lt;/p&gt;
&lt;h1&gt;Hive&lt;/h1&gt;
&lt;p&gt;おそらくこれがブログに残したかった最大の理由。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SD_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TBLS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TBL_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;COLUMNS_V2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`COLUMN_NAME`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SDS&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TBLS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;USING&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SD_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COLUMNS_V2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;USING&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CD_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;COLUMNS_V2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`COLUMN_NAME`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'address'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Hive metastoreへのクエリでHiveテーブルのメタデータを取得できる。&lt;code&gt;COLUMNS_V2&lt;/code&gt;テーブルにはどのテーブルのカラムかという情報が（なぜか）ない。&lt;/p&gt;
&lt;p&gt;いろいろ調べた結果、&lt;code&gt;SDS&lt;/code&gt;という謎テーブルにjoinすることでテーブル名も取得できることがわかった。&lt;/p&gt;
&lt;h1&gt;Cassandra&lt;/h1&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;system_schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;keyspace_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'my_keyspace'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ALLOW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILTERING&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;system_schema.columns&lt;/code&gt;にメタデータがある。&lt;code&gt;ALLOW FILTERING&lt;/code&gt;をつけないと以下のようなエラーが出るので注意。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Query 1 ERROR: PRIMARY KEY column &quot;column_name&quot; cannot be restricted as preceding column &quot;table_name&quot; is not restricted
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>あるカラムをもつテーブルを探すには</title>
    <updated>2020-06-08T23:03:00+00:00</updated>
    <dc:date>2020-06-08T23:03:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/417/</id>
    <link href="https://blog.naoty.dev/417/"/>
    <summary>&lt;h1&gt;ダメなケース&lt;/h1&gt;
&lt;p&gt;同じメッセージを持つ、別々のエラーは等しくない。&lt;/p&gt;
&lt;pre lang=&quot;go&quot; class=&quot;highlight highlight-go&quot;&gt;&lt;span class=&quot;n&quot;&gt;err1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user not found&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;err2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user not found&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;//=&amp;gt; false&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;なので、こういったコードはうまくいかない。&lt;/p&gt;
&lt;pre lang=&quot;go&quot; class=&quot;highlight highlight-go&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user not found&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;go&quot; class=&quot;highlight highlight-go&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user not found&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fprintln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;failed to lookup user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;シンプルなエラーの判別&lt;/h1&gt;
&lt;p&gt;エラーを比較するには、エラーを生成するコードとエラーを判別するコードの間でエラーを共有する。&lt;/p&gt;
&lt;pre lang=&quot;go&quot; class=&quot;highlight highlight-go&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ErrNotFound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user not found&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ErrNotFound&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;go&quot; class=&quot;highlight highlight-go&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrNotFound&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fprintln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;failed to lookup user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;データをもつエラーの判別&lt;/h1&gt;
&lt;p&gt;データをもつエラーを表現するには、&lt;code&gt;Error()&lt;/code&gt;を実装する型を定義する。&lt;code&gt;errors.As()&lt;/code&gt;を使うと、エラーの判別をしつつ型アサーションにより内部のデータにアクセスできる。&lt;/p&gt;
&lt;pre lang=&quot;go&quot; class=&quot;highlight highlight-go&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ErrNotFound&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ErrNotFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user not found: %d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ErrorNotFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;go&quot; class=&quot;highlight highlight-go&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notFoundErr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrNotFound&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;As&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notFoundErr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;failed to lookup user ID:%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notFoundErr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>エラーの判別</title>
    <updated>2020-05-23T18:10:00+00:00</updated>
    <dc:date>2020-05-23T18:10:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/416/</id>
    <link href="https://blog.naoty.dev/416/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/todo&quot;&gt;naoty/todo&lt;/a&gt;をゼロから書き直した。これは自分がつかうためだけに書いたTODO管理ツールで、もう5年くらい前に書いて使い続けていたんだけど、タスクの進め方を見直したことに伴って書き直すことにした。&lt;/p&gt;
&lt;p&gt;大きい変更点として、それぞれのTODOをテキストファイルとして保存するようにした。作業メモをTODOごとに残したかったから、今回ゼロから作り直すことになった。作業メモは&lt;a href=&quot;/330/&quot;&gt;作業メモという習慣&lt;/a&gt;という以前の記事で書いたもので、いまも続けている。&lt;/p&gt;
&lt;h1&gt;使い方&lt;/h1&gt;
&lt;p&gt;仕事をするときはこのnaoty/todoをこんな感じでつかっている。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# タスクを追加&lt;/span&gt;
% todo add 新しいタスク

&lt;span class=&quot;c&quot;&gt;# タスクを表示&lt;/span&gt;
% todo list
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 001: 新しいタスク

&lt;span class=&quot;c&quot;&gt;# サブタスクを追加&lt;/span&gt;
% todo add &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 1 新しいサブタスク1
% todo add &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 1 新しいサブタスク2
% todo list
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 001: 新しいタスク
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 002: 新しいサブタスク1
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 003: 新しいサブタスク2

&lt;span class=&quot;c&quot;&gt;# エディタを開いて作業メモをとる&lt;/span&gt;
% todo open 2

&lt;span class=&quot;c&quot;&gt;# 完了したらdoneにする&lt;/span&gt;
% todo &lt;span class=&quot;k&quot;&gt;done &lt;/span&gt;2
% todo list
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 001: 新しいタスク
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;x] 002: 新しいサブタスク1
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 003: 新しいサブタスク2

&lt;span class=&quot;c&quot;&gt;# サブタスクは無限にネストできる&lt;/span&gt;
% todo add &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 3 新しいサブタスク3
% todo list
% todo list
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 001: 新しいタスク
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;x] 002: 新しいサブタスク1
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 003: 新しいサブタスク2
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 004: 新しいサブタスク3

&lt;span class=&quot;c&quot;&gt;# タスクが待ち状態になったらwaitする&lt;/span&gt;
% todo &lt;span class=&quot;nb&quot;&gt;wait &lt;/span&gt;4
% todo list
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 001: 新しいタスク
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;x] 002: 新しいサブタスク1
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 003: 新しいサブタスク2
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;w] 004: 新しいサブタスク3

&lt;span class=&quot;c&quot;&gt;# 完了したタスクを消したいときはarchiveする&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# archiveはファイルを削除せずに一覧から消すだけなので、作業メモは残せる&lt;/span&gt;
% todo archive
% todo list
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 001: 新しいタスク
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 003: 新しいサブタスク2
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;w] 004: 新しいサブタスク3
&lt;/pre&gt;
&lt;h1&gt;インストール&lt;/h1&gt;
&lt;p&gt;Goで書いているので&lt;code&gt;go get&lt;/code&gt;からインストールもできるし、Homebrewでインストールできるようにもしているので、こんな感じでインストールできる。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% brew tap naoty/misc
% brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;todo
&lt;/pre&gt;</summary>
    <title>naoty/todoを書き直した</title>
    <updated>2020-05-17T13:15:00+00:00</updated>
    <dc:date>2020-05-17T13:15:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/415/</id>
    <link href="https://blog.naoty.dev/415/"/>
    <summary>&lt;p&gt;以前までこのホームページで使っているnpm packageのバージョン更新をdependabotで自動化していたが、最近renovateを使うようになった。&lt;/p&gt;
&lt;h1&gt;Netlifyで無料分を使い切った&lt;/h1&gt;
&lt;p&gt;あるとき、Netlifyから数ドルほど請求されていることに気づいた。このホームページはNetlifyでホスティングしているのだけど、どうやらビルド時間の上限を超えた分が請求されたらしい。&lt;/p&gt;
&lt;p&gt;Build minutesのページを見てみた。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;build-minutes.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;build-minutes.png&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;ビルド時間&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;確かに、極端にビルド時間がかかっている日がある。&lt;/p&gt;
&lt;p&gt;原因はdependabotからのパッケージ更新のPull requestごとにNetlifyでビルドをおこなっていることだった。dependabotは更新があったパッケージごとにPull requestを作るため、大量のPull requestが作られてしまう。Pull requestのグループ化を要望する&lt;a href=&quot;https://github.com/dependabot/feedback/issues/5&quot;&gt;声&lt;/a&gt;はたくさんあるが、まだ実現されてなさそうだ。&lt;/p&gt;
&lt;h1&gt;renovateへの移行&lt;/h1&gt;
&lt;p&gt;そこで、&lt;a href=&quot;https://renovate.whitesourcesoftware.com/&quot;&gt;renovate&lt;/a&gt;という別のパッケージ更新サービスを使ってみることにした。&lt;/p&gt;
&lt;p&gt;dependabotと同様にGitHubで簡単に連携できた。設定ファイルは、&lt;code&gt;config:base&lt;/code&gt; presetを使うような雰囲気だったけど、どういった設定なのか不透明なのが気持ち悪かったので中身を調べて自分にとって必要な設定にした。&lt;/p&gt;
&lt;pre lang=&quot;json&quot; class=&quot;highlight highlight-json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;schedule&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;on friday&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;ignorePaths&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;**/node_modules/**&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;packageRules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;updateTypes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;minor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;patch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;groupName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;all minor dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;automerge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;週末にPull requestをチェックしたいので、更新は金曜日だけにする。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;node_modules&lt;/code&gt;以下のpackage.jsonは無視する。&lt;/li&gt;
&lt;li&gt;メジャーアップデートはパッケージごとにPull requestを作ってmergeは手動で行う。&lt;/li&gt;
&lt;li&gt;マイナー以下のアップデートはすべてひとつにまとめて、自動的にmergeする。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これで、Pull requestが送られる頻度がかなり抑えられたので、Netlifyでビルドする時間も劇的に減った。&lt;/p&gt;</summary>
    <title>ホームページのパッケージ更新をrenovateに移した</title>
    <updated>2020-05-09T20:27:00+00:00</updated>
    <dc:date>2020-05-09T20:27:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/414/</id>
    <link href="https://blog.naoty.dev/414/"/>
    <summary>&lt;p&gt;testingパッケージの使い方を時間をとって調べたことがなかったので、あらためてちゃんと調べてみる。testingパッケージの中にもいろいろあるけど特に&lt;code&gt;testing.T&lt;/code&gt;型について調べてみた。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://golang.org/pkg/testing/#T&quot;&gt;Godoc&lt;/a&gt;を読んでみると、あることがわかった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Error&lt;/code&gt;/&lt;code&gt;Errorf&lt;/code&gt;: &lt;code&gt;Fail&lt;/code&gt;してから&lt;code&gt;Log&lt;/code&gt;/&lt;code&gt;Logf&lt;/code&gt;する&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Fatal&lt;/code&gt;/&lt;code&gt;Fatalf&lt;/code&gt;: &lt;code&gt;FailNow&lt;/code&gt;してから&lt;code&gt;Log&lt;/code&gt;/&lt;code&gt;Logf&lt;/code&gt;する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なので、&lt;code&gt;Fail&lt;/code&gt;と&lt;code&gt;FailNow&lt;/code&gt;と&lt;code&gt;Log&lt;/code&gt;がわかっていれば基本的なことを理解できそう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Fail&lt;/code&gt;は実行中の関数を失敗とマークするけど、停止させずに継続する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;FailNow&lt;/code&gt;は実行中の関数を失敗とマークして、&lt;code&gt;runtime.Goexit&lt;/code&gt;関数で停止させる。ちなみに、&lt;code&gt;runtime.Goexit&lt;/code&gt;は&lt;code&gt;os.Exit&lt;/code&gt;と違って&lt;code&gt;defer&lt;/code&gt;関数を呼び出してから現在のgoroutineを終了させる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Log&lt;/code&gt;はテストが失敗したときだけテキストを出力する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ということで、テストが失敗して即座に終了したい場合（エラーが出たときなど）は&lt;code&gt;Fatal&lt;/code&gt;、テストが失敗したけど後続するテストも行いたい場合は&lt;code&gt;Error&lt;/code&gt;を使えばいいことがわかった。&lt;/p&gt;</summary>
    <title>ErrorとFatalの使い方</title>
    <updated>2020-05-02T12:56:00+00:00</updated>
    <dc:date>2020-05-02T12:56:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/413/</id>
    <link href="https://blog.naoty.dev/413/"/>
    <summary>&lt;p&gt;GoでCLIツールを作るとき、いつも&lt;a href=&quot;https://github.com/spf13/pflag&quot;&gt;spf13/pflag&lt;/a&gt;を使ってオプションを実装している。&lt;/p&gt;
&lt;p&gt;spf13/pflagは標準パッケージの&lt;a href=&quot;https://golang.org/pkg/flag/&quot;&gt;flag&lt;/a&gt;と同じインターフェイスを持ちつつ、&lt;code&gt;-h&lt;/code&gt;と&lt;code&gt;--help&lt;/code&gt;のようなよくある形式のオプションを簡単に実装できる。標準パッケージのflagでは、&lt;code&gt;-help&lt;/code&gt;のような形式になってしまう。&lt;/p&gt;
&lt;h1&gt;使い方&lt;/h1&gt;
&lt;pre lang=&quot;go&quot; class=&quot;highlight highlight-go&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pflag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BoolP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;v&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;show version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pflag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pflag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pflag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pflag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;list&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// snip&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;subcommand not found: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pflag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% sample
Usage of sample:
  &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;   show version
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;pflag.BoolP&lt;/code&gt;のようにflagパッケージの関数名に&lt;code&gt;P&lt;/code&gt;がついた関数をつかうと、よくある形式のオプションを追加できる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pflag.Usage()&lt;/code&gt;でヘルプメッセージを生成する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;NArg()&lt;/code&gt;や&lt;code&gt;Arg()&lt;/code&gt;などの関数はflagパッケージにあるものと同じなので、覚えていることをそのまま使える。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>spf13/pflagの使い方</title>
    <updated>2020-04-29T22:25:00+00:00</updated>
    <dc:date>2020-04-29T22:25:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/412/</id>
    <link href="https://blog.naoty.dev/412/"/>
    <summary>&lt;p&gt;今年6月に今住んでる物件の2回目の契約更新が来るから、1年くらい前から引っ越したいと思っていたんだけど、リスクが高いのであきらめた。&lt;/p&gt;
&lt;p&gt;その代わりに、4年近く同じだったレイアウトを模様替えをした。あとは、引っ越しのタイミングで導入しようとしていた家具・家電を買ってしまって、いまの家での生活レベルを底上げしていきたい。&lt;/p&gt;
&lt;p&gt;歴史的な状況の中で日記を残しておくことはすごく意味のあることな気がするので、ちょっとしたことだけどブログにしてみた。&lt;/p&gt;</summary>
    <title>引っ越しをあきらめて模様替えした</title>
    <updated>2020-04-13T21:11:00+00:00</updated>
    <dc:date>2020-04-13T21:11:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/411/</id>
    <link href="https://blog.naoty.dev/411/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/B07YG2PH4Q&quot;&gt;「デジタル・ミニマリスト」&lt;/a&gt;という本を読んでいる。正確には、半分読んで書かれていることを実践している。残り半分は実践してみたあとに読む。&lt;/p&gt;
&lt;p&gt;この本では、SNSを中心にユーザーの注意を引きつけることで利益を上げる企業によって人間の主体性や孤独でいる時間が奪われていっているので、意識的にそういったものから離れて自分の興味のあることや人とのつながりを大事にしよう、的なことが書いてあったと思う。&lt;/p&gt;
&lt;p&gt;その内容に感化されてSNS断ちを4/1から始めた。もう1週間経つのでその内容をブログに残す。&lt;/p&gt;
&lt;h1&gt;やってみたこと&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Twitterとはてなブックマークのアプリをアンインストールした。&lt;/li&gt;
&lt;li&gt;macから夜フクロウをアンインストールした。&lt;/li&gt;
&lt;li&gt;情報収集のソースをFeedly（興味のある人のブログ）とGoogleニュース（世間一般のニュース）に絞った。&lt;/li&gt;
&lt;li&gt;SNSの代わりに、以前から興味があった本を買って読んでいる。1週間でいま5冊目の本を読んでいる。&lt;/li&gt;
&lt;li&gt;本を読みながらscrapboxにメモを残すようにしている。思い浮かんだことを文字にしないともったないような気がする。scrapboxに書き残すことで知識が有機的につながってくるのも楽しみにしている。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;わかったこと&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;最初の2、3日は禁断症状というか、見たい衝動に駆られて少し見たりもしていたけど、最近は見なくてもぜんぜん気にならないようになってきた。&lt;/li&gt;
&lt;li&gt;Twitterやはてブを漫然とザッピングしてなにかを分かった気になるよりも、その時間で本を読んでいる方が充実感がある。&lt;/li&gt;
&lt;li&gt;自分の興味を大事にしていきたいという気持ちが強くなってきた。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これがいつまで続くかわからないけど、自分の興味やそれにかける時間を手放さないようにしていきたいという気持ちを新たにした。&lt;/p&gt;</summary>
    <title>SNS断ちをしてみることにした</title>
    <updated>2020-04-07T23:20:00+00:00</updated>
    <dc:date>2020-04-07T23:20:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/410/</id>
    <link href="https://blog.naoty.dev/410/"/>
    <summary>&lt;ul&gt;
&lt;li&gt;From: 株式会社リクルートマーケティングパートナーズ&lt;/li&gt;
&lt;li&gt;To: Repro株式会社&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2020年1月からReproで働いています。3ヶ月の試用期間を終えたのでご報告です。&lt;/p&gt;
&lt;h1&gt;転職した理由&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;5年が経過したため。&lt;/li&gt;
&lt;li&gt;サーバーサイド、iOSアプリ、インフラを一通りやったため。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Reproに決めた理由&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;大規模なデータを扱えるようになりたいため。プログラムを効率的に書くスキルよりも大規模なデータを扱うスキルを伸ばす方に興味があった。&lt;/li&gt;
&lt;li&gt;やっていけそうか不安になったため。不安になるくらいの方が楽しめそうと感じた。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;前職でやっていたこと&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;新規サービスのサーバーサイドをRailsで書いた。&lt;/li&gt;
&lt;li&gt;サービスリニューアルを機にiOSアプリをSwiftでフルスクラッチした。&lt;/li&gt;
&lt;li&gt;Railsで書いたサービスをECSで運用した。&lt;/li&gt;
&lt;li&gt;会社共通で利用する細々としたサービスをECSに移行した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;いまやっていること&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;分散データ処理基盤を設計・運用したり、SRE的なことをしたりするチームに入った。&lt;/li&gt;
&lt;li&gt;PrestoやHiveをごにょごにょしている。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;キャリアが「RailsとかiOSのアプリケーション開発 -&amp;gt; AWS上のインフラ運用 -&amp;gt; データ処理基盤の運用」のように移ってきた感じです。&lt;/p&gt;
&lt;p&gt;以上です。よろしくおねがいします。&lt;/p&gt;</summary>
    <title>Reproに転職してました</title>
    <updated>2020-04-01T10:15:00+00:00</updated>
    <dc:date>2020-04-01T10:15:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/409/</id>
    <link href="https://blog.naoty.dev/409/"/>
    <summary>&lt;p&gt;最近、仕事で大規模なデータ処理基盤にたずさわっている。自分の場合、複雑なものごとを理解するときにはまず全体像を理解するところからはじめている。データフロー図というものを描くと、データの流れを中心にデータ処理基盤を整理できて全体像の理解しやすくなった。&lt;/p&gt;
&lt;p&gt;また、仕事ではesaを使ってドキュメントを残すため、Mermaid.jsでデータフロー図を描いてわかりやすいドキュメントを残せた。&lt;/p&gt;
&lt;h1&gt;データフロー図&lt;/h1&gt;
&lt;p&gt;データフロー図は4つの要素から構成されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;外部実体&lt;/strong&gt;: システムの外部にあるデータの発生源や出力先&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;プロセス&lt;/strong&gt;: データを入力し、データを出力する処理&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;データストア&lt;/strong&gt;: データを永続的に保管する場所&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;データフロー&lt;/strong&gt;: データの入力から出力への流れ&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Mermaid.js流データフロー図&lt;/h1&gt;
&lt;p&gt;Mermaid.jsにはデータフロー図を描くための専用の記法があるわけじゃない。だけど、フローチャート図の記法を使ってうまく描けそうということがわかった。&lt;/p&gt;
&lt;p&gt;各要素を表す記法を下のように決める。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;要素&lt;/th&gt;
&lt;th&gt;mermaid.js&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;外部実体&lt;/td&gt;
&lt;td&gt;&lt;code&gt;external[External entity]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;プロセス&lt;/td&gt;
&lt;td&gt;&lt;code&gt;process(Process)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;データストア&lt;/td&gt;
&lt;td&gt;&lt;code&gt;datastore[(Datastore)]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;データフロー&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;-- input --&amp;gt;&lt;/code&gt;, &lt;code&gt;-- output --&amp;gt;&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;で、こんな感じで書く。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;graph TD
  external[External entity]
  process(Process)
  datastore[(Datastore)]

  datastore -- input --&amp;gt; process -- output --&amp;gt; external
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;すると、こんな図が描ける。&lt;/p&gt;
&lt;pre lang=&quot;mermaid&quot;&gt;&lt;code&gt;graph TD
  external[External entity]
  process(Process)
  datastore[(Datastore)]

  datastore -- input --&amp;gt; process -- output --&amp;gt; external
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;例&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;graph TD
  user[User]
  api(API)
  mysql[(MySQL)]
  embulk(Embulk)
  bigquery[(BigQuery)]
  fluentd(Fluentd)
  s3[(S3)]

  user -- sign up --&amp;gt; api -- profile --&amp;gt; mysql -- profile --&amp;gt; embulk -- profile --&amp;gt; bigquery
  api -- access log --&amp;gt; fluentd -- access log --&amp;gt; s3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;mermaid&quot;&gt;&lt;code&gt;graph TD
  user[User]
  api(API)
  mysql[(MySQL)]
  embulk(Embulk)
  bigquery[(BigQuery)]
  fluentd(Fluentd)
  s3[(S3)]

  user -- sign up --&amp;gt; api -- profile --&amp;gt; mysql -- profile --&amp;gt; embulk -- profile --&amp;gt; bigquery
  api -- access log --&amp;gt; fluentd -- access log --&amp;gt; s3
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>Mermaid.jsでデータフロー図を描く</title>
    <updated>2020-03-15T11:22:00+00:00</updated>
    <dc:date>2020-03-15T11:22:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/408/</id>
    <link href="https://blog.naoty.dev/408/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://cwiki.apache.org/confluence/display/Hive/GettingStarted&quot;&gt;公式ドキュメント&lt;/a&gt;に従ってHiveのDockerイメージをつくっていく。今回は2系を動かす。&lt;/p&gt;
&lt;p&gt;すべてのコードは&lt;a href=&quot;https://github.com/naoty/hello-hive&quot;&gt;naoty/hello-hive&lt;/a&gt;にある。&lt;/p&gt;
&lt;h1&gt;Java&lt;/h1&gt;
&lt;p&gt;Java 1.8への移行が推奨されているので、&lt;code&gt;openjdk:8&lt;/code&gt;をベースイメージに使う。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt;&lt;span class=&quot;gi&quot;&gt;+FROM openjdk:8
&lt;/span&gt;&lt;/pre&gt;
&lt;h1&gt;Hadoop&lt;/h1&gt;
&lt;p&gt;Hive 2系に合わせてHadoopも2系をインストールする。以前の&lt;a href=&quot;/406/&quot;&gt;ブログ&lt;/a&gt;で紹介したとおり、HadoopをDockerコンテナで動かすには下のようなことが必要になる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sshdのセットアップ&lt;/li&gt;
&lt;li&gt;Hadoopのダウンロード&lt;/li&gt;
&lt;li&gt;HDFSのフォーマット&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; FROM openjdk:8
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+# sshd
+RUN apt-get update \
+  &amp;amp;&amp;amp; apt-get install -y --no-install-recommends ssh \
+  &amp;amp;&amp;amp; apt-get clean \
+  &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
+RUN mkdir /run/sshd \
+  &amp;amp;&amp;amp; ssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa \
+  &amp;amp;&amp;amp; cat ~/.ssh/id_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys \
+  &amp;amp;&amp;amp; chmod 0600 ~/.ssh/authorized_keys
+
+# Hadoop
+RUN wget -q -O - http://ftp.tsukuba.wide.ad.jp/software/apache/hadoop/common/hadoop-2.9.2/hadoop-2.9.2.tar.gz | tar zxf -
+ENV PATH=/hadoop-2.9.2/bin:/hadoop-2.9.2/sbin:$PATH
+COPY config/hadoop /hadoop-2.9.2/etc/hadoop/
+RUN hdfs namenode -format
&lt;/span&gt;&lt;/pre&gt;
&lt;h1&gt;Hive&lt;/h1&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; FROM openjdk:8
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt; # sshd
 RUN apt-get update \
   &amp;amp;&amp;amp; apt-get install -y --no-install-recommends ssh \
   &amp;amp;&amp;amp; apt-get clean \
   &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
 RUN mkdir /run/sshd \
   &amp;amp;&amp;amp; ssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa \
   &amp;amp;&amp;amp; cat ~/.ssh/id_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys \
   &amp;amp;&amp;amp; chmod 0600 ~/.ssh/authorized_keys
 
 # Hadoop
 RUN wget -q -O - http://ftp.tsukuba.wide.ad.jp/software/apache/hadoop/common/hadoop-2.9.2/hadoop-2.9.2.tar.gz | tar zxf -
 ENV PATH=/hadoop-2.9.2/bin:/hadoop-2.9.2/sbin:$PATH
 COPY config/hadoop /hadoop-2.9.2/etc/hadoop/
 RUN hdfs namenode -format
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+# Hive
+RUN wget -q -O - http://ftp.tsukuba.wide.ad.jp/software/apache/hive/hive-2.3.6/apache-hive-2.3.6-bin.tar.gz | tar zxf -
+ENV HIVE_HOME=/apache-hive-2.3.6-bin PATH=/apache-hive-2.3.6-bin/bin:$PATH
+COPY config/hive /apache-hive-2.3.6-bin/conf/
&lt;/span&gt;&lt;/pre&gt;
&lt;h1&gt;起動スクリプト&lt;/h1&gt;
&lt;p&gt;コンテナの起動スクリプトを追加し、下のようなことを起動時におこなうようにする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sshdの起動（Hadoopの起動に必要）&lt;/li&gt;
&lt;li&gt;HadoopのNameNodeとDataNodeデーモンの起動&lt;/li&gt;
&lt;li&gt;Hiveが使うHDFSの初期化&lt;/li&gt;
&lt;li&gt;Hive metastoreの初期化（今回は埋め込み型のmetastoreを使う）&lt;/li&gt;
&lt;li&gt;hiveserver2の起動（コンテナ外部から接続してHiveQLを利用できるようにするため）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash -ex&lt;/span&gt;

/usr/sbin/sshd
start-dfs.sh

hdfs dfs &lt;span class=&quot;nt&quot;&gt;-mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /tmp
hdfs dfs &lt;span class=&quot;nt&quot;&gt;-mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /user/hive/warehouse
hdfs dfs &lt;span class=&quot;nt&quot;&gt;-chmod&lt;/span&gt; g+w /tmp
hdfs dfs &lt;span class=&quot;nt&quot;&gt;-chmod&lt;/span&gt; g+w /user/hive/warehouse

schematool &lt;span class=&quot;nt&quot;&gt;-dbType&lt;/span&gt; derby &lt;span class=&quot;nt&quot;&gt;-initSchema&lt;/span&gt;

hiveserver2
&lt;/pre&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; FROM openjdk:8
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt; # sshd
 RUN apt-get update \
   &amp;amp;&amp;amp; apt-get install -y --no-install-recommends ssh \
   &amp;amp;&amp;amp; apt-get clean \
   &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
 RUN mkdir /run/sshd \
   &amp;amp;&amp;amp; ssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa \
   &amp;amp;&amp;amp; cat ~/.ssh/id_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys \
   &amp;amp;&amp;amp; chmod 0600 ~/.ssh/authorized_keys
 
 # Hadoop
 RUN wget -q -O - http://ftp.tsukuba.wide.ad.jp/software/apache/hadoop/common/hadoop-2.9.2/hadoop-2.9.2.tar.gz | tar zxf -
 ENV PATH=/hadoop-2.9.2/bin:/hadoop-2.9.2/sbin:$PATH
 COPY config/hadoop /hadoop-2.9.2/etc/hadoop/
 RUN hdfs namenode -format
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt; # Hive
 RUN wget -q -O - http://ftp.tsukuba.wide.ad.jp/software/apache/hive/hive-2.3.6/apache-hive-2.3.6-bin.tar.gz | tar zxf -
 ENV HIVE_HOME=/apache-hive-2.3.6-bin PATH=/apache-hive-2.3.6-bin/bin:$PATH
 COPY config/hive /apache-hive-2.3.6-bin/conf/
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+WORKDIR /root
+COPY start /root/
+CMD [&quot;./start&quot;]
&lt;/span&gt;&lt;/pre&gt;
&lt;h1&gt;動作確認&lt;/h1&gt;
&lt;p&gt;hiveserver2を起動する。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; naoty/hello-hive &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
% docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; naoty/hello-hive
&lt;/pre&gt;
&lt;p&gt;beelineを使ってhiveserver2に接続する。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;xxxxxxxx &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; beeline &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; jdbc:hive2://localhost:10000
0: jdbc:hive2://localhost:10000&amp;gt; 
&lt;/pre&gt;</summary>
    <title>HiveをDockerで動かす</title>
    <updated>2020-03-14T17:44:00+00:00</updated>
    <dc:date>2020-03-14T17:44:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/407/</id>
    <link href="https://blog.naoty.dev/407/"/>
    <summary>&lt;p&gt;最近、Rubyを書いてなかったので前から興味があった型に入門してみた。&lt;/p&gt;
&lt;h1&gt;型シグネチャを書く&lt;/h1&gt;
&lt;p&gt;型シグネチャファイルの拡張子は&lt;code&gt;*.rbs&lt;/code&gt;とのこと。型シグネチャの書き方は&lt;a href=&quot;https://github.com/ruby/ruby-signature/blob/master/docs/syntax.md&quot;&gt;ここ&lt;/a&gt;を見たり、&lt;a href=&quot;https://github.com/ruby/ruby-signature/tree/master/stdlib/builtin&quot;&gt;実際の例&lt;/a&gt;を見るとわかってくる。&lt;/p&gt;
&lt;pre lang=&quot;rb&quot; class=&quot;highlight highlight-rb&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pokemon&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Integer&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;型検査器をつかう&lt;/h1&gt;
&lt;p&gt;適当に空のクラスを用意して試してみる。&lt;/p&gt;
&lt;pre lang=&quot;rb&quot; class=&quot;highlight highlight-rb&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pokemon&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Steepfile&lt;/code&gt;というファイルに検査したいコードのディレクトリと型シグネチャが入っているディレクトリを指定する。&lt;/p&gt;
&lt;pre lang=&quot;rb&quot; class=&quot;highlight highlight-rb&quot;&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:lib&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;lib&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sig&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ディレクトリ構成はこんな感じ。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% tree &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
├── Gemfile
├── Gemfile.lock
├── Steepfile
├── lib
│   └── pokemon.rb
└── sig
    └── pokemon.rbs
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;steep check&lt;/code&gt;で型検査を実行できる。ちゃんとメソッドがないことと怒られるようになった。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;steep check
lib/pokemon.rb:1:0: MethodDefinitionMissing: &lt;span class=&quot;nv&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;::Pokemon, &lt;span class=&quot;nv&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;initialize &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;class Pokemon&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>Rubyの型に入門する</title>
    <updated>2020-03-10T20:02:00+00:00</updated>
    <dc:date>2020-03-10T20:02:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/406/</id>
    <link href="https://blog.naoty.dev/406/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html&quot;&gt;公式ドキュメント&lt;/a&gt;を見ながらDockerイメージをセットアップしていく。&lt;/p&gt;
&lt;h1&gt;Javaをインストールする&lt;/h1&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt;&lt;span class=&quot;gi&quot;&gt;+FROM openjdk:8
&lt;/span&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://hub.docker.com/_/openjdk&quot;&gt;openjdk&lt;/a&gt;をベースイメージにする。&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://cwiki.apache.org/confluence/display/HADOOP/Hadoop+Java+Versions&quot;&gt;ドキュメント&lt;/a&gt;を見ると、Hadoop 3.xだとJava 8しかサポートしていないとのことだったので、&lt;code&gt;openjdk:8&lt;/code&gt;を使う。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;sshdを起動する&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Required Software&lt;/code&gt;の項目を見ると、Javaの他にsshを必要としている。また、pdshも推奨されている。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; FROM openjdk:8
&lt;span class=&quot;gi&quot;&gt;+RUN apt-get update \
+  &amp;amp;&amp;amp; apt-get install -y --no-install-recommends ssh pdsh \
+  &amp;amp;&amp;amp; apt-get clean \
+  &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
+RUN mkdir /run/sshd
+CMD [&quot;/usr/sbin/sshd&quot;]
&lt;/span&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;apt-get&lt;/code&gt;でsshとpdshをインストールする。イメージサイズを減らす工夫もしてある。&lt;/li&gt;
&lt;li&gt;sshdが必要とするディレクトリを作ってからsshdを起動する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Hadoopをダウンロードする&lt;/h1&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; FROM openjdk:8
 RUN apt-get update \
   &amp;amp;&amp;amp; apt-get install -y --no-install-recommends ssh pdsh \
   &amp;amp;&amp;amp; apt-get clean \
   &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
 RUN mkdir /run/sshd
&lt;span class=&quot;gi&quot;&gt;+RUN wget -q -O - http://ftp.yz.yamagata-u.ac.jp/pub/network/apache/hadoop/common/hadoop-3.2.1/hadoop-3.2.1.tar.gz | tar zxf -
+ENV PATH=/hadoop-3.2.1/bin:$PATH
&lt;/span&gt; CMD [&quot;/usr/sbin/sshd&quot;]
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;ミラーサイトからHadoopをダウンロードする。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;スタンドアロンモード&lt;/h1&gt;
&lt;p&gt;この時点でスタンドアロンモードで動作確認ができる。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; naoty/hello-hadoop &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
% docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; naoty/hello-hadoop bash
&lt;/pre&gt;
&lt;p&gt;ドキュメントに載っているスタンドアロンモードの動作確認をおこなう。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /hadoop-3.2.1
% &lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;input
% &lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;etc/hadoop/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.xml input
% bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.1.jar &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;input output &lt;span class=&quot;s1&quot;&gt;'dfs[a-z.]+'&lt;/span&gt;
% &lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;output/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;疑似分散モード&lt;/h1&gt;
&lt;h2&gt;設定&lt;/h2&gt;
&lt;p&gt;疑似分散モードに必要な設定を追加する。設定ファイルをコンテナからローカルにコピーして編集する。&lt;/p&gt;
&lt;pre lang=&quot;xml&quot; class=&quot;highlight highlight-xml&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- config/core-site.xml --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;fs.defaultFS&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;hdfs://localhost:9000&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;xml&quot; class=&quot;highlight highlight-xml&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- config/hdfs-site.xml --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;dfs.replication&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; FROM openjdk:8
 RUN apt-get update \
   &amp;amp;&amp;amp; apt-get install -y --no-install-recommends ssh pdsh \
   &amp;amp;&amp;amp; apt-get clean \
   &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
 RUN mkdir /run/sshd
 RUN wget -q -O - http://ftp.yz.yamagata-u.ac.jp/pub/network/apache/hadoop/common/hadoop-3.2.1/hadoop-3.2.1.tar.gz | tar zxf -
 ENV PATH=/hadoop-3.2.1/bin:/hadoop-3.2.1/sbin:$PATH
&lt;span class=&quot;gi&quot;&gt;+COPY config /hadoop-3.2.1/etc/hadoop/
&lt;/span&gt; CMD [&quot;/usr/sbin/sshd&quot;]
&lt;/pre&gt;
&lt;h2&gt;localhostにsshできるようにする&lt;/h2&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; FROM openjdk:8
 RUN apt-get update \
   &amp;amp;&amp;amp; apt-get install -y --no-install-recommends ssh pdsh \
   &amp;amp;&amp;amp; apt-get clean \
   &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
&lt;span class=&quot;gd&quot;&gt;-RUN mkdir /run/sshd
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+RUN mkdir /run/sshd \
+  &amp;amp;&amp;amp; ssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa \
+  &amp;amp;&amp;amp; cat ~/.ssh/id_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys \
+  &amp;amp;&amp;amp; chmod 0600 ~/.ssh/authorized_keys
&lt;/span&gt; RUN wget -q -O - http://ftp.yz.yamagata-u.ac.jp/pub/network/apache/hadoop/common/hadoop-3.2.1/hadoop-3.2.1.tar.gz | tar zxf -
 ENV PATH=/hadoop-3.2.1/bin:$PATH
 COPY config /hadoop-3.2.1/etc/hadoop/
 CMD [&quot;/usr/sbin/sshd&quot;]
&lt;/pre&gt;
&lt;h2&gt;動作確認&lt;/h2&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; naoty/hello-hadoop &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
% docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; naoty/hello-hadoop bash
&lt;/pre&gt;
&lt;p&gt;公式ドキュメントにある通りに疑似分散モードの動作確認をおこなう。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% /usr/sbin/sshd
% hdfs namenode &lt;span class=&quot;nt&quot;&gt;-format&lt;/span&gt;
% start-dfs.sh
Starting namenodes on &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;localhost]
ERROR: Attempting to operate on hdfs namenode as root
ERROR: but there is no HDFS_NAMENODE_USER defined. Aborting operation.
Starting datanodes
ERROR: Attempting to operate on hdfs datanode as root
ERROR: but there is no HDFS_DATANODE_USER defined. Aborting operation.
Starting secondary namenodes &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2ce45712f331]
ERROR: Attempting to operate on hdfs secondarynamenode as root
ERROR: but there is no HDFS_SECONDARYNAMENODE_USER defined. Aborting operation.
&lt;/pre&gt;
&lt;p&gt;Hadoopが利用する環境変数を設定するため、コンテナから&lt;code&gt;hadoop-env.sh&lt;/code&gt;をコピーして環境変数を追加する。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% docker &lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;xxxxxxx:/hadoop-3.2.1/etc/hadoop/hadoop-env.sh config/
&lt;/pre&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt;&lt;span class=&quot;gi&quot;&gt;+export HDFS_NAMENODE_USER=root
+export HDFS_DATANODE_USER=root
+export HDFS_SECONDARYNAMENODE_USER=root
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;もう一回動作確認する。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% start-dfs.sh
Starting namenodes on &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;localhost]
ERROR: JAVA_HOME is not &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;and could not be found.
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;JAVA_HOME&lt;/code&gt;をOpenJDKのホームディレクトリに設定する。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt;&lt;span class=&quot;gi&quot;&gt;+export JAVA_HOME=/usr/local/openjdk-8
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;もう一回動作確認する。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% start-dfs.sh
Starting namenodes on &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;localhost]
pdsh@098622af1ce0: localhost: connect: Connection refused
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/48189954/hadoop-start-dfs-sh-connection-refused&quot;&gt;stack overflow&lt;/a&gt;によると、pdshを使わなければエラーにならないとのことなので、pdshは削除する。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; FROM openjdk:8
 RUN apt-get update \
&lt;span class=&quot;gd&quot;&gt;-  &amp;amp;&amp;amp; apt-get install -y --no-install-recommends ssh pdsh \
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+  &amp;amp;&amp;amp; apt-get install -y --no-install-recommends ssh \
&lt;/span&gt;   &amp;amp;&amp;amp; apt-get clean \
   &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
 RUN mkdir /run/sshd
 RUN mkdir /run/sshd \
   &amp;amp;&amp;amp; ssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa \
   &amp;amp;&amp;amp; cat ~/.ssh/id_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys \
   &amp;amp;&amp;amp; chmod 0600 ~/.ssh/authorized_keys
 RUN wget -q -O - http://ftp.yz.yamagata-u.ac.jp/pub/network/apache/hadoop/common/hadoop-3.2.1/hadoop-3.2.1.tar.gz | tar zxf -
 ENV PATH=/hadoop-3.2.1/bin:$PATH
 COPY config /hadoop-3.2.1/etc/hadoop/
 CMD [&quot;/usr/sbin/sshd&quot;]
&lt;/pre&gt;
&lt;p&gt;動作確認する。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% start-dfs.sh
Starting namenodes on &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;localhost]
Starting datanodes
Starting secondary namenodes &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;098622af1ce0]
098622af1ce0: Host key verification failed.
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/24524886/error-in-starting-namenode-in-hadoop-2-4-1&quot;&gt;stack overflow&lt;/a&gt;によると、&lt;code&gt;HADOOP_OPTS&lt;/code&gt;に手を加えるとよいとのことだったのでhadoop-env.shを修正する。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt;&lt;span class=&quot;gi&quot;&gt;+export HADOOP_OPTS=&quot;${HADOOP_OPTS} -XX:-PrintWarnings -Djava.net.preferIPv4Stack=true&quot;
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;動作確認する。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% start-dfs.sh
Starting namenodes on &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;localhost]
localhost: Warning: Permanently added &lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ECDSA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; to the list of known hosts.
Starting datanodes
Starting secondary namenodes &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1a7271d1d014]
1a7271d1d014: Warning: Permanently added &lt;span class=&quot;s1&quot;&gt;'1a7271d1d014,172.17.0.2'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ECDSA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; to the list of known hosts.
&lt;/pre&gt;
&lt;p&gt;うまくいった。動作確認を続ける。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% bin/hdfs dfs &lt;span class=&quot;nt&quot;&gt;-mkdir&lt;/span&gt; /user
% bin/hdfs dfs &lt;span class=&quot;nt&quot;&gt;-mkdir&lt;/span&gt; /user/root
% bin/hdfs dfs &lt;span class=&quot;nt&quot;&gt;-mkdir&lt;/span&gt; input
% bin/hdfs dfs &lt;span class=&quot;nt&quot;&gt;-put&lt;/span&gt; etc/hadoop/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.xml input
% bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.1.jar &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;input output &lt;span class=&quot;s1&quot;&gt;'dfs[a-z.]+'&lt;/span&gt;
% bin/hdfs dfs &lt;span class=&quot;nt&quot;&gt;-cat&lt;/span&gt; output/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;動作確認ができた。&lt;/p&gt;
&lt;h2&gt;起動スクリプト&lt;/h2&gt;
&lt;p&gt;Hadoopの起動にはsshdとNameNode, DataNodeの起動が必要になるため、それらを起動するためのスクリプトをつくる。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

/usr/sbin/sshd
start-dfs.sh

&lt;span class=&quot;c&quot;&gt;# daemonize&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;1000
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;start-dfs.sh&lt;/code&gt;はデーモンを起動するだけのスクリプトなので、無限ループを実行してコンテナが終了しないようにしている。&lt;/p&gt;
&lt;p&gt;また、NameNodeのフォーマットはビルド時におこなうようにする。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; FROM openjdk:8
 RUN apt-get update \
   &amp;amp;&amp;amp; apt-get install -y --no-install-recommends ssh \
   &amp;amp;&amp;amp; apt-get clean \
   &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
 RUN mkdir /run/sshd \
   &amp;amp;&amp;amp; ssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa \
   &amp;amp;&amp;amp; cat ~/.ssh/id_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys \
   &amp;amp;&amp;amp; chmod 0600 ~/.ssh/authorized_keys
 RUN wget -q -O - http://ftp.yz.yamagata-u.ac.jp/pub/network/apache/hadoop/common/hadoop-3.2.1/hadoop-3.2.1.tar.gz | tar zxf -
 ENV PATH=/hadoop-3.2.1/bin:/hadoop-3.2.1/sbin:$PATH
 COPY config /hadoop-3.2.1/etc/hadoop/
&lt;span class=&quot;gi&quot;&gt;+RUN hdfs namenode -format
+COPY start /
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;-CMD [&quot;/usr/sbin/sshd&quot;]
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+CMD [&quot;/start&quot;]
&lt;/span&gt;&lt;/pre&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; naoty/hello-hadoop &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
% docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 9870:9870 naoty/hello-hadoop
&lt;/pre&gt;
&lt;p&gt;NameNodeは9870番ポートでUIを提供しているのでポートフォワーディングを設定して&lt;code&gt;localhost:9870&lt;/code&gt;から確認できるようになった。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;hadoop-ui.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;hadoop-ui.png&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;localhost:9870&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;</summary>
    <title>HadoopをDockerコンテナで動かす</title>
    <updated>2020-03-04T10:50:00+00:00</updated>
    <dc:date>2020-03-04T10:50:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/405/</id>
    <link href="https://blog.naoty.dev/405/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;/404/&quot;&gt;前回&lt;/a&gt;、このブログにmermaid.jsで描いたグラフを埋め込めるようにしたんだけど、リロードすると表示されたりされなかったり不安定な挙動だった。&lt;/p&gt;
&lt;pre lang=&quot;mermaid&quot;&gt;&lt;code&gt;pie title 一日
  &quot;睡眠&quot; : 8
  &quot;労働&quot; : 9
  &quot;通勤&quot; : 1.5
  &quot;朝の支度&quot; : 1.5
  &quot;その他&quot; : 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そこで、クライアントサイドでmermaid.jsを実行するのではなく、gatsbyがページを生成するタイミングでpuppeteer上でmermaid.jsを実行し、レンダリングされたSVGをページに埋め込むようにした。これで、リロードするたびに表示されたりされなかったりすることはない。&lt;/p&gt;
&lt;h1&gt;実装&lt;/h1&gt;
&lt;p&gt;雰囲気だとだいたいこんな感じの実装をしている。&lt;/p&gt;
&lt;pre lang=&quot;js&quot; class=&quot;highlight highlight-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;puppeteer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;launch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;newPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`file://&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;index.html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addScriptTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mermaid/dist/mermaid.min.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;evaluate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;graph LR&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;  a --&amp;gt; b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;mermaid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;startOnLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;mermaid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mermaidAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;diagram&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;svg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;svg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;catch &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;レンダリング用のHTMLを用意して、そこにmermaid.jsを埋め込む。&lt;/li&gt;
&lt;li&gt;引数に渡した関数が&lt;code&gt;Promise&lt;/code&gt;を返すとき&lt;code&gt;evaluate()&lt;/code&gt;は解決を待ってくれるので、mermaid.jsのrenderが終わったタイミングで&lt;code&gt;resolve&lt;/code&gt;を呼び出すようにしている。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;evaluate()&lt;/code&gt;は解決した結果を返すので、ここではレンダリング結果を受け取ることができている。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>mermaid.jsのグラフをビルド時に生成する</title>
    <updated>2020-03-01T19:54:00+00:00</updated>
    <dc:date>2020-03-01T19:54:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/404/</id>
    <link href="https://blog.naoty.dev/404/"/>
    <summary>&lt;h1&gt;追記&lt;/h1&gt;
&lt;p&gt;デプロイしてから分かったけど、production buildのみ図の描画がうまくいったりいかなかったりする。リロードしてみるとたまに表示できる。よくわからないので、SSRでの実装にするかも。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;markdownみたいなかんたんな記法でフローチャートなどの図を描ける&lt;a href=&quot;https://mermaid-js.github.io/mermaid/#/&quot;&gt;mermaid.js&lt;/a&gt;をこのブログでサポートした。&lt;/p&gt;
&lt;p&gt;たとえばこんな感じ。&lt;/p&gt;
&lt;pre lang=&quot;mermaid&quot;&gt;&lt;code&gt;graph TD
  client
  lb[alb]
  app1[rails]
  app2[rails]
  db[mysql]

  client --&amp;gt; lb --&amp;gt; app1 &amp;amp; app2 --&amp;gt; db
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この図はこんなcode blockで書いている（エスケープだけしてある）。&lt;/p&gt;
&lt;pre lang=&quot;markdown&quot; class=&quot;highlight highlight-markdown&quot;&gt;&lt;span class=&quot;se&quot;&gt;\`&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;``mermaid
graph TD
  client
  lb[alb]
  app1[rails]
  app2[rails]
  db[mysql]

  client --&amp;gt; lb --&amp;gt; app1 &amp;amp; app2 --&amp;gt; db
\```&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;mermaid.jsをgatsbyで動かす&lt;/h1&gt;
&lt;p&gt;mermaid.jsはブラウザ上じゃないと動かすことができないため、gatsbyで動かすには&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;クライアントサイドで動かす&lt;/li&gt;
&lt;li&gt;headless browserを利用してSSRする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;の2通りしかない。&lt;/p&gt;
&lt;p&gt;今回はより簡単にクライアントサイドで動かすようにした。既存のgatsby-remark-mermaidプラグインは後者を採用していてpuppeteerをつかっていた。ただ、試してみたところ自分の環境では動かなかったため、自作することにした。&lt;/p&gt;
&lt;p&gt;Gatsbyで生成しているページはReactのコンポーネントでできているので、&lt;code&gt;componentDidMount&lt;/code&gt;や&lt;code&gt;componentDidUpdate&lt;/code&gt;のようなタイミングでmermaidを動かしている。&lt;/p&gt;
&lt;pre lang=&quot;js&quot; class=&quot;highlight highlight-js&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mermaid&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mermaid&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostTemplate&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mermaid&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;mermaid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;startOnLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;mermaid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mermaidAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;graph TD&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;  a --&amp;gt; b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;svg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;svg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;あとは、remarkプラグインを書いて、&lt;code&gt;mermaid&lt;/code&gt;がついたcode blockを&lt;code&gt;&amp;lt;div class=&quot;mermaid&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;で囲うように変換するようにした。&lt;/p&gt;
&lt;pre lang=&quot;js&quot; class=&quot;highlight highlight-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;unist-util-visit&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;markdownAST&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pluginOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;markdownAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lang&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mermaid&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&amp;lt;div class=&quot;mermaid&quot;&amp;gt;\n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;\n&amp;lt;/div&amp;gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;markdownAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>mermaid.jsに対応した</title>
    <updated>2020-02-29T14:27:00+00:00</updated>
    <dc:date>2020-02-29T14:27:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/403/</id>
    <link href="https://blog.naoty.dev/403/"/>
    <summary>&lt;p&gt;新型コロナウィルスの影響でリモートワークが推奨されるようになった。そこで、解像度が低すぎてつらかったディスプレイを買い替えることにした。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;before.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;before.jpg&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;before&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;条件としては&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;USB-Cで給電できる&lt;/strong&gt;: コードをできるだけ少なくしたい。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;横に長いこと&lt;/strong&gt;: エディタ、ターミナル、ブラウザを同じ画面に並べたい。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;曲面ディスプレイ&lt;/strong&gt;: 横に長いと端の方が見にくくなりそう。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を満たしているディスプレイを探したところ、Dellの&lt;a href=&quot;https://www.dell.com/ja-jp/shop/accessories/apd/210-aqwn&quot;&gt;U3419W&lt;/a&gt;がよさそうなので、これにした。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;after.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;after.jpg&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;エディタ、ターミナル、ブラウザで3分割&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;まだ買って1日しか経ってないけど第1印象としては、かなり満足感が高い。ディスプレイ2枚で作業するのと比べて、真正面にエディタを置けるというのがかなり良くて、視線の移動が減った感じがする。&lt;/p&gt;</summary>
    <title>曲面ディスプレイを買った</title>
    <updated>2020-02-27T09:14:00+00:00</updated>
    <dc:date>2020-02-27T09:14:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/402/</id>
    <link href="https://blog.naoty.dev/402/"/>
    <summary>&lt;p&gt;英語でドキュメントを書いていく機運が高まってきたので、英作文の本を買ってみた。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;book.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;book.jpg&quot; alt=&quot;究極の英語ライティング&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;とてもいい本だった。基本的な英文法はわかっているけど、いまいちこなれた文章が書けない人にはオススメできそう。&lt;/p&gt;
&lt;h1&gt;メモ&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;「〜すると」「〜ので」のような文章は、無生物を主語にすることで接続詞をつかわずにスッキリかける。無生物を主語にするときの動詞には、cause（原因と結果）, allow（可能にする）, bring（する気にさせる）などが使える。whenとかbecauseのような接続詞だったり受動態を使いがちだったので、無生物主語やこういった動詞を使うことでもっとスッキリとかけそうだなとおもった。&lt;/li&gt;
&lt;li&gt;「Given」→「New」の順に情報を書くことを意識すると、何を主語にすればいいのかわかりやすくなる。&lt;/li&gt;
&lt;li&gt;より意味が具体的な単語を選ぶようにする。単語数が減ってよりわかりやすくなる。&lt;/li&gt;
&lt;li&gt;notの代わりに動詞の対義語を使うと単語数が減ってわかりやすくなる。また、littleとかonlyもnotの代わりに使いやすい。例えば、「数が減っている」のような表現はlessを使うと書きやすい。&lt;/li&gt;
&lt;li&gt;まとめると、とにかく「単語数を減らすこと」「具体的な表現を使うこと」「Given→Newの順を意識して主語を選ぶこと」あたりを意識すればいい英文が書けることがわかった。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こういったことを頭に入れて実践する機会を増やしていきたい。&lt;/p&gt;</summary>
    <title>「究極の英語ライティング」を読んだ</title>
    <updated>2020-02-25T23:17:00+00:00</updated>
    <dc:date>2020-02-25T23:17:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/401/</id>
    <link href="https://blog.naoty.dev/401/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;/384/&quot;&gt;#384&lt;/a&gt;で書いたとおり、半年くらい前にホームページをNuxt.jsで書き直したんだけどGatsby.jsに戻した。&lt;/p&gt;
&lt;p&gt;主な理由は、Gatsby.jsの方がブログを書くときにリアルタイムに更新されて体験が良いから。Nuxt.jsにはオフィシャルな方法がなくて、リアルタイムに更新する仕組みを自力でなんとか書いてみたけどイマイチなままだった。&lt;/p&gt;
&lt;p&gt;久々にGatsby.jsに戻ってみると、RSSフィードを生成するプラグインができていたり、markdown内の画像をいい感じに表示するプラグイン（前からあったっけ…？）があって進化していた。&lt;/p&gt;
&lt;p&gt;作り直すにあたって、デザインを見直して古風な感じにしてみた。RailsCastsを意識して作っている。&lt;/p&gt;</summary>
    <title>ホームページをGatsbyで作り直した（2年ぶり2度目）</title>
    <updated>2020-02-24T23:43:00+00:00</updated>
    <dc:date>2020-02-24T23:43:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/400/</id>
    <link href="https://blog.naoty.dev/400/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://github.com/microsoft/pict&quot;&gt;microsoft/pict&lt;/a&gt;はペアワイズ法とよばれる手法を使って多くの変数から組み合わせを生成できる。macOSならHomebrewでインストールできる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% brew install pict
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例えば、あるiOSアプリを使っているユーザーには、ログインしているかどうか、課金プラン、決済方法といった状態の組み合わせがあるとする。そこで、下のようなテキストファイルを書く。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;status: guest,member
plan: free,pro,premium
payment: -,iap,card,paypal
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そのテキストファイルを&lt;code&gt;pict&lt;/code&gt;にわたすと、ペアワイズ法にしたがって組み合わせを生成してくれる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% pict user_pattern.txt
status	plan	payment
guest	free	card
member	premium	-
guest	pro	-
member	free	paypal
member	pro	iap
guest	premium	iap
member	pro	card
guest	premium	paypal
member	free	-
guest	free	iap
member	pro	paypal
guest	premium	card
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/table&quot;&gt;naoty/table&lt;/a&gt;と組み合わせると、ちょっと見やすくなる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% pict user_pattern.txt | table -H
+--------+---------+---------+
| status | plan    | payment |
+--------+---------+---------+
| guest  | free    | card    |
| member | premium | -       |
| guest  | pro     | -       |
| member | free    | paypal  |
| member | pro     | iap     |
| guest  | premium | iap     |
| member | pro     | card    |
| guest  | premium | paypal  |
| member | free    | -       |
| guest  | free    | iap     |
| member | pro     | paypal  |
| guest  | premium | card    |
+--------+---------+---------+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;組み合わせの中に制約条件を加えることもできる。&lt;/p&gt;
&lt;p&gt;ここでは、非ログインユーザーはクレジットカードで決済できないとか、そもそも無料会員なら決済方法は指定できないとか、そういう制約条件を指定してみた。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;status: guest,member
plan: free,pro,premium
payment: -,iap,card,paypal

if [status] = &quot;guest&quot; then [payment] IN {&quot;-&quot;, &quot;iap&quot;};
if [plan] = &quot;free&quot; then [payment] = &quot;-&quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;% pict user_pattern.txt | table -H
+--------+---------+---------+
| status | plan    | payment |
+--------+---------+---------+
| member | premium | card    |
| guest  | pro     | iap     |
| member | pro     | -       |
| guest  | premium | -       |
| member | premium | iap     |
| member | pro     | card    |
| member | pro     | paypal  |
| guest  | free    | -       |
| member | free    | -       |
| member | premium | paypal  |
+--------+---------+---------+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ちゃんと制約条件が加味されて組み合わせができていることがわかる。&lt;/p&gt;
&lt;p&gt;そもそもペアワイズ法というのは、全組み合わせほど網羅性はないが、テストケースとして有効かつ全組み合わせほどコストが高くない組み合わせを生成する方法だそう。つまり、コスパの良い組み合わせを生成する方法らしい。&lt;/p&gt;
&lt;p&gt;いろんなケースで遊んでみて楽しかったし、応用範囲が広そうなツールなので今後も使っていきたい。&lt;/p&gt;</summary>
    <title>pictで複雑な組み合わせを生成する</title>
    <updated>2020-02-17T22:47:00+00:00</updated>
    <dc:date>2020-02-17T22:47:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/399/</id>
    <link href="https://blog.naoty.dev/399/"/>
    <summary>&lt;p&gt;Rubyでちょっとしたツールを作ったとき、設定ファイルの検証に&lt;a href=&quot;https://github.com/dry-rb/dry-validation&quot;&gt;dry-validation&lt;/a&gt;を使ってたら便利だった。&lt;/p&gt;
&lt;p&gt;こんな感じのYAML形式の設定ファイルがあったとする。&lt;/p&gt;
&lt;pre lang=&quot;yaml&quot; class=&quot;highlight highlight-yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;localhost&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;この設定ファイルのスキーマをDSLを使って定義できる。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConfigContract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Validation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Contract&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;database: :host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;must not be localhost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;localhost&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;database: :port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;must not use well-known port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;このスキーマを使って設定ファイルを検証してみる。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;YAML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./config.yml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ConfigContract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_h&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; {:database=&amp;gt;{:host=&amp;gt;[&quot;must not be localhost&quot;], :port=&amp;gt;[&quot;must not use well-known port&quot;]}}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;DSLについてはdry-validationやdry-schemaのドキュメントを眺めたり、ドキュメントにないDSLはソースコードを眺めてみるといい。&lt;/p&gt;</summary>
    <title>dry-validationで設定ファイルを検証する</title>
    <updated>2020-02-13T12:50:00+00:00</updated>
    <dc:date>2020-02-13T12:50:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/398/</id>
    <link href="https://blog.naoty.dev/398/"/>
    <summary>&lt;p&gt;Mistel社の&lt;a href=&quot;https://www.archisite.co.jp/products/mistel/barocco-md770/&quot;&gt;BAROCCO MD770&lt;/a&gt;という左右分離式のキーボードを買った。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;box.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;box.jpg&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;箱&lt;/figcaption&gt;&lt;/figure&gt;&lt;br&gt;
&lt;figure&gt;&lt;a href=&quot;keyboard.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;keyboard.png&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;MD770&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;写真が雑すぎる。&lt;/p&gt;
&lt;p&gt;1/30に発売されて急いで買いに行ったけど、すでに静音赤軸や茶軸は売り切れていたので、赤軸を買った。家で使っているHHKB professional BTに近い打ち心地で音も気にならないので不満はない。新卒の頃から使っていたHHKB Lite2とはここでお別れだ。&lt;/p&gt;
&lt;h1&gt;気になったこと&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;背面のDIPスイッチでCapsLockをControlと入れ替えられるはずなんだけど、なんかうまくいかなかったのでKarabiner-Elementsでremapした。&lt;/li&gt;
&lt;li&gt;ふだんbを右手で打っていたけど、左側にあるので左手で打たねばならない。しょっちゅう右手でbを打とうとして空振りしてしまう。&lt;/li&gt;
&lt;li&gt;BackspaceがEnterの直上にはなくて、バックスラッシュがある。Macのキーボードと同じなんだけど、ふだんHHKBを使っているとそこのレイアウトが違うのでかなり打ち間違える。&lt;/li&gt;
&lt;li&gt;傾きをつけたいけど、つけるには付属品のゴムをつける必要があり、それには精密ドライバーみたいな小さいドライバーがいる。持ってなかったのであとで買う。&lt;/li&gt;
&lt;li&gt;USB接続がType-C to Type-Cかと思っていたら、PC側はType-Aだった。&lt;/li&gt;
&lt;li&gt;見た目が無愛想なので、なんかキーキャップつけたい。Cherry MXのキースイッチなので対応しているキーキャップはけっこうありそう。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>BAROCCO MD770を買った</title>
    <updated>2020-02-03T23:16:00+00:00</updated>
    <dc:date>2020-02-03T23:16:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/397/</id>
    <link href="https://blog.naoty.dev/397/"/>
    <summary>&lt;p&gt;HHKBのキーキャップが売っているとのことで、はじめて遊舎工房に行ってみた。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;yushakobo.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;yushakobo.jpg&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;はじめての遊舎工房&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;6000円くらいしたけど、せっかくなので買い替えてみた。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;before.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;before.jpg&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;before&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;after.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;after.jpg&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;after&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;space、enter、escキーが橙色になった。それ以外のキーはほとんど色味は変わってない。&lt;/li&gt;
&lt;li&gt;キーが見やすくなった。丸みのあるフォントで太字になった。&lt;/li&gt;
&lt;li&gt;キーキャップの手前側の印字がなくなった。音量調整をするときに見ていたので、ちょっと使いにくくなった。&lt;/li&gt;
&lt;li&gt;Ctrl、Shift、Alt、Cmdキーがシンボリックな表記になった。かわいいのでアリ。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>HHKBのキーキャップを替えた</title>
    <updated>2020-01-25T20:54:00+00:00</updated>
    <dc:date>2020-01-25T20:54:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/396/</id>
    <link href="https://blog.naoty.dev/396/"/>
    <summary>&lt;p&gt;Prestoを学ぶ必要が出てきたので、気軽に試せる環境をDockerで作ってみた。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/prestosql/presto&quot;&gt;prestosql/presto&lt;/a&gt;というDockerイメージを使う。データソースも同じくDockerコンテナとして起動してDocker Composeで接続させる。&lt;/p&gt;
&lt;h1&gt;設定&lt;/h1&gt;
&lt;pre lang=&quot;yaml&quot; class=&quot;highlight highlight-yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# docker-compose.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3.7&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;presto&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prestosql/presto:latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8080:8080&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./config/presto:/etc/presto&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql:5.7&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;password&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./config/mysql/conf.d:/etc/mysql/conf.d&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./config/mysql/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./config/mysql/seed:/seed&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;properties&quot; class=&quot;highlight highlight-properties&quot;&gt;&lt;span class=&quot;c&quot;&gt;# /etc/presto/catalog/mysql.properties
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;connector.name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mysql&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;connection-url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;jdbc:mysql://mysql:3306&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;connection-user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;root&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;connection-password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;password&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Prestoコンテナは&lt;code&gt;/etc/presto&lt;/code&gt;にある設定ファイルを使うので、ローカルからマウントしておく。ただし、すべての設定ファイルが必要なので、コンテナ内にあるデフォルトの設定ファイルもコピーしておく。&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;/368/&quot;&gt;#368&lt;/a&gt;で書いた、MySQLコンテナの起動時にスキーマやシードデータを初期化するテクニックを使っている。&lt;/li&gt;
&lt;li&gt;MySQLの接続情報はカタログの設定ファイルで指定する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;試してみる&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;% docker-compose up -d
% docker-compose exec presto presto
presto&amp;gt; SELECT * FROM mysql.hello_presto.pokedex;
 pokemon_id |   name
------------+-----------
          1 | bulbasour
          2 | ivysaur
          3 | venusaur
(3 rows)

Query 20200125_110251_00001_p3vcs, FINISHED, 1 node
Splits: 17 total, 17 done (100.00%)
0:01 [3 rows, 0B] [4 rows/s, 0B/s]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;今回はMySQLコネクタを試してみたけど、カタログファイルを追加することで他のデータソースにも対応できる。&lt;/p&gt;</summary>
    <title>PrestoをDockerで試してみる</title>
    <updated>2020-01-25T17:27:00+00:00</updated>
    <dc:date>2020-01-25T17:27:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/395/</id>
    <link href="https://blog.naoty.dev/395/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/esa-history&quot;&gt;esa-history&lt;/a&gt;というesaの閲覧履歴を管理するChrome拡張を作った。最新5件の閲覧履歴を保存し、メニューからアクセスできるようにする。&lt;/p&gt;
&lt;p&gt;自分のために書いたので、Chromeウェブストアには公開していない。ただ、Chromeの開発者モードを有効にすれば、GitHubの&lt;a href=&quot;https://github.com/naoty/esa-history/releases/latest&quot;&gt;Release&lt;/a&gt;にアップロードしてあるものをインストールできる。&lt;/p&gt;
&lt;h1&gt;きっかけ&lt;/h1&gt;
&lt;p&gt;転職を機にドキュメント管理がConfluenceからesaに替わった。Confluenceの便利だった機能のひとつに閲覧履歴に簡単にアクセスするショートカットがあった。あの機能をヘビーユースしていたので、esaでも同じような体験ができるようにChrome拡張を作ってみた。&lt;/p&gt;
&lt;h1&gt;Chrome拡張の開発&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.chrome.com/extensions&quot;&gt;公式ドキュメント&lt;/a&gt;や&lt;a href=&quot;https://developer.chrome.com/extensions/api_index&quot;&gt;APIドキュメント&lt;/a&gt;を読んでChrome拡張の開発方法を理解した。&lt;/p&gt;
&lt;p&gt;ポップアップ画面をVueで実装したんだけど、CSPに準拠していないコードはChrome拡張に含められないので、完全ビルドのVueを使うことができない。なので、webpackを使ってvue-loaderで変換したコード + ランタイム限定ビルドを含めるようにする。&lt;/p&gt;</summary>
    <title>naoty/esa-history</title>
    <updated>2020-01-19T18:01:00+00:00</updated>
    <dc:date>2020-01-19T18:01:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/394/</id>
    <link href="https://blog.naoty.dev/394/"/>
    <summary>&lt;h1&gt;仕事&lt;/h1&gt;
&lt;p&gt;今年はAWS上のインフラ運用が主な仕事だった。例えば、以下のようなことを行っていた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Railsアプリケーションや部内で利用していた細々としたアプリケーションをFargateに移行した。Fargateへの移行によってEC2をメンテナンスする手間が減り、より生産的な仕事に時間を回せるようになった。&lt;/li&gt;
&lt;li&gt;RailsアプリケーションのデプロイをCodeDeployに変更した。CodeDeployによってより安全にデプロイできるようになったものの考える手間が増えてしまったので、導入はケースバイケースだなと感じた。&lt;/li&gt;
&lt;li&gt;SFTPを使っていた業務フローをAWS Transfer for SFTPに移行した。セキュリティに配慮する必要があったため、Private Link等を使ってやや複雑なネットワーク構成を作った。おかげで、VPCについての理解が深まった。&lt;/li&gt;
&lt;li&gt;部内で利用しているJenkinsをオフィスにあるMac miniからEC2に移した。、EC2にJenkinsをセットアップする際に初めてAnsibleを使った。JenkinsもAnsibleも初めてだったのでいい経験になった。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;プライベート&lt;/h1&gt;
&lt;h2&gt;開発&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://github.com/naoty/homepage&quot;&gt;naoty/homepage&lt;/a&gt;&lt;/strong&gt;: 昨年に引き続きホームページを作り直した。今年はGatsby.jsベースからNuxt.jsベースに移行した。また、ホスティングもGitHub pagesからNetlifyに移行した。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://github.com/naoty/task&quot;&gt;naoty/task&lt;/a&gt;&lt;/strong&gt;: &lt;a href=&quot;/393/&quot;&gt;以前の記事&lt;/a&gt;でも書いたとおり、ファイルベースのタスク管理に移行するため自作のタスク管理ツールをGoで開発している。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;読んだ本&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873118468/&quot;&gt;Go言語による並行処理&lt;/a&gt;&lt;/strong&gt;: naoty/taskをGoで書くにあたって並行処理を学ぶ必要があって読んでみた。goroutineやchannelの使い方についてまとまった情報がなかったので、読んでなかったらいっさい書けなかったと思う。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873118703/&quot;&gt;データ指向アプリケーションデザイン&lt;/a&gt;&lt;/strong&gt;: まだ読んでいるけど、もっと早く読み始めればよかった。転職先で活きそうなのでちゃんと読み込みたい。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;その他&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AtCoderで競技プログラミングを始めた。とりあえず茶色になったけど、これ以上は時間をとって勉強しないと難しそう。&lt;/li&gt;
&lt;li&gt;会社の制度で1ヶ月休みがとれたので、ようやく運転免許をとった。とってから一度も運転してない。&lt;/li&gt;
&lt;li&gt;12月末で5年間在籍していた会社を退職した。来年から新しい会社でSRE的な雰囲気で立ち回る予定。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>2019年振り返り</title>
    <updated>2019-12-30T18:38:00+00:00</updated>
    <dc:date>2019-12-30T18:38:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/393/</id>
    <link href="https://blog.naoty.dev/393/"/>
    <summary>&lt;p&gt;昔に書いた&lt;a href=&quot;/330/&quot;&gt;記事&lt;/a&gt;で作業メモという習慣を続けている話をした。メモをとりながら開発するといろいろいいことがあったという話だった。そして、この習慣は今も続いている。&lt;/p&gt;
&lt;p&gt;TODO管理ツールと作業メモで二重に作業を管理していることに気づき、運用を見直すことにした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1つの作業につき、1つの作業ファイルを作るようにした。&lt;/li&gt;
&lt;li&gt;作業ファイルをベースとしたTODO管理ツールを開発することにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;作業ファイル&lt;/h1&gt;
&lt;p&gt;タイトルと完了/未完了をfront matterで書くことを仕様とした。&lt;/p&gt;
&lt;pre lang=&quot;markdown&quot; class=&quot;highlight highlight-markdown&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ブログを書く&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;gh&quot;&gt;# 2019-12-26&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; アウトラインを書く

&lt;span class=&quot;gh&quot;&gt;# 2019-12-27&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; 文章に組み立てる
&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; スクショをとる
&lt;/pre&gt;
&lt;p&gt;これまでは日報ファイルの中に各作業のメモを残していたけど、今後は逆に作業ファイルの中に日報を書くスタイルにした。この方が後で見返しやすかった。&lt;/p&gt;
&lt;h1&gt;新しいTODO管理ツール&lt;/h1&gt;
&lt;p&gt;作業ファイルを読み取って表示するTUIベースのツールを開発している。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;task.gif&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;task.gif&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;TUIの様子&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;まだ機能は不足しているけど、ファイルの変更を自動的に反映する機能をがんばって作り込んだ結果、使えないこともないくらいのレベルにはなった。&lt;/p&gt;</summary>
    <title>作業ファイルという習慣</title>
    <updated>2019-12-27T21:08:00+00:00</updated>
    <dc:date>2019-12-27T21:08:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/392/</id>
    <link href="https://blog.naoty.dev/392/"/>
    <summary>&lt;p&gt;転職を機に仕事で使っていたパスワードを削除する必要があったので、ついでに1Passwordを整理した。&lt;/p&gt;
&lt;p&gt;ずっと旧来の買い切り版を使い続けていたので、重い腰を上げてサブスクリプション版に移行した。ついでに、PCとスマホで保管庫が同期してなかったのでmergeした。サブスクリプション版、日本語にローカライズされてるしやけに物腰が柔らかいので、完全に別のサービスという印象を受けた。&lt;/p&gt;
&lt;p&gt;プライベートで使うパスワードと仕事で使うパスワードの保管庫を分けてみることにした。デスクトップアプリやブラウザ拡張でデフォルトで利用する保管庫を設定できるので、プライベートPCやスマホではプライベート用の保管庫、仕事用PCでは仕事用の保管庫、というようにデフォルトで利用する保管庫を設定できる。こうすることで、検索時や補完時にアカウントが混じったりせずにストレスなく使えそう。&lt;/p&gt;
&lt;p&gt;妻と共通して利用するアカウントのパスワードもあるので、運用がこなれてきたらFamilyプランにアップグレードして保管庫を共有する運用も試してみたい。&lt;/p&gt;</summary>
    <title>1Passwordの整理</title>
    <updated>2019-12-13T20:54:00+00:00</updated>
    <dc:date>2019-12-13T20:54:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/391/</id>
    <link href="https://blog.naoty.dev/391/"/>
    <summary>&lt;p&gt;せっかくGitHubでブログの記事を書いているんだから、IssueやPull Requestで記事へのフィードバックを受け付けられるといいんじゃないかと思い立った。&lt;/p&gt;
&lt;p&gt;ということをツイートしたところ、iOS界隈ではおなじみ&lt;a href=&quot;https://nshipster.com&quot;&gt;NSHipster&lt;/a&gt;がすでに同様の仕組みを持っていることを教えていただいた。&lt;/p&gt;
&lt;p&gt;Issueについてはテンプレートを作ってクエリパラメータからテンプレートを展開するようにした。Pull Requestは記事のmarkdownファイルの編集ページのリンクを置くようにした。&lt;/p&gt;</summary>
    <title>ブログのフィードバックをGitHubで受け付ける</title>
    <updated>2019-12-10T21:32:00+00:00</updated>
    <dc:date>2019-12-10T21:32:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/390/</id>
    <link href="https://blog.naoty.dev/390/"/>
    <summary>&lt;p&gt;最近コンテナのセキュリティへの意識が高まっているので、まずはセキュアなイメージのためのDockerfileを書く方法を調べる。&lt;/p&gt;
&lt;h1&gt;Before&lt;/h1&gt;
&lt;p&gt;Rails 6.0.1を動かすためのDockerfileを書いてみた。webpackerを動かすためにNode.jsやYarnも入れている。&lt;/p&gt;
&lt;pre lang=&quot;dockerfile&quot; class=&quot;highlight highlight-dockerfile&quot;&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;node:12.13.1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;node&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.6.5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get update

&lt;span class=&quot;c&quot;&gt;# node&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=node /usr/local/bin/node /usr/local/bin/&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# yarn&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=node /opt/yarn-v1.19.1 /opt/yarn-v1.19.1/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /opt/yarn-v1.19.1/bin/yarn /usr/local/bin/yarn &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /opt/yarn-v1.19.1/bin/yarnpkg /usr/local/bin/yarnpkg

&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /hello-rails&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# npm packages&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; package.json yarn.lock /hello-rails/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;yarn &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# rubygems&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; Gemfile Gemfile.lock /hello-rails/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . /hello-rails/&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;bin/rails&quot;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;s&quot;]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/aquasecurity/trivy&quot;&gt;trivy&lt;/a&gt;を使って脆弱性を調べてみると、思っていた以上に脆弱性が見つかった。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ trivy naoty/rails
naoty/rails:latest (debian 10.2)
================================
Total: 1399 (UNKNOWN: 16, LOW: 92, MEDIUM: 1137, HIGH: 143, CRITICAL: 11)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;ベースイメージを最小限にする&lt;/h1&gt;
&lt;p&gt;必要最小限のツールだけを含めて攻撃の対象になる脆弱性を減らしたい。そこで、alpineベースのベースイメージに変更する。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt;&lt;span class=&quot;gd&quot;&gt;-FROM node:12.13.1 AS node
-FROM ruby:2.6.5
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+FROM node:12.13.1-alpine AS node
+FROM ruby:2.6.5-alpine
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;-RUN apt-get update
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+RUN apk update &amp;amp;&amp;amp; \
+  apk add --no-cache build-base sqlite-dev
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;trivyでもう一度脆弱性を調べてみると、脆弱性はほとんどなくなった。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ trivy naoty/rails:alpine
naoty/rails:alpine (alpine 3.10.3)
==================================
Total: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;rootをなるべく使わない&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;root&lt;/code&gt;ユーザーではなく最小限の権限しかもたないユーザーを使う。コンテナに侵入された場合の被害を最小限に抑えられる。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; COPY . /hello-rails/
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+RUN addgroup -S ruby &amp;amp;&amp;amp; \
+  adduser -S ruby ruby &amp;amp;&amp;amp; \
+  chown -R ruby:ruby /hello-rails
+USER ruby
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt; ENTRYPOINT [&quot;bin/rails&quot;]
 CMD [&quot;s&quot;]
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Alpineでは&lt;code&gt;groupadd&lt;/code&gt;, &lt;code&gt;useradd&lt;/code&gt;ではなく&lt;code&gt;addgroup&lt;/code&gt;, &lt;code&gt;adduser&lt;/code&gt;を使う。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-S&lt;/code&gt;オプションを使ってシステムユーザーを作成する。システムユーザーはパスワードをもたずログインシェルもないので、より安全なユーザーとして使える。&lt;/li&gt;
&lt;li&gt;作成したユーザーを&lt;code&gt;USER&lt;/code&gt;で指定してrailsを起動するようにしている。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://snyk.io/blog/10-docker-image-security-best-practices/&quot;&gt;https://snyk.io/blog/10-docker-image-security-best-practices/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>セキュアなDockerfileを書く</title>
    <updated>2019-12-07T18:30:00+00:00</updated>
    <dc:date>2019-12-07T18:30:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/389/</id>
    <link href="https://blog.naoty.dev/389/"/>
    <summary>&lt;p&gt;AWS上にネットワークをゼロから構築する機会があり、NATゲートウェイの冗長化を行った。&lt;/p&gt;
&lt;h1&gt;考え方&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;NATゲートウェイがダウンすると、プライベートサブネットにあるサーバーがインターネットに接続できなくなる。&lt;/li&gt;
&lt;li&gt;AZ障害に備えて複数のAZのパブリックサブネットにNATゲートウェイを作る。&lt;/li&gt;
&lt;li&gt;他のAZでの障害の影響を受けないようにするため、NATゲートウェイは同じAZのプライベートネットワークから参照する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;図&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;         public              private
 
     +-[public-1a]-+     +-[private-1a]-+
 1a  |     NAT     | &amp;lt;-&amp;gt; |              |
     +-------------+     +--------------+
     
     +-[public-1c]-+     +-[private-1c]-+
 1c  |     NAT     | &amp;lt;-&amp;gt; |              |
     +-------------+     +--------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Terraform&lt;/h1&gt;
&lt;p&gt;サブネットのAZを固定したいので、データソースを用意しておく。なくてもいいと思う。&lt;/p&gt;
&lt;pre lang=&quot;hcl&quot; class=&quot;highlight highlight-hcl&quot;&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_availability_zone&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ap_northeast_1a&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ap-northeast-1a&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_availability_zone&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ap_northeast_1c&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ap-northeast-1c&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;パブリック/プライベートとAZのペアごとに4つのサブネットにVPCを分割する。&lt;code&gt;cidrblock&lt;/code&gt;関数を使うとCIDRブロックの計算が簡単になる。&lt;/p&gt;
&lt;pre lang=&quot;hcl&quot; class=&quot;highlight highlight-hcl&quot;&gt;&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_subnet&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;public_1a&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;vpc_id&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aws_vpc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;availability_zone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aws_availability_zone&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ap_northeast_1a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;cidr_block&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cidrsubnet&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aws_vpc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cidr_block&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_subnet&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;public_1c&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;vpc_id&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aws_vpc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;availability_zone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aws_availability_zone&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ap_northeast_1c&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;cidr_block&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cidrsubnet&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aws_vpc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cidr_block&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_subnet&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;private_1a&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;vpc_id&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aws_vpc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;availability_zone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aws_availability_zone&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ap_northeast_1a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;cidr_block&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cidrsubnet&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aws_vpc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cidr_block&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_subnet&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;private_1c&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;vpc_id&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aws_vpc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;availability_zone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aws_availability_zone&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ap_northeast_1c&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;cidr_block&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cidrsubnet&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aws_vpc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cidr_block&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;NATゲートウェイをパブリックサブネットごとに作る。&lt;/p&gt;
&lt;pre lang=&quot;hcl&quot; class=&quot;highlight highlight-hcl&quot;&gt;&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_eip&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;nat_gateway_1a&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;vpc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_nat_gateway&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;nat_gateway_1a&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;allocation_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aws_eip&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nat_gateway_1a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;subnet_id&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aws_subnet&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;public_1a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_eip&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;nat_gateway_1c&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;vpc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_nat_gateway&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;nat_gateway_1c&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;allocation_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aws_eip&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nat_gateway_1c&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;subnet_id&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aws_subnet&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;public_1c&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;同じAZのNATゲートウェイを参照するようにルートテーブルを作る。&lt;/p&gt;
&lt;pre lang=&quot;hcl&quot; class=&quot;highlight highlight-hcl&quot;&gt;&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_route_table&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;private_1a&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;vpc_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aws_vpc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;cidr_block&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0/0&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;nat_gateway_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aws_nat_gateway&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;private_1a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_route_table&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;private_1c&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;vpc_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aws_vpc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;cidr_block&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0/0&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;nat_gateway_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aws_nat_gateway&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;private_1c&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>NATゲートウェイの冗長化</title>
    <updated>2019-11-28T18:05:00+00:00</updated>
    <dc:date>2019-11-28T18:05:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/388/</id>
    <link href="https://blog.naoty.dev/388/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://www.oreilly.co.jp/books/4873113075/&quot;&gt;エンジニアのための時間管理術&lt;/a&gt;という本を読んだ。タイトルには「エンジニアのための」と書いてあるけど、著者はシステム管理者なので「システム管理者のための」と直した方がより正確かもしれない。僕も今の仕事では、システム管理者のようなことをしているので、割り込みにいかに対処するかといったところでとても参考になった。&lt;/p&gt;
&lt;p&gt;この本で紹介された中で明日から実践できそうなテクニックを列挙してみた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;割り込みには、他人に任せられそうな依頼なら他人に任せる。今すぐやる必要がないならどこかにやるべきことを記録しておく。今すぐ自分がやる必要があるときだけ、今の作業を中断して割り込みに対処する。&lt;/li&gt;
&lt;li&gt;自分が集中できる時間帯を把握しておく。僕の場合は、16時以降が一番集中できる。&lt;/li&gt;
&lt;li&gt;自分が集中できる時間帯には、集中を妨げるものはすべて閉じる。SlackならDND設定をオンにする。メーラーは閉じる。夜フクロウも閉じる。&lt;/li&gt;
&lt;li&gt;仮想ウィンドウマネージャーを使って、作業ごとに必要なアプリケーションをウィンドウに整理する。そうすることで注意を奪うものを避けられる。&lt;/li&gt;
&lt;li&gt;コードレビューの依頼やビルドなど待ち時間が必要な作業は先に行う。その間に待ち時間のない作業を行う。待ち時間が必要な作業を複数並行すると頭が混乱して生産性が落ちる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;逆に、そのまま実践できなさそうなのは3章使って説明されているサイクルシステムだけど、どういうシステムが良いシステムか説明してあるので、それを基に自分に合ったシステムを考えることはできるので、じっくり考えてみたい。&lt;/p&gt;</summary>
    <title>「エンジニアのための時間管理術」を読んだ</title>
    <updated>2019-10-22T22:40:00+00:00</updated>
    <dc:date>2019-10-22T22:40:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/387/</id>
    <link href="https://blog.naoty.dev/387/"/>
    <summary>&lt;h1&gt;inboxの整理&lt;/h1&gt;
&lt;p&gt;ある日、毎朝メールのinboxを見てすべてのメールをアーカイブするという、無意味な作業がルーティン化されていることに気づいて、本当に必要なものだけメールを受け取るようにした。&lt;/p&gt;
&lt;p&gt;一週間inboxにメールをためておいて、休日にいっせいに不要なメールunsubscribeした。海外のサービスはunsubscribeにログインが不要なことが多いので簡単だけど、日本のサービスはログインが必要なことが多くけっこう時間がかかる。&lt;/p&gt;
&lt;h1&gt;Androidの通知設定の見直し&lt;/h1&gt;
&lt;p&gt;inboxを整理した結果とてもスッキリしたので、ついでにAndroidの通知設定も見直すことにした。&lt;/p&gt;
&lt;p&gt;通知の設定には、音やバイブレーションを起こす&lt;code&gt;アラート&lt;/code&gt;、画面の表示だけする&lt;code&gt;サイレント&lt;/code&gt;、そして&lt;code&gt;通知しない&lt;/code&gt;の3種類あり、以下のように意識して設定を分けている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;アラート&lt;/strong&gt;：すぐにアクションを起こす必要がある情報の通知&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;サイレント&lt;/strong&gt;：すぐにアクションを起こす必要はないけど、注意しておきたい情報の通知&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;通知しない&lt;/strong&gt;：知る必要のない情報の通知&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;設定アプリから通知頻度の多い順にアプリを並べて、通知頻度が高い項目を上のような方針で設定を更新したところ、無意味な通知に煩わされることがまったくなくなった。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;notifications.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;notifications.png&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;頻度が高い通知一覧&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;</summary>
    <title>inboxと通知の整理</title>
    <updated>2019-10-19T20:01:00+00:00</updated>
    <dc:date>2019-10-19T20:01:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/386/</id>
    <link href="https://blog.naoty.dev/386/"/>
    <summary>&lt;p&gt;このホームページがOSのダークモードをサポートした。macOSとAndroidで動作確認した。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;dark-theme.gif&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;dark-theme.gif&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;ダークテーマが切り替わる様子&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ダークモードをサポートするには、以下のようにメディアクエリを使ってダークモードで適用するスタイルを指定する。&lt;/p&gt;
&lt;pre lang=&quot;css&quot; class=&quot;highlight highlight-css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefers-color-scheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#2e3440&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ダークモード用のカラースキーマには、VSCodeでも使っている&lt;a href=&quot;https://www.nordtheme.com&quot;&gt;Nord&lt;/a&gt;を参考にしている。&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/CSS/@media/prefers-color-scheme&quot;&gt;https://developer.mozilla.org/ja/docs/Web/CSS/@media/prefers-color-scheme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>ダークモードのサポート</title>
    <updated>2019-10-13T16:00:00+00:00</updated>
    <dc:date>2019-10-13T16:00:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/385/</id>
    <link href="https://blog.naoty.dev/385/"/>
    <summary>&lt;h1&gt;背景&lt;/h1&gt;
&lt;p&gt;このホームページにタグごとの記事一覧ページを追加しようとしている。パスは&lt;code&gt;/posts/:tag/&lt;/code&gt;にしたい。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/
├─ index.html
└─ posts
   ├─ 1.html
   ├─ 2.html
   ├─ 3.html
   ├─ index.html
   ├─ nuxt
   │  └─ index.html
   └─ vue
      └─ index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ディレクトリ構造でいうと、↑のような感じにしたい。&lt;/p&gt;
&lt;h1&gt;問題&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;pages/posts/_tag/index.vue&lt;/code&gt;のようなファイルを作成しても、すでに存在するパス&lt;code&gt;/posts/:id.html&lt;/code&gt;（記事ページ）とルーティングが衝突してしまう。&lt;/p&gt;
&lt;p&gt;Nuxt.jsは暗黙的にルーティングを生成するので、ルーティングの優先度やルートの細かい制約が設定できない。&lt;/p&gt;
&lt;h1&gt;解決策&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nuxt-community/router-module&quot;&gt;@nuxtjs/router&lt;/a&gt;を使って明示的にルーティングを設定する。&lt;/p&gt;
&lt;pre lang=&quot;javascript&quot; class=&quot;highlight highlight-javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// nuxt.config.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@nuxtjs/router&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;デフォルトの設定では、&lt;code&gt;pages/&lt;/code&gt;ディレクトリに基づいた暗黙的なルーティングの生成は無効化してくれる。そして&lt;code&gt;./router.js&lt;/code&gt;で明示的にルーティングを定義する。&lt;/p&gt;
&lt;pre lang=&quot;javascript&quot; class=&quot;highlight highlight-javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// router.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;vue&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;vue-router&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./pages/index&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PostsIndex&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./pages/posts/index&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PostId&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./pages/posts/_id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PostsTagIndex&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./pages/posts/_tag/index&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Index&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/posts/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PostsIndex&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/posts/:id(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;d+)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PostId&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/posts/:tag/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PostsTagIndex&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;必要なのは、vue-routerのインスタンスを返す&lt;code&gt;createRouter()&lt;/code&gt;という関数を&lt;code&gt;export&lt;/code&gt;するだけ。あとは、vue-routerでルーティングを定義するだけなので、正規表現を使ったルーティングもできる。&lt;/p&gt;</summary>
    <title>Nuxtで明示的にルーティングを定義する</title>
    <updated>2019-10-04T19:10:00+00:00</updated>
    <dc:date>2019-10-04T19:10:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/384/</id>
    <link href="https://blog.naoty.dev/384/"/>
    <summary>&lt;p&gt;このホームページをだいたい1年ぶりに作り直した。ホームページ作りは毎年一度、Webフロントエンドのスキルをアップデートする目的でやっている。今回の作り直しでv3となった。&lt;/p&gt;
&lt;p&gt;v3の主な変更点は以下のとおり。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静的サイトジェネレーターをGatsby.jsからNuxt.jsに変更した。&lt;/li&gt;
&lt;li&gt;ホスティング先をGitHub pagesからNetlifyに変更した。&lt;/li&gt;
&lt;li&gt;Markdownパーサーをmarkedからmarkdown-itに変更した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Nuxt.js&lt;/h1&gt;
&lt;p&gt;Markdownでブログなどの静的サイトを作りたい場合、正直Gatsby.jsの方がやりやすいと思った。今回、最も大変だったのはMarkdownコンテンツをどのようにNuxt.jsで扱うかだった。各記事のページであれば、MarkdownファイルをWebpackで&lt;code&gt;import&lt;/code&gt;できるように変換すれば割と簡単に実装できた。だけど、記事のインデックスページを実装するには、すべてのMarkdownコンテンツをまとめて扱うことになる。こういった実装は調べてもあんまり出てこず、しまいにはmarkdownコンテンツを返すWebサーバーをGoで実装してみたりもしたけど、HMRによるプレビューが使えないことを考えるとあまり現実的な解とは言えなかった。&lt;/p&gt;
&lt;p&gt;一方で、Gatsby.jsだとコンテンツをGraphQLで取得できるようにするための仕組みが備わっていて、公式ドキュメントにも実装方法が紹介されていたため、あまり苦戦しなかった。&lt;/p&gt;
&lt;p&gt;結局、Markdownコンテンツの変更をwatchしてパースするprocessmdのようなスクリプトを書いて、docker-composeでNuxtとは別プロセスで動かすという方法をとっている。&lt;/p&gt;
&lt;h1&gt;Netlify&lt;/h1&gt;
&lt;p&gt;以前から耳にしたことはあったけど触ったことがなかったので初挑戦してみた。感想としては、GitHub pagesでのホスティングに比べて非常によかった。&lt;/p&gt;
&lt;p&gt;以前は、&lt;a href=&quot;https://github.com/naoty/homepage&quot;&gt;naoty/homepage&lt;/a&gt;というホームページを生成するリポジトリと、&lt;a href=&quot;https://github.com/naoty/naoty.github.io&quot;&gt;naoty/naoty.github.io&lt;/a&gt;というホームページそのもののリポジトリが分かれていた。そして、Circle CIでホームページを生成してnaoty/naoty.github.ioのリポジトリにpushするような設定を書いていた。&lt;/p&gt;
&lt;p&gt;Netlifyにした結果、そういったデプロイの設定がこれだけになり、Circle CIは使わなくなった。&lt;/p&gt;
&lt;pre lang=&quot;toml&quot; class=&quot;highlight highlight-toml&quot;&gt;&lt;span class=&quot;c&quot;&gt;# netlify.toml&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;[build]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;npm run build&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;publish&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dist/&quot;&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;NUXT_BASE_URL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://naoty.dev&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;TZ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Asia/Tokyo&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;CHANGELOG&lt;/h1&gt;
&lt;p&gt;せっかくの機会なので、これまでのホームページの経緯を振り返ってみたい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;2017-11-29&lt;/strong&gt;：v1を公開した。当時は&lt;a href=&quot;https://dev.to&quot;&gt;dev.to&lt;/a&gt;が話題になっていた頃で、爆速なブログにあこがれて始めた気がする。このときはまだ静的サイトジェネレータすら使わず、Markdownファイルからホームページを生成するパイプラインをGulpで作っていた。&lt;a href=&quot;/304/&quot;&gt;#304&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;2017-12-08&lt;/strong&gt;：Circle CIでGitHub pagesへのアップロードを自動化した。&lt;a href=&quot;/308/&quot;&gt;#308&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;2018-01-12&lt;/strong&gt;：Atom形式のフィードを配信するようになった。これでRSSリーダーで購読できるようになった。だけど、v2でGatsby.jsを導入したあと、フィードを配信する機能を実装する方法がよくわからなかったりして廃止されている。v3で今後復活させたい。&lt;a href=&quot;/316/&quot;&gt;#316&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;2018-09-01&lt;/strong&gt;：v2を公開した。このときにGatsby.jsを導入してまともなホームページ作成環境になった。この頃からモダンなWebフロントエンド開発をたしなむようになった。&lt;a href=&quot;/342/&quot;&gt;#342&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;2018-12-12&lt;/strong&gt;：ライブラリのアップデートをdependabotで自動化した。これによって面倒なアップデート作業が非常にラクになり、仕事でもアップデートの自動化を試みるようになった。&lt;a href=&quot;/353/&quot;&gt;#353&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;2019-03-02&lt;/strong&gt;：ドメインを&lt;code&gt;naoty.github.io&lt;/code&gt;から&lt;code&gt;naoty.dev&lt;/code&gt;に変更した。&lt;code&gt;dev&lt;/code&gt;ドメインが公開される日に急いでGoogle Domainsで取得した記憶がある。&lt;a href=&quot;/363/&quot;&gt;#363&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;2019-05-01&lt;/strong&gt;：タグごとの記事一覧ページを実装した。Gatsby.jsだと簡単にできたんだけど、Nuxt.jsだとルーティングの関係でなんかうまくいってない。&lt;a href=&quot;/369/&quot;&gt;#369&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;2019-09-28&lt;/strong&gt;：v3を公開した。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>ホームページをNuxtで作り直した</title>
    <updated>2019-09-28T19:58:00+00:00</updated>
    <dc:date>2019-09-28T19:58:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/383/</id>
    <link href="https://blog.naoty.dev/383/"/>
    <summary>&lt;p&gt;webpack loaderを自作したいと思っていろいろ試してみた。以下では、ミニマムにwebpack loaderを自作する手順をまとめてみた。&lt;/p&gt;
&lt;h1&gt;1. webpackのセットアップ&lt;/h1&gt;
&lt;p&gt;webpackとCLIをインストールする。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install -D webpack webpack-cli
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;エントリーポイントと依存するアセットを&lt;code&gt;dist/bundle.js&lt;/code&gt;にまとめるように設定する。&lt;/p&gt;
&lt;pre lang=&quot;js&quot; class=&quot;highlight highlight-js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// webpack.config.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./src/index.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bundle.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;development&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;適当なエントリーポイントを用意する。あとでここからMarkdownを&lt;code&gt;import&lt;/code&gt;していく。&lt;/p&gt;
&lt;pre lang=&quot;js&quot; class=&quot;highlight highlight-js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// src/index.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Here is entrypoint.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;webpackが実行できるか確認する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npx webpack
$ node dist/bundle.js
Here is entrypoint.
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;2. 何もしないloader&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;import&lt;/code&gt;するMarkdownテキストを&lt;code&gt;src/sample.md&lt;/code&gt;に用意する。&lt;/p&gt;
&lt;pre lang=&quot;markdown&quot; class=&quot;highlight highlight-markdown&quot;&gt;&lt;span class=&quot;gh&quot;&gt;# header&lt;/span&gt;
Here is sample markdown text.
&lt;/pre&gt;
&lt;p&gt;エントリーポイントでこのMarkdownテキストを&lt;code&gt;import&lt;/code&gt;する。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt;// src/index.js
&lt;span class=&quot;gd&quot;&gt;-console.log(&quot;Here is entrypoint.&quot;);
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+import contents from &quot;./sample.md&quot;;
+console.log(contents);
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;とりあえず何もしないloaderを作る。&lt;/p&gt;
&lt;pre lang=&quot;js&quot; class=&quot;highlight highlight-js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// lib/loader.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;このままだと&lt;code&gt;*.md&lt;/code&gt;をwebpackはビルドできないので、さっき作ったloaderで処理するように設定を追加する。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt;// webpack.config.js
 module.exports = {
   entry: &quot;./src/index.js&quot;,
   output: {
     path: path.resolve(__dirname, &quot;dist&quot;),
     filename: &quot;bundle.js&quot;
   },
&lt;span class=&quot;gd&quot;&gt;-  mode: &quot;development&quot;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+  mode: &quot;development&quot;,
+  module: {
+    rules: [
+      {
+        test: /\.md$/,
+        use: [
+          {
+            loader: path.resolve(__dirname, &quot;lib/loader.js&quot;)
+          }
+        ]
+      }
+    ]
+  }
&lt;/span&gt; };
&lt;/pre&gt;
&lt;p&gt;何がおきるか確認する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npx webpack
$ node dist/bundle.js
{}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;import contents from &quot;./sample.md&quot;&lt;/code&gt;の結果、&lt;code&gt;contents&lt;/code&gt;は&lt;code&gt;{}&lt;/code&gt;になるということがわかった。&lt;/p&gt;
&lt;h1&gt;3. 何かを返すloader&lt;/h1&gt;
&lt;p&gt;loaderが返す値はどのように使われるのか確かめるため、適当な文字列を返すようにしてみる。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt;// lib/loader.js
 module.exports = function(source) {
&lt;span class=&quot;gd&quot;&gt;-  return &quot;&quot;;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+  return &quot;foo&quot;;
&lt;/span&gt; };
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;webpack&lt;/code&gt;を実行して生成されたbundle.jsを確認してみると、以下のようになっていた。&lt;/p&gt;
&lt;pre lang=&quot;js&quot; class=&quot;highlight highlight-js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// dist/bundle.js&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/***/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;//# sourceURL=webpack:///./src/sample.md?&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/***/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;loaderが返した文字列を&lt;code&gt;eval&lt;/code&gt;でJavaScriptのコードとして実行しているようだ。また、&lt;code&gt;eval&lt;/code&gt;内では関数に渡された&lt;code&gt;module&lt;/code&gt;と&lt;code&gt;exports&lt;/code&gt;が使えるようになっている。&lt;/p&gt;
&lt;p&gt;ということは、この&lt;code&gt;module&lt;/code&gt;を使うことでloaderから何かを&lt;code&gt;export&lt;/code&gt;できそう。&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt;// lib/loader.js
 module.exports = function(source) {
&lt;span class=&quot;gd&quot;&gt;-  return &quot;&quot;;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+  return `module.exports = ${JSON.stringify({ source })}`;
&lt;/span&gt; }
&lt;/pre&gt;
&lt;p&gt;webpackを実行してbundle.jsを確認してみる。&lt;/p&gt;
&lt;pre lang=&quot;js&quot; class=&quot;highlight highlight-js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// dist/bundle.js&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;module.exports = {&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;# header&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;nHere is sample markdown text.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;//# sourceURL=webpack:///./src/sample.md?&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;src/sample.md&lt;/code&gt;の中身を&lt;code&gt;export&lt;/code&gt;する文字列が生成できた。最後に&lt;code&gt;import&lt;/code&gt;できるかも確認する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ node dist/bundle.js
{ source: '# header\nHere is sample markdown text.\n' }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;import contents from &quot;./sample.md&quot;&lt;/code&gt;で確かに&lt;code&gt;export&lt;/code&gt;したオブジェクトが&lt;code&gt;import&lt;/code&gt;できていた。&lt;/p&gt;
&lt;h1&gt;まとめ&lt;/h1&gt;
&lt;p&gt;以下のような関数が、ファイルの中身をオブジェクトとして返す機能をもったミニマムなwebpack loaderと言えそう。&lt;/p&gt;
&lt;pre lang=&quot;js&quot; class=&quot;highlight highlight-js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`module.exports = &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;あとは、Markdownのパースなどの機能をここに実装していけばよさそう。&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;p&gt;他に留意すべき項目はドキュメントにまとまっている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://webpack.js.org/contribute/writing-a-loader/&quot;&gt;https://webpack.js.org/contribute/writing-a-loader/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/webpack/docs/wiki/how-to-write-a-loader&quot;&gt;https://github.com/webpack/docs/wiki/how-to-write-a-loader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>ミニマムなwebpack loader</title>
    <updated>2019-09-18T13:04:00+09:00</updated>
    <dc:date>2019-09-18T13:04:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/382/</id>
    <link href="https://blog.naoty.dev/382/"/>
    <summary>&lt;p&gt;HHKB-BTを1年くらい使っているんだけど、地味に面倒なのがリモートワークするときにプライベートPCと仕事用PCでHHKB-BTの接続を切り替えるところだった。今まで使わない方のPCをシャットダウンしてたんだけど、もう一度よく調べてみたところもっと簡単にできることがわかった。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;Fn + q&lt;/code&gt;を押す。そうすると、HHKB-BTは接続が切れてペアリングモードになる。&lt;/li&gt;
&lt;li&gt;接続したいMacのbluetoothの設定からHHKB-BTをクリックすると接続される。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;bluetooth.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;bluetooth.png&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;bluetoothの設定&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;毎回PCをシャットダウンしてたのはなんだったんだろう。もっと早く知っておくべきだった。&lt;/p&gt;</summary>
    <title>HHKB-BTの接続先切り替え</title>
    <updated>2019-09-07T23:33:00+09:00</updated>
    <dc:date>2019-09-07T23:33:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/381/</id>
    <link href="https://blog.naoty.dev/381/"/>
    <summary>&lt;p&gt;&lt;code&gt;http&lt;/code&gt;パッケージだけでWebアプリケーションを書くとき、アクセスログの出力も&lt;code&gt;http.Handler&lt;/code&gt;で実装しようとするけど、ステータスコードを取得する手段がないことに気づく。&lt;/p&gt;
&lt;p&gt;そこで&lt;code&gt;http.ResponseWriter&lt;/code&gt;を独自に実装することで解決できたのでメモに残す。&lt;/p&gt;
&lt;pre lang=&quot;go&quot; class=&quot;highlight highlight-go&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServeHTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loggingResponseWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;statusCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatusOK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServeHTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;status:%d path:%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loggingResponseWriter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResponseWriter&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;statusCode&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loggingResponseWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WriteHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statusCode&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statusCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statusCode&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;logger&lt;/code&gt;という&lt;code&gt;http.Handler&lt;/code&gt;は他の&lt;code&gt;http.Handler&lt;/code&gt;をラップするミドルウェアになっている。&lt;code&gt;ServeHTTP&lt;/code&gt;でラップした&lt;code&gt;http.Handler&lt;/code&gt;の&lt;code&gt;ServeHTTP&lt;/code&gt;を呼んだ後で、ログを出力している。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;loggingResponseWriter&lt;/code&gt;という独自の&lt;code&gt;http.ResponseWriter&lt;/code&gt;を用意する。埋め込みによってinterfaceを実装している。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;loggingResponseWriter&lt;/code&gt;は&lt;code&gt;WriteHeader&lt;/code&gt;だけ独自に実装し、受け取ったステータスコードを保持するようにしている。こうすることで後でログに出力できる。それ以外のメソッドは埋め込んだ&lt;code&gt;http.ResponseWriter&lt;/code&gt;に委譲される。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>ステータスコードをログに出力するhttp.Handler</title>
    <updated>2019-09-07T12:05:00+09:00</updated>
    <dc:date>2019-09-07T12:05:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/380/</id>
    <link href="https://blog.naoty.dev/380/"/>
    <summary>&lt;p&gt;最近、&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873118468/&quot;&gt;Go言語による並行処理&lt;/a&gt;を読んでいる。その中で明示的には紹介されていないものの、頻繁に登場するコードを整理して理解したい。&lt;/p&gt;
&lt;p&gt;以下のコード例では、goroutineを実行してその結果を受信するchannelを取得できる関数を定義している。&lt;/p&gt;
&lt;pre lang=&quot;go&quot; class=&quot;highlight highlight-go&quot;&gt;&lt;span class=&quot;c&quot;&gt;// goroutineの結果を表す型&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;   &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;// 送受信可能なchannelを生成する&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;// channelに結果を送信するgoroutineを実行する&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// channelを確実に終了させる&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;// 返り値の型が&amp;lt;-chanなので受信専用のchannelとして返る&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;関数の返り値が&lt;code&gt;&amp;lt;-chan result&lt;/code&gt;になっているため、この関数を呼び出す側はこのchannelから値を受信することしかできない。&lt;/li&gt;
&lt;li&gt;goroutine内で&lt;code&gt;defer&lt;/code&gt;によって確実にchannelを終了させる。&lt;/li&gt;
&lt;li&gt;goroutineの結果を表す型を定義して&lt;code&gt;error&lt;/code&gt;を含めた値をchannelに送ることで、呼び出す側でエラーハンドリングできるようにしている。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>goroutineの実行パターン</title>
    <updated>2019-09-01T18:43:00+09:00</updated>
    <dc:date>2019-09-01T18:43:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/379/</id>
    <link href="https://blog.naoty.dev/379/"/>
    <summary>&lt;p&gt;&lt;code&gt;bundle lock&lt;/code&gt;というコマンドがあることに気づいた。これはgemをインストールせずに&lt;code&gt;Gemfile.lock&lt;/code&gt;だけを更新する。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;% bundle lock
Fetching gem metadata from https://rubygems.org/.
Resolving dependencies...
Writing lockfile to Gemfile.lock
&lt;/pre&gt;
&lt;p&gt;普段、MySQLのDockerイメージを使っているので、&lt;code&gt;mysql2&lt;/code&gt;をインストールしようとすると以下のようなエラーになる。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;mysql client is missing. You may need to &lt;span class=&quot;s1&quot;&gt;'brew install mysql'&lt;/span&gt; or &lt;span class=&quot;s1&quot;&gt;'port install mysql'&lt;/span&gt;, and try again.
&lt;/pre&gt;
&lt;p&gt;このままだと&lt;code&gt;Gemfile.lock&lt;/code&gt;を更新できないので、Dockerイメージ内で&lt;code&gt;bundle install&lt;/code&gt;して&lt;code&gt;Gemfile.lock&lt;/code&gt;の同期によってホスト側を更新していた。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bundle lock&lt;/code&gt;を使うともっと簡単にできることがわかった。インストールせずに&lt;code&gt;Gemfile.lock&lt;/code&gt;を更新するので、ホストにMySQLがなくてもいい。便利。&lt;/p&gt;</summary>
    <title>bundle lockが便利</title>
    <updated>2019-08-21T23:24:00+09:00</updated>
    <dc:date>2019-08-21T23:24:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/378/</id>
    <link href="https://blog.naoty.dev/378/"/>
    <summary>&lt;p&gt;環境構築からmrubyを実行するCのコードをビルドするまで。&lt;/p&gt;
&lt;h1&gt;環境構築&lt;/h1&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;hello-mruby
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;hello-mruby
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vi Dockerfile
&lt;/pre&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt;&lt;span class=&quot;gi&quot;&gt;+FROM ruby:1.9
+RUN apt update &amp;amp;&amp;amp; \
+  apt install -y bison --no-install-recommends &amp;amp;&amp;amp; \
+  git clone https://github.com/mruby/mruby &amp;amp;&amp;amp; \
+  cd mruby &amp;amp;&amp;amp; \
+  ./minirake
+ENV PATH /mruby/bin:$PATH
+CMD [&quot;bash&quot;]
&lt;/span&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://github.com/mruby/mruby/blob/master/doc/guides/compile.md#prerequisites&quot;&gt;ドキュメント&lt;/a&gt;を読むと、mrubyのビルドにはRuby 1.8か1.9、gcc、ar、bisonが必要とのことだった。&lt;code&gt;ruby:1.9&lt;/code&gt;のイメージをベースにして、入ってなかったbisonだけインストールした。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;./minirake&lt;/code&gt;でmrubyがビルドされる。&lt;code&gt;bin/&lt;/code&gt;以下にmrbcなどがあるので&lt;code&gt;PATH&lt;/code&gt;に追加しておく。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; naoty/hello-mruby
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; naoty/hello-mruby
% mirb
mirb - Embeddable Interactive Ruby Shell

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; MRUBY_VERSION
 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2.0.1&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
% &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Dockerでmrubyをビルドできたことを確認した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;サンプルコードを追加する&lt;/h1&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vi Dockerfile
&lt;/pre&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt; FROM ruby:1.9
 RUN apt update &amp;amp;&amp;amp; \
   apt install -y bison --no-install-recommends &amp;amp;&amp;amp; \
   git clone https://github.com/mruby/mruby &amp;amp;&amp;amp; \
   cd mruby &amp;amp;&amp;amp; \
   ./minirake
 ENV PATH /mruby/bin:$PATH
&lt;span class=&quot;gi&quot;&gt;+WORKDIR /hello-mruby
+COPY . /hello-mruby/
&lt;/span&gt; CMD [&quot;bash&quot;]
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;サンプルコードを用意していくので&lt;code&gt;WORKDIR&lt;/code&gt;を用意する。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vi hello.rb
&lt;/pre&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt;&lt;span class=&quot;gi&quot;&gt;+puts &quot;Hello, mruby!&quot;
&lt;/span&gt;&lt;/pre&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; naoty/hello-mruby
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;サンプルコードを追加してDockerイメージに追加する。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;:/hello-mruby naoty/hello-mruby
% mrbc hello.rb
% &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;カレントディレクトリをマウントしてイメージを起動する。&lt;/li&gt;
&lt;li&gt;mrbcで&lt;code&gt;hello.rb&lt;/code&gt;から&lt;code&gt;hello.mrb&lt;/code&gt;を生成する。マウントしているので、ホストにも&lt;code&gt;hello.mrb&lt;/code&gt;が追加されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Cからmrubyを実行する&lt;/h1&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vi hello.c
&lt;/pre&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt;&lt;span class=&quot;gi&quot;&gt;+#include &amp;lt;mruby.h&amp;gt;
+#include &amp;lt;mruby/dump.h&amp;gt;
+#include &amp;lt;stdio.h&amp;gt;
+
+int main() {
+  mrb_state *mrb = mrb_open();
+
+  FILE *fd = fopen(&quot;hello.mrb&quot;, &quot;r&quot;);
+  mrb_load_irep_file(mrb, fd);
+
+  mrb_close(mrb);
+
+  return 0;
+}
&lt;/span&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;生成した&lt;code&gt;hello.mrb&lt;/code&gt;を実行するCのコードを書く。&lt;/li&gt;
&lt;li&gt;Cのコードは雰囲気で書いてるけど、&lt;code&gt;mrb_open&lt;/code&gt;と&lt;code&gt;mrb_close&lt;/code&gt;はお約束みたいで、&lt;code&gt;mrb_load_irep_file&lt;/code&gt;によってmrbファイルを&lt;code&gt;load&lt;/code&gt;するっぽい。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;:/hello-mruby naoty/hello-mruby
% gcc hello.c &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt;/mruby/include &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt;/mruby/build/host/lib &lt;span class=&quot;nt&quot;&gt;-lmruby&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-lm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; hello
% ./hello
Hello, mruby!
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;書いたCのコードをビルドするため、もう一度Dockerイメージを起動する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;hello.c&lt;/code&gt;を&lt;code&gt;gcc&lt;/code&gt;でビルドするには、まずヘッダーファイル&lt;code&gt;mruby.h&lt;/code&gt;のパスを指定する必要がある。mrubyのヘッダーファイルは&lt;code&gt;/mruby/include/&lt;/code&gt;以下にあるので、&lt;code&gt;-I&lt;/code&gt;オプションで指定している。&lt;/li&gt;
&lt;li&gt;次に、mruby本体のソースコードとともに&lt;code&gt;hello.c&lt;/code&gt;をビルドする必要がある。mrubyのライブラリは&lt;code&gt;/mruby/build/host/lib/libmruby.a&lt;/code&gt;なので、&lt;code&gt;-L&lt;/code&gt;オプションにパスを指定し、&lt;code&gt;-l&lt;/code&gt;オプションで&lt;code&gt;mruby&lt;/code&gt;を指定している。&lt;/li&gt;
&lt;li&gt;また、ビルドすると&lt;code&gt;/mruby/src/numeric.c:321: undefined reference to 'round'&lt;/code&gt;のようなエラーが出てしまう。Mathのライブラリが足りなさそうなので、&lt;code&gt;-lm&lt;/code&gt;オプションをつけて&lt;code&gt;libm.so&lt;/code&gt;をリンクしている。&lt;/li&gt;
&lt;li&gt;無事にビルドできた実行可能ファイルを実行してみると、&lt;code&gt;hello.rb&lt;/code&gt;で書いたコードが実行された。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;追記&lt;/h1&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;とのことなので、ベースイメージを&lt;code&gt;ruby:2.6&lt;/code&gt;にしてみたけど問題なく上記の手順ができた。&lt;/p&gt;</summary>
    <title>mrubyの初手</title>
    <updated>2019-08-07T12:06:00+09:00</updated>
    <dc:date>2019-08-07T12:06:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/377/</id>
    <link href="https://blog.naoty.dev/377/"/>
    <summary>&lt;p&gt;最近、mrubyを触ってるんだけど、ビルド周りの知識があいまいで自分が何をしているのかよくわからないときがあったので、&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873116099/&quot;&gt;Head First C&lt;/a&gt;を読み直した。あらためて基本的なことを確認できたので、メモに残しておく。&lt;/p&gt;
&lt;h1&gt;&lt;code&gt;*.c&lt;/code&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;C言語のソースコード&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;code&gt;*.h&lt;/code&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ヘッダーファイル。ソースコードで実装されている関数や構造体の宣言が書いてある。&lt;/li&gt;
&lt;li&gt;宣言をソースコードと分けることで、ソースコード内で関数や構造体を実装する順番を気にしなくてよくなる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/code&gt;や&lt;code&gt;#include &quot;myheader.h&quot;&lt;/code&gt;でヘッダーファイル内の宣言をソースコードに展開する。前者は&lt;code&gt;/usr/include&lt;/code&gt;や&lt;code&gt;/usr/local/include&lt;/code&gt;以下にあるヘッダーファイルを検索し、後者はソースコードからの相対パスで検索する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;code&gt;*.o&lt;/code&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;オブジェクトコード。CPUが実際に実行できるバイナリ形式のコード。&lt;/li&gt;
&lt;li&gt;以下のように&lt;code&gt;gcc -c&lt;/code&gt;でソースコードから生成できる。&lt;code&gt;-c&lt;/code&gt;オプションはコンパイルするけどリンクしない。
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# foo.oを生成する&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcc &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; foo.c
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;code&gt;lib*.a&lt;/code&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;スタティックリンクライブラリ。オブジェクトファイルを含んだzipファイルのようなアーカイブファイル。&lt;code&gt;/usr/lib&lt;/code&gt;や&lt;code&gt;/usr/local/lib&lt;/code&gt;のようなライブラリディレクトリに置かれている。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ar&lt;/code&gt;コマンドを使ってスタティックリンクライブラリを生成できる。
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# foo1.oとfoo2.oを含むlibfoo.aを生成する&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ar &lt;span class=&quot;nt&quot;&gt;-rcs&lt;/span&gt; libfoo.a foo1.o foo2.o
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;スタティックリンクライブラリを使ったコンパイルは以下のようになる。
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# libfoo.aを使ってbazを生成する&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcc bar.c &lt;span class=&quot;nt&quot;&gt;-lfoo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; baz
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;code&gt;lib*.so&lt;/code&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ダイナミックリンクライブラリ。複数のオブジェクトファイルを含むが、スタティックリンクライブラリとは異なり、オブジェクトファイルが適切にリンクされた1つのオブジェクトコードを持つ。&lt;code&gt;/usr/lib&lt;/code&gt;や&lt;code&gt;/usr/local/lib&lt;/code&gt;に置かれる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gcc -shared&lt;/code&gt;でオブジェクトファイルからダイナミックリンクライブラリを生成する&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# foo1.oを含むlibfoo.soを生成する&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcc &lt;span class=&quot;nt&quot;&gt;-shared&lt;/span&gt; foo1.o &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; libfoo.so
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ダイナミックリンクライブラリを使ったコンパイルは以下のようにスタティックリンクライブラリのときと同じ。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcc bar.c &lt;span class=&quot;nt&quot;&gt;-lfoo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; baz
&lt;/pre&gt;
&lt;p&gt;ただし、コンパイラはライブラリを実行可能ファイルに含めない。代わりに、実行時にライブラリを見つけ出してリンクするプレースホルダーを挿入する。&lt;/p&gt;
&lt;p&gt;このように生成された実行可能ファイルはダイナミックリンクライブラリを変更しても再コンパイルする必要はなく、ダイナミックリンクライブラリをコンパイルするだけでいい。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;実行可能ファイル&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;複数のオブジェクトファイルをリンクして実行可能な形式に変換される。&lt;/li&gt;
&lt;li&gt;以下のように&lt;code&gt;gcc -o&lt;/code&gt;でオブジェクトファイルから生成できる。
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# すべてのオブジェクトファイルからfooを生成する&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcc &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.o &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; foo
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;まとめ&lt;/h1&gt;
&lt;p&gt;以上のような種類のファイルから最終的に実行可能ファイルができるまでの図を書いてみた。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;foo.c  -&amp;gt; foo.o  ----------------+-&amp;gt; qux
                                 |
bar1.c -&amp;gt; bar1.o -+-&amp;gt; libbar.a --+
                  |              |
bar2.c -&amp;gt; bar2.o -+              |
                                 |
baz1.c -&amp;gt; baz1.o -+-&amp;gt; libbaz.so -+
                  |
baz2.c -&amp;gt; baz2.o -+
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>ビルドに必要なファイルの種類を整理する</title>
    <updated>2019-08-04T16:38:00+09:00</updated>
    <dc:date>2019-08-04T16:38:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/376/</id>
    <link href="https://blog.naoty.dev/376/"/>
    <summary>&lt;p&gt;ECSサービスとしてRailsアプリケーションを運用しているとき、定期実行したいRakeタスクはcronで管理するよりもECS scheduled taskとして管理すると思う。&lt;/p&gt;
&lt;p&gt;まず、RakeタスクをECS（Fargate）上で実行するため、ECSタスク定義をつくる。&lt;/p&gt;
&lt;pre lang=&quot;hcl&quot; class=&quot;highlight highlight-hcl&quot;&gt;&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_ecs_task_definition&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rake&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;family&lt;/span&gt;                   &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rake&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;task_role_arn&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aws_iam_role&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ecs_task&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arn&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;execution_role_arn&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aws_iam_role&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ecs_execution&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arn&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;network_mode&lt;/span&gt;             &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;awsvpc&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;cpu&lt;/span&gt;                      &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt;                   &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;requires_compatibilities&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FARGATE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;container_definitions&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DOCUMENT&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
[
  {
    &quot;name&quot;: &quot;rails&quot;,
    &quot;image&quot;: &quot;${aws_ecr_repository.rails.repository_url}:latest&quot;,
    &quot;command&quot;: [&quot;exit&quot;, &quot;1&quot;],
    &quot;environment&quot;: [
      { &quot;name&quot;: &quot;RAILS_ENV&quot;, &quot;value&quot;: &quot;production&quot; }
    ],
    &quot;logConfiguration&quot;: {
      &quot;logDriver&quot;: &quot;awslogs&quot;,
      &quot;options&quot;: {
        &quot;awslogs-group&quot;: &quot;${aws_cloudwatch_log_group.rails.name}&quot;,
        &quot;awslogs-region&quot;: &quot;ap-northeast-1&quot;,
        &quot;awslogs-stream-prefix&quot;: &quot;rake&quot;
      }
    }
  }
]
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DOCUMENT
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;定期実行したいRakeタスクごとにECSタスク定義を作るのは非効率なので、Rakeタスク専用のタスク定義をつくる。&lt;/li&gt;
&lt;li&gt;後ほど、実行するコマンドをoverrideするため、タスク定義のコマンドでは&lt;code&gt;exit 1&lt;/code&gt;を実行するようにしている。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;hcl&quot; class=&quot;highlight highlight-hcl&quot;&gt;&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_cloudwatch_event_rule&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;push_notifications_schedule&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;push-schedule&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;schedule_expression&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cron(0 20 * * ? *)&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_cloudwatch_event_target&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;push_notifications&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;rule&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aws_cloudwatch_event_rule&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push_notifications_schedule&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;arn&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aws_ecs_cluster&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arn&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;role_arn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aws_iam_role&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ecs_events&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arn&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;ecs_target&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;launch_type&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;FARGATE&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;task_count&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;task_definition_arn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aws_ecs_task_definition&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rake&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arn&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;network_configuration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;subnets&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aws_subnet&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;private_a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aws_subnet&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;private_c&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;security_groups&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aws_security_group&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;internal&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DOCUMENT&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
{
  &quot;containerOverrides&quot;: [
    {
      &quot;name&quot;: &quot;rails&quot;,
      &quot;command&quot;: [&quot;bin/rails&quot;, &quot;push_notifications&quot;]
    }
  ]
}
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DOCUMENT
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;aws_cloudwatch_event_rule&lt;/code&gt;はスケジュールごとに書き、そのスケジュールで実行するRakeタスクごとに&lt;code&gt;aws_cloudwatch_event_target&lt;/code&gt;を書くことになる。なので、production環境とstaging環境で同じスケジュールを使う場合は、&lt;code&gt;aws_cloudwatch_event_rule&lt;/code&gt;は共用することになる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;aws_cloudwatch_event_target&lt;/code&gt;では、&lt;code&gt;ecs_target&lt;/code&gt;でFargate上でECSタスクを実行するためのオプションを指定する必要がある。&lt;code&gt;input&lt;/code&gt;でコンテナ定義のoverrideができるので、ここで&lt;code&gt;exit 1&lt;/code&gt;としていた実行コマンドをoverrideしている。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>ECSタスクでRakeタスクを定期実行する</title>
    <updated>2019-07-04T23:27:00+09:00</updated>
    <dc:date>2019-07-04T23:27:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/375/</id>
    <link href="https://blog.naoty.dev/375/"/>
    <summary>&lt;p&gt;ステージング環境などの社内だけに公開されるような環境を構築するとき、特定のIPアドレスからのアクセスを許可するセキュリティグループを作ると思う。&lt;/p&gt;
&lt;p&gt;僕はいつもこんな感じでTerraformのリソースを書く。&lt;/p&gt;
&lt;pre lang=&quot;hcl&quot; class=&quot;highlight highlight-hcl&quot;&gt;&lt;span class=&quot;nx&quot;&gt;locals&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;office_ips&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;192.0.2.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;198.51.100.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;203.0.113.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_security_group&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;office&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;office&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;vpc_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aws_vpc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_security_group_rule&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;office_ingress&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;office_ips&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;security_group_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aws_security_group&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;office&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;              &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ingress&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;from_port&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;to_port&lt;/span&gt;           &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;protocol&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-1&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;cidr_blocks&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${local.office_ips[count.index]}/32&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_security_group_rule&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;office_egress&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;security_group_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aws_security_group&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;office&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;              &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;egress&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;from_port&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;to_port&lt;/span&gt;           &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;protocol&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-1&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;cidr_blocks&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0/0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;特定のIPアドレスはローカル変数でまとめておく。&lt;/li&gt;
&lt;li&gt;IPアドレスごとにインバウンドトラフィックを許可するルールを設定するため、&lt;code&gt;aws_security_group.ingress&lt;/code&gt;を使わずに&lt;code&gt;aws_security_group_rule&lt;/code&gt;を使う。その方が&lt;code&gt;count&lt;/code&gt;を使って効率的に書ける。&lt;/li&gt;
&lt;li&gt;この書き方はNetwork ACLでも使える。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;日々のTerraform業務の中で見つけたパターンをちょっとずつブログに残していきたいと思い、1トピック1ブログの体裁で書いていくことにした。まずは、だいたい必要になるようなアクセス制限の書き方を書いてみた。次もこれくらいの粒度のブログをリズムよく書いていきたい。&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;追記：2019-07-19&lt;/h2&gt;
&lt;p&gt;terraform v0.12で導入された&lt;a href=&quot;https://www.terraform.io/docs/configuration/expressions.html#dynamic-blocks&quot;&gt;dynamic block&lt;/a&gt;を使うと、&lt;code&gt;aws_security_group_rule&lt;/code&gt;を使う必要がないことに気づいた。&lt;/p&gt;
&lt;pre lang=&quot;hcl&quot; class=&quot;highlight highlight-hcl&quot;&gt;&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_security_group&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;office&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;office&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;vpc_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aws_vpc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;dynamic&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ingress&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;for_each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;office_ips&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;from_port&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;to_port&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;protocol&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-1&quot;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;cidr_blocks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${ingress.value}/32&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;egress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;from_port&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;to_port&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;protocol&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-1&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;cidr_blocks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0/0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>特定のIPアドレスからのアクセスを許可する</title>
    <updated>2019-07-03T23:46:00+09:00</updated>
    <dc:date>2019-07-03T23:46:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/374/</id>
    <link href="https://blog.naoty.dev/374/"/>
    <summary>&lt;p&gt;ある集合のすべての組み合わせを列挙したいときに、bit全探索と呼ばれるアルゴリズムを使うといいことを学んだ。&lt;/p&gt;
&lt;pre lang=&quot;cpp&quot; class=&quot;highlight highlight-cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 組み合わせの数だけループする&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 組み合わせに含まれる要素&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 全要素についてループする&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 要素が組み合わせに含まれるかチェックする&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 組み合わせに要素を追加する&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%d&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; %d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;} &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./a.out
&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;0 1&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;0 2&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1 2&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;0 1 2&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;組み合わせの数&lt;/h1&gt;
&lt;pre lang=&quot;cpp&quot; class=&quot;highlight highlight-cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ある集合のすべての組み合わせは、各要素について含めるか含めないかの2択によって生まれるので、&lt;code&gt;2^&amp;lt;要素数&amp;gt;&lt;/code&gt;になる。&lt;code&gt;1 &amp;lt;&amp;lt; n&lt;/code&gt;は&lt;code&gt;2^n&lt;/code&gt;と同じなので、組み合わせの数だけループしていることになる。&lt;/p&gt;
&lt;h1&gt;組み合わせの作り方&lt;/h1&gt;
&lt;pre lang=&quot;cpp&quot; class=&quot;highlight highlight-cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;bit &amp;amp; (1 &amp;lt;&amp;lt; i)&lt;/code&gt;は要素&lt;code&gt;i&lt;/code&gt;が組み合わせに含まれるかをチェックしている。&lt;code&gt;&amp;amp;&lt;/code&gt;はAND演算なので、&lt;code&gt;bit&lt;/code&gt;と&lt;code&gt;(1 &amp;lt;&amp;lt; i)&lt;/code&gt;をそれぞれ2進数として考える。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bit&lt;/code&gt;は上のコードだと&lt;code&gt;0&lt;/code&gt;から&lt;code&gt;7&lt;/code&gt;までの数になるので、2進数では&lt;code&gt;000&lt;/code&gt;から&lt;code&gt;111&lt;/code&gt;までということになる。&lt;/p&gt;
&lt;p&gt;一方、&lt;code&gt;i&lt;/code&gt;は上のコードだと&lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;なので、&lt;code&gt;(1 &amp;lt;&amp;lt; i)&lt;/code&gt;はそれぞれ&lt;code&gt;001&lt;/code&gt;, &lt;code&gt;010&lt;/code&gt;, &lt;code&gt;100&lt;/code&gt;になる。&lt;/p&gt;
&lt;p&gt;なので、&lt;code&gt;bit&lt;/code&gt;が&lt;code&gt;000&lt;/code&gt;だったらどの要素も含まれないことになるし、&lt;code&gt;101&lt;/code&gt;だったら&lt;code&gt;0&lt;/code&gt;と&lt;code&gt;2&lt;/code&gt;が含まれることになる。つまり、要素の組み合わせを&lt;code&gt;bit&lt;/code&gt;が示す2進数で表していると言える。&lt;/p&gt;</summary>
    <title>bit全探索</title>
    <updated>2019-06-30T23:01:00+09:00</updated>
    <dc:date>2019-06-30T23:01:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/373/</id>
    <link href="https://blog.naoty.dev/373/"/>
    <summary>&lt;p&gt;普段、Datadogを使ってシステムを監視している。AWSの各サービスはCloudWatch metricsを通してDatadogから監視できるんだけど、今回はRailsアプリケーションサーバーであるPumaをDatadogから監視できるようにする。&lt;/p&gt;
&lt;h1&gt;DogStatsD&lt;/h1&gt;
&lt;p&gt;DatadogのIntegrationにPumaはないため、カスタムメトリクスを送ることになる。DogStatsDを使うと簡単にカスタムメトリクスを送ることができる。DogStatsDはdatadog-agentに同梱されており、受け取ったカスタムメトリクスをDatadogに転送する。また、&lt;a href=&quot;https://github.com/statsd/statsd&quot;&gt;StatsD&lt;/a&gt;と同じプロトコルを実装しているため、StatsDクライアントはDogStatsDを通してDatadogにメトリクスを送ることができる。&lt;/p&gt;
&lt;h1&gt;Pumaのメトリクス&lt;/h1&gt;
&lt;p&gt;Pumaは&lt;code&gt;Puma.stats&lt;/code&gt;から以下のようなメトリクスを取得することができる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;backlog&lt;/code&gt;: スレッドによる処理を待つコネクション数&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;running&lt;/code&gt;: 実行中のスレッド数&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pool_capacity&lt;/code&gt;: 現在サーバーが取得できるリクエスト数&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;max_threads&lt;/code&gt;: 最大スレッド数&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;puma-plugin-statsd&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/yob/puma-plugin-statsd&quot;&gt;puma-plugin-statsd&lt;/a&gt;は&lt;code&gt;Puma.stats&lt;/code&gt;から取得したメトリクスをStatsDサーバーに送る。Pumaのプラグインなので、以下のように&lt;code&gt;config/puma.rb&lt;/code&gt;に指定する。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:statsd&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;そして、起動時に環境変数&lt;code&gt;STATSD_HOST&lt;/code&gt;でStatsDサーバーのホストを指定する。DogStatsDを使う場合、datadog-agentのホストを指定すればいい。&lt;/p&gt;
&lt;p&gt;これで、PumaのメトリクスがDatadogに送られるようになる。&lt;/p&gt;</summary>
    <title>PumaのメトリクスをDatadogに送る</title>
    <updated>2019-06-30T17:18:00+09:00</updated>
    <dc:date>2019-06-30T17:18:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/372/</id>
    <link href="https://blog.naoty.dev/372/"/>
    <summary>&lt;p&gt;プログラミングコンテストの問題を解いていると、「&lt;code&gt;N&lt;/code&gt;は10の18乗以下」のような制約をよく見る。この制約から、変数&lt;code&gt;N&lt;/code&gt;のデータ型を決めて必要十分なサイズのメモリを確保する。&lt;/p&gt;
&lt;p&gt;何乗だったらどのデータ型を使うべきかいつも迷ってしまうので、メモしておく。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;データ型&lt;/th&gt;
&lt;th&gt;サイズ&lt;/th&gt;
&lt;th&gt;桁数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;32bit&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;int64_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;64bit&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;32/64bit&lt;/td&gt;
&lt;td&gt;9/18&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;long long&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;64bit&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;long&lt;/code&gt;型はWindowsで採用されるLLP64と呼ばれるデータモデルでは32bitで、Linuxで採用されるLP64というデータモデルでは64bitとして扱われる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;int64_t&lt;/code&gt;型のような&lt;code&gt;int??_t&lt;/code&gt;型はサイズが環境に依存しない。C99/C++11から使える。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>データ型と桁数</title>
    <updated>2019-06-23T22:36:00+09:00</updated>
    <dc:date>2019-06-23T22:36:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/371/</id>
    <link href="https://blog.naoty.dev/371/"/>
    <summary>&lt;p&gt;最近、競技プログラミングをはじめた。一番手に馴染んでいるRubyでもよかったんだけど、界隈のスタンダードであるC++を使うことにした。AtCoderで毎週日曜日に開催されているABCという初心者（？）向けコンテンストに出て少しずつレートがつきはじめて楽しくなってきた。&lt;/p&gt;
&lt;p&gt;やろうと思ったきっかけとしては、にわかに「コンピュータサイエンスは必要か否か」うんぬんといった話をよく見るようになって、僕は文系卒でまったくコンピュータサイエンスというものを系統的にやったことがなかったから、どんなものなのか興味が出てきたのだった。コンピュータサイエンスを学ぶのって成果物を作ることをゴールにしにくそうだったので、競技プログラミングみたいな分かりやすく順位がつくようなものをやってみることにした。&lt;/p&gt;
&lt;p&gt;C++もまったく書いたことがなかったので、入門書を読んでみたり、&lt;a href=&quot;https://atcoder.jp/contests/APG4b&quot;&gt;AtCoderにあるC++初心者向けのコンテンツ&lt;/a&gt;をやってみたり、ABCの過去問を解いていくなかで、コンテストに出るのには不自由しない程度には書けるようになった。&lt;/p&gt;
&lt;p&gt;ただ、どういう問題でどのデータ構造やアルゴリズムを選ぶといいのか、まだ判断がつかないので、データ構造やアルゴリズムの勉強もするようになった。とりあえずググったらいろんなところでオススメされていた「&lt;a href=&quot;https://tatsu-zine.com/books/algorithm-and-datastructure&quot;&gt;プログラミングコンテスト攻略のためのアルゴリズムとデータ構造&lt;/a&gt;」、通称「螺旋本」をやっている。&lt;/p&gt;
&lt;p&gt;とりあえず、AtCoderで緑色になるくらいまではがんばってみたい。&lt;/p&gt;</summary>
    <title>競技プログラミングをはじめてみた</title>
    <updated>2019-06-10T16:38:00+09:00</updated>
    <dc:date>2019-06-10T16:38:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/370/</id>
    <link href="https://blog.naoty.dev/370/"/>
    <summary>&lt;p&gt;仕事ではインフラエンジニアとしてAWS上のサービスを保守・運用しているのだけど、いずれデータ分析基盤のような大規模なシステムにも関わってみたいと思うようになり、最近は「&lt;a href=&quot;https://gihyo.jp/book/2017/978-4-7741-9225-3&quot;&gt;ビッグデータを支える技術&lt;/a&gt;」を読んでいる。&lt;/p&gt;
&lt;p&gt;データ分析基盤と聞くと、データなんとかみたいな概念だったり、Hadoop界隈のさまざまな技術が頭に浮かぶんだけど、いまいち何をなんのために使うのかわかってない。そこで、この本を参考にデータが生まれて分析に利用されるまでの全体像を整理してみたい。&lt;/p&gt;
&lt;h1&gt;全体像&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ユーザーの入力から生まれるローデータをバルク型データ転送やストリーム型データ転送によって分散ストレージに保存する。&lt;/li&gt;
&lt;li&gt;分散ストレージに保存されたビッグデータを大規模分散処理フレームワークを使って分析に適した形式に変換し、列指向データベースに転送する。&lt;/li&gt;
&lt;li&gt;列指向データベースに保存されたビッグデータはダッシュボードツールやBIツールで分析され、可視化される。&lt;/li&gt;
&lt;li&gt;これらの一連のプロセスをワークフローエンジンで管理する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ローデータ&lt;/h1&gt;
&lt;p&gt;ユーザーがフォームから入力したデータ、Webサーバーのアクセスログなど。&lt;/p&gt;
&lt;h1&gt;バルク型データ転送&lt;/h1&gt;
&lt;p&gt;定期的にまとまったデータを分散ストレージに保存すること。その際にCSVなどの標準的なフォーマットに変換したり、適切なサイズにデータをまとめたり分割することで効率的に保存できるようにする。&lt;/p&gt;
&lt;p&gt;このプロセスで使われる技術として、&lt;a href=&quot;https://www.embulk.org&quot;&gt;Embulk&lt;/a&gt;がある。&lt;/p&gt;
&lt;h1&gt;ストリーム型データ転送&lt;/h1&gt;
&lt;p&gt;リアルタイムに生成されるデータを分散ストレージに保存すること。高頻度に生成されるデータをそのまま分散ストレージに書き込もうとすると、書き込み性能の限界に到達してしまう。そこで、メッセージブローカという仕組みを使い、一時的にデータを溜めて、分散ストレージに書き込むデータの量を調整する。&lt;/p&gt;
&lt;p&gt;このプロセスで使われる技術として、&lt;a href=&quot;https://kafka.apache.org/&quot;&gt;Apache Kafka&lt;/a&gt;、&lt;a href=&quot;https://aws.amazon.com/jp/kinesis/&quot;&gt;Amazon Kinesis&lt;/a&gt;、&lt;a href=&quot;https://www.fluentd.org/&quot;&gt;fluentd&lt;/a&gt;がある。&lt;/p&gt;
&lt;h1&gt;分散ストレージ&lt;/h1&gt;
&lt;p&gt;複数のコンピュータやディスクからなるストレージのこと。ストレージを追加することでデータ容量を増やすことができ、スケーラビリティがある。分散ストレージとして使われるのは、オブジェクトストレージやNoSQLデータベースがある。&lt;/p&gt;
&lt;p&gt;分散ストレージに保存されるのは、アクセスログのような非構造化データ、CSVやJSONといった半構造化データとなる。&lt;/p&gt;
&lt;p&gt;オブジェクトストレージとしては&lt;a href=&quot;https://aws.amazon.com/jp/s3/&quot;&gt;Amazon S3&lt;/a&gt;やHDFSがあり、NoSQLデータベースとしては&lt;a href=&quot;http://cassandra.apache.org/&quot;&gt;Apache Cassandra&lt;/a&gt;や&lt;a href=&quot;https://aws.amazon.com/jp/dynamodb/&quot;&gt;Amazon DynamoDB&lt;/a&gt;がある。&lt;/p&gt;
&lt;h1&gt;大規模分散処理フレームワーク&lt;/h1&gt;
&lt;p&gt;分散ストレージに保存された非構造化データや半構造化データを構造化データに変換したり、集計したり、列指向データベースに保存したりするために大規模分散処理フレームワークを使う。&lt;/p&gt;
&lt;p&gt;この変換や集計やスキーマの定義にプログラムではなくSQLを使うためクエリエンジンを利用する。&lt;/p&gt;
&lt;p&gt;分散処理フレームワークとしては&lt;a href=&quot;https://hadoop.apache.org/&quot;&gt;Apache Hadoop&lt;/a&gt;や&lt;a href=&quot;https://spark.apache.org/&quot;&gt;Apache Spark&lt;/a&gt;があり、クエリエンジンとしては&lt;a href=&quot;https://hive.apache.org/&quot;&gt;Apache Hive&lt;/a&gt;、&lt;a href=&quot;https://prestodb.github.io/&quot;&gt;presto&lt;/a&gt;、&lt;a href=&quot;https://impala.apache.org/&quot;&gt;Apache Impala&lt;/a&gt;、&lt;a href=&quot;https://spark.apache.org/sql/&quot;&gt;Spark SQL&lt;/a&gt;があり、またマネージドな分散処理サービスでは&lt;a href=&quot;https://aws.amazon.com/jp/emr/&quot;&gt;Amazon EMR&lt;/a&gt;や&lt;a href=&quot;https://cloud.google.com/dataproc/&quot;&gt;Cloud Dataproc&lt;/a&gt;がある。&lt;/p&gt;
&lt;h1&gt;列指向データベース&lt;/h1&gt;
&lt;p&gt;カラム単位でデータを圧縮するデータベースのことで、カラム単位での集計に最適化されている。一般的なRDBは行指向データベースで高速な集計処理には大量のメモリが必要になってしまう。&lt;/p&gt;
&lt;p&gt;列指向データベースとして利用されるのは、&lt;a href=&quot;https://cloud.google.com/bigquery/&quot;&gt;Google BigQuery&lt;/a&gt;や&lt;a href=&quot;https://aws.amazon.com/jp/redshift/&quot;&gt;Amazon Redshift&lt;/a&gt;や&lt;a href=&quot;https://www.treasuredata.co.jp/&quot;&gt;Treasure Data&lt;/a&gt;がある。&lt;/p&gt;
&lt;h1&gt;BIツール&lt;/h1&gt;
&lt;p&gt;データを定期的にモニタリングしたり詳細なデータを探索するためにBIツールを使う。&lt;/p&gt;
&lt;p&gt;BIツールとして利用されるのは、&lt;a href=&quot;https://www.tableau.com&quot;&gt;Tableau&lt;/a&gt;がある。&lt;/p&gt;
&lt;h1&gt;ワークフローエンジン&lt;/h1&gt;
&lt;p&gt;一連のデータ処理のプロセスを定期的に実行したり、タスク間の依存関係を解決して決められた順番で実行したり、エラー時にはリトライさせるためにワークフローエンジンを使う。&lt;/p&gt;
&lt;p&gt;ワークフローエンジンとして利用されるのは、&lt;a href=&quot;https://www.rundeck.com/open-source&quot;&gt;Rundeck&lt;/a&gt;、&lt;a href=&quot;https://airflow.apache.org/&quot;&gt;Apache Airflow&lt;/a&gt;、&lt;a href=&quot;https://luigi.readthedocs.io&quot;&gt;Luigi&lt;/a&gt;、&lt;a href=&quot;https://azkaban.github.io/&quot;&gt;Azkaban&lt;/a&gt;、&lt;a href=&quot;https://www.digdag.io/&quot;&gt;digdag&lt;/a&gt;がある。&lt;/p&gt;</summary>
    <title>データ分析基盤の全体像を整理してみる</title>
    <updated>2019-05-19T12:44:00+09:00</updated>
    <dc:date>2019-05-19T12:44:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/369/</id>
    <link href="https://blog.naoty.dev/369/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;/go/&quot;&gt;/go/&lt;/a&gt; のようにタグごとの一覧画面を追加した。タグがリンクになっている。&lt;/p&gt;
&lt;p&gt;Gatsby.jsでは&lt;code&gt;gatsby-node.js&lt;/code&gt;でテンプレートからページを生成できる。frontmatterに追加したタグをGraphQLで取得してタグごとのページを生成している。&lt;/p&gt;</summary>
    <title>タグごとのブログ一覧を追加した</title>
    <updated>2019-05-01T12:24:00+09:00</updated>
    <dc:date>2019-05-01T12:24:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/368/</id>
    <link href="https://blog.naoty.dev/368/"/>
    <summary>&lt;h1&gt;状況&lt;/h1&gt;
&lt;p&gt;Webアプリケーションの開発環境でコンテナを使っている場合、MySQLなどのデータベースもコンテナで起動し、Docker Composeで管理することが多いと思う。&lt;/p&gt;
&lt;h1&gt;問題&lt;/h1&gt;
&lt;p&gt;テーブルの作成やシードデータの追加といったセットアップ手順は、例えばRailsであれば&lt;code&gt;db:migrate&lt;/code&gt;や&lt;code&gt;db:seed&lt;/code&gt;のような便利コマンドによって行われるが、そうした追加のセットアップ手順は可能な限り省略したい。&lt;/p&gt;
&lt;h1&gt;解決&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/_/mysql&quot;&gt;公式のMySQLコンテナ&lt;/a&gt;はコンテナの初回起動時に任意のSQLを実行する仕組みがあるため、これを使ってコンテナの起動時に必要なセットアップをすべて終わらせることができる。&lt;/p&gt;
&lt;p&gt;以下のようなディレクトリを例にとる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;database
├── Dockerfile
├── docker-entrypoint-initdb.d
│   ├── 1_schema.sql
│   └── 2_seed.sql
├── mysqld.cnf
└── seed
    ├── statuses.csv
    └── tasks.csv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt;はこうなっている。&lt;/p&gt;
&lt;pre lang=&quot;docker&quot; class=&quot;highlight highlight-docker&quot;&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; mysql:8&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; mysqld.cnf /etc/mysql/conf.d/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; docker-entrypoint-initdb.d /docker-entrypoint-initdb.d/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; seed /seed/&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/etc/mysql/conf.d/&lt;/code&gt;以下に設定ファイルを配置するとincludeされるようになっている。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/docker-entrypoint-initdb.d/&lt;/code&gt;ディレクトリ以下に配置した&lt;code&gt;*.sql&lt;/code&gt;や&lt;code&gt;*.sh&lt;/code&gt;といったファイルは初回起動時に実行される。&lt;/li&gt;
&lt;li&gt;この例では、&lt;code&gt;1_schema.sql&lt;/code&gt;でテーブルが作成され、&lt;code&gt;2_seed.sql&lt;/code&gt;でシードデータが作成されるようになっている。番号をprefixにつけることで実行順を制御している。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;シードデータの作成は以下のように行っている。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;LOAD&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INFILE&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/seed/statuses.csv'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statuses&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FIELDS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TERMINATED&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;','&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENCLOSED&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&quot;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;LOAD&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INFILE&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/seed/tasks.csv'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FIELDS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TERMINATED&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;','&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENCLOSED&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&quot;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ちなみにシードデータはこんな感じ。ヘッダーはつけられなさそうだった。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1,TODO,1
2,DOING,2
3,DONE,3

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;LOAD DATA INFILE&lt;/code&gt;を使ってコンテナ内のCSVファイルからデータを作成しているんだけど、これを行うには設定を追加する必要がある。そのため、以下のような&lt;code&gt;mysqld.cnf&lt;/code&gt;を&lt;code&gt;/etc/mysql/conf.d/&lt;/code&gt;以下に配置している。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[mysqld]
secure-file-priv = &quot;&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上のようなカスタムイメージを作ることで初回起動時に必要なセットアップがすべて完了した状態で起動できるようになる。&lt;/p&gt;</summary>
    <title>MySQLコンテナの起動時にDBを初期化する</title>
    <updated>2019-04-28T16:18:00+09:00</updated>
    <dc:date>2019-04-28T16:18:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/367/</id>
    <link href="https://blog.naoty.dev/367/"/>
    <summary>&lt;h1&gt;状況&lt;/h1&gt;
&lt;p&gt;順番をもつテーブルでレコードの順番を更新したい。例えば、タスク管理アプリケーションであるタスクの順番を上げたり下げたりしたい場合を想定する。&lt;/p&gt;
&lt;h1&gt;問題&lt;/h1&gt;
&lt;p&gt;単純にレコードの順番を更新したい値に更新するだけでは不十分で、前後のタスクの順番も繰り上げたり繰り下げる必要がある。そのため、多数のレコードを更新する可能性がある。&lt;/p&gt;
&lt;h1&gt;解決&lt;/h1&gt;
&lt;p&gt;タスク管理アプリケーションの&lt;code&gt;tasks&lt;/code&gt;テーブルを例にとって考える。タスクの順番は&lt;code&gt;position&lt;/code&gt;カラムで表すことにする。&lt;/p&gt;
&lt;p&gt;順番を上げる場合と下げる場合でSQLを分ける。まず、順番を上げる場合、例えば、4番目のタスクを2番目に上げる場合はこう書く。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;CASE&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BETWEEN&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;次に、順番を下げる場合、例えば、2番目のタスクを4番目に下げる場合はこう書く。&lt;/p&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;CASE&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BETWEEN&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;SQLのポイントは以下の通り。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;CASE&lt;/code&gt;式を使って条件付きの更新処理を一括で行うようにしている。&lt;code&gt;CASE&lt;/code&gt;式を使わずに以下のように2つに分けて書いてしまうと、最初のSQLで更新されたレコードが次のSQLの条件に含まれてしまい誤った値（この場合は3）に更新されてしまう。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;sql&quot; class=&quot;highlight highlight-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;WHERE&lt;/code&gt;句で更新の対象となるレコードを最小限に絞り込んでいる。&lt;code&gt;UPDATE&lt;/code&gt;文は条件を指定しないとすべてのレコードにマッチしてしまうため、更新対象となる範囲を指定している。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.shoeisha.co.jp/book/detail/9784798157825&quot;&gt;達人に学ぶSQL徹底指南書 第2版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>SQLで順番を更新する</title>
    <updated>2019-04-26T17:08:00+09:00</updated>
    <dc:date>2019-04-26T17:08:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/366/</id>
    <link href="https://blog.naoty.dev/366/"/>
    <summary>&lt;p&gt;最近、Nuxt.jsでカンバンアプリを作る練習をしていて、そこで&lt;a href=&quot;https://github.com/paularmstrong/normalizr&quot;&gt;normalizr&lt;/a&gt;を使っている。GraphQLのレスポンスをnormalizrで正規化してVuexのStoreに保存している。normalizrを使って正規化されたデータは、特にネストしたデータをループしたい場合、Vueコンポーネント内で扱いやすいので、重宝している。&lt;/p&gt;
&lt;p&gt;normalizrの使い方を理解するのに少し手間取ったので、自分のためにメモしておきたい。&lt;/p&gt;
&lt;h1&gt;オブジェクト&lt;/h1&gt;
&lt;pre lang=&quot;js&quot; class=&quot;highlight highlight-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;normalizr&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;statuses&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   entities: {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//     statuses: {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//       &quot;1&quot;: {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//         id: 1,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//         name: &quot;TODO&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//       }&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//     }&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   },&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   result: 1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// }&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;normalize(&amp;lt;正規化したいデータ&amp;gt;, &amp;lt;スキーマ&amp;gt;)&lt;/code&gt;という使い方をする。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;new schema.Entity(&amp;lt;キー&amp;gt;)&lt;/code&gt;でスキーマを初期化する。キーは正規化したデータのプロパティ名に使われる。&lt;/li&gt;
&lt;li&gt;正規化されたデータは&lt;code&gt;id&lt;/code&gt;の値をキーとしたオブジェクトになっている。デフォルトでは&lt;code&gt;id&lt;/code&gt;プロパティをキーに使うけど、&lt;code&gt;idAttribute&lt;/code&gt;オプションで&lt;code&gt;id&lt;/code&gt;以外のプロパティをキーに使うことができる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;配列&lt;/h1&gt;
&lt;pre lang=&quot;js&quot; class=&quot;highlight highlight-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;normalizr&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;statuses&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;statuses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;statuses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   entities: {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//     statuses: {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//       &quot;1&quot;: {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//         id: 1,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//         name: &quot;TODO&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//       }&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//     }&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   },&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   result: 1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// }&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;正規化したいデータが配列の場合、&lt;code&gt;schema.Array&lt;/code&gt;を&lt;code&gt;normalize&lt;/code&gt;に渡す。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;名前つきの配列&lt;/h1&gt;
&lt;pre lang=&quot;js&quot; class=&quot;highlight highlight-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;normalizr&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;statuses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;statuses&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;statuses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;statuses&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   entities: {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//     statuses: {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//       &quot;1&quot;: {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//         id: 1,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//         name: &quot;TODO&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//       }&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//     }&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   },&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   result: {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//     statuses: [1]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   }&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// }&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;statuses: [...]&lt;/code&gt;のような名前がついた配列の場合、&lt;code&gt;schema.Object&lt;/code&gt;を使ってどのプロパティに対してどのスキーマを使うかをマッピングすることで正規化できるようになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ネストしたオブジェクト&lt;/h1&gt;
&lt;pre lang=&quot;js&quot; class=&quot;highlight highlight-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;normalizr&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;statuses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;normalizrの使い方を理解する&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tasks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;statuses&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tasks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;statuses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;statuses&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   entities: {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//     tasks: {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//       &quot;1&quot;: {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//         id: 1,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//         title: &quot;normalizrの使い方を理解する&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//       }&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//     }&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//     statuses: {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//       &quot;1&quot;: {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//         id: 1,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//         name: &quot;TODO&quot;,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//         tasks: [1]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//       }&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//     }&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   },&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   result: {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//     statuses: [1]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   }&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// }&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;ネストしたオブジェクトをnormalizrで正規化すると、フラットな構造に変換される。&lt;/li&gt;
&lt;li&gt;task用のスキーマを用意し、status用のスキーマに渡すことで、ネストしたtaskの配列を正規化している。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>normalizrの使い方</title>
    <updated>2019-04-12T20:23:00+09:00</updated>
    <dc:date>2019-04-12T20:23:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/365/</id>
    <link href="https://blog.naoty.dev/365/"/>
    <summary>&lt;h1&gt;状況&lt;/h1&gt;
&lt;p&gt;Echoでデータベースに接続するときなどに環境変数を使ってデータベースのホスト名などの情報を取得したい。&lt;/p&gt;
&lt;h1&gt;問題&lt;/h1&gt;
&lt;p&gt;必要なときに都度&lt;code&gt;os.Getenv&lt;/code&gt;で環境変数の値を取得すると、各ハンドラーで同じようなコードを何度も書くことになる。&lt;/p&gt;
&lt;p&gt;また、環境変数が設定されていないときのデフォルト値を設定したい場合や&lt;code&gt;string&lt;/code&gt;以外の型に変換したい場合、さらにコード量が増えてしまう。&lt;/p&gt;
&lt;h1&gt;解決&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kelseyhightower/envconfig&quot;&gt;kelseyhightower/envconfig&lt;/a&gt;を使って環境変数を簡単に扱えるようにし、すべてのハンドラーからカスタムコンテキストを通して環境変数にアクセスできるようにした。&lt;/p&gt;
&lt;pre lang=&quot;go&quot; class=&quot;highlight highlight-go&quot;&gt;&lt;span class=&quot;c&quot;&gt;// config.go&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DatabaseHost&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`split_words:&quot;true&quot;`&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DatabaseName&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`split_words:&quot;true&quot;`&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DatabasePassword&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`split_words:&quot;true&quot;`&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DatabasePort&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;    &lt;span class=&quot;s&quot;&gt;`split_words:&quot;true&quot;`&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DatabaseUser&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`split_words:&quot;true&quot;`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;go&quot; class=&quot;highlight highlight-go&quot;&gt;&lt;span class=&quot;c&quot;&gt;// server.go&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envconfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fatal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;DATABASE_HOST&lt;/code&gt;のような環境変数に&lt;code&gt;Config&lt;/code&gt;という構造体からアクセスできるようにしている。&lt;code&gt;config.DatabaseHost&lt;/code&gt;のようにアクセスできるようになる。&lt;code&gt;string&lt;/code&gt;型であれば&lt;code&gt;os.Getenv&lt;/code&gt;でも問題ないけど、&lt;code&gt;int&lt;/code&gt;型や&lt;code&gt;bool&lt;/code&gt;型の場合は変換処理が面倒なのでenvconfigを使っている。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;split_words=&quot;true&quot;&lt;/code&gt;というアノテーションをつけることで、スネークケースからキャメルケースに変換している。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;envconfig.Process&lt;/code&gt;の第1引数は環境変数のプレフィックスになっている。&lt;code&gt;envconfig.Processs(&quot;database&quot;, &amp;amp;config)&lt;/code&gt;とすると、&lt;code&gt;config.Host&lt;/code&gt;で環境変数&lt;code&gt;DATABASE_HOST&lt;/code&gt;にアクセスできるようになる。必要なければ空文字でいい。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;go&quot; class=&quot;highlight highlight-go&quot;&gt;&lt;span class=&quot;c&quot;&gt;// custom_context.go&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomContext&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomContextMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandlerFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandlerFunc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CustomContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConfigMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MiddlewareFunc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandlerFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandlerFunc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CustomContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;go&quot; class=&quot;highlight highlight-go&quot;&gt;&lt;span class=&quot;c&quot;&gt;// server.go&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CustomContextMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConfigMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;すべてのハンドラーから&lt;code&gt;Config&lt;/code&gt;にアクセスできるようにカスタムコンテキストを用意し、そのフィールドに&lt;code&gt;Config&lt;/code&gt;を追加する。&lt;/li&gt;
&lt;li&gt;カスタムコンテキストをデフォルトのコンテキストで拡張するため、middlewareを設定している。さらに、上で初期化した&lt;code&gt;Config&lt;/code&gt;をカスタムコンテキストのフィールドに追加するためのmiddlewareも設定している。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このように実装することで、以下のように簡単に環境変数にアクセスできるようになる。&lt;/p&gt;
&lt;pre lang=&quot;go&quot; class=&quot;highlight highlight-go&quot;&gt;&lt;span class=&quot;c&quot;&gt;// server.go&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/tasks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CustomContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;dsn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetDSN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;go&quot; class=&quot;highlight highlight-go&quot;&gt;&lt;span class=&quot;c&quot;&gt;// config.go&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetDSN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;%s:%s@tcp(%s:%i)/%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DatabaseUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DatabasePassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DatabaseHost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DatabasePort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DatabaseName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Config&lt;/code&gt;は&lt;code&gt;CustomContext&lt;/code&gt;の匿名フィールドなので、&lt;code&gt;CustomContext&lt;/code&gt;から直接&lt;code&gt;Config&lt;/code&gt;のメソッドである&lt;code&gt;GetDSN&lt;/code&gt;を呼ぶことができる。&lt;/li&gt;
&lt;li&gt;上で説明したとおり、&lt;code&gt;c.DatabaseUser&lt;/code&gt;などは環境変数&lt;code&gt;DATABASE_USER&lt;/code&gt;などから値を取得している。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Echoで環境変数を使い回す</title>
    <updated>2019-04-01T23:25:00+09:00</updated>
    <dc:date>2019-04-01T23:25:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/364/</id>
    <link href="https://blog.naoty.dev/364/"/>
    <summary>&lt;h1&gt;課題&lt;/h1&gt;
&lt;p&gt;ヘルスチェックによってWebアプリケーションが依存するDBなどのサービスの健康状態もチェックすると、Webアプリケーションが正常であっても依存するサービスが異常である限りヘルスチェックが失敗することになり、サービス全体に影響が出てしまう。また、ECSでは、ヘルスチェックが失敗したコンテナは再起動することになるため、依存するサービスが失敗している限り、コンテナが何度も再起動してしまう。&lt;/p&gt;
&lt;p&gt;一方で、Webアプリケーションが依存するサービスと正常に接続しているかどうかを確認するには、依存するサービスも合わせてヘルスチェックするしかない。外形監視サービスを使う場合、DBなど外部から直接アクセスできないサービスの状態を確認するにはWebアプリケーションを経由するしかない。&lt;/p&gt;
&lt;h1&gt;方針&lt;/h1&gt;
&lt;p&gt;ロードバランサー用のエンドポイントと外形監視用のエンドポイントを分ける。&lt;/p&gt;
&lt;p&gt;ロードバランサー用のエンドポイントでは、Webアプリケーションの健康状態のみを返すようにする。外形監視用のエンドポイントは依存するサービスも合わせてシステム全体の健康状態を返すようにする。&lt;/p&gt;
&lt;h1&gt;実装&lt;/h1&gt;
&lt;p&gt;Railsアプリの場合、&lt;a href=&quot;https://github.com/sportngin/okcomputer&quot;&gt;okcomputer&lt;/a&gt;というrubygemが使いやすい。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;okcomputer&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;gemをインストールするだけでエンドポイントが2つ定義される。&lt;code&gt;GET /okcomputer&lt;/code&gt;でRailsアプリの健康状態だけを返す。このエンドポイントをロードバランサー用のヘルスチェックに使う。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl http://localhost:3000/okcomputer
default: PASSED Application is running (0s)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また、&lt;code&gt;GET /okcomputer/all&lt;/code&gt;で依存するサービスの状態も含めて返す。カスタマイズすることで、Redisなど他のサービスもヘルスチェックできる。こちらのエンドポイントを外形監視用のヘルスチェックに使う。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl http://localhost:3000/okcomputer/all
Default Collection
  database: PASSED Schema version: 20190101000000 (0s)
  default: PASSED Application is running (0s)
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>ヘルスチェックのエンドポイントを分ける</title>
    <updated>2019-03-05T20:45:00+09:00</updated>
    <dc:date>2019-03-05T20:45:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/363/</id>
    <link href="https://blog.naoty.dev/363/"/>
    <summary>&lt;p&gt;3/1から.devドメインが一般公開されたので、さっそくnaoty.devをGoogle Domainsで購入した。1,400円/年だった。Google Domainsは初めて使ってみたけど、分かりやすくて簡単に購入できた。&lt;/p&gt;
&lt;p&gt;このホームページはGitHub pagesを使ってホスティングしているんだけど、Google Domainsで購入したドメインを設定するときに若干ハマったので、同じような人がいたら参考にしてもらいたい。&lt;/p&gt;
&lt;h1&gt;やること&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;GitHubの&lt;a href=&quot;https://help.github.com/en/articles/setting-up-an-apex-domain#configuring-a-records-with-your-dns-provider&quot;&gt;ヘルプ&lt;/a&gt;に書いてある通りにやる。Google Domainsで設定する場合は、Aレコードを設定すればいい。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;google-domains.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;google-domains.png&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;google domains&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;気長に待つ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ハマったところ&lt;/h1&gt;
&lt;p&gt;気長に待っても表示されない場合、自分の場合は自分のPCだけ何故かアクセスできなかったんだけど、原因をよく調べた結果、&lt;a href=&quot;http://pow.cx/&quot;&gt;Pow&lt;/a&gt;を使っていたためだった。&lt;/p&gt;
&lt;p&gt;PowはローカルにRackサーバーを立ててくれるツールで、&lt;code&gt;localhost&lt;/code&gt;以外のドメインでローカルのRailsサーバーにアクセスしたいとき（サブドメインを扱う場合とか）に便利なんだけど、デフォルトで&lt;code&gt;.dev&lt;/code&gt;をトップレベルドメインに使う（現在は&lt;code&gt;.test&lt;/code&gt;を使うことが推奨されているみたい）ため、naoty.devにアクセスしたときにPowのサーバーに転送されていたのだった。&lt;/p&gt;</summary>
    <title>ドメインをnaoty.devにした</title>
    <updated>2019-03-02T20:27:00+09:00</updated>
    <dc:date>2019-03-02T20:27:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/362/</id>
    <link href="https://blog.naoty.dev/362/"/>
    <summary>&lt;h1&gt;背景&lt;/h1&gt;
&lt;p&gt;AWSの構成管理にterraformを使っているんだけど、Lambda関数とそれに関連するAWSリソースの管理は&lt;a href=&quot;https://apex.run&quot;&gt;apex&lt;/a&gt;を使っている。apexの方がLambda関数のバージョニングができたり、コードの依存関係を簡単にzipにまとめてアップロードできたりして便利なのだ。&lt;/p&gt;
&lt;p&gt;apexには、&lt;code&gt;apex infra&lt;/code&gt;というコマンドがあり、Lambda関数にAWS関連するリソース（パーミッションとかCloudWatch Logsとか）を管理できる。実際には内部的にterraformを使っている。&lt;/p&gt;
&lt;h1&gt;課題&lt;/h1&gt;
&lt;p&gt;terraformで管理するリソースと&lt;code&gt;apex infra&lt;/code&gt;で管理するリソースに明確なボーダーラインを引くことは難しい。apexで管理するLambda関数はterraformで管理するさまざまなリソースと依存関係になっていることがほとんどだからだ。どこで何が管理されているのかわからなってくる。&lt;/p&gt;
&lt;h1&gt;方針&lt;/h1&gt;
&lt;p&gt;こういうときの考え方として、依存関係の方向性を単方向にすると良かったりする。&lt;code&gt;apex infra&lt;/code&gt;で管理するリソースはterraformで管理するリソースを参照することができるけど、逆にterraformで管理するリソースは&lt;code&gt;apex infra&lt;/code&gt;で管理するリソースを参照できない、というルールを作る。&lt;/p&gt;
&lt;h1&gt;実装&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;apex infra&lt;/code&gt;からterraformのリソースを参照するために&lt;code&gt;terraform_remote_state&lt;/code&gt;を使う。ここでは例として、apexで管理するLambda関数をterraformで管理するSNSトピックにsubscribeしたいとする。&lt;/p&gt;
&lt;pre lang=&quot;hcl&quot; class=&quot;highlight highlight-hcl&quot;&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;terraform_remote_state&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;global&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;backend&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s3&quot;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ap-northeast-1&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;bucket&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;my-terraform&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;global&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;hcl&quot; class=&quot;highlight highlight-hcl&quot;&gt;&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_sns_topic_subscription&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;lambda&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;topic_arn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${data.terraform_remote_state.global.my_topic}&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;protocol&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;lambda&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;endpoint&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${var.apex_function_arns[&quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;my_function&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;]}&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;SNSトピックのARNは事前に&lt;code&gt;output&lt;/code&gt;でremote stateとして公開しておく必要がある。&lt;/p&gt;
&lt;p&gt;こうすることで、terraform側からapexで管理するLambda関数を参照せずに済んでいる。Lambda関数を参照するリソースは&lt;code&gt;apex infra&lt;/code&gt;で管理し、そうでないリソースはterraformで管理するという方針でうまく整理できそうだ。&lt;/p&gt;</summary>
    <title>terraformとapex infraの依存関係</title>
    <updated>2019-02-28T23:52:00+09:00</updated>
    <dc:date>2019-02-28T23:52:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/361/</id>
    <link href="https://blog.naoty.dev/361/"/>
    <summary>&lt;p&gt;コンテナインスタンス内で自分自身のコンテナインスタンスIDをたまに取得したいときがあって、そういうときはコンテナインスタンスにログインして、こんな感じのコマンドを実行する。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; http://localhost:51678/v1/metadata | jq &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; .ContainerInstanceArn | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; 2
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;http://localhost:51678/v1/metadata&lt;/code&gt;はコンテナインスタンス内で動くecs-agentが公開しているエンドポイントで、メタデータを返してくれる。コンテナインスタンスIDを返してくれるわけではないので、ARNから強引に抽出していく。&lt;/p&gt;
&lt;p&gt;参考: &lt;a href=&quot;https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/ecs-agent-introspection.html&quot;&gt;https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/ecs-agent-introspection.html&lt;/a&gt;&lt;/p&gt;</summary>
    <title>自分のコンテナインスタンスIDを確認する</title>
    <updated>2019-02-24T10:56:00+09:00</updated>
    <dc:date>2019-02-24T10:56:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/360/</id>
    <link href="https://blog.naoty.dev/360/"/>
    <summary>&lt;p&gt;相変わらずUnityでVRゲームを作っている。自分を前後左右に移動させるスクリプトの書き方を学んだ。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;walk.gif&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;walk.gif&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;VR空間を歩いている様子&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;まず、一人称のプレイヤーを制御するには&lt;code&gt;CharacterController&lt;/code&gt;というコンポーネントを使う。これは&lt;code&gt;RigidBody&lt;/code&gt;のような物理特性を持たない、つまり重力のような力の影響を受けないけど、衝突判定を持ち、段差や斜面を移動できるような特性を持つ。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CharacterController&lt;/code&gt;コンポーネントを持つGame Objectに以下のようなスクリプトを追加する。&lt;/p&gt;
&lt;pre lang=&quot;csharp&quot; class=&quot;highlight highlight-csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Walk&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MonoBehaviour&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;velocity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharacterController&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Start&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharacterController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SimpleMove&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Camera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forward&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;velocity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Camera.main.transform.forward&lt;/code&gt;でカメラが向いている方向を単位ベクトルとして取得できる。単位ベクトルとは、距離が1となるベクトルのこと。&lt;/li&gt;
&lt;li&gt;単位ベクトルに速度&lt;code&gt;velocity&lt;/code&gt;を掛けることで、移動先へのベクトル（向きと大きさ）が計算できる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CharacterController&lt;/code&gt;の&lt;code&gt;SimpleMove&lt;/code&gt;関数に移動先へのベクトルを渡すと、y軸（上下）方向を無視して移動させることができる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unityやっててだんだんわかってきたけど、ベクトル（&lt;code&gt;Vector3&lt;/code&gt;）を使った計算が頻繁に必要になってくる。Unity側でやってくれる部分もあるけど、自分で実装しないといけない場面もけっこうあるんだな〜と思った。なので、ベクトルを使った計算や物理法則もゆっくり勉強していきたい。&lt;/p&gt;</summary>
    <title>前後左右に移動する</title>
    <updated>2019-02-17T18:06:00+09:00</updated>
    <dc:date>2019-02-17T18:06:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/359/</id>
    <link href="https://blog.naoty.dev/359/"/>
    <summary>&lt;p&gt;昨年末にOculus Goを買ってからVRゲームをいくつかやっているんだけど、自分でも作ってみたくなってきたので、UnityでVRゲームを作る勉強を始めた。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;hello_unity.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;hello_unity.jpg&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;Hello, Unity!&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;いまのところ&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873117577/&quot;&gt;UnityによるVRアプリケーション開発&lt;/a&gt;という本を写経している。この本はOculus Goがまだなかった2016年の本だけど、ちゃんと動作している。&lt;/p&gt;
&lt;p&gt;Oculus GoはAndroid端末なので、ビルドのための準備はそこまで苦労しなかった。ビルドのセットアップの具体的な手順はググると出てくるので、それでうまくいった。&lt;/p&gt;
&lt;p&gt;スクリーンショットやスクリーンキャストは&lt;code&gt;/storage/self/primary/oculus/Screenshots/&lt;/code&gt;や&lt;code&gt;/storage/self/primary/oculus/VideoShots/&lt;/code&gt;にあって&lt;code&gt;adb pull&lt;/code&gt;コマンドで取得できる。&lt;/p&gt;</summary>
    <title>UnityでVRやってる</title>
    <updated>2019-02-08T19:48:00+09:00</updated>
    <dc:date>2019-02-08T19:48:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/358/</id>
    <link href="https://blog.naoty.dev/358/"/>
    <summary>&lt;p&gt;Rustに慣れてくるにつれて、&lt;code&gt;Result&lt;/code&gt;型を使いこなすことで効率的にコードが書くことができそうということがわかってきた。ただ、いろんなメソッドがあり、それぞれ&lt;code&gt;Ok&lt;/code&gt;の場合と&lt;code&gt;Err&lt;/code&gt;の場合で挙動が異なるため、表にまとめることにした。&lt;/p&gt;
&lt;h1&gt;条件分岐&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;メソッド&lt;/th&gt;
&lt;th&gt;
&lt;code&gt;Ok&lt;/code&gt;の場合&lt;/th&gt;
&lt;th&gt;
&lt;code&gt;Err&lt;/code&gt;の場合&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;and&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数のResultを返す&lt;/td&gt;
&lt;td&gt;selfを返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;and_then&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数のクロージャを実行して結果のResultを返す&lt;/td&gt;
&lt;td&gt;selfを返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;or&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;selfを返す&lt;/td&gt;
&lt;td&gt;引数のResultを返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;or_else&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;selfを返す&lt;/td&gt;
&lt;td&gt;引数のクロージャを実行して結果のResultを返す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;and_then&lt;/code&gt;と似たメソッドとして&lt;code&gt;map&lt;/code&gt;がある。&lt;code&gt;map&lt;/code&gt;は&lt;code&gt;and_then&lt;/code&gt;とは違って、引数に渡すクロージャが値を返す。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;and_then&lt;/code&gt;の引数に渡すクロージャが返す&lt;code&gt;Result&lt;/code&gt;はエラーの型&lt;code&gt;E&lt;/code&gt;が元のエラーの型と一致する必要がある。まったく違う&lt;code&gt;Result&lt;/code&gt;型を返すことはできないということに注意する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;unwrap&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;メソッド&lt;/th&gt;
&lt;th&gt;
&lt;code&gt;Ok&lt;/code&gt;の場合&lt;/th&gt;
&lt;th&gt;
&lt;code&gt;Err&lt;/code&gt;の場合&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unwrap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;値を返す&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;Err&lt;/code&gt;に含まれるメッセージと共にpanicを起こす&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;expect&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;値を返す&lt;/td&gt;
&lt;td&gt;引数のメッセージと共にpanicを起こす&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unwrap_err&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;Ok&lt;/code&gt;の値を含むメッセージと共にpanicを起こす&lt;/td&gt;
&lt;td&gt;値を返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;expect_err&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数のメッセージと共にpanicを起こす&lt;/td&gt;
&lt;td&gt;値を返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unwrap_or&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;値を返す&lt;/td&gt;
&lt;td&gt;引数の値を返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unwrap_or_else&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;値を返す&lt;/td&gt;
&lt;td&gt;引数のクロージャを実行して結果の値を返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unwrap_or_default&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;値を返す&lt;/td&gt;
&lt;td&gt;値の型のデフォルト値を返す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</summary>
    <title>Result型のメソッドをまとめる</title>
    <updated>2019-01-25T22:32:00+09:00</updated>
    <dc:date>2019-01-25T22:32:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/357/</id>
    <link href="https://blog.naoty.dev/357/"/>
    <summary>&lt;p&gt;以下のように&lt;code&gt;Result&lt;/code&gt;型を返すメソッドの返り値を使わないと、コンパイラが&lt;code&gt;unused `std::result::Result` that must be used&lt;/code&gt;のような警告を出す。&lt;/p&gt;
&lt;pre lang=&quot;rust&quot; class=&quot;highlight highlight-rust&quot;&gt;&lt;span class=&quot;nn&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ls&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Result&lt;/code&gt;型を返すメソッドが失敗したとき、返り値を使わないとそれに気づくことができないため、必ず返り値を使うようにコンパイラが警告してくれる。&lt;/p&gt;
&lt;p&gt;返り値を使わないときは&lt;code&gt;expect&lt;/code&gt;を使う。このメソッドは&lt;code&gt;Result&lt;/code&gt;が&lt;code&gt;Ok&lt;/code&gt;であれば値を返し、&lt;code&gt;Err&lt;/code&gt;であれば引数のメッセージを表示してpanicを起こす。&lt;/p&gt;
&lt;pre lang=&quot;rust&quot; class=&quot;highlight highlight-rust&quot;&gt;&lt;span class=&quot;nn&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ls&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;failed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;あるいは、&lt;code&gt;?&lt;/code&gt;オペレータを使ってエラーをそのまま呼び出し元に転送することもできる。&lt;/p&gt;
&lt;pre lang=&quot;rust&quot; class=&quot;highlight highlight-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute_ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ls&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>Result型の返り値を使わないとき</title>
    <updated>2019-01-05T17:09:00+09:00</updated>
    <dc:date>2019-01-05T17:09:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/356/</id>
    <link href="https://blog.naoty.dev/356/"/>
    <summary>&lt;h1&gt;仕事&lt;/h1&gt;
&lt;p&gt;今年は昨年からのRailsアプリケーション開発と併行して、AWS上のサービスの保守・運用も行うようになった。主にやっていたことは以下のようなことだった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RailsアプリケーションをECS上で稼働させるための環境を整備した。主にDockerfileやデプロイフローの整理を行った。Asset precompileをビルド時ではなくデプロイ時に行うようにした変更がさまざまな要素が絡まり合ってけっこう大変だった記憶がある。&lt;/li&gt;
&lt;li&gt;社内Wikiや各開発者のローカルで管理されていた環境変数をパラメータストアにすべて移行した。僕が保守・運用をやるようになったのは前任者の退職がきっかけで、環境変数まわりの引き継ぎがかなり難しかったため、強いモチベーションで環境変数の管理方法を見直した。&lt;/li&gt;
&lt;li&gt;JenkinsからCircle CIに移行した。Circle CIについてはこの1年でだいぶ詳しくなったけど、少しCircle CIに寄せすぎている部分があるので、AWS CodeBuildなど他の選択肢を踏まえてバランスをとりたい。&lt;/li&gt;
&lt;li&gt;Datadogによる監視体制を整備した。SRE本を参考に何を監視すべきかを検討し、それをDatadogのTimeboardやScreenboardで可視化できるようにした。&lt;/li&gt;
&lt;li&gt;Terraformプロジェクトのリファクタリングをした。Terraformの実行環境をDockerベースにしたり、スケールしにくいmoduleを適切な粒度にするために&lt;code&gt;terraform state&lt;/code&gt;コマンドを使ったりした。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今年の初めはまったくAWSのことをわかっていなかったので、1年で大きく進歩したと思う。&lt;/p&gt;
&lt;h1&gt;プライベート&lt;/h1&gt;
&lt;p&gt;プライベートでの開発は昨年と比べるとサボリ気味だった。主な活動は以下のようなことだった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://github.com/naoty/homepage&quot;&gt;homepage&lt;/a&gt;&lt;/strong&gt;: gulpベースからGatzby.jsベースに書き直した。また、dependabotを導入したことでライブラリのアップデートが自動化され、GitHub pagesの運用コストがかなり小さくなった。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://github.com/naoty/reversibility_checker&quot;&gt;reversibility_checker&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href=&quot;https://github.com/naoty/batch_rollback&quot;&gt;batch_rollback&lt;/a&gt;&lt;/strong&gt;: Railsアプリケーションのmigrationを安全に行うためのrubygemを2つ書いた。結局、productionで採用してないけど、いずれ使えるときがきそう。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://github.com/naoty/slack-thread-webhook&quot;&gt;slack-thread-webhook&lt;/a&gt;&lt;/strong&gt;: Goの復習を兼ねて身近な問題を解決するために書いた。homepageのCIの通知で使っておりドッグフーディングしている。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、読んだ技術書では以下が特に印象に残っている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873117911/&quot;&gt;SRE本&lt;/a&gt;&lt;/strong&gt;: 今年からサービスの保守・運用を行うようになった自分にとって日々の仕事の指針となっている。Googleのエンジニアが日々どんなことを考えて開発しているのかがいろんな側面で追体験できるような感じで、自分の無力さを思い知らされた。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://tatsu-zine.com/books/clean-architecture&quot;&gt;Clean Architecture&lt;/a&gt;&lt;/strong&gt;: プログラミング言語に依存しないアーキテクチャの話でRailsではないアプリケーションを書くときの指針としてとても参考になった。自分のこれまでの経験則でわかっていたことを本書で丁寧に解説されていて、頭が整理された。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873117607/&quot;&gt;マイクロサービスアーキテクチャ&lt;/a&gt;&lt;/strong&gt;: 今の大きな技術的流れになっているマイクロサービスに入門するにあたって、背景を理解するために買った。いま携わっているモノリシックなサービスの運用とは異なる部分（監視とか）をいろいろな点で整理されていて、今後も折に触れて読み返したい本だった。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その他のトピックとしては、以下のようなことがあった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CourseraでMachine Learningのコースを修了した。以前から興味があった機械学習を勉強しようと思って、評判が高いコースを受講し、無事に最後までやり遂げることができた。修了後も少しずつ機械学習の勉強を進めていたけど、コードを書きたい自分としては少しスタイルが違うような気がして断念してしまった。とは言え、ちゃんとチャレンジした上で自分には向いていないということがわかって良かった。&lt;/li&gt;
&lt;li&gt;はじめてISUCONに参加した。結果的には予選を通過できなかったけど、データベースやRedisなど普段あまり深く理解できていない部分を勉強するいいきっかけになった。今後もISUCONに挑戦したい。&lt;/li&gt;
&lt;li&gt;Rails Girls Tokyo 10thのコーチをした。こうしたRubyコミュニティに顔を出すのは数年ぶりだったけど、久々にコミュニティ活動の面白さを感じれてよかった。普段はやらないようなことをあえてやってみるのも時には大事だなと思った。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>2018年振り返り</title>
    <updated>2018-12-30T21:30:00+09:00</updated>
    <dc:date>2018-12-30T21:30:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/355/</id>
    <link href="https://blog.naoty.dev/355/"/>
    <summary>&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;thread.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;thread.png&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;スレッド&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Slackへの通知をスレッド化するため、&lt;a href=&quot;https://github.com/naoty/slack-thread-webhook&quot;&gt;naoty/slack-thread-webhook&lt;/a&gt;という簡単なプロキシをGoで作った。&lt;/p&gt;
&lt;h1&gt;作った理由&lt;/h1&gt;
&lt;p&gt;CIからの通知をSlackに送るようにしていると、CIからの通知でchannelが埋まってしまうようなことがよくあると思う。しかも、複雑な処理をCI上で行うと、細かく分解されたジョブから大量の通知が来るようになる。そこで、こういった簡単なプロキシを作って同じworkflowの通知をスレッドにまとめようと考えた。&lt;/p&gt;
&lt;h1&gt;これは何か&lt;/h1&gt;
&lt;p&gt;slack-thread-webhookは&lt;code&gt;POST /hooks/&amp;lt;id&amp;gt;&lt;/code&gt;というエンドポイントを持っており、Slackのincoming webhookと同じリクエストボディを受け付ける。このエンドポイントにリクエストを送ると、初回はメッセージとしてSlackに転送し、同じ&lt;code&gt;&amp;lt;id&amp;gt;&lt;/code&gt;に二回以上送ると初回に送られたメッセージのスレッドに転送する。&lt;/p&gt;
&lt;p&gt;内部的には、Slackにスレッドとしてメッセージを送るために必要な親メッセージのtimestampを&lt;code&gt;&amp;lt;id&amp;gt;&lt;/code&gt;とともにRedisに保持するようにしている。&lt;/p&gt;
&lt;h1&gt;どう使うのか&lt;/h1&gt;
&lt;p&gt;上のスクショのようなCIの通知では、例えばCircle CIの&lt;code&gt;CIRCLE_WORKFLOW_ID&lt;/code&gt;のような一連のジョブで共通するIDを使って、以下のようにリクエストを送ることでスレッドに通知をまとめることができる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; EOS | curl -X POST -H &quot;Content-Type: application/json&quot; -d @- https://slack-thread-webhook.herokuapp.com/hooks/${CIRCLE_WORKFLOW_ID}
{
  &quot;attachments&quot;: [
    {
      &quot;title&quot;: &quot;Start&quot;,
      &quot;text&quot;: &quot;$(git log -1 --pretty='%an: %s')&quot;,
      &quot;footer&quot;: &quot;naoty/slack-thread-webhook | ${CIRCLE_BRANCH}&quot;
    }
  ]
}
EOS
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; EOS | curl -X POST -H &quot;Content-Type: application/json&quot; -d @- https://slack-thread-webhook.herokuapp.com/hooks/${CIRCLE_WORKFLOW_ID}
{
  &quot;attachments&quot;: [
    {
      &quot;color&quot;: &quot;good&quot;,
      &quot;title&quot;: &quot;Finish &amp;lt;${CIRCLE_BUILD_URL}|${CIRCLE_JOB}&amp;gt;&quot;
    }
  ]
}
EOS
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;どうやって始めるのか&lt;/h1&gt;
&lt;p&gt;Herokuで簡単に動かせるようにHeroku buttonを作った（ブログのCSSででかくなっちゃったけど面倒だからこのまま）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://heroku.com/deploy&quot;&gt;&lt;img src=&quot;https://www.herokucdn.com/deploy/button.svg&quot; alt=&quot;Deploy&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;また、Docker HubにDockerイメージを公開しているので、ECS等で動かす場合にはこちらを使うとセットアップしやすいと思う。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/naoty/slack-thread-webhook&quot;&gt;https://hub.docker.com/r/naoty/slack-thread-webhook&lt;/a&gt;&lt;/p&gt;</summary>
    <title>スレッド化できるSlack webhookを作った</title>
    <updated>2018-12-27T17:28:00+09:00</updated>
    <dc:date>2018-12-27T17:28:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/354/</id>
    <link href="https://blog.naoty.dev/354/"/>
    <summary>&lt;p&gt;DockerコンテナをHeroku上で実行したい場合、Heroku registryにDockerイメージをpushすることになる。これをCircle CIで行いたい。&lt;/p&gt;
&lt;p&gt;Heroku registryの認証はHeroku CLIか&lt;code&gt;docker login&lt;/code&gt;コマンドで行うことができるが、Heroku CLIのセットアップを&quot;Docker in Docker&quot;イメージ（ベースがalpine）上で行うのはけっこうたいへんなので、以下のように&lt;code&gt;docker login&lt;/code&gt;コマンドから行うと良い。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker login &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; _ &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HEROKU_API_KEY&lt;/span&gt; registry.heroku.com
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;$HEROKU_API_KEY&lt;/code&gt;は&lt;code&gt;heroku auth:token&lt;/code&gt;コマンドで取得したトークンを環境変数で設定しておく。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.circle/config.yml&lt;/code&gt;はこんな感じになる。&lt;/p&gt;
&lt;pre lang=&quot;yaml&quot; class=&quot;highlight highlight-yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Push image to Heroku registry&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;docker login -u _ -p $HEROKU_API_KEY registry.heroku.com&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;docker tag myapp registry.heroku.com/$HEROKU_APP/web/myapp&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;docker push registry.heroku.com/$HEROKU_APP/web/myapp&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>Circle CIからHeroku registryにpushする</title>
    <updated>2018-12-16T22:44:00+09:00</updated>
    <dc:date>2018-12-16T22:44:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/353/</id>
    <link href="https://blog.naoty.dev/353/"/>
    <summary>&lt;p&gt;このブログはGatsby.jsでビルドしてGitHub Pagesにホスティングしているんだけど、ビルドするために必要なライブラリを&lt;a href=&quot;https://dependabot.com/&quot;&gt;dependabot&lt;/a&gt;を使って自動的にアップデートするようにしたところ、とても快適になった。&lt;/p&gt;
&lt;p&gt;dependabotはOSSであれば無料で使うことができる。設定したスケジュールに従ってライブラリのアップデートが存在すれば以下のような感じでPull requestを自動的に送ってくれる。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;pull_requests.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;pull_requests.png&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;dependabotが送ってきたPull Request&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;さらにとてもよかったのが、マイナーアップデートであれば自動的にPull requestをmergeするといった、auto mergeの条件を細かく設定できたことだ。これによって大幅に運用の手間が抑えられる。&lt;/p&gt;
&lt;p&gt;このブログでは、&lt;code&gt;package.json&lt;/code&gt;で指定したversion specifierに従ったアップデートは自動的にmergeするようにし、そうでないメジャーアップデートなどは手動でmergeするようにしている。ちょうどさきほど&lt;a href=&quot;https://emotion.sh/&quot;&gt;emotion&lt;/a&gt;のメジャーアップデートを手動でmergeしていたところだった。breaking changeを含んでいたため、auto mergeにしないで正解だった。&lt;/p&gt;
&lt;p&gt;ライブラリのアップデートは忘れがちで、気づいたときにアップデートしようとすると大幅な変更を余儀なくなってしまう。GitHub Pagesで自分のページを運用している開発者にはdependabotのようなサービスをオススメしたい。&lt;/p&gt;</summary>
    <title>ブログで使うライブラリのアップデートを自動化する</title>
    <updated>2018-12-12T22:16:00+09:00</updated>
    <dc:date>2018-12-12T22:16:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/352/</id>
    <link href="https://blog.naoty.dev/352/"/>
    <summary>&lt;p&gt;Terraformを実行する方法としては、Homebrew等でインストールしてローカルで実行する方法と、&lt;a href=&quot;https://hub.docker.com/r/hashicorp/terraform/&quot;&gt;hashicorp/terraform&lt;/a&gt;のDockerイメージを使って実行する方法がある。&lt;/p&gt;
&lt;h1&gt;Dockerイメージ&lt;/h1&gt;
&lt;p&gt;Dockerイメージを使うことで実行するTerraformのバージョンをチームで統一することができる。また、CIでTerraformを簡単に実行できるようになるので、Dockerイメージを使うようにしている。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/hashicorp/terraform/&quot;&gt;hashicorp/terraform&lt;/a&gt;を使うときにはベースイメージとして使い、ソースコードを&lt;code&gt;ADD&lt;/code&gt;したDockerイメージを作っている。&lt;code&gt;ENTRYPOINT&lt;/code&gt;が&lt;code&gt;terraform&lt;/code&gt;に設定されているため、以下のようにしてデフォルトでシェルにログインできるようにしている。&lt;/p&gt;
&lt;pre lang=&quot;docker&quot; class=&quot;highlight highlight-docker&quot;&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; hashicorp/terraform:0.11.10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /terraform&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . /terraform/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;&quot;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;/bin/sh&quot;]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;CMD&lt;/code&gt;では&lt;code&gt;/bin/sh&lt;/code&gt;の前に&lt;code&gt;terraform init&lt;/code&gt;をしておくようなスクリプトを使うとより便利になると思う。&lt;/p&gt;
&lt;h1&gt;複数環境&lt;/h1&gt;
&lt;p&gt;本番環境やステージング環境といった環境ごとにtfstateを管理し環境間で共用するモジュールがある場合、以下のようなディレクトリ構成になると思う。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── modules
│   └── some_module
├── production
│   ├── main.tf
│   └── terraform.tfstate
└── staging
    ├── main.tf
    └── terraform.tfstate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こういった場合、環境ごとにDockerfileを用意するようにしている。&lt;/p&gt;
&lt;pre lang=&quot;docker&quot; class=&quot;highlight highlight-docker&quot;&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; hashicorp/terraform:0.11.10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /terraform/production&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ./production /terraform/production&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ./modules /terraform/modules&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;terraform get

&lt;span class=&quot;k&quot;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;&quot;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;/bin/sh&quot;]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;モジュールを利用するため&lt;code&gt;terraform get&lt;/code&gt;でモジュールを初期化した状態でDockerイメージをビルドする。ビルドする際には以下のようにDockerfileの場所とコンテキストを分けて指定する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker build -t my-terraform:production -f ./production/Dockerfile .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;環境ごとにDockerfileを用意する場合、docker-composeを使うとより簡単に管理できる。&lt;/p&gt;
&lt;pre lang=&quot;yaml&quot; class=&quot;highlight highlight-yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./production/Dockerfile&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my-terraform:production&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./production:/terraform/production&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./modules:/terraform/modules&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./staging/Dockerfile&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my-terraform:staging&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./staging:/terraform/staging&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./modules:/terraform/modules&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;これですべての環境のDockerイメージを簡単にビルドできる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker-compose build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Terraformを実行するときは環境を指定してDockerイメージを起動すればいい。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker-compose run --rm production
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>Terraformの実行環境</title>
    <updated>2018-12-02T11:41:00+09:00</updated>
    <dc:date>2018-12-02T11:41:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/351/</id>
    <link href="https://blog.naoty.dev/351/"/>
    <summary>&lt;p&gt;3年ほど使っていたiPhone 6からPixel 3に乗り換えた。&lt;/p&gt;
&lt;p&gt;ずっと小型のiPhoneが出るのを待っていたけどまったく出なかったので、iPhone 3GS以来ずっと使っていたiOSからAndroidに移行した。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;pixel3.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;pixel3.jpg&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;Pixel 3&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;また、これを機に7年ほど契約していたauからLINE mobileに移った。公式には動作確認済み端末には載っていなかったけど、ちゃんと動作した。&lt;/p&gt;
&lt;p&gt;LINE mobileを選んだ理由としては、回線速度に対してネットの評判がそこまで悪くなかったのと、料金体系がシンプルで分かりやすくて好印象だったのがある。&lt;/p&gt;</summary>
    <title>Pixel 3に乗り換えた</title>
    <updated>2018-11-21T21:06:00+09:00</updated>
    <dc:date>2018-11-21T21:06:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/350/</id>
    <link href="https://blog.naoty.dev/350/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/batch_rollback&quot;&gt;naoty/batch_rollback&lt;/a&gt;というrubygemを書いた。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;screencast.gif&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;screencast.gif&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;様子&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;これは&lt;code&gt;db:migrate&lt;/code&gt;でmigrateしたversionやステップ数を記録しておいて、&lt;code&gt;db:rollback&lt;/code&gt;でまとめてrollbackできるようにする。&lt;/p&gt;
&lt;h1&gt;モチベーション&lt;/h1&gt;
&lt;p&gt;このrubygemを書いた動機としては、ロールバックを安全に自動化したかった。Railsアプリケーションをロールバックするには&lt;code&gt;rails db:rollback&lt;/code&gt;を行うことになるが、そのとき問題になるのは&lt;code&gt;STEP&lt;/code&gt;をいくつにするかということがある。リリース時に&lt;code&gt;db:migrate&lt;/code&gt;したmigrationファイルがいくつあったかはリリースごとに異なるため、ロールバックを自動化する上で問題になる。&lt;/p&gt;
&lt;p&gt;そこで、&lt;code&gt;db:migrate&lt;/code&gt;時にmigrateされたバージョン数を記録しておき、&lt;code&gt;db:rollback&lt;/code&gt;の&lt;code&gt;STEP&lt;/code&gt;に指定するrubygemを書いた。&lt;/p&gt;
&lt;h1&gt;仕組み&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;db:migrate&lt;/code&gt;の前後にRakeタスクを追加し、migrationされたバージョンやステップを記録している。あるRakeタスクの前後に実行させたいRakeタスクを追加するには&lt;code&gt;Rake::Task#enhance&lt;/code&gt;を使う。&lt;code&gt;Railtie&lt;/code&gt;で&lt;code&gt;#enhance&lt;/code&gt;したい場合は&lt;code&gt;Railtie.rake_tasks&lt;/code&gt;ブロック内で行う。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;BatchRollback&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Railtie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Railtie&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rake_tasks&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:batch_rollback&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:pre_migration&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:post_migration&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;no&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;db:migrate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enhance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;batch_rollback:pre_migration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;batch_rollback:post_migration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;invoke&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;migrationされたバージョンやステップの記録はrubygem内に定義したちょっとしたmodelから行っている。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;BatchRollback&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MigrationStep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;こうしたmodelのためのテーブルを作成するには、migrationを使うわけにはいかないので、&lt;code&gt;ActiveRecord::ConnectionAdapters::SchemaStatements#create_table&lt;/code&gt;を利用する。このメソッドを使うとmigrationで使うDSLを使って簡単にテーブルを作成できる。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;BatchRollback&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MigrationStep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_table&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:current_version&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:target_version&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:step&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;こういったテクニックを組み合わせることで今回のrubygemを実装することができた。&lt;/p&gt;</summary>
    <title>db:migrateした分だけdb:rollbackするrubygemを書いた</title>
    <updated>2018-11-11T15:27:00+09:00</updated>
    <dc:date>2018-11-11T15:27:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/349/</id>
    <link href="https://blog.naoty.dev/349/"/>
    <summary>&lt;p&gt;これまでの開発を振り返ると、いろんなチームで繰り返し起きる障害のひとつとして、デプロイ時に行うカラムの追加/削除によってコードとの不整合がおきることがある。&lt;/p&gt;
&lt;p&gt;開発時はカラムの追加/削除をカジュアルに行ってしまうものの、本番環境にデプロイするときはデプロイする順番を慎重に検討する必要がある。&lt;/p&gt;
&lt;p&gt;ある程度経験を積んだプログラマーなら当然かもしれないけど、普段意識していることをまとめてみた。&lt;/p&gt;
&lt;h1&gt;カラム追加時&lt;/h1&gt;
&lt;p&gt;新しくカラムを追加するとき、&lt;code&gt;NOT NULL&lt;/code&gt;制約をつける場合は&lt;code&gt;DEFAULT&lt;/code&gt;もできるだけつけた方がいい。ただし、外部キー等&lt;code&gt;DEFAULT&lt;/code&gt;を決められない場合、&lt;code&gt;NOT NULL&lt;/code&gt;制約をつけずコード上ではカラムの値が空であることを意識してコードを書く。&lt;/p&gt;
&lt;p&gt;仮に&lt;code&gt;DEFAULT&lt;/code&gt;を指定せずに&lt;code&gt;NOT NULL&lt;/code&gt;制約をつけた場合、アプリケーション側でデフォルト値を設定するようなコードを書いたとしても、カラムが追加されてからそれがデプロイされるまでの間にレコードが追加されてしまい、エラーになってしまう。&lt;/p&gt;
&lt;p&gt;なので、&lt;code&gt;NOT NULL&lt;/code&gt;制約をつけずにカラムの値が空であることを意識してコードを書く。コードがデプロイされてからカラムの値が空ではないことを確認できたら、&lt;code&gt;NOT NULL&lt;/code&gt;制約をつける。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NOT NULL&lt;/code&gt;制約をつけるカラムを追加するデプロイは以下のように2段階に分けることが多い。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;NOT NULL&lt;/code&gt;制約をつけずにカラムを追加するmigrationとそのカラムを利用するコードをデプロイする。このとき、カラムが空になっているレコードもあることに注意する。&lt;/li&gt;
&lt;li&gt;スクリプト等ですべてのレコードのカラムが空じゃないことが確認できたら、&lt;code&gt;NOT NULL&lt;/code&gt;制約をつける。また、カラムが空でないことを前提にコードも修正する。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;カラム削除時&lt;/h1&gt;
&lt;p&gt;カラムの削除を伴うデプロイを行うとき、そのカラムを利用するコードが存在しないことを確認してから削除を行う必要がある。なので、カラムを削除するデプロイは以下のように2段階に分ける。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;削除予定のカラムを利用しないようにコードを修正してデプロイする。&lt;/li&gt;
&lt;li&gt;カラムを削除する。&lt;/li&gt;
&lt;/ol&gt;</summary>
    <title>デプロイに伴うデータ不整合を回避する</title>
    <updated>2018-11-10T00:06:00+09:00</updated>
    <dc:date>2018-11-10T00:06:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/348/</id>
    <link href="https://blog.naoty.dev/348/"/>
    <summary>&lt;p&gt;Railsでは、よく以下のようなコードを書いたり見たりする。メモ化って言うらしい。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;current_user&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@current_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;signed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;#current_user&lt;/code&gt;が呼ばれるまではDBへのアクセスは発生しない。そして、アクセスした結果を&lt;code&gt;@current_user&lt;/code&gt;に代入しておくことで、2回目以降の呼び出しではDBへのアクセスが発生しないようになっている。&lt;/p&gt;
&lt;p&gt;割とよく書きがちなこのコードだけど、非効率なケースがある。DBから取得した結果が&lt;code&gt;nil&lt;/code&gt;のケースだ。このケースだと、&lt;code&gt;@current_user&lt;/code&gt;は&lt;code&gt;nil&lt;/code&gt;のままなので&lt;code&gt;#current_user&lt;/code&gt;が呼び出されるたびにDBに再度アクセスすることになる。&lt;/p&gt;
&lt;p&gt;DBにアクセスした結果&lt;code&gt;nil&lt;/code&gt;だとわかっているなら、2回目以降はDBにアクセスしなくていいだろう。というわけで、こんな感じで直す。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;current_user&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@current_user_exists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@current_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;signed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@current_user_exists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@current_user&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;以前のものとは見栄えが悪くなったけど、より効率的になった。もっとシンプルに書けそうな気はしている。&lt;/p&gt;</summary>
    <title>非効率なメモ化の改善</title>
    <updated>2018-10-09T22:52:00+09:00</updated>
    <dc:date>2018-10-09T22:52:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/347/</id>
    <link href="https://blog.naoty.dev/347/"/>
    <summary>&lt;p&gt;ECSサービスを作るとき、いくつかパターンがあることに気づいたのでメモ。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;コンテナのtagごとに作るパターン&lt;/li&gt;
&lt;li&gt;コマンドごとに作るパターン&lt;/li&gt;
&lt;li&gt;環境変数の組み合わせごとに作るパターン&lt;/li&gt;
&lt;li&gt;スケールアウトの粒度ごとに作るパターン&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;コンテナのtag&lt;/h1&gt;
&lt;p&gt;Dockerコンテナには、コミットIDをtagにするのと同時に、&lt;code&gt;master&lt;/code&gt;と&lt;code&gt;develop&lt;/code&gt;ブランチではブランチ名をtagに加えている。productionのappサービスは&lt;code&gt;master&lt;/code&gt;のtagを使うようにタスク定義を作ってるし、stagingのappサービスは&lt;code&gt;develop&lt;/code&gt;のtagを使うようにタスク定義を作っている。それぞれタスク定義が分かれているのでサービスも分かれている。&lt;/p&gt;
&lt;h1&gt;コマンド&lt;/h1&gt;
&lt;p&gt;同じDockerコンテナを使っていた場合でも、例えばrailsサービスとsidekiqサービスのように別々のサービスを起動させることがある。こういう場合もそれぞれコマンドごとにタスク定義を作ってサービスを分けることになる。&lt;/p&gt;
&lt;h1&gt;環境変数の組み合わせ&lt;/h1&gt;
&lt;p&gt;同じDockerコンテナで同じコマンドを実行する場合でも、環境変数を使って例えばDBの接続先やDB名といった外部サービスを変えることがある。環境変数はタスク定義で指定するので、利用する環境変数の組み合わせごとにタスク定義を作り、サービスを作ることになる。&lt;/p&gt;
&lt;p&gt;とはいえ、環境変数の指定方法はいくつか考えられるし、サービスディスカバリを使って外部サービスを参照することで環境変数を使わない方法も考えられるので、避けられるかもしれない。&lt;/p&gt;
&lt;h1&gt;スケールアウト&lt;/h1&gt;
&lt;p&gt;特定のパスの負荷が高い場合などに専用のサービスを作って、部分的にスケールアウトさせるということも考えられそう。場合によってはタスク定義も分けて割り当てるリソースを増やすなど最適化させることもありそう。&lt;/p&gt;</summary>
    <title>ECSサービスの分け方</title>
    <updated>2018-10-02T21:22:00+09:00</updated>
    <dc:date>2018-10-02T21:22:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/346/</id>
    <link href="https://blog.naoty.dev/346/"/>
    <summary>&lt;p&gt;AWSのリソースをどうネーミングするのがいいか地味に悩む。なので、一度ちゃんと考えてみた。&lt;/p&gt;
&lt;h1&gt;リソース名の要素&lt;/h1&gt;
&lt;p&gt;自分が扱っているプロダクトでは、リソース名を構成する要素を分解してみると、以下のような感じになる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プロダクトのコードネーム&lt;/li&gt;
&lt;li&gt;AWSサービス名：&lt;code&gt;ec2&lt;/code&gt;, &lt;code&gt;service&lt;/code&gt;など&lt;/li&gt;
&lt;li&gt;環境：&lt;code&gt;prod&lt;/code&gt;, &lt;code&gt;stg&lt;/code&gt;など&lt;/li&gt;
&lt;li&gt;リソースの種類：&lt;code&gt;api&lt;/code&gt;, &lt;code&gt;assets&lt;/code&gt;など&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この中だと「プロダクトのコードネーム」「AWSサービス名」はあってもなくてもよさそう。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;prod&lt;/code&gt;, &lt;code&gt;stg&lt;/code&gt;といった環境名は必要なケースと不要なケースがありそう。例えば、EC2インスタンスやS3バケットでは環境ごとに異なるものなので、環境名をつけることになる。一方、IAMのような権限まわりの設定はアプリケーションの実行環境とは別に考えられるものもあるし、SESのようなすべての環境で共通して利用するものも環境名をつけなくていいはず。&lt;/p&gt;
&lt;p&gt;リソースの種類は複数のリソースを識別するために必要になるけど、識別する必要がなければなくてもいい。&lt;/p&gt;
&lt;h1&gt;要素の順&lt;/h1&gt;
&lt;p&gt;「環境」と「リソースの種類」が必要そうなのはわかったので、どちらを先に書くかを決める必要があるけど、環境が後かなーという気がする。どっちでもいいと思う。&lt;/p&gt;
&lt;h1&gt;スタイル&lt;/h1&gt;
&lt;p&gt;リソース名のスタイルは&lt;code&gt;UpperCamelCase&lt;/code&gt;, &lt;code&gt;camelCase&lt;/code&gt;, &lt;code&gt;snake_case&lt;/code&gt;, &lt;code&gt;kebab-case&lt;/code&gt;のうちどれなのか。AWSのドキュメントを読むと、&lt;code&gt;kebab-case&lt;/code&gt;が多い。ただ、IAMだと&lt;code&gt;UpperCamelCase&lt;/code&gt;が使われているので、サービスごとに使い分けるのがよさそう。&lt;/p&gt;
&lt;h1&gt;略称&lt;/h1&gt;
&lt;p&gt;EC2のような公式の略称は使ってもいいけど、基本的には略称は避けるべきだと思う。上述の&lt;code&gt;prod&lt;/code&gt;も&lt;code&gt;production&lt;/code&gt;とした方がいいと思う。&lt;/p&gt;
&lt;h1&gt;まとめ&lt;/h1&gt;
&lt;p&gt;これまでの話をまとめると、たいていのケースでは&lt;code&gt;&amp;lt;リソースの種類&amp;gt;-&amp;lt;環境&amp;gt;&lt;/code&gt;というネーミングにするのがよさそう。例えば&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EC2インスタンス：&lt;code&gt;production&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;ECSサービス：&lt;code&gt;api-production&lt;/code&gt;, &lt;code&gt;sidekiq-production&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;S3バケット：&lt;code&gt;assets-production&lt;/code&gt;, &lt;code&gt;uploads-production&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;IAMロール：&lt;code&gt;developer&lt;/code&gt;, &lt;code&gt;ecs-task&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;というようなネーミングになりそう。まだ考慮できていないケースがありそうなので、随時アップデートしていきたい。&lt;/p&gt;</summary>
    <title>AWSのリソースのネーミング</title>
    <updated>2018-10-01T20:35:00+09:00</updated>
    <dc:date>2018-10-01T20:35:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/345/</id>
    <link href="https://blog.naoty.dev/345/"/>
    <summary>&lt;p&gt;ECSでsidekiqをコンテナとして実行するとき、ALBからHTTP経由でヘルスチェックができないので、Dockerのヘルスチェックを利用するといい。&lt;/p&gt;
&lt;p&gt;Dockerのヘルスチェックはシェルスクリプトで行うことができ、終了ステータスが0ならhealthy、1ならunhealthyと判断する。そこで、sidekiqのpidfileを出力するように設定し&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;test -f sidekiq.pid
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;でヘルスチェックすればいい。&lt;/p&gt;
&lt;p&gt;sidekiqのDockerイメージはRailsアプリケーションのものを再利用することも多いだろうから、ECSではタスク定義内のコンテナ定義で下のようにヘルスチェックを指定する。&lt;/p&gt;
&lt;pre lang=&quot;json&quot; class=&quot;highlight highlight-json&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sidekiq&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sidekiq&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--pidfile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./sidekiq.pid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;healthCheck&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-f&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./sidekiq.pid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;</summary>
    <title>sidekiqコンテナのヘルスチェック</title>
    <updated>2018-09-28T22:41:00+09:00</updated>
    <dc:date>2018-09-28T22:41:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/344/</id>
    <link href="https://blog.naoty.dev/344/"/>
    <summary>&lt;p&gt;ISUCON 8に参加して予選敗退した。会社の同僚と「チームプロ開」として参加し、自分はアプリケーションを担当していた。結果的にベストスコアは16000くらいで終わった。悔しい結果になってしまったので、KPTして次回に活かしたい。&lt;/p&gt;
&lt;h1&gt;Keep&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;N+1クエリを直したり&lt;code&gt;SELECT * FROM reservations&lt;/code&gt;のような全カラムを取得する箇所を直すなど、基本的な修正は短時間でできた。&lt;/li&gt;
&lt;li&gt;事前に確認しておいたRedisの導入がスムーズにできた。そこまで大きいインパクトはなかったけど。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git tag 1310&lt;/code&gt;のようにスコアをタグ付けする運用がけっこうよかった。failが続いた局面でどこまでrollbackすればいいか分かりやすかった。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Problem&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Macに開発環境をセットアップするのに時間がかかってしまった。普段はDocker中心の開発環境で仕事しているので、久々にMySQLをインストールしようとしたらハマってしまった。&lt;/li&gt;
&lt;li&gt;h2oからnginxへの移行や複数台構成への移行で時間がとられてしまった。アプリケーションの修正を開始したのは15:30くらいからになってしまった。&lt;/li&gt;
&lt;li&gt;ロックがボトルネックになっていることに気づかなかった。ベンチマークガチャとか言って思考停止していた。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Try&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;事前に開発環境をセットアップしておく。&lt;/li&gt;
&lt;li&gt;慣れない作業でハマったときは思い切ってやらない決断も必要。&lt;/li&gt;
&lt;li&gt;時間がなくてできなかったけど、実装を書き直したりスキーマを変更して根本的に改善できるようにしたい。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>ISUCON 8予選のKPT</title>
    <updated>2018-09-17T11:13:00+09:00</updated>
    <dc:date>2018-09-17T11:13:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/343/</id>
    <link href="https://blog.naoty.dev/343/"/>
    <summary>&lt;p&gt;Reactに慣れてきたので、ComponentをContainer ComponentとPresentational Componentに分けるという実装パターンを試している。&lt;/p&gt;
&lt;p&gt;Presentational ComponentはFunctional Componentで簡単に書けるけど、Container Componentの書き方がいまいち分かってなかったのでメモする。&lt;/p&gt;
&lt;pre lang=&quot;js&quot; class=&quot;highlight highlight-js&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Container&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 子コンポーネントに渡すprops&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// this.props.childrenは複数の可能性もあるので&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// React.cloneElement(this.props.children)はエラーになる。&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// childはテキストの可能性もあるためtype checkする&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cloneElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;このContainerでstateを管理し、子コンポーネントにprops経由で渡すようなイメージ。あとは、副作用を伴うアクションをContainerで定義しておいて、props経由で渡すこともありそう。&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;追記: 2018-09-06 12:30:00&lt;/h2&gt;
&lt;p&gt;上のような汎用的なContainer Componentを作るならHOCを使う方がいいかもしれない。&lt;/p&gt;
&lt;pre lang=&quot;jsx&quot; class=&quot;highlight highlight-jsx&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;default &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 引数のComponentをラップするComponentを返す&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 自身に渡されたpropsとstateをラップしたComponentに渡す&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;こっちの方がシンプルに書けそう。&lt;/p&gt;</summary>
    <title>Container Componentの作り方</title>
    <updated>2018-09-05T16:39:00+09:00</updated>
    <dc:date>2018-09-05T16:39:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/342/</id>
    <link href="https://blog.naoty.dev/342/"/>
    <summary>&lt;p&gt;このブログを&lt;a href=&quot;https://www.gatsbyjs.org&quot;&gt;Gatsby.js&lt;/a&gt;で書き直した。昨年11月にこのブログを作ったときはgulpとejsを組み合わせて自作していたんだけど、Gatsby.jsの練習のために作り直すことにした。&lt;/p&gt;
&lt;h2&gt;JAMstack&lt;/h2&gt;
&lt;p&gt;Gatsby.jsの練習をすることにしたきっかけとしては、&lt;a href=&quot;https://jamstack.org/&quot;&gt;JAMstack&lt;/a&gt;という考え方を知り興味を持ったことだった。JAMstackを簡単に説明すると、Webアプリケーションを作るときの以下のような方針のことを指しているんだと理解している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;サーバーサイドでHTMLをレンダリングしない。事前にHTMLをビルドして静的ファイルとしてCDNから配信する。&lt;/li&gt;
&lt;li&gt;データの取得はすべてクライアントサイドから行う。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;どこまでこの考え方が有効なのか分からないけど、ポストRailsの時代を見据えたときに筋の良さを感じたので、実践してみようと思った。&lt;/p&gt;
&lt;p&gt;JAMstackを実践するにあたって必要な静的サイトジェネレータの練習として、ブログをGatsby.jsで作ってみたということになる。&lt;/p&gt;
&lt;h2&gt;Gatsby.jsの感想&lt;/h2&gt;
&lt;p&gt;Reactは多少触っていたので、チュートリアルを一通りやればあとはすんなりブログの開発を進めることができた。WebpackとかBabelの面倒な設定は不要だったので、Reactの初心者でも扱えそうな気がした。&lt;/p&gt;
&lt;p&gt;また、Gatsby.jsではHTMLのビルド時に必要なMarkdownで書いたコンテンツやサーバーにあるデータはすべてGraphQLで取得するようになっているため、GraphQLの雰囲気をつかむのにもよかった。GraphQLの仕様とかあんまりわかってなくても問題なかった。&lt;/p&gt;</summary>
    <title>ブログをGatsby.jsで書き直した</title>
    <updated>2018-09-01T11:54:00+09:00</updated>
    <dc:date>2018-09-01T11:54:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/341/</id>
    <link href="https://blog.naoty.dev/341/"/>
    <summary>&lt;p&gt;Goで書いているWebアプリケーションをDockerイメージにするとき、multi-stage buildを使ってビルド用のイメージと実行用のイメージを分けると思う。実行用のイメージをalpine linuxベースにするとイメージのサイズが異常に小さくなる。&lt;/p&gt;
&lt;pre lang=&quot;docker&quot; class=&quot;highlight highlight-docker&quot;&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;golang&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;builder&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; CGO_ENABLED 0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /go/src/github.com/naoty/hello&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; go get github.com/pilu/fresh

&lt;span class=&quot;c&quot;&gt;# dep&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; Gopkg.toml Gopkg.lock /go/src/github.com/naoty/hello/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;dep ensure &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--vendor-only&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . /go/src/github.com/naoty/hello/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; alpine&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apk &lt;span class=&quot;nt&quot;&gt;--no-cache&lt;/span&gt; add ca-certificates 
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /root/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=builder /go/bin/hello /root/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;./hello&quot;]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;一方で、Goの開発では&lt;a href=&quot;https://github.com/pilu/fresh&quot;&gt;pilu/fresh&lt;/a&gt;を使ってファイルの更新時に自動的にビルドと実行をし直したい。だけど、multi-stage buildを使っていると、実行用のイメージにはGoのビルド環境がないため、少し工夫が必要になる。&lt;/p&gt;
&lt;p&gt;docker-composeを使うとき、&lt;code&gt;target&lt;/code&gt;オプションを使うとビルド用のコンテナまででビルドを中断できる。ただし、3.4からの機能なので&lt;code&gt;version&lt;/code&gt;を3.4以上にする必要がある。&lt;/p&gt;
&lt;pre lang=&quot;yaml&quot; class=&quot;highlight highlight-yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3.4&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;builder&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;fresh&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>multi-stage buildでのfreshの運用</title>
    <updated>2018-08-05T18:55:00+09:00</updated>
    <dc:date>2018-08-05T18:55:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/340/</id>
    <link href="https://blog.naoty.dev/340/"/>
    <summary>&lt;p&gt;最近、GoでWebアプリケーションを書く練習をしている。フレームワークとしてEchoを使っている。&lt;/p&gt;
&lt;p&gt;アセットをバイナリに埋め込むときいくつか選択肢があったけど、HTMLテンプレートのパースを実装しやすそうな&lt;a href=&quot;https://github.com/gobuffalo/packr&quot;&gt;packr&lt;/a&gt;を使ってみている。&lt;/p&gt;
&lt;p&gt;以下のようなテンプレートを用意する。&lt;/p&gt;
&lt;pre lang=&quot;html&quot; class=&quot;highlight highlight-html&quot;&gt;{{/* assets/views/layout.html */}}
{{define &quot;layout&quot; -}}
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ja&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Task&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    {{template &quot;content&quot; . -}}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
{{end}}
&lt;/pre&gt;
&lt;pre lang=&quot;html&quot; class=&quot;highlight highlight-html&quot;&gt;{{/* assets/views/index.html */}}
{{define &quot;index&quot; -}}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Here is content!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
{{end}}
&lt;/pre&gt;
&lt;p&gt;これらのテンプレートは以下のコマンドでバイナリに埋め込むことができる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ packr build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次に、EchoでHTMLをレンダリングするためのRendererを実装する。&lt;/p&gt;
&lt;pre lang=&quot;go&quot; class=&quot;highlight highlight-go&quot;&gt;&lt;span class=&quot;c&quot;&gt;// renderer/renderer.go&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Renderer is html/template renderer for Echo.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Renderer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;templates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Template&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// New parses templates in box and return a new Renderer.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Renderer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;templates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;templates&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;templates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Must&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;templates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;templates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;templates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Render renders HTML generated by template.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Must&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;templates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;layout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Must&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;templates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Must&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddParseTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExecuteTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;layout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;packr&lt;/code&gt;コマンドでバイナリに埋め込んだアセットは&lt;code&gt;box.String(filename)&lt;/code&gt;のように取得できる。これを使ってテンプレートをパースしていく。&lt;/p&gt;
&lt;p&gt;Rendererを初期化するときにテンプレートをすべてパースしておいて、レンダリング時にネストしたテンプレートを組み立てて&lt;code&gt;Execute&lt;/code&gt;するようにしている。&lt;/p&gt;
&lt;p&gt;最後に、このRendererを初期化してEchoに設定する。&lt;/p&gt;
&lt;pre lang=&quot;go&quot; class=&quot;highlight highlight-go&quot;&gt;&lt;span class=&quot;c&quot;&gt;// main.go&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;viewsBox&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewBox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./assets/views&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Renderer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewsBox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>HTMLテンプレートをpackrでバイナリに埋め込む</title>
    <updated>2018-07-29T17:55:00+09:00</updated>
    <dc:date>2018-07-29T17:55:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/339/</id>
    <link href="https://blog.naoty.dev/339/"/>
    <summary>&lt;p&gt;ロジスティック回帰など分類を行うアルゴリズムがちゃんとトレーニングデータを分類できているか確認するため、決定境界をプロットする方法を学んだ。そのメモをブログに残す。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;np.meshgrid()&lt;/code&gt;で格子点を取得する。しかも、&lt;code&gt;np.arange()&lt;/code&gt;などを使ってできるだけ細かく格子点を取得する。&lt;/li&gt;
&lt;li&gt;格子点を分類器に適用するため、トレーニングデータの形状に変換する。&lt;/li&gt;
&lt;li&gt;格子点に対して分類を予測する。&lt;/li&gt;
&lt;li&gt;格子点とその分類の予測を&lt;code&gt;plt.contourf()&lt;/code&gt;を使って等高線としてプロットする。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;格子点の取得&lt;/h2&gt;
&lt;pre lang=&quot;python&quot; class=&quot;highlight highlight-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;meshgrid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ok'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xlimit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ylimit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;meshgrid.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;meshgrid.png&quot; alt=&quot;meshgrid&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上のように&lt;code&gt;np.meshgrid()&lt;/code&gt;を使うと、2つの配列&lt;code&gt;x1&lt;/code&gt;と&lt;code&gt;x2&lt;/code&gt;からなる平面上にある格子点を取得できる。&lt;/p&gt;
&lt;p&gt;この格子点の間隔を小さくすると、&lt;code&gt;x1&lt;/code&gt;と&lt;code&gt;x2&lt;/code&gt;からなる平面上の「すべての点」を擬似的に再現できる。&lt;/p&gt;
&lt;pre lang=&quot;python&quot; class=&quot;highlight highlight-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 以下同じ
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;dense_meshgrid.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;dense_meshgrid.png&quot; alt=&quot;dense meshgrid&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;格子点の変換&lt;/h2&gt;
&lt;p&gt;ある平面上の「すべての点」を分類器に適用すると、平面上に分類した結果をマッピングできるようになる。&lt;/p&gt;
&lt;p&gt;そのために格子点をトレーニングデータの形状に変換する。つまり、$(x_1, x_2)$のようにする。&lt;/p&gt;
&lt;pre lang=&quot;python&quot; class=&quot;highlight highlight-python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# flatにする
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X1_flatten&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ravel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X2_flatten&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ravel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 結合して行列にする
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X1_flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X2_flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 行方向がトレーニングデータ、列方向がフィーチャーになるように転置する
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;
&lt;/pre&gt;
&lt;h2&gt;格子点を分類器に適用する&lt;/h2&gt;
&lt;pre lang=&quot;python&quot; class=&quot;highlight highlight-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;上で分類器に適用できるように変換できたので、あとは予測する。&lt;/p&gt;
&lt;h2&gt;等高線図でプロットする&lt;/h2&gt;
&lt;pre lang=&quot;python&quot; class=&quot;highlight highlight-python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# プロットできるように形状を揃える
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contourf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'RdBu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xlim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ylim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;decision_regions.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;decision_regions.png&quot; alt=&quot;decision regions&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;（上図は適当な関数を適用しただけです）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;plt.contourf()&lt;/code&gt;は等高線図を引きつつ、領域を塗りつぶしてくれるので決定境界をプロットするのに便利。&lt;/p&gt;</summary>
    <title>決定境界のプロット</title>
    <updated>2018-07-22T15:02:00+09:00</updated>
    <dc:date>2018-07-22T15:02:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/338/</id>
    <link href="https://blog.naoty.dev/338/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873118413/&quot;&gt;https://www.oreilly.co.jp/books/9784873118413/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Courseraで機械学習について学んだものの、実務やKaggleで実践するにはPythonを使って機械学習のコードを書けるようになる必要がある。Pythonで機械学習のコードを書くとき、numpy、matplotlib、pandas、scikit-learnといったパッケージを使うことになる。&lt;/p&gt;
&lt;p&gt;この本はこうしたよく使うパッケージの使い方をかなり詳しく説明している。他の機械学習に関する本では、こうしたパッケージの使い方は分かっている前提で機械学習のアルゴリズムやその実装方法に字数が割かれるため、この本を前もって読んでおくと効率がいい気がする。&lt;/p&gt;</summary>
    <title>「Pythonデータサイエンスハンドブック」を読んでいる</title>
    <updated>2018-07-21T16:35:00+09:00</updated>
    <dc:date>2018-07-21T16:35:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/337/</id>
    <link href="https://blog.naoty.dev/337/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://naoty.github.io/posts/29.html&quot;&gt;CourseraのMachine Learningを受講しはじめた&lt;/a&gt;で書いた通り、5月からCourseraでMachine Learningのコースを受講していたけど、今日無事に11週間にわたるレッスンを終え修了することができた。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;thank_you_from_andrew_ng.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;thank_you_from_andrew_ng.png&quot; alt=&quot;thank you from Andrew Ng&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1週間で1 week分のレクチャーと課題をこなしていったけど、無理のないペースでなんとか続けることができた。Togglを使って勉強時間を計測した結果、合計で55時間かけていた。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;toggl.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;toggl.png&quot; alt=&quot;toggl&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;勉強中はJupyter NotebookにMarkdownとLaTeXでメモをとったり、計算が必要なときはノート（物理）に数式や行列を書いてみたりしていた。ほぼ毎週あるQuizやプログラミングの課題はちゃんと理解していないと合格できないレベルになっていてかなり苦しめられた。でも、手を動かすことで着実に理解を深めることができた。&lt;/p&gt;
&lt;p&gt;それぞれの機械学習のアルゴリズム（線形回帰、ロジスティック回帰、ニューラルネットワーク、SVM等）は本などで学習することは可能だけど、このコースではそれだけに留まらず、実務の現場で必要となるタスク全般を理解できたのが特によかった。例えば、教授がよく言っていたけど、貴重なエンジニアのリソースをムダにしないために何に時間を使うべきかを把握することが重要だと言っていて、そのために学習曲線をプロットしたり、シーリング分析を行ったりするような話は学習できて本当によかったと思う。&lt;/p&gt;
&lt;p&gt;今後はPythonを使って機械学習のアルゴリズムを実装できるようになりたいので、よさげな技術書で勉強したりKaggleに挑戦してみたりしたいと思う。&lt;/p&gt;</summary>
    <title>CourseraのMachine Learningを修了した</title>
    <updated>2018-07-08T14:24:00+09:00</updated>
    <dc:date>2018-07-08T14:24:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/336/</id>
    <link href="https://blog.naoty.dev/336/"/>
    <summary>&lt;p&gt;最近、ECSで運用しているRailsアプリの起動時にパラメータストアから環境変数を取得して設定するようにした。&lt;/p&gt;
&lt;h2&gt;背景&lt;/h2&gt;
&lt;p&gt;それまでは環境変数はコンテナ定義に指定されていたが、それをパラメータストアを使った方法に移行した。理由としては、機密情報をコンテナ定義の環境変数に設定するのは推奨されていないからだ。&lt;/p&gt;
&lt;p&gt;また、開発環境で利用する環境変数が開発者によってバラバラに管理されていた（ローカルの&lt;code&gt;.env&lt;/code&gt;ファイルによって管理されていた）ため、新しく開発に参加する際に正しい環境変数が何なのか把握するのが大変だった。&lt;/p&gt;
&lt;h2&gt;パラメータストア&lt;/h2&gt;
&lt;p&gt;パラメータストアとは、AWSが提供する階層型ストレージのことで、設定のような軽いデータを安全に管理できる。KMSによる暗号化も可能なので機密情報を含む環境変数の管理に向いていそうだと判断した。&lt;/p&gt;
&lt;h2&gt;環境変数をパラメータストアに移す&lt;/h2&gt;
&lt;p&gt;バラバラに管理されていた環境変数をパラメータストアに移した。パラメータストアは階層構造になっており、ある階層下にある値をまとめて取得することができる。&lt;/p&gt;
&lt;p&gt;今回は&lt;code&gt;/&amp;lt;アプリケーション名&amp;gt;/&amp;lt;実行環境&amp;gt;/&amp;lt;環境変数名&amp;gt;&lt;/code&gt;という階層で環境変数を管理することにした。例えば、&lt;code&gt;/myapp/production/PASSWORD&lt;/code&gt;のような感じだ。&lt;/p&gt;
&lt;h2&gt;コンテナからパラメータストアにアクセスする&lt;/h2&gt;
&lt;p&gt;ECSコンテナからパラメータストアにアクセスするには権限が必要になる。パラメータストアへの移行と同時並行でECSコンテナでIAMロールを使うように修正していたので、このIAMロールにパラメータストアにアクセスするためのポリシーを付与した。&lt;/p&gt;
&lt;h2&gt;Rails起動時に環境変数をセットする&lt;/h2&gt;
&lt;p&gt;環境変数はRailsの起動プロセスの中で参照されることがある（データベースとの接続など）ため、起動プロセスの初期に環境変数を設定する必要がある。&lt;/p&gt;
&lt;p&gt;いくつかRubygemがあるようだったが、たいした実装ではないので簡単なコードを書いて環境変数を起動プロセスの初期に設定するようにした。&lt;/p&gt;
&lt;p&gt;注意点としては、パラメータストアから取得した環境変数よりも既存の環境変数を優先させた点だ。ECSからタスクとしてコンテナを起動するときなど、コンテナ定義から環境変数を指定することでパラメータストアの環境変数を上書きできると便利なケースがあったからだ。また、開発環境では&lt;code&gt;docker-compose.yml&lt;/code&gt;で指定した環境変数を優先することも可能になる。&lt;/p&gt;</summary>
    <title>パラメータストアで環境変数を管理する</title>
    <updated>2018-06-08T21:57:00+09:00</updated>
    <dc:date>2018-06-08T21:57:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/335/</id>
    <link href="https://blog.naoty.dev/335/"/>
    <summary>&lt;p&gt;Circle CI 2.0で導入されたworkflowを使うと、Slackへの通知にどのjobが完了したのかが含まれていなくて困ることがあった。特に失敗したときにどのjobが失敗したのかSlackでは分からないのが不便だった。&lt;/p&gt;
&lt;p&gt;そこで、Slackへの通知を分かりやすくするための設定をいくつかしてみたところ、劇的によくなったので紹介したい。&lt;/p&gt;
&lt;h1&gt;通知スクリプトを自作する&lt;/h1&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash -e&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOS&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
{
  &quot;attachments&quot;: [
    {
      &quot;title&quot;: &quot;Success&quot;,
      &quot;title_link&quot;: &quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CIRCLE_BUILD_URL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;,
      &quot;text&quot;: &quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\`&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;workflow/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CIRCLE_STAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\`&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; in &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CIRCLE_PROJECT_USERNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CIRCLE_PROJECT_REPONAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; (&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CIRCLE_BRANCH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;)&quot;,
      &quot;mrkdwn_in&quot;: [&quot;text&quot;],
      &quot;color&quot;: &quot;good&quot;
    }
  ]
}
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOS
&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;

curl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--data&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SLACK_WEBHOOK_URL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Circle CIの連携時に生成されるWebhookを使って通知を送るスクリプトを書いた。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;attachments&lt;/code&gt;フィールドを使ってリッチなメッセージを作る。&lt;/li&gt;
&lt;li&gt;環境変数&lt;code&gt;CIRCLE_STAGE&lt;/code&gt;には、workflow内で実行中のjob名が入っているため、これを使ってどのjobが成功したのか失敗したのかを通知できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;通知スクリプトを設定する&lt;/h1&gt;
&lt;pre lang=&quot;yaml&quot; class=&quot;highlight highlight-yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./.circleci/notify-success&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./.circleci/notify-failure&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;on_fail&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;各jobの最後のstepに成功時の通知を送るスクリプトを設定する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;when: on_fail&lt;/code&gt;を設定すると、先に実行されたstepが失敗したときに呼ばれるstepを設定できる。それを利用して、失敗時の通知を送るスクリプトを設定する。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Circle CIのSlackへの通知を分かりやすくする</title>
    <updated>2018-06-08T16:23:00+09:00</updated>
    <dc:date>2018-06-08T16:23:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/334/</id>
    <link href="https://blog.naoty.dev/334/"/>
    <summary>&lt;p&gt;docker-composeを使って開発をしているとき、webpack-dev-serverを別サービスとして起動させたくなる。Rails + webpackerの環境でうまく実現できたのでメモを残しておく。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;のうちポイントとなる箇所だけ抽出した。&lt;/p&gt;
&lt;pre lang=&quot;yaml&quot; class=&quot;highlight highlight-yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;rails&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;WEBPACKER_DEV_SERVER_HOST&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;webpack-dev-server&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./public/packs:/myapp/public/packs&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;webpack-dev-server&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;webpack-dev-server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;WEBPACKER_DEV_SERVER_HOST&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;3035:3035&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./public/packs:/myapp/public/packs&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;webpackerとwebpack-dev-server&lt;/h1&gt;
&lt;p&gt;webpackerをセットアップするとwebpack-dev-serverもついてくる。そして、&lt;code&gt;config/webpacker.yml&lt;/code&gt;にはwebpack-dev-serverの設定も含まれている。&lt;/p&gt;
&lt;p&gt;開発環境において、webpackerはアセットへのリクエスト受信時にwebpackを実行してアセットをコンパイルするが、webpack-dev-serverの起動が確認できればアセットへのリクエストをwebpack-dev-serverに転送するようになっている。&lt;/p&gt;
&lt;p&gt;Railsがwebpack-dev-serverに接続する際、&lt;code&gt;config/webpacker.yml&lt;/code&gt;に記載されたhostとportを参照する。ただし、&lt;code&gt;WEBPACKER_DEV_SERVER_*&lt;/code&gt;のようなパターンの環境変数を設定することでYAMLファイルの設定を上書きできるようになっており、それを利用しているのが、上の&lt;code&gt;docker-compose.yml&lt;/code&gt;内で指定している環境変数&lt;code&gt;WEBPACKER_DEV_SERVER_HOST&lt;/code&gt;となる。これでwebpack-dev-serverのhostを設定できる。&lt;/p&gt;
&lt;p&gt;このdocker-composeでは、&lt;code&gt;depends_on&lt;/code&gt;で設定したサービスのaliasを設定することでRailsからwebpack-dev-serverにアクセスできるようにしている。また、&lt;code&gt;webpack-dev-server&lt;/code&gt;サービスで&lt;code&gt;0.0.0.0&lt;/code&gt;を指定しているのは、このコンテナ外からアクセスできるようにするためだ。&lt;/p&gt;
&lt;h1&gt;マニフェストファイルの共有&lt;/h1&gt;
&lt;p&gt;Railsがwebpackでコンパイルしたアセットにアクセスする際、マニフェストファイルに記載されたアセットのファイルパスを利用している。マニフェストファイルはコンパイル時に生成されるため、webpack-dev-serverを実行するコンテナでマニフェストファイルが生成されることになる。&lt;/p&gt;
&lt;p&gt;そこで、マニフェストファイルが生成される&lt;code&gt;public/packs&lt;/code&gt;ディレクトリをホストとマウントすることでRailsコンテナからマニフェストファイルを参照できるようにしている。&lt;/p&gt;
&lt;h1&gt;live reload&lt;/h1&gt;
&lt;p&gt;webpack-dev-serverはアセットのソースコードが変更されたときにブラウザを自動更新させるlive reloadの機能も備えている。live reloadはwebpack-dev-serverがアセットをコンパイルする際にlive reloadするスクリプトを挿入することで実現している（はず）。そのスクリプトはwebpack-dev-serverを参照するため（ここら辺の詳しい仕組みはちゃんと把握できていない）、3025番でホストとのポートマッピングを行っている。&lt;/p&gt;</summary>
    <title>docker-composeでwebpack-dev-serverを使う</title>
    <updated>2018-06-06T23:04:00+09:00</updated>
    <dc:date>2018-06-06T23:04:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/333/</id>
    <link href="https://blog.naoty.dev/333/"/>
    <summary>&lt;p&gt;1年くらい前からシェルはfishを使っていたけど、最近zshに戻ってきた。理由としては、当時はやってなかったインフラの作業がメインの業務になり、シェルスクリプトを書くようになったからだ。fishはbashとの互換性がないので、bashを書くときに頭を切り替えるのが少しずつストレスになってきた。&lt;/p&gt;
&lt;p&gt;fishを使っていた頃は&lt;a href=&quot;https://github.com/fisherman/fisherman&quot;&gt;fisherman&lt;/a&gt;というプラグインマネージャーを使っていたけど、zshでもプラガブルな設定は続けていきたいので&lt;a href=&quot;https://github.com/zplug/zplug&quot;&gt;zplug&lt;/a&gt;を使い始めた。&lt;/p&gt;
&lt;p&gt;相変わらずzshのプラグインはいい感じのものがないので、またも自分で&lt;a href=&quot;https://github.com/naoty/prompt&quot;&gt;プロンプト&lt;/a&gt;を書くことになった。世の中の人気のあるプロンプトのテーマは余計な情報が多くて重いので、結局いつも自分で書くことになっている。&lt;a href=&quot;https://github.com/sindresorhus/pure&quot;&gt;pure&lt;/a&gt;はよさそうだったけど、二列に慣れず惜しくも採用できなかった。&lt;/p&gt;</summary>
    <title>zshに戻った</title>
    <updated>2018-05-16T21:34:00+09:00</updated>
    <dc:date>2018-05-16T21:34:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/332/</id>
    <link href="https://blog.naoty.dev/332/"/>
    <summary>&lt;p&gt;5月から&lt;a href=&quot;https://www.coursera.org/learn/machine-learning&quot;&gt;CourseraのMachile Learning&lt;/a&gt;を受講しはじめた。&lt;/p&gt;
&lt;p&gt;正月からちょっとずつ機械学習の勉強をしているけど、それは40代以降もプログラマーとして働き続けたいと思っているからだ。あと10年くらいは今の知識や経験で活躍できるかもしれないけど、ずっとプログラマーでいるには新しい技術領域に時間をかけたいと思った。まずはCoursera等で勉強し、少しずつ仕事として機械学習に取り組んでいけるようにしたい。&lt;/p&gt;</summary>
    <title>CourseraのMachine Learningを受講しはじめた</title>
    <updated>2018-05-01T21:47:00+09:00</updated>
    <dc:date>2018-05-01T21:47:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/331/</id>
    <link href="https://blog.naoty.dev/331/"/>
    <summary>&lt;p&gt;ECSにデプロイするスクリプトを書くとき、&lt;code&gt;wait&lt;/code&gt;コマンドがとても便利だった。&lt;/p&gt;
&lt;p&gt;デプロイする前にいくつかのECSタスクを実行し完了を待ってからデプロイしたい場合、ECSタスクのステータスをポーリングして完了したかどうかを監視する必要がある。&lt;code&gt;aws ecs run-task&lt;/code&gt;は即座に終了し、タスクの実行自体は非同期に行われるからだ。&lt;/p&gt;
&lt;p&gt;そうしたとき、&lt;code&gt;wait&lt;/code&gt;コマンドを使うと簡単にポーリングを行うことができる。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;aws ecs &lt;span class=&quot;nb&quot;&gt;wait &lt;/span&gt;tasks-stopped &lt;span class=&quot;nt&quot;&gt;--tasks&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;task_arn1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;task_arn2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;これは&lt;code&gt;aws ecs describe-tasks&lt;/code&gt;を定期的に実行してレスポンスからステータスを取得し、それが完了するまで待つ。&lt;code&gt;--tasks&lt;/code&gt;オプションはECSタスクのARNを複数指定できるので、複数のタスクがすべて完了するのを待つことができる。&lt;/p&gt;
&lt;p&gt;ECSタスクのARNは&lt;code&gt;aws ecs run-task&lt;/code&gt;のレスポンスから取得できる。実際にはこんな感じで書くと思う。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;task_arn1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;aws ecs run-task &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--task-definition&lt;/span&gt; my-task-definition &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--query&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tasks[0].taskArn&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; text&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;

aws ecs &lt;span class=&quot;nb&quot;&gt;wait &lt;/span&gt;tasks-stopped &lt;span class=&quot;nt&quot;&gt;--tasks&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;task_arn1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;気をつける必要があるのは、ECSタスクが完了したかどうかは分かるものの、それが成功したのか失敗したのかは分からないということだ。なので、&lt;code&gt;wait&lt;/code&gt;の後で&lt;code&gt;describe-tasks&lt;/code&gt;によって失敗したかどうかをチェックする必要があるとおもう。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;wait&lt;/code&gt;コマンドはタスクの完了だけでなくサービスのステータスの監視でも使えるし、またECS以外にもEC2などで使えるのでawscliを使ったスクリプトを書くときには今後もお世話になりそう。&lt;/p&gt;</summary>
    <title>awscliのwaitコマンドが便利だった</title>
    <updated>2018-04-22T09:55:00+09:00</updated>
    <dc:date>2018-04-22T09:55:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/330/</id>
    <link href="https://blog.naoty.dev/330/"/>
    <summary>&lt;p&gt;数ヶ月前から開発するときに作業メモをとりながら開発をするようにしている。スクショのようにエディタを上下に分割して上で作業しながら下でメモをとっている。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;atom.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;atom.png&quot; alt=&quot;atom.png&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作業メモという習慣を数ヶ月続けてみていいことが多かった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;デバッグするときは、どこにバグがあるか仮説を作業メモにとりながら進める。頭の中だけでこれを行うのはけっこう大変で、脳のメモリが食いつぶされるのを感じる。&lt;/li&gt;
&lt;li&gt;作業が煮詰まったときに、これまでの作業を振り返るきっかけにもなる。&lt;/li&gt;
&lt;li&gt;土日や休日を挟んでから作業に戻るとき、どこまで何をしていたのか作業を振り返るときに便利だったりする。&lt;/li&gt;
&lt;li&gt;作業内容やそこから得られた知見を他人と共有する際に、作業メモをベースにしやすい。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>作業メモという習慣</title>
    <updated>2018-04-14T17:16:00+09:00</updated>
    <dc:date>2018-04-14T17:16:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/329/</id>
    <link href="https://blog.naoty.dev/329/"/>
    <summary>&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;上のようなコントローラーで作ったデータをReduxのinitial stateとして設定したいと思い、いろいろ考えて書いてみた。&lt;/p&gt;
&lt;p&gt;まず、ヘルパーとかデコレーターでモデルをReactコンポーネントに渡すpropsに変換してみる。今回はactive_decoratorを使う。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;UserDecorator&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_react_props&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;as_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;only: &lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%i[first_name last_name email]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transform_keys&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;camelcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transform_values&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;これでモデルから必要な属性だけをcamelCaseのJSON文字列に変換できるようになった。&lt;/p&gt;
&lt;p&gt;次にRailsのviewでdata属性に上のpropsを渡す。あとでここからJSでデータを引っ張ってくる計画だ。&lt;/p&gt;
&lt;pre lang=&quot;erb&quot; class=&quot;highlight highlight-erb&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;js-redux-root&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-react-props=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_react_props&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;あとは、Reduxのstoreを作成するときに上のpropsを設定する。&lt;/p&gt;
&lt;pre lang=&quot;javascript&quot; class=&quot;highlight highlight-javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;DOMContentLoaded&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rootElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;js-redux-root&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reactProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootReducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Provider&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SignUpForm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Provider&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;これでRailsで作ったデータをReduxのinitial stateに設定できた。フォームの初期値を埋めておきたいときなど、コントローラーからReactコンポーネントにデータを渡せるとラクなので、こういう実装が必要になると思う。&lt;/p&gt;
&lt;p&gt;最近、ReactとかReduxを勉強しているので、これでいいのかよくわかりません。コードレビューお願いします。&lt;/p&gt;</summary>
    <title>RailsからReduxのinitial stateを設定する</title>
    <updated>2018-03-29T23:19:00+09:00</updated>
    <dc:date>2018-03-29T23:19:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/328/</id>
    <link href="https://blog.naoty.dev/328/"/>
    <summary>&lt;p&gt;webpackerを使ったRailsプロジェクトにjestを導入してみた。jestをインストールしてテストを実行してみると、以下のようなエラーがおきた。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;({&quot;Object.&amp;lt;anonymous&amp;gt;&quot;:function(module,exports,require,__dirname,__filename,global,jest){import xxx from './xxx';
                                                                                         ^^^^^^

SyntaxError: Unexpected token import
  at ScriptTransformer._transformAndBuildScript (node_modules/jest-runtime/build/script_transformer.js:316:17)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;importがコンパイルできていないようだ。webpackerが生成する&lt;code&gt;.babelrc&lt;/code&gt;では、以下のように設定されている。&lt;/p&gt;
&lt;pre lang=&quot;json&quot; class=&quot;highlight highlight-json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;modules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;targets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;browsers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt; 1%&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;uglify&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;useBuiltIns&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&quot;modules&quot;: false&lt;/code&gt;と設定されているため、&lt;code&gt;import&lt;/code&gt;の変換が行われないようになっている。これはwebpackによって&lt;code&gt;import&lt;/code&gt;文を処理するためにbabelでは&lt;code&gt;import&lt;/code&gt;の変換を行わないようにしているんだと思う。&lt;/p&gt;
&lt;p&gt;しかし、jestを実行する場合はwebpackによる処理は行われないため、&lt;code&gt;import&lt;/code&gt;が変換されずエラーになっていたと考えられそう。&lt;/p&gt;
&lt;p&gt;そこで、以下の設定を&lt;code&gt;.babelrc&lt;/code&gt;に追加したところ直った。&lt;/p&gt;
&lt;pre lang=&quot;json&quot; class=&quot;highlight highlight-json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;modules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;commonjs&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;jestは実行時に自動的に&lt;code&gt;NODE_ENV&lt;/code&gt;を&lt;code&gt;test&lt;/code&gt;に設定するため、これでうまくいく。&lt;/p&gt;</summary>
    <title>webpackerにjestを導入する</title>
    <updated>2018-03-20T19:56:00+09:00</updated>
    <dc:date>2018-03-20T19:56:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/327/</id>
    <link href="https://blog.naoty.dev/327/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://naoty.github.io/posts/23.html&quot;&gt;前回&lt;/a&gt;と同様にwebpackerによるbundleに必要最小限なファイルの&lt;code&gt;COPY&lt;/code&gt;を試してみた。&lt;/p&gt;
&lt;pre lang=&quot;docker&quot; class=&quot;highlight highlight-docker&quot;&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; starefossen/ruby-node:2-8-alpine&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /myapp&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; app/javascript /myapp/app/javascript/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; bin/webpack /myapp/bin/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; config/webpack /myapp/config/webpack/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; config/webpacker.yml /myapp/config/webpacker.yml&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; .babelrc .postcssrc.yml /myapp/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; Gemfile Gemfile.lock /myapp/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=bundler /usr/local/bundle /usr/local/bundle&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;bin/webpack
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;webpackerを使うにはRubyとNodeの両方が必要になるため両方が入ったベースイメージを探したところ、&lt;a href=&quot;https://hub.docker.com/r/starefossen/ruby-node/&quot;&gt;starefossen/ruby-node&lt;/a&gt;がよさそうだった。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;COPY --from=bundler&lt;/code&gt;としているところは、&lt;a href=&quot;https://docs.docker.com/develop/develop-images/multistage-build/&quot;&gt;multi-stage build&lt;/a&gt;を使っている。前段のビルドで&lt;code&gt;bundle install&lt;/code&gt;しておいたものを&lt;code&gt;COPY&lt;/code&gt;している。こうすることで実行時には不要なものを除くことができる。このビルド自体もRailsを起動するために必要なファイルを生成するビルドにすぎない。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>bin/webpackに必要最小限のファイル</title>
    <updated>2018-03-13T21:22:00+09:00</updated>
    <dc:date>2018-03-13T21:22:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/326/</id>
    <link href="https://blog.naoty.dev/326/"/>
    <summary>&lt;p&gt;Dockerfileで&lt;code&gt;rails assets:precompile&lt;/code&gt;を実行する前に&lt;code&gt;COPY&lt;/code&gt;するファイルを必要最小限にしておけると、キャッシュを有効活用できてビルド時間を短縮できる。&lt;/p&gt;
&lt;pre lang=&quot;docker&quot; class=&quot;highlight highlight-docker&quot;&gt;&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /myapp&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; app/assets /myapp/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; bin/rails /myapp/bin/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; config/environments /myapp/config/environments/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; config/initializers /myapp/config/initializers/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; config/application.rb /myapp/config/application.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; config/boot.rb /myapp/config/boot.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; config/environment.rb /myapp/config/environment.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; config/secrets.yml.enc /myapp/config/secrets.yml.enc&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; lib/assets /myapp/lib/assets/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; vendor/assets /myapp/vendor/assets/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; Rakefile /myapp/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;bin/rails assets:precompile
&lt;/pre&gt;
&lt;p&gt;とりあえずこれだけで動いた。&lt;code&gt;config/initializers/&lt;/code&gt;以下も削れそうな気がするけど、プロジェクトによってケースバイケースだと思うので、これで十分だとおもう。&lt;/p&gt;</summary>
    <title>Assets precompileに必要最小限のファイル</title>
    <updated>2018-03-09T20:55:00+09:00</updated>
    <dc:date>2018-03-09T20:55:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/325/</id>
    <link href="https://blog.naoty.dev/325/"/>
    <summary>&lt;p&gt;もともとTSV形式の文字列をASCIIやMarkdown形式のテーブルに変換するコマンドだった&lt;a href=&quot;https://github.com/naoty/table&quot;&gt;naoty/table&lt;/a&gt;を改善して、JSON形式の文字列を受け取れるようにした。&lt;/p&gt;
&lt;p&gt;例えば、以下のようなJSONファイルがあったとする。&lt;/p&gt;
&lt;pre lang=&quot;json&quot; class=&quot;highlight highlight-json&quot;&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;pokemons.json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bulbasaur&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ivysaur&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;venusaur&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;このとき、以下のようにパイプで&lt;code&gt;table&lt;/code&gt;コマンドに渡すとASCII形式に変換できる。&lt;/p&gt;
&lt;pre lang=&quot;shell&quot; class=&quot;highlight highlight-shell&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;pokemons.json | table &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; json:ascii
+----+-----------+
| &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; | name      |
+----+-----------+
| 1  | bulbasaur |
| 2  | ivysaur   |
| 3  | venusaur  |
+----+-----------+
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;table&lt;/code&gt;コマンドは出力フォーマットとしてMarkdown形式のテーブルも選べるので、以下のように出力できる。&lt;/p&gt;
&lt;pre lang=&quot;shell&quot; class=&quot;highlight highlight-shell&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;pokemons.json | table &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; json:markdown
| &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; | name      |
| &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; | &lt;span class=&quot;nt&quot;&gt;---------&lt;/span&gt; |
| 1  | bulbasaur |
| 2  | ivysaur   |
| 3  | venusaur  |
&lt;/pre&gt;
&lt;h1&gt;モチベーション&lt;/h1&gt;
&lt;p&gt;最近、AWSの作業をすることが増えてAWS CLIから返ってくるJSONを扱うことが増えた。返ってきたJSONを&lt;code&gt;jq&lt;/code&gt;コマンドで整形して表示するのだけど、件数が増えるとかなり見にくかった。そこで、このような機能を追加してASCIIテーブルとして見やすくしたかったので追加してみた。&lt;/p&gt;
&lt;p&gt;例えば、ECSのあるタスク定義に含まれるイメージを知りたいとき、こんな感じでやることになりそう。&lt;/p&gt;
&lt;pre lang=&quot;shell&quot; class=&quot;highlight highlight-shell&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;aws ecs describe-task-definition &lt;span class=&quot;nt&quot;&gt;--task-definition&lt;/span&gt; hello_world:8 | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  jq &lt;span class=&quot;s2&quot;&gt;&quot;.taskDefinition.containerDefinitions | map({name: .name, image: .image})&quot;&lt;/span&gt; | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  table &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; json:ascii
+-----------+-----------+
| name      | image     |
+-----------+-----------+
| wordpress | wordpress |
| mysql     | mysql     |
+-----------+-----------+
&lt;/pre&gt;</summary>
    <title>JSONをASCIIテーブルで表示する</title>
    <updated>2018-03-05T17:34:00+09:00</updated>
    <dc:date>2018-03-05T17:34:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/324/</id>
    <link href="https://blog.naoty.dev/324/"/>
    <summary>&lt;p&gt;メール送信機能を開発する際、メールの受信を確認したい。従来のRailsアプリ開発では、&lt;a href=&quot;https://github.com/ryanb/letter_opener&quot;&gt;letter_opener&lt;/a&gt;のようなライブラリを使っていた。&lt;/p&gt;
&lt;p&gt;現在のコンテナを中心とした開発環境では、Railsの外側にSMTPサーバーのコンテナを用意し、環境変数によって接続先を設定する方法が一般的ではないかと思った。調べてみると、&lt;a href=&quot;https://github.com/mailhog/MailHog&quot;&gt;MailHog&lt;/a&gt;というツールが見つかった。MailHogはSMTPサーバーであり、かつ受信したメールを確認できるHTTPサーバーも兼ね備えている。&lt;/p&gt;
&lt;p&gt;MailHogはDocker Hubでコンテナを公開しているため、docker-composeを使うと簡単に開発環境に組み込むことができる。&lt;/p&gt;
&lt;pre lang=&quot;yaml&quot; class=&quot;highlight highlight-yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# docker-compose.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bin/rails s -p 3000 -b 0.0.0.0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;SMTP_HOST&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mail&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;SMTP_PORT&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1025&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mail&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mail&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mailhog/mailhog&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8025:8025&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Railsではこんな感じで環境変数によってメールの送信先を設定するだけでいい。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# application.rb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;action_mailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delivery_method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:smtp&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;action_mailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;smtp_settings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;address: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SMTP_HOST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;port: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SMTP_PORT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;本番環境などでは、この環境変数を実際に運用するSMTPサーバーのものに替えるだけでいい。&lt;/p&gt;</summary>
    <title>MailHogによるメールの受信確認</title>
    <updated>2018-02-18T21:53:00+09:00</updated>
    <dc:date>2018-02-18T21:53:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/323/</id>
    <link href="https://blog.naoty.dev/323/"/>
    <summary>&lt;p&gt;最近、react-railsを使ってRails上でReactコンポーネントを実装している。フォームを実装する際、Railsのフォームヘルパーは自動的にCSRFトークンを送るように&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;を生成してくれるが、Reactコンポーネントでフォームを実装する場合はそれを自分で実装する必要がある。&lt;/p&gt;
&lt;p&gt;react-railsであれば、Reactコンポーネントにpropsを簡単に渡せるため、props経由でCSRFトークンを渡すことで実装することができる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// new.html.slim
= react_component &quot;SignUpForm&quot;,
  { csrf_params: request_forgery_protection_token, csrf_token: form_authenticity_token }
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;jsx&quot; class=&quot;highlight highlight-jsx&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// SignUpForm.jsx&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;return &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/sign_up&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;csrfParams&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;csrfToken&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>react-railsによるCSRF対策</title>
    <updated>2018-02-18T12:08:00+09:00</updated>
    <dc:date>2018-02-18T12:08:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/322/</id>
    <link href="https://blog.naoty.dev/322/"/>
    <summary>&lt;p&gt;webpackerを導入する際にDockerイメージにNode.jsとYarnが必要になるため、以下のようにDockerfileにインストールコマンドを追加する。いつも調べるのが面倒なので、メモしておく。&lt;/p&gt;
&lt;pre lang=&quot;docker&quot; class=&quot;highlight highlight-docker&quot;&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.0&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Node.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-sL&lt;/span&gt; https://deb.nodesource.com/setup_8.x | bash - &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; nodejs

&lt;span class=&quot;c&quot;&gt;# Yarn&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-sS&lt;/span&gt; https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;deb https://dl.yarnpkg.com/debian/ stable main&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tee&lt;/span&gt; /etc/apt/sources.list.d/yarn.list &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; yarn
&lt;/pre&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/ja/download/package-manager/&quot;&gt;https://nodejs.org/ja/download/package-manager/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://yarnpkg.com/ja/docs/install#linux-tab&quot;&gt;https://yarnpkg.com/ja/docs/install#linux-tab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>webpacker用のDockerfile</title>
    <updated>2018-02-12T22:58:00+09:00</updated>
    <dc:date>2018-02-12T22:58:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/321/</id>
    <link href="https://blog.naoty.dev/321/"/>
    <summary>&lt;p&gt;土日に働ける副業先を探しています。&lt;/p&gt;
&lt;p&gt;できることを活かして収入を増やしつつ本業とは異なる環境でスキルの幅を拡げたいというのが副業の動機です。本業には兼業規定がありいくつかの条件を満たしていれば兼業が可能なので、こういう形でブログで告知してみました。&lt;/p&gt;
&lt;h1&gt;できること&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Ruby on Railsを使ったWebアプリケーション開発を2012年頃からしています。案件としては、モバイルアプリのバックエンドで動くAPI開発が多いです。&lt;/li&gt;
&lt;li&gt;iOSアプリ開発も4件ほど（Objective-Cが2件、Swiftが2件）携わった経験があります。その内、1件はゼロからSwiftでiOSアプリを開発していました。案件としては、Webサービスのアプリ版の開発がほとんどです。IAPを使った課金機能の開発経験もあります。&lt;/li&gt;
&lt;li&gt;現在はサーバーサイドとクライアントサイドの開発経験を活かして開発チームのテックリードをしています。開発方針のとりまとめやビジネスサイドとの開発側窓口としてコミュニケーションをしています。&lt;/li&gt;
&lt;li&gt;業務外では、OSS活動や自分で使うツールの開発をしています。主な成果として、Swiftによる日時操作ライブラリである&lt;a href=&quot;https://github.com/naoty/Timepiece&quot;&gt;Timepiece&lt;/a&gt;をGitHubで公開し、2000以上のStarを世界中からいただいています。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;やりたいこと&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;モダンなWebフロントエンド開発の経験を積みたいです。API開発が多かったためあまり業務で触れてこなかった分野なので、本業とは異なる環境でトライしてみたいことの1つです。&lt;/li&gt;
&lt;li&gt;Ruby on Rails以外のサーバーサイド開発もできればやってみたいです。特にPythonまたはGoを使ったサーバーサイド開発に興味があります。どちらとも業務外の時間に書いたことはあるものの、業務レベルでの経験値を積みたいです。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;勤務条件&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;土日での勤務を希望します。休日にどうしても外せない用がある場合は平日の夜間に対応します。&lt;/li&gt;
&lt;li&gt;基本的にはリモートワークをメインとしたいです。出社する場合は東京23区内だと助かります。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;連絡先&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://twitter.com/naoty_k&quot;&gt;@naoty_k&lt;/a&gt;またはnaoty.k[at]gmail.comにご連絡ください。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>副業先を探しています</title>
    <updated>2018-02-07T22:30:00+09:00</updated>
    <dc:date>2018-02-07T22:30:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/320/</id>
    <link href="https://blog.naoty.dev/320/"/>
    <summary>&lt;p&gt;最近、AWS上にインフラをセットアップする仕事をしている。これまでこうした仕事はしたことがなかったので、新しいことをいろいろ学んでいる。&lt;/p&gt;
&lt;p&gt;インフラの構築はTerraformを通して行っているため、コードからAWSについて学ぶことができる。新しいことを学ぶときはだいたい下のようなステップを踏んでいる。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Terraformのコード例や社内のTerraformのコードを読む。&lt;/li&gt;
&lt;li&gt;コードを理解するためにTerraformのドキュメントを読む。&lt;/li&gt;
&lt;li&gt;Terraformのドキュメントを理解するためにAWSのドキュメントを読む。&lt;/li&gt;
&lt;li&gt;Terraformのコードを書いてみる。&lt;/li&gt;
&lt;li&gt;コードレビューしてもらい、足りない点を補足する。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Terraformのおかげでインフラをどのようにセットアップすればいいのかコードを通して理解できるようになった。他のインフラエンジニアの書いたTerraformのコードを読めば、ベストプラクティスを盗むことができる。まだ僕がRailsを始めたての頃はインフラというと、AWSのコンソールをポチポチする作業という感じで掴みにくい感じがしたが、いまはこのような便利なツールのおかげでかなり学習のハードルが下がったと思う。引き続きこの調子でAWSの経験値を効率的にためていきたい。&lt;/p&gt;</summary>
    <title>TerraformでAWSを学んでいる</title>
    <updated>2018-02-03T22:41:00+09:00</updated>
    <dc:date>2018-02-03T22:41:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/319/</id>
    <link href="https://blog.naoty.dev/319/"/>
    <summary>&lt;p&gt;このホームページのCSSを見直して&lt;a href=&quot;https://github.com/hiloki/flocss&quot;&gt;FLOCSS&lt;/a&gt;を導入した。&lt;/p&gt;
&lt;p&gt;さまざまなCSSアーキテクチャが提唱されているけど、仕事でFLOCSSが採用されそうなので試しにやってみようということでやってみた。&lt;/p&gt;
&lt;p&gt;ディレクトリ構成はこんな感じ。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stylesheets/
├── application.css
├── foundation
│   ├── _base.css
│   └── _variable.css
├── layout
│   └── _base.css
└── object
    ├── project
    │   ├── _homepage.css
    │   ├── _post.css
    │   └── _posts.css
    └── utility
        └── _align.css
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;markdownを変換したHTMLにstyleを与えるという制約上、クラスを使ったstyleを定義しにくい。なので、componentっぽいものもprojectにすべて含めてしまっている。これでいいのかはまだ分かっていないので、他のプロジェクトでも導入して試行錯誤してみたい。&lt;/p&gt;
&lt;p&gt;ついでなので、最近意識しているCSSの書き方を挙げておきたい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;font-size&lt;/code&gt;, &lt;code&gt;margin&lt;/code&gt;, &lt;code&gt;padding&lt;/code&gt;では単位に&lt;code&gt;rem&lt;/code&gt;を使う。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;margin-top&lt;/code&gt;を使わない。一貫して&lt;code&gt;margin-bottom&lt;/code&gt;を使うことで、シンプルにレイアウトを組むことができる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;margin-bottom&lt;/code&gt;の値は&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;~&lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt;と&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;を&lt;code&gt;1&lt;/code&gt;とすると、その他のブロック要素を&lt;code&gt;2&lt;/code&gt;にする。例えば、このブログでは以下のような感じにしている。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;css&quot; class=&quot;highlight highlight-css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;h5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;h6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;ol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>FLOCSSを導入した</title>
    <updated>2018-02-01T08:48:00+09:00</updated>
    <dc:date>2018-02-01T08:48:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/318/</id>
    <link href="https://blog.naoty.dev/318/"/>
    <summary>&lt;p&gt;このGitHub pagesのstylesheetは、これまでSASSで記述されGulpのパイプラインで処理されたCSSだった。今回、PostCSSを導入した。理由としては、PostCSSを通してマルチブラウザへの効率的な対応やCSSのlintを行いたかったからだ。&lt;/p&gt;
&lt;p&gt;PostCSSの導入にともなって、SASSで記述していたstylesheetをcssnextで書き換えた。SASSのような独自記法を覚えるよりも標準的な規格を覚える方が学習コストを回収しやすい。ちょうどCoffeeScriptからECMAScript 6への移行と同じような感じだ。&lt;/p&gt;
&lt;p&gt;導入したPostCSSプラグインは以下の通り。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;postcss-cssnext&lt;/code&gt;：cssnextを導入する。これでcssで変数を利用したり、ネストした書き方ができる。&lt;code&gt;autoprefixer&lt;/code&gt;が内部で使われており、サポートするブラウザに基づいてベンダープレフィックスを付与してくれる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;postcss-import&lt;/code&gt;：&lt;code&gt;@import&lt;/code&gt;で宣言した外部のファイルを1つのファイルにまとめることができる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;stylelint&lt;/code&gt;：CSSのlintを行う。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cssnano&lt;/code&gt;：CSSの圧縮を行う。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>PostCSSを導入した</title>
    <updated>2018-01-24T16:27:00+09:00</updated>
    <dc:date>2018-01-24T16:27:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/317/</id>
    <link href="https://blog.naoty.dev/317/"/>
    <summary>&lt;p&gt;Railsアプリのスキーマファイルはデータベースの現在のスキーマを表し、デフォルトでは&lt;code&gt;db/schema.rb&lt;/code&gt;にActiveRecordのDSLで記述されている。スキーマファイルは&lt;code&gt;rails db:schema:dump&lt;/code&gt;で生成されるものなので、開発者が直接いじってはならない。&lt;/p&gt;
&lt;p&gt;開発が進みデータベースのスキーマが複雑になると、ActiveRecordのDSLでの表現に限界が出てくる。DSLのメリットはデータベースに依存せず抽象的な表現ができることだが、データベース固有の設定をする場合にDSLで表現できなくなってくる。&lt;/p&gt;
&lt;p&gt;DSLで表現できなくなるとスキーマファイルと実際のスキーマに乖離が生まれる。スキーマに乖離があると、開発環境やCI上でデータベースをセットアップするのが困難になる。&lt;/p&gt;
&lt;p&gt;そこで、ActiveRecordはスキーマファイルの形式にSQLを選ぶことができる。&lt;code&gt;config/application.rb&lt;/code&gt;で以下のように指定すると、&lt;code&gt;db/structure.sql&lt;/code&gt;というSQL形式のスキーマファイルが生成される。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;active_record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;schema_format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:sql&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;なお、この設定はデフォルトでは&lt;code&gt;:ruby&lt;/code&gt;が指定されている。&lt;/p&gt;
&lt;p&gt;SQL形式に変更した場合、コマンドを以下のように変える必要がある。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Ruby形式&lt;/th&gt;
&lt;th&gt;SQL形式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rails db:schema:load&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rails db:structure:load&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rails db:schema:dump&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rails db:structure:dump&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;また、&lt;code&gt;db/structure.sql&lt;/code&gt;の生成にはDBごとのスキーマダンプツールを使うため、MySQLであれば&lt;code&gt;mysqldump&lt;/code&gt;を用意する必要がある。&lt;/p&gt;</summary>
    <title>スキーマファイルをSQL形式に変更する</title>
    <updated>2018-01-13T09:53:00+09:00</updated>
    <dc:date>2018-01-13T09:53:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/316/</id>
    <link href="https://blog.naoty.dev/316/"/>
    <summary>&lt;p&gt;Atom形式のフィードをサポートした。一覧画面と詳細画面の下部にあるリンクからアクセスできる。&lt;/p&gt;
&lt;p&gt;Livedoor Reader時代からずっとRSSリーダーを使っており、今はFeedlyを使っている。Twitterやはてなブックマークのタイムラインでは、時間の経過とともに見逃してしまうが、RSSリーダーであれば未読がどんどん積まれるだけなので見逃す心配がなく、それが使い続けている理由になっている。&lt;/p&gt;
&lt;p&gt;ブログを更新したとき自分でTwitterでリンクを公開するのがなんとなくこそばゆい気持ちになる。シェアしなければしないで、誰も気づかないだろうから、それも寂しい。だから、更新されたら勝手にフィードが生成されて通知される方が気が楽だ。これで他人の目を気にせずどんどん記事を更新できるし、読者との距離感を気にせずに済む。&lt;/p&gt;</summary>
    <title>Atom形式のフィードをサポートした</title>
    <updated>2018-01-12T21:08:00+09:00</updated>
    <dc:date>2018-01-12T21:08:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/315/</id>
    <link href="https://blog.naoty.dev/315/"/>
    <summary>&lt;p&gt;最近、Jupyter Notebookを使って機械学習を学び始めた。数式が頻繁に出てくるため、LaTeXを初めて使うようになった。&lt;/p&gt;
&lt;p&gt;自分のためのメモとして、よく使う数式とその記法をまとめた。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;</summary>
    <title>よく使うLaTeXコマンド</title>
    <updated>2018-01-08T08:57:00+09:00</updated>
    <dc:date>2018-01-08T08:57:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/314/</id>
    <link href="https://blog.naoty.dev/314/"/>
    <summary>&lt;p&gt;年末年始はPythonや機械学習の勉強をしようと思い、&lt;a href=&quot;http://amzn.to/2CpqmH1&quot;&gt;みんなのPython&lt;/a&gt;を読んだ。&lt;/p&gt;
&lt;p&gt;数年間Rubyを書いているため、そこまで苦労せずPythonを学ぶことができた。1週間程度でざっと読了した。勉強になったことは次のようなことだった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;int()&lt;/code&gt;のような関数に見えるものは&lt;code&gt;int&lt;/code&gt;という組み込みクラスのイニシャライザであること。&lt;/li&gt;
&lt;li&gt;リスト内包表記やディクショナリ内包表記。これがあれば、&lt;code&gt;map&lt;/code&gt;や&lt;code&gt;filter&lt;/code&gt;といった関数型プログラミングでよく出てくる関数は不要そう。&lt;/li&gt;
&lt;li&gt;モジュールとパッケージは、それぞれスクリプトファイルとそれを含むディレクトリであること。&lt;/li&gt;
&lt;li&gt;Jupyter Notebookの使い方。これによって、今後のPythonの学習において効率的に試行錯誤やメモをとることができそう。&lt;/li&gt;
&lt;li&gt;Python2系と3系の差。インターネットや少し古い書籍ではまだPython2系が使われていることがあるため、差を頭に入れておけば自分の中で変換ができるようになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あとは、標準ライブラリや周辺知識を調べながらアプリケーションを作っていけばPythonを書けるようになりそう。&lt;/p&gt;
&lt;p&gt;次は&lt;a href=&quot;http://amzn.to/2CkUR0N&quot;&gt;ゼロから作るDeep Learning&lt;/a&gt;を読むことにした。&lt;/p&gt;</summary>
    <title>「みんなのPython」を読んだ</title>
    <updated>2017-12-31T11:42:00+09:00</updated>
    <dc:date>2017-12-31T11:42:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/313/</id>
    <link href="https://blog.naoty.dev/313/"/>
    <summary>&lt;p&gt;画像アップロードの実装は考えれば考えるほど難しい。サーバーサイドはもちろんのこと、インフラやフロントエンドにわたって幅広く知識が求められる。&lt;/p&gt;
&lt;p&gt;これまでの経験を基に画像アップロードの実装パターンを3パターンにまとめてみた。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;同期アップロード&lt;/li&gt;
&lt;li&gt;非同期アップロード&lt;/li&gt;
&lt;li&gt;ダイレクトアップロード&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下では、画像のアップロード先としてS3を想定する。また、画像のリサイズについては、画像リクエスト時にリサイズする方法などを考慮に加えると論点が発散しそうなので、いったん保留する。&lt;/p&gt;
&lt;h1&gt;同期アップロード&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;synchronous-upload.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;synchronous-upload.png&quot; alt=&quot;同期アップロードのシーケンス図&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;同期アップロードは、リクエストを受け取ったサーバーがS3に画像をアップロードするまでクライアントを待たせる。&lt;/p&gt;
&lt;p&gt;そのため、非常に大きい画像や複数の画像をアップロードした場合、レスポンスタイムが非常に長くなることが予想できる。通常、Webサーバーはリクエストボディのサイズに上限を設定したり、リクエストのタイムアウト時間を設定しているため、そのようなリクエストはタイムアウトになってしまうだろう。&lt;/p&gt;
&lt;p&gt;同期アップロードの実装は非同期アップロードに比べると簡単だし、非同期処理に伴う問題もない。だから、社内システムのようにユーザーを待たせても問題がない場合は同期アップロードを採用してもいいと思う。だけど、UI/UXが非常に悪いため、ユーザーが使う機能の実装としては採用できないと思う。&lt;/p&gt;
&lt;h1&gt;非同期アップロード&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;asynchronous-upload.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;asynchronous-upload.png&quot; alt=&quot;非同期アップロードのシーケンス図&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;非同期アップロードは、リクエストを受け取ったサーバーとは別のワーカープロセスがバックグラウンドで画像をアップロードする。そのため、クライアントがレスポンスを受け取った時点ではアップロードが完了していない可能性がある。&lt;/p&gt;
&lt;p&gt;同期アップロードと比べると、レスポンスタイムが改善され、複数の画像をアップロードすることも可能になる。しかし、非同期アップロードを実装するにあたり、考えなくてはいけないことがいくつかある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アップロードが失敗した場合にリトライさせる手段をどのように提供するか（UI/UX観点）。&lt;/li&gt;
&lt;li&gt;ジョブキューとワーカープロセス、そしてワーカープロセスを管理するプロセスをどのように開発時に用意するか（開発環境観点）。&lt;/li&gt;
&lt;li&gt;サーバーとワーカーの間でどのようにアップロードされた画像を受け渡すか（インフラ観点）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それぞれの論点は、それだけで十分に1つの記事になりうるため、ここでは論点を挙げるだけに留めておきたい。&lt;/p&gt;
&lt;h1&gt;ダイレクトアップロード&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;direct-upload.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;direct-upload.png&quot; alt=&quot;ダイレクトアップロードのシーケンス図&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ダイレクトアップロードは、クライアントからサーバーを介さずに直接S3にアップロードし、完了後にファイルパスなどの情報のみサーバーに送る。&lt;/p&gt;
&lt;p&gt;この方法でも、同期アップロードのようにクライアントを待たせるようなことはなく、複数の画像をアップロードできる。さらに、非同期アップロードのような複雑なアーキテクチャも必要がないため、スマートな方法のように思える。&lt;/p&gt;
&lt;p&gt;この場合、画像をサーバーで処理できないため、画像のファイル形式の検証やウイルススキャンなどをクライアントで行う必要がある。アプリであればiOSとAndroid両方で実装が必要になるため、全体の実装工数は3つの実装パターンの中で最も大きいかもしれない。&lt;/p&gt;</summary>
    <title>画像アップロードの実装パターン</title>
    <updated>2017-12-22T17:12:00+09:00</updated>
    <dc:date>2017-12-22T17:12:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/312/</id>
    <link href="https://blog.naoty.dev/312/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;todo.gif&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;todo.gif&quot; alt=&quot;次のtodoをtmuxのstatus lineに表示する&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/todo&quot;&gt;naoty/todo&lt;/a&gt;に改良して、上のスクリーンキャストのようにtmuxのstatus lineに次のtodoを表示できるようにしてみた。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;next&lt;/code&gt;というコマンドを追加し、最も優先順位の高いtodoを表示できるようにした。また、&lt;code&gt;done&lt;/code&gt;コマンドに引数を指定しない場合に&lt;code&gt;next&lt;/code&gt;で表示されるtodoを完了できるようにした。&lt;code&gt;done&lt;/code&gt;コマンドなどで次のtodoが変わっても、tmuxが自動的に更新してくれるのですぐに切り替わる。&lt;/p&gt;
&lt;p&gt;iTerm2の画面分割を使っていたためtmuxは使ってこなかったが、status lineに次のtodoを表示するアイデアを思いついたため使い始めた。この使い方によって、次にやることを&lt;code&gt;list&lt;/code&gt;コマンドで何度も確認する必要がなくなったし、次にやるべきことのみに集中できるため、とてもいい。&lt;/p&gt;
&lt;h1&gt;導入方法&lt;/h1&gt;
&lt;p&gt;まず、&lt;a href=&quot;https://github.com/naoty/todo&quot;&gt;naoty/todo&lt;/a&gt;をインストールする。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew tap naoty/misc
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;todo
&lt;/pre&gt;
&lt;p&gt;次に.tmux.confを以下のように修正する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set-option -g status-right-length 80
if-shell 'which todo' 'set-option -g status-right &quot;next: #(todo next)&quot;'
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>todoをtmuxで表示する</title>
    <updated>2017-12-22T13:34:00+09:00</updated>
    <dc:date>2017-12-22T13:34:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/311/</id>
    <link href="https://blog.naoty.dev/311/"/>
    <summary>&lt;p&gt;2017年も終わろうとしているので、今年作ったものを振り返ってみた。こうやって振り返ってみると、今年もたくさん作った。今も使っているものもあるし、使っていないものもある。&lt;/p&gt;
&lt;p&gt;自分が抱えている問題を自分のコードで解決できるというのは、豊かな体験だとおもっている。来年も続けていけるように今年を振り返る。&lt;/p&gt;
&lt;h1&gt;使っているもの&lt;/h1&gt;
&lt;h2&gt;&lt;a href=&quot;https://github.com/naoty/table&quot;&gt;table&lt;/a&gt;&lt;/h2&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;day&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;DAU&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2017-01-01&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2017-01-02&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;8000&quot;&lt;/span&gt; | table &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt;
+------------+-------+
| day        | DAU   |
+------------+-------+
| 2017-01-01 | 10000 |
| 2017-01-02 | 8000  |
+------------+-------+
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;table&lt;/code&gt;はタブ区切りの文字列をASCIIのテーブル形式に変換する。Google Spreadsheetなど表形式のテキストをSlackにコピペしたくて作った。そんなに使う頻度は多くないけど、使うときはとても便利でたまに使う。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;https://github.com/naoty/homebrew-misc&quot;&gt;homebrew-misc&lt;/a&gt;&lt;/h2&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew tap naoty/misc
&lt;/pre&gt;
&lt;p&gt;自作のちょっとしたツールを簡単にインストール・アンインストールするためにリポジトリを作った。今年作ったツールはここからHomebrewでインストールできるようにした。プライベートのPCで作ったツールを業務用のPCでインストールするときにラクなので作ってよかった。&lt;/p&gt;
&lt;h2&gt;fish-*&lt;/h2&gt;
&lt;p&gt;fishのためのプラグインをいくつか書いた。今年からzshからfishに移行した。fishにはfishermanというプラグイン管理ツールがあり、簡単にfishの機能を拡張できる。pecoを使ったスクリプトやプロンプトまでプラグインとして作った。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;https://github.com/naoty/license&quot;&gt;license&lt;/a&gt;&lt;/h2&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;license &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; LICENSE
&lt;/pre&gt;
&lt;p&gt;MITのLICENSEファイルを出力するだけのツール。新しいリポジトリを作るときは初手で上を実行している。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;https://github.com/naoty/git-misc&quot;&gt;git-misc&lt;/a&gt;&lt;/h2&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git prune-branch
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git tag-timestamp
&lt;/pre&gt;
&lt;p&gt;git-miscにはgit関連のスクリプトがいくつか入っている。その中でも&lt;code&gt;git-prune-branch&lt;/code&gt;という不要なbranchを削除するコマンドはほぼ毎日使っている気がする。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;https://github.com/naoty/nippo&quot;&gt;nippo&lt;/a&gt;&lt;/h2&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nippo
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;nippo&lt;/code&gt;はその名の通り日報を作るためのスクリプト。&lt;code&gt;2017-12-21.md&lt;/code&gt;のようなファイル名でファイルを作成してエディタを起動する。今年は10月くらいから毎日日報をつけるようにした。このスクリプトのおかげで続いていると言っても過言ではないと思う。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;https://github.com/naoty/icon&quot;&gt;icon&lt;/a&gt;&lt;/h2&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;icon
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;icon&lt;/code&gt;は自分のアイコンを生成するためのツール。引数を指定することで自由なサイズで生成できるので、ダミー画像を作る用途でも使える。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;https://github.com/naoty/homepage&quot;&gt;homepage&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このGitHub Pagesを管理するためのリポジトリ。既存の静的サイトジェネレーターを使わずにGulpプラグインだけでページを生成するようにしている。おかげで自由にカスタマイズすることができており、いまのところこのGitHub Pagesに移行してよかったと思っている。&lt;/p&gt;
&lt;h1&gt;使ってないもの&lt;/h1&gt;
&lt;h2&gt;&lt;a href=&quot;https://github.com/naoty/flock&quot;&gt;flock&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;flock&lt;/code&gt;はSwiftのソースコードから依存関係を抽出し、dot形式のファイルを出力する。今年はほとんどSwiftを書いていないので使う機会がなかった。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;https://github.com/naoty/Task&quot;&gt;Task&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TaskはWebフロントエンドの技術を学ぶために作ったElectronアプリで、&lt;a href=&quot;https://github.com/naoty/todo&quot;&gt;naoty/todo&lt;/a&gt;のGUI版を意識して作った。CUIをそのままGUIにしただけでは、利便性ではCUIの方が優れていたため使うことはなかった。もう少しGUIの良さを活かしたタスク管理アプリケーションを作ってみたい。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;https://github.com/naoty/focus-theme&quot;&gt;focus-theme&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;はてなブログのために作ったテーマ。CSSの勉強のために書いてみた。結局、後述するGitHub Pagesに移行したため使わなくなった。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;https://github.com/naoty/brewery&quot;&gt;brewery&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;brewery&lt;/code&gt;はHomebrewのformulaを作るためのツール。SHA256を生成するのがだんだんつらくて作ったけど、&lt;code&gt;shasum&lt;/code&gt;を知ってから使う必要がなくなってしまった。&lt;/p&gt;</summary>
    <title>2017年に作ったもの</title>
    <updated>2017-12-21T23:00:00+09:00</updated>
    <dc:date>2017-12-21T23:00:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/310/</id>
    <link href="https://blog.naoty.dev/310/"/>
    <summary>&lt;p&gt;最近、RailsプロジェクトをCircle CI 2.0へ移行した。「テスト→Dockerイメージのビルド→レジストリへのPush」というワークフローを作った。&lt;/p&gt;
&lt;pre lang=&quot;yml&quot; class=&quot;highlight highlight-yml&quot;&gt;&lt;span class=&quot;na&quot;&gt;workflows&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;build-image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;requires&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;push-image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;requires&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build-image&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;テスト&lt;/h1&gt;
&lt;p&gt;テストでは、Circle CIのイメージを使うか、テスト前にDockerイメージをビルドしてそれをテストに使うか、というところで迷った。&lt;/p&gt;
&lt;p&gt;前者の場合、&lt;code&gt;circleci/ruby:2.4.2&lt;/code&gt;のようなイメージを利用する。メリットとしては、テストが通ったコードのみDockerイメージをビルドするため、失敗した場合により速く完了する。僕のプロジェクトでは、Dockerイメージのビルドが最も時間がかかるため、この方法を採った。&lt;/p&gt;
&lt;p&gt;後者の場合、上記のようなワークフローの順番を入れ替えて、ビルドしたDockerイメージを&lt;code&gt;docker save&lt;/code&gt;で永続化し、テスト前に&lt;code&gt;docker load&lt;/code&gt;で再利用するような形になりそう。メリットとしては、開発環境とテスト環境（そして理想的には本番環境）をすべて揃えることができる。Dockerイメージのポータビリティを活かした方法だと思う。一方で、上記の通りDockerイメージのビルドに時間がかかる場合にワークフロー全体の完了に時間がかかってしまう。&lt;/p&gt;
&lt;h1&gt;Dockerイメージのビルド&lt;/h1&gt;
&lt;p&gt;Dockerイメージのビルドは最も時間がかかる部分だった。Dockerイメージのビルドはどの環境で行うのがベターなのかベストプラクティスが分からなかった。GCRにpushする都合で、&lt;code&gt;google/cloud-sdk&lt;/code&gt;をDockerイメージとして使い、コンテナ上でDockerイメージをビルドすることになった。&lt;/p&gt;
&lt;p&gt;Circle CI 2.0では、&lt;code&gt;setup_remote_docker&lt;/code&gt;というコマンドを使うことでコンテナと別の環境にDockerデーモンを起動しDockerイメージのビルドを行うことができる（&lt;a href=&quot;https://circleci.com/docs/2.0/building-docker-images/&quot;&gt;参考&lt;/a&gt;）。課金してサポートに連絡すれば、過去のビルドで利用したレイヤーをキャッシュして再利用することができる。これを有効にできると、Dockerイメージのビルドを超高速化できそう。&lt;/p&gt;
&lt;h1&gt;レジストリへのPush&lt;/h1&gt;
&lt;p&gt;僕のプロジェクトでは、GCRにビルドしたDockerイメージをPushしている。先述の通り、これを簡単に行うために&lt;code&gt;google/cloud-sdk&lt;/code&gt;のDockerイメージを利用している。GCRを使う場合の&lt;a href=&quot;https://circleci.com/docs/2.0/google-container-engine/&quot;&gt;ドキュメント&lt;/a&gt;を参考に設定をし、無事に移行できた。&lt;/p&gt;</summary>
    <title>Circle CI 2.0への移行作業</title>
    <updated>2017-12-12T22:35:00+09:00</updated>
    <dc:date>2017-12-12T22:35:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/309/</id>
    <link href="https://blog.naoty.dev/309/"/>
    <summary>&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:unencrypted_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;attribute&lt;/code&gt;メソッドはモデルに属性を追加する。&lt;/li&gt;
&lt;li&gt;DBのカラムがなくても追加できる。&lt;/li&gt;
&lt;li&gt;DBのカラムのアクセサをoverrideすることもできる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;例：パスワードのvalidation&lt;/h1&gt;
&lt;p&gt;パスワードのvalidationを実装する場合を考える。パスワードのvalidationというのは、暗号化される前の値に対して行われる。生パスワードはDBに保存しないが、アクセサがあると便利なので&lt;code&gt;attribute&lt;/code&gt;メソッドで追加する。&lt;code&gt;attribute&lt;/code&gt;メソッドで追加した仮想的なカラムにはvalidationが使える。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:unencrypted_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;before_save&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:encrypt_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;if: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unencrypted_password_changed?&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;validates&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:unencrypted_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;format: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;with: &lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/\A[0-9a-zA-Z]\z/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;length: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;minimum: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;maximum: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;presence: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encrypt_password&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BCrypt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cost&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BCrypt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unencrypted_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>ActiveRecordのattributeメソッド</title>
    <updated>2017-12-08T23:00:00+09:00</updated>
    <dc:date>2017-12-08T23:00:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/308/</id>
    <link href="https://blog.naoty.dev/308/"/>
    <summary>&lt;p&gt;GitHub Pagesの管理が煩雑だったため、Circle CIで自動化した。&lt;/p&gt;
&lt;p&gt;これまでは&lt;a href=&quot;https://github.com/naoty/naoty.github.io&quot;&gt;GitHub Pagesのリポジトリ&lt;/a&gt;を&lt;a href=&quot;https://github.com/naoty/homepage&quot;&gt;管理リポジトリ&lt;/a&gt;のサブモジュールとして管理していたが、サブモジュールはいろいろと作業が面倒だった。サブモジュールと本体の両方をgitでコミットするのがとにかく面倒だった。&lt;/p&gt;
&lt;p&gt;最近、仕事でCircle CI 2.0の対応をしているため、このブログの更新もCIに任せることができそうだと思い、さっそく設定をした。以下、ハマったところとか工夫したところとか。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub pagesのリポジトリをcloneする必要があったが、その際にSSH接続で&lt;code&gt;Are you sure you want to continue connecting (yes/no)?&lt;/code&gt;と聞かれてしまい、ビルドが止まってしまった。そこで、以下のようにすることで回避した。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;yaml&quot; class=&quot;highlight highlight-yaml&quot;&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SSH settings&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mkdir ~/.ssh/ &amp;amp;&amp;amp; echo -e &quot;Host github.com\n\tStrictHostKeyChecking no\n&quot; &amp;gt; ~/.ssh/config&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Circle CIで他のリポジトリにアクセスするには鍵を追加する必要があるため、設定画面から鍵を追加した。&lt;/li&gt;
&lt;li&gt;Circle CI上でgit commitする際に&lt;code&gt;username/repo@commit_id&lt;/code&gt;の記法をメッセージに追加することで、GitHub pagesのコミットメッセージから対応する管理リポジトリのコミットに辿れるようにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;config.ymlは今のところ以下のようになっている。&lt;code&gt;npm install&lt;/code&gt;でキャッシュを使っていないけど、そこらへんは徐々に最適化していきたい。&lt;/p&gt;
&lt;pre lang=&quot;yaml&quot; class=&quot;highlight highlight-yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;circleci/node&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SSH settings&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mkdir ~/.ssh/ &amp;amp;&amp;amp; echo -e &quot;Host github.com\n\tStrictHostKeyChecking no\n&quot; &amp;gt; ~/.ssh/config&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Clone GitHub pages&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;git clone git@github.com:naoty/naoty.github.io.git .&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;git config user.email &quot;naoty.k@gmail.com&quot;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;git config user.name &quot;Naoto Kaneko&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;working_directory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;~/naoty.github.io&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;checkout&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;npm install&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;npm run build&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Publish GitHub pages&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;cp -pr public/* ~/naoty.github.io/&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;cd ~/naoty.github.io&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;git add .&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;git commit -m &quot;Publish naoty/homepage@${CIRCLE_SHA1}&quot;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;git push origin master&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>GitHub Pagesの更新をCIで自動化した</title>
    <updated>2017-12-08T00:04:00+09:00</updated>
    <dc:date>2017-12-08T00:04:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/307/</id>
    <link href="https://blog.naoty.dev/307/"/>
    <summary>&lt;p&gt;ブログを作るにあたって適切なセマンティックを使おうと思い、HTML5のタグを調べた。&lt;/p&gt;
&lt;h1&gt;レイアウト&lt;/h1&gt;
&lt;pre lang=&quot;html&quot; class=&quot;highlight highlight-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;ブログタイトル&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;公開：&lt;span class=&quot;nt&quot;&gt;&amp;lt;time&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;datetime=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2017-12-01T12:00:00.000+0900&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;2017-12-01 12:00:00&lt;span class=&quot;nt&quot;&gt;&amp;lt;/time&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;見出し1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;本文&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;トップ&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;：ブログのエントリーを表すために使う。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;：ブログのヘッダーおよびフッターを表すために使う。このブログでは、ブログタイトルやメタデータをヘッダーに表示して、ナビゲーションのリンクをフッターに表示している。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt;：ブログ本文をヘッダーやフッターと区別して表すために使う。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt;：ブログのエントリーの公開日時を表すために使う。&lt;code&gt;datetime&lt;/code&gt;属性によって公開日時を指定できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;コード&lt;/h1&gt;
&lt;pre lang=&quot;html&quot; class=&quot;highlight highlight-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;figure&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;app/models/pokemon.rb&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;pre&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;code&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ruby&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt;：文書とは別に参考資料として付け加えたコンテンツを表すために使う。画像やコードに対して使えるようだ。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt;：参考資料のキャプションを表すために使う。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;画像&lt;/h1&gt;
&lt;pre lang=&quot;html&quot; class=&quot;highlight highlight-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;figure&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;図1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;srcset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/figure1-large.png, /figure1-large@2x.png 2x&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;media=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(min-width: 600px)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/figure1.png&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;srcset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/figure1.png, /figure1@2x.png 2x&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;図1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt;：条件に合わせて表示する画像を切り替えることができる。レスポンシブデザインをサポートしたり、画像の最適化のために使う。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt;：複数のリソースを指定するために使う。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;その他&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;：追記されたテキストを表すために使う。&lt;code&gt;datetime&lt;/code&gt;属性に追記日時を指定できる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt;：削除されたテキストを表すために使う。&lt;code&gt;datetime&lt;/code&gt;属性に削除日時を指定できる。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>ブログで使うHTML5</title>
    <updated>2017-12-03T20:03:00+09:00</updated>
    <dc:date>2017-12-03T20:03:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/306/</id>
    <link href="https://blog.naoty.dev/306/"/>
    <summary>&lt;p&gt;他のメンバーがコードを読むときに知っておいてほしいことを意識して、以下の順に書いている。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;モジュール&lt;/li&gt;
&lt;li&gt;定数&lt;/li&gt;
&lt;li&gt;関連&lt;/li&gt;
&lt;li&gt;属性（&lt;code&gt;enum&lt;/code&gt;, &lt;code&gt;attribute&lt;/code&gt;など）&lt;/li&gt;
&lt;li&gt;コールバック&lt;/li&gt;
&lt;li&gt;バリデーション&lt;/li&gt;
&lt;li&gt;スコープ&lt;/li&gt;
&lt;li&gt;クラスメソッド&lt;/li&gt;
&lt;li&gt;インスタンスメソッド&lt;/li&gt;
&lt;li&gt;プライベートメソッド&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下のコードは例のために書いてみたけど、動くかわからない。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pokemon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Tradable&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;INITIAL_HP_RANGE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:master&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:skills&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;gender: &lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%i[male female]&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;before_validation&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:set_initial_hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;on: :create&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;validates&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;presence: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;validates&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;numericality: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;greater_than_or_equal_to: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:first_generation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;151&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capture&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;attack&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_initial_hp&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;INITIAL_HP_RANGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>モデルに記述する順番</title>
    <updated>2017-12-02T23:02:00+09:00</updated>
    <dc:date>2017-12-02T23:02:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/305/</id>
    <link href="https://blog.naoty.dev/305/"/>
    <summary>&lt;p&gt;アプリからデータのバックアップを受け取るときに、サーバー側で差分更新を行う必要がある。全部消去してから全部挿入するという実装も考えられるが、何かの実装ミスの際に全消去してしまうリスクがありそうなので避けたい。&lt;/p&gt;
&lt;p&gt;新しいデータと既存のデータを比較して、以下のような操作をする必要がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新しいデータにも既存のデータにもあるデータを更新する。&lt;/li&gt;
&lt;li&gt;新しいデータにあるが、既存のデータにないデータを挿入する。&lt;/li&gt;
&lt;li&gt;新しいデータにないが、既存のデータにあるデータを削除する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これを実行するロジックをあらためて考えてみた。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;new_users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;...&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;...&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;new_users_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index_by&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;in_batches&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# インデックスから取得できたデータは取り除いていく&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 残ったデータはINSERT時に利用する&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_users_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 新しいデータに含まれているかチェック&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# 含まれていなければDELETE&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;destroy&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# 含まれていればUPDATE&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 残ったデータはすべてINSERTする&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;new_users_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>モデルの差分更新</title>
    <updated>2017-12-01T21:40:00+09:00</updated>
    <dc:date>2017-12-01T21:40:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/304/</id>
    <link href="https://blog.naoty.dev/304/"/>
    <summary>&lt;p&gt;ブログをはてなブログからGitHub Pagesに移行した。&lt;/p&gt;
&lt;p&gt;dev.toを見てからWebプログラマーのブログは高速に表示されるべきだと思うようになったので、GitHub Pagesに移行して、マークアップからすべてフルスクラッチすることにした。&lt;/p&gt;
&lt;p&gt;移行にあたっていくつかStatic Site Generatorを試してみたが、どれもしっくりこなかったので、gulpのプラグインを組み合わせてHTMLやCSSを組み立てることにした。コードは&lt;a href=&quot;https://github.com/naoty/homepage&quot;&gt;naoty/homepage&lt;/a&gt;にある。&lt;/p&gt;
&lt;p&gt;以下、やったこととか気をつけたこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ページの各コンテンツをmarkdownで書くようにして、ejsで書いたレイアウトに展開するようにした。これは既存のgulpプラグインではできなかったため、独自にgulpプラグインを書いた。&lt;/li&gt;
&lt;li&gt;各投稿からindexページを生成するようにした。ejsで書いたレイアウトに展開するようになっている。また、同時にファイルのmtimeを見てソートするようにしている。これも独自のgulpプラグインを書いて実現した。&lt;/li&gt;
&lt;li&gt;CSSはSASSで書いてCSSに変換して圧縮している。CSSはすべてHTMLの&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;タグ内につっこんでいる。こうすることで、CSSのレンダリングブロックを回避できるため、初回のレンダリングが少し速くなる。&lt;/li&gt;
&lt;li&gt;CSSを書く際に、モバイルファーストを念頭にまずスマホ表示を前提に書き始めた。そして、画面を広げながら、余白が気になる部分でメディアクエリを使って広い画面向けのスタイルを追加している。&lt;/li&gt;
&lt;li&gt;最終的なHTMLは圧縮している。ここらへん、できる限りファイルサイズを抑えてパフォーマンスを最適化しようとしている。結果的に、PageSpeed Insightsでほぼ100点をとれるようになった。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;pagespeed-insights.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;pagespeed-insights.png&quot; alt=&quot;pagespeed-insights&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ファイル名をURLに使おうとすると、濁点や半濁点を含むファイル名が表示できなくなることがある。これは、macOSのファイル名はUTF-8-MACと呼ばれるエンコーディングが使われているためで、濁点や半濁点が通常のUTF-8と異なるために起きているらしい。&lt;/li&gt;
&lt;li&gt;ファイル名には自然数を使うようにし、タイトルはfront matterで指定するようにした。front matterでは、タイトルの他に&lt;code&gt;description&lt;/code&gt;や&lt;code&gt;og:image&lt;/code&gt;を設定できるようにした。&lt;/li&gt;
&lt;li&gt;Lighthouseを参考にmanifest.jsonを書くなどPWAの要件を満たすようにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;lighthouse.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;lighthouse.png&quot; alt=&quot;lighthouse&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://github.com/naoty/homepage&quot;&gt;naoty/homepage&lt;/a&gt;のpublicディレクトリをgitサブモジュールにして&lt;a href=&quot;https://github.com/naoty/naoty.github.io&quot;&gt;naoty/naoty.github.io&lt;/a&gt;にpushするようにしている。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>GitHub Pagesに移行した</title>
    <updated>2017-11-29T17:12:00+09:00</updated>
    <dc:date>2017-11-29T17:12:00+09:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/303/</id>
    <link href="https://blog.naoty.dev/303/"/>
    <summary>&lt;p&gt;GitHub Pagesに引っ越しました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://naoty.github.io/posts/index.html&quot;&gt;https://naoty.github.io/posts/index.html&lt;/a&gt;&lt;/p&gt;</summary>
    <title>引っ越しのお知らせ</title>
    <updated>2017-11-25T21:04:00+00:00</updated>
    <dc:date>2017-11-25T21:04:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/302/</id>
    <link href="https://blog.naoty.dev/302/"/>
    <summary>&lt;p&gt;先月から毎日日報を書くことにした。毎日コードを書いてコミットし続けるのは大変だけど、通勤時間に本を読んだり仕事のなかで学ぶことはあるから、せめて日報にそれを記録しようと思った。&lt;/p&gt;
&lt;p&gt;日報はDropbox内にmarkdown形式で書いている。&lt;code&gt;~/Dropbox/Documents/日報/2017-11-01.md&lt;/code&gt;みたいなパスに保存している。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## 学んだこと

## 思ったこと
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;みたいなフォーマットで書いている。日報を書くハードルを下げるために&lt;code&gt;nippo&lt;/code&gt;というスクリプトを書いた。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/nippo&quot;&gt;naoty/nippo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;毎日記録することで少しずつ前進している実感が湧いてきた。&lt;/p&gt;</summary>
    <title>Write 日報 Every Day</title>
    <updated>2017-11-02T22:37:00+00:00</updated>
    <dc:date>2017-11-02T22:37:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/301/</id>
    <link href="https://blog.naoty.dev/301/"/>
    <summary>&lt;p&gt;最近GoによるWebアプリケーション開発を学び始めたので間違っている箇所があればコメントください。&lt;/p&gt;
&lt;h2&gt;ServeMux型によるルーティング&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;http.Handle&lt;/code&gt;関数を使うとパスに対するルーティングを登録することができる。&lt;code&gt;http.Handler&lt;/code&gt;型は実際にリクエストを処理するオブジェクトで、下のように実装すると&lt;code&gt;/foods&lt;/code&gt;へのリクエストを&lt;code&gt;*FoodsHandler&lt;/code&gt;型が処理することになる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http.Handle(&quot;/foods&quot;, &amp;amp;handlers.FoodsHandler{})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;http.Handle&lt;/code&gt;関数によって登録されたルーティングは&lt;code&gt;http.DefaultServeMux&lt;/code&gt;という&lt;code&gt;*ServeMux&lt;/code&gt;型の変数が保持することになる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type ServeMux struct {
    mu sync.RWMutex
    m map[string]muxEntry
    hosts bool
}

type muxEntry struct {
    h Handler
    pattern string
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;登録されたルーティングはフィールド&lt;code&gt;m&lt;/code&gt;で保持される。サーバーは&lt;code&gt;m&lt;/code&gt;から一致するパスを探し、対応する&lt;code&gt;Handler&lt;/code&gt;を呼び出す。&lt;/p&gt;
&lt;p&gt;見たところ、&lt;code&gt;ServeMux&lt;/code&gt;型では&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;等のHTTPメソッドを考慮していない。RESTful APIを実装するにはHTTPメソッドを考慮する必要があるため、&lt;code&gt;ServeMux&lt;/code&gt;型によるルーティングでは不十分だと分かる。そこで、ルーティングを自前で実装する。&lt;/p&gt;
&lt;h2&gt;Handlerによるルーティング&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;http.Handle&lt;/code&gt;関数の代わりに&lt;code&gt;http.ListenAndServe&lt;/code&gt;関数に渡す&lt;code&gt;http.Handler&lt;/code&gt;によってルーティングを実装する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http.ListenAndServe(&quot;:8080&quot;, handler)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;http.DefaultServeMux&lt;/code&gt;を使う場合は&lt;code&gt;handler&lt;/code&gt;の代わりに&lt;code&gt;nil&lt;/code&gt;を渡すが、自前のハンドラーを使う場合はここに渡す。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type RoutesHandler struct {
    routes map[string]map[string]http.Handler
}

func (h *RoutesHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
    paths, ok := h.routes[r.Method]
    if !ok {
        w.WriteHeader(http.StatusNotFound)
        return
    }

    handler, ok := paths[r.URL.Path]
    if !ok {
        w.WriteHeader(http.StatusNotFound)
        return
    }

    handler.ServeHTTP(w, r)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;*ServeMux&lt;/code&gt;型とは違い、&lt;code&gt;map[string]map[string]http.Handler&lt;/code&gt;型のフィールド&lt;code&gt;routes&lt;/code&gt;でHTTPメソッドを含むルーティングを管理するようにした。&lt;code&gt;ServeHTTP&lt;/code&gt;関数を実装することで&lt;code&gt;http.Handler&lt;/code&gt;型のインターフェイスを満たしている。内部で&lt;code&gt;routes&lt;/code&gt;から一致するハンドラーを呼び出す。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func (h *RoutesHandler) GET(path string, handler http.Handler) {
    h.register(&quot;GET&quot;, path, handler)
}

func (h *RoutesHandler) POST(path string, handler http.Handler) {
    h.register(&quot;POST&quot;, path, handler)
}

func (h *RoutesHandler) register(method, path string, handler http.Handler) {
    if h.routes == nil {
        h.routes = make(map[string]map[string]http.Handler)
    }

    _, ok := h.routes[method]
    if !ok {
        h.routes[method] = make(map[string]http.Handler)
    }

    h.routes[method][path] = handler
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こうした関数を定義し、ルーティングを登録できるようにする。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;routesHandler := &amp;amp;handlers.RoutesHandler{}
routesHandler.GET(&quot;/foods&quot;, &amp;amp;handlers.FoodsHandler{})

http.ListenAndServe(&quot;:8080&quot;, routesHandler)
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>net/httpによるHTTPメソッドを含んだルーティングの実装</title>
    <updated>2017-09-24T14:35:00+00:00</updated>
    <dc:date>2017-09-24T14:35:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/300/</id>
    <link href="https://blog.naoty.dev/300/"/>
    <summary>&lt;h2&gt;base image&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;library/golang&lt;/code&gt;で公式イメージが用意されている。ユースケースに合わせていくつかの種類が用意されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;golang:&amp;lt;version&amp;gt;&lt;/code&gt;: 何が必要なのか分かっていない場合はこれを使った方がよさそう。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;golang:alpine&lt;/code&gt;: Alpine Linuxをベースとしているため非常に軽い。イメージサイズを小さくしたい場合に推奨されている。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;golang:onbuild&lt;/code&gt;: ネット上ではよく紹介されているが、公式では非推奨とされている。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ディレクトリレイアウト&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ docker run -i -t --rm golang:1.9 /bin/bash
root@xxxxxxxxx:/go# pwd
/go
root@xxxxxxxxx:/go# ls
bin src
root@xxxxxxxxx:/go# env | grep GO
GOLANG_VERSION=1.9
GOPATH=/go
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;GOPATH&lt;/code&gt;が&lt;code&gt;/go&lt;/code&gt;に設定されているので、&lt;code&gt;/go/src/&lt;/code&gt;以下に&lt;code&gt;WORKDIR&lt;/code&gt;を設定していく。&lt;/p&gt;
&lt;h2&gt;Dockerfile&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;FROM golang:1.9
WORKDIR /go/src/github.com/naoty/golang-sample
COPY . .
RUN go install github.com/naoty/golang-sample
ENTRYPOINT [&quot;golang-sample&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;go install ...&lt;/code&gt;で&lt;code&gt;/go/bin/&lt;/code&gt;以下にバイナリがビルドされる。&lt;code&gt;PATH&lt;/code&gt;は&lt;code&gt;/go/bin&lt;/code&gt;も含まれているため、そのままビルドされたバイナリを指定するだけでOK。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.docker.jp/engine/articles/dockerfile_best-practice.html&quot;&gt;Dockerfile のベストプラクティス — Docker-docs-ja 1.9.0b ドキュメント&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hub.docker.com/_/golang/&quot;&gt;https://hub.docker.com/_/golang/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>GoのためのDockerfile</title>
    <updated>2017-09-18T12:18:00+00:00</updated>
    <dc:date>2017-09-18T12:18:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/299/</id>
    <link href="https://blog.naoty.dev/299/"/>
    <summary>&lt;p&gt;Go言語のレベルアップを目的としてちょっとしたツールを2つ作った。&lt;/p&gt;
&lt;h2&gt;license&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/license&quot;&gt;naoty/license&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MITライセンスファイル（&lt;code&gt;LICENSE&lt;/code&gt;）を作成するとき、いつも&lt;a href=&quot;https://choosealicense.com/licenses/mit/&quot;&gt;MIT License | Choose a License&lt;/a&gt;からコピペしていた。さすがに毎回同じことをするのは面倒になってきたのでテンプレートからテキストを生成するだけのコマンドラインツールを書いた。&lt;code&gt;text/template&lt;/code&gt;を使ったことがなかったのでちょうどいい練習になった。&lt;/p&gt;
&lt;h2&gt;brewery&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/brewery&quot;&gt;naoty/brewery&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Goで書いたコマンドラインツールは&lt;a href=&quot;https://github.com/naoty/homebrew-misc&quot;&gt;naoty/homebrew-misc&lt;/a&gt;からHomebrewでインストールできるようにしている。その準備をするためにformulaを作るとき、&lt;code&gt;brew create &amp;lt;url&amp;gt; --tap naoty/misc&lt;/code&gt;を実行していた。しかし、この方法だと&lt;code&gt;/usr/local/Homebrew/Library/Taps/naoty/homebrew-misc/&lt;/code&gt;以下にformulaが作成されてしまい、その後ワークスペースにコピペする作業が発生していた。&lt;/p&gt;
&lt;p&gt;そこで、formulaをテンプレートから生成して標準出力に出力するだけのコマンドラインツールを作った。SHA256もちゃんと計算してくれるので便利。今後はformulaを書く作業が捗りそう。&lt;/p&gt;
&lt;h2&gt;学び&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;text/template&lt;/code&gt;の使い方。Webアプリケーションを開発するのであれば、同じようなパッケージである&lt;code&gt;html/template&lt;/code&gt;が確実に必要になるので、覚えておきたかった。&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://github.com/jteeuwen/go-bindata&quot;&gt;https://github.com/jteeuwen/go-bindata&lt;/a&gt;によってテンプレートをバイナリに含めること。これもテンプレートを使う以上シングルバイナリにして配布を簡単にするために必要になるだろう。&lt;/li&gt;
&lt;li&gt;golang/depの使い方。おおかたの仕様についてはstableになったとのことなので、今から使い方に慣れておきたい。&lt;code&gt;dep ensure&lt;/code&gt;のバリエーションと&lt;code&gt;Gopkg.toml&lt;/code&gt;の書き方をもう少し把握したい。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Goでちょっとしたツールを作った</title>
    <updated>2017-09-16T18:49:00+00:00</updated>
    <dc:date>2017-09-16T18:49:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/298/</id>
    <link href="https://blog.naoty.dev/298/"/>
    <summary>&lt;h2&gt;5月&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;結婚式を挙げ、新婚旅行にいった。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;6月&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;30歳になった。&lt;/li&gt;
&lt;li&gt;仕事が忙しくなりはじめる。最近はRailsでサーバーサイドを書いている。&lt;/li&gt;
&lt;li&gt;結婚式の準備などの忙しさから解放されたため、個人開発を少しずつ始める。ElectronでTodoアプリを作り始め、Webpack, React, Redux, TypeScriptなどモダンなWebフロントエンドの技術スタックについて学んだ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;7月&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;仕事の忙しさがピークに至る。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;8月&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;仕事がだいたい落ち着く。&lt;/li&gt;
&lt;li&gt;お盆休みは海いったりバーベキューしたり、ここ10年で最も充実した夏だった。&lt;/li&gt;
&lt;li&gt;個人開発では、RailsでモダンなWebフロントエンド環境を導入するための知見を学んだ。具体的にはwebpackerについて学んだ。&lt;a href=&quot;http://naoty.hatenablog.com/entry/2017/08/17/201249&quot;&gt;http://naoty.hatenablog.com/entry/2017/08/17/201249&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;また、GraphQLにも興味をもちRailsで試してみたりした。引き続き学んでいきたい。&lt;/li&gt;
&lt;li&gt;ある日、思い立ってこのブログのスタイルを書いた。なるべく文章が読みやすいデザインを心がけた。&lt;a href=&quot;https://github.com/naoty/focus-theme&quot;&gt;https://github.com/naoty/focus-theme&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>近況</title>
    <updated>2017-09-05T19:24:00+00:00</updated>
    <dc:date>2017-09-05T19:24:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/297/</id>
    <link href="https://blog.naoty.dev/297/"/>
    <summary>&lt;p&gt;webpackerを理解するため、&lt;code&gt;rails g webpacker:install&lt;/code&gt;で追加される&lt;code&gt;bin/webpack&lt;/code&gt;や設定の中身を読むことにした。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;bin/webpack&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;newenv = { &quot;NODE_PATH&quot; =&amp;gt; NODE_MODULES_PATH.shellescape }
cmdline = [&quot;yarn&quot;, &quot;run&quot;, &quot;webpack&quot;, &quot;--&quot;, &quot;--config&quot;, WEBPACK_CONFIG] + ARGV

Dir.chdir(APP_PATH) do
  exec newenv, *cmdline
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;bin/webpack&lt;/code&gt;では実際には&lt;code&gt;yarn run webpack -- --config WEBPACK_CONFIG&lt;/code&gt;を実行している。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;WEBPACK_CONFIG&lt;/code&gt;は&lt;code&gt;config/webpack/#{NODE_ENV}.js&lt;/code&gt;となっているため、&lt;code&gt;config/webpack/development.js&lt;/code&gt;などとなる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;code&gt;config/webpack/development.js&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;const sharedConfig = require('./shared.js')

module.exports = merge(sharedConfig, {
  // ...
})
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;config/webpack/shared.js&lt;/code&gt;というファイルが環境ごとの設定ファイルでmergeされているようだ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;code&gt;config/webpack/shared.js&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;const { env, settings, output, loaderDir } = require('./configuration.js')
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;settings&lt;/code&gt;は&lt;code&gt;config/webpacker.yml&lt;/code&gt;をロードしたオブジェクトを参照している。
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;settings.extensions&lt;/code&gt;: &lt;code&gt;[.coffee, .erb, .js, .jsx, .ts, .vue, ...]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;settings.source_path&lt;/code&gt;: &lt;code&gt;app/javascript&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;settings.source_entry_path&lt;/code&gt;: &lt;code&gt;packs&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;output&lt;/code&gt;は&lt;code&gt;path&lt;/code&gt;と&lt;code&gt;publicPath&lt;/code&gt;というプロパティをもったオブジェクトを参照している。
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;path&lt;/code&gt;: &lt;code&gt;public/packs&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;publicPath&lt;/code&gt;: ‘/packs’
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ASSET_HOST&lt;/code&gt;という環境変数を指定することでホストを変更できそう。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;loadersDir&lt;/code&gt;は&lt;code&gt;config/webpack/loaders/&lt;/code&gt;を参照している。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;const extensionGlob = `**/*{${settings.extensions.join(',')}}*`
const entryPath = join(settings.source_path, settings.source_entry_path)
const packPaths = sync(join(entryPath, extensionGlob))

module.exports = {
  entry: packPaths.reduce(
    // ...
  )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;entry&lt;/code&gt;はwebpackによってbundleされる対象のファイルを設定する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sync&lt;/code&gt;は&lt;a href=&quot;https://github.com/isaacs/node-glob&quot;&gt;https://github.com/isaacs/node-glob&lt;/a&gt;からexportされている。同期的にglobサーチをしている。&lt;/li&gt;
&lt;li&gt;ここでは、&lt;code&gt;app/javascript/packs/**/*{.coffee,.erb,.js,.jsx}*&lt;/code&gt;のようなglobでファイルを検索し、マッチしたファイルのリストが&lt;code&gt;packPaths&lt;/code&gt;に代入されている。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;つまり、&lt;code&gt;app/javascript/packs/&lt;/code&gt;以下の&lt;code&gt;settings.extensions&lt;/code&gt;で指定された拡張子をもつファイルがwebpackによってbundleされるということになる。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;module.exports = {
  entry: packPaths.reduce(
    (map, entry) =&amp;gt; {
      const localMap = map
      const namespace = relative(join(entryPath), dirname(entry))
      localMap[join(namespace, basename(entry, extname(entry)))] = resolve(entry)
      return localMap
    }, {}
  )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;entry&lt;/code&gt;にオブジェクトが指定された場合、プロパティごとにbundleされるファイルが分割される。&lt;code&gt;output.filename&lt;/code&gt;で&lt;code&gt;[name]&lt;/code&gt;と指定された箇所にプロパティ名が入る。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;const { env, settings, output, loaderDir } = require('./configuration.js')

module.exports = {
  output: {
    filename: '[name].js',
    path: output.path,
    publicPath: output.publicPath
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;output&lt;/code&gt;はbundleされたファイルの出力先を設定する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;output.filename&lt;/code&gt;でbundleされたファイル名を設定する。&lt;code&gt;entry&lt;/code&gt;がオブジェクトで指定されているため、&lt;code&gt;[name]&lt;/code&gt;にはオブジェクトの各プロパティ名が代入される。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;output.path&lt;/code&gt;は出力先のパスを設定する。上記の通り&lt;code&gt;public/packs&lt;/code&gt;が設定されている。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;output.publicPath&lt;/code&gt;は本番ビルド時のCSSやHTML内のURLを設定する。これは本番のみCDNを使う場合に便利。上述の通りこれは&lt;code&gt;/packs&lt;/code&gt;が設定されているが、&lt;code&gt;ASSET_HOST&lt;/code&gt;という環境変数でこれを変更することができるようになっている。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;module.exports = {
  module: {
    rules: sync(join(loadersDir, '*.js')).map(loader =&amp;gt; require(loader))
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;rules&lt;/code&gt;はwebpackのモジュールを設定する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;config/webpack/loaders/*.js&lt;/code&gt;にマッチするファイルを検索している。&lt;/li&gt;
&lt;li&gt;マッチしたファイルを&lt;code&gt;require&lt;/code&gt;している。各ファイルは以下のようになっている。これによって、&lt;code&gt;config/webpack/loaders/*.js&lt;/code&gt;内の設定を展開している。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;module.exports = {
  test: /\.(jpg|jpeg|png|gif|svg|eot|ttf|woff|woff2)$/i,
  use: [{
    loader: 'file-loader',
    options: {
      publicPath,
      name: env.NODE_ENV === 'production' ? '[name]-[hash].[ext]' : '[name].[ext]'
    }
  }]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;const webpack = require('webpack')
const ExtractTextPlugin = require('extract-text-webpack-plugin')
const ManifestPlugin = require('webpack-manifest-plugin')

module.exports = {
  plugins: [
    new webpack.EnvironmentPlugin(JSON.parse(JSON.stringify(env))),
    new ExtractTextPlugin(env.NODE_ENV === 'production' ? '[name]-[hash].css' : '[name].css'),
    new ManifestPlugin({
      publicPath: output.publicPath,
      writeToFileEmit: true
    })
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;plugins&lt;/code&gt;はwebpackのプラグインを設定する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;webpack.EnvironmentPlugin&lt;/code&gt;は&lt;code&gt;process.env&lt;/code&gt;から環境変数にアクセスできるようにするプラグイン。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ExtractTextPlugin&lt;/code&gt;はコンパイルされたテキストを別ファイルに出力するプラグイン。コンパイルしたCSSをJavaScriptでロードする他にLinkタグからロードしたい場合、コンパイルしたCSSをCSSファイルとして出力するためにこのプラグインを使う。
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;[name]-[hash].css&lt;/code&gt;の&lt;code&gt;[hash]&lt;/code&gt;はビルド毎のユニークなハッシュ値を表す。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ManifestPlugin&lt;/code&gt;はマニフェストファイルを生成するプラグイン。マニフェストファイルには、ファイル名と対応するコンパイル後のファイル名が載っている。マニフェストファイルによって、コンパイル前のファイル名からコンパイル後のファイル名に名前解決し、ヘルパーからアクセスできる。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;= stylesheet_pack_tag &quot;application&quot; # load /packs/application-xxxxxxxx.css
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{
  &quot;application.css&quot;: &quot;/packs/application-xxxxxxxx.css&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;module.exports = {
  resolve: {
    extensions: settings.extensions,
    modules: [
      resolve(settings.source_path),
      'node_modules'
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;resolve&lt;/code&gt;はモジュール解決方法を設定する。webpackはデフォルトではいい感じに設定されている。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;resolve.extensions&lt;/code&gt;はファイル名からモジュールを解決する際に自動的に付与する拡張子を設定する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;resolve.modules&lt;/code&gt;はモジュールを解決する際に検索されるディレクトリを設定する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;code&gt;github.com/rails/webpacker/lib/webpacker/helper.rb&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;#stylesheet_pack_tag&lt;/code&gt;がマニフェストファイルからどのようにアセットを参照するかを確認する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def stylesheet_pack_tag(*names, **options)
  unless Webpacker.dev_server.running? &amp;amp;&amp;amp; Webpacker.dev_server.hot_module_replacing?
    stylesheet_link_tag(*sources_from_pack_manifest(names, type: :stylesheet), **options)
  end
end

def sources_from_pack_manifest(names, type:)
  names.map { |name| Webpacker.manifest.lookup(pack_name_with_extension(name, type: type)) }
end

def pack_name_with_extension(name, type:)
  &quot;#{name}#{compute_asset_extname(name, type: type)}&quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;#sources_from_pack_manifest&lt;/code&gt;でマニフェストからアセットのファイル名を解決しているようだ。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ActionView::Helpers::AssetUrlHelper#compute_asset_extname&lt;/code&gt;はファイル名と&lt;code&gt;type&lt;/code&gt;から適切な拡張子を返す。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Webpacker.manifest&lt;/code&gt;は&lt;code&gt;Webpacker::Manifest&lt;/code&gt;インスタンスを返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;code&gt;github.com/rails/webpacker/lib/webpacker/manifest.rb&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;def lookup(name)
  compile if compiling?
  find name
end

def find(name)
  data[name.to_s] || handle_missing_entry(name)
end

def data
  if env.development?
    refresh
  else
    @data ||= load
  end
end

def refresh
  @data = load
end

def load
  if config.public_manifest_path.exist?
    JSON.parse config.public_manifest_path.read
  else
    {}
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;#lookup&lt;/code&gt;はマニフェストファイルの中身にアクセスしている。&lt;/li&gt;
&lt;li&gt;マニフェストファイルの中身は&lt;code&gt;JSON.parse&lt;/code&gt;した結果をメモリに保持している。開発環境ではアクセス毎に&lt;code&gt;JSON.parse&lt;/code&gt;し直している。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>`bin/webpack`を読んだ</title>
    <updated>2017-08-17T20:12:00+00:00</updated>
    <dc:date>2017-08-17T20:12:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/296/</id>
    <link href="https://blog.naoty.dev/296/"/>
    <summary>&lt;p&gt;プロジェクト移行期に入って暇な時間ができたので、開発環境をリフレッシュすることにした。vim や zsh の設定が少しずつ壊れてきていたのだった。&lt;/p&gt;
&lt;p&gt;.vimrc や .zshrc を眺めてみると、かつて &lt;del&gt;意識が高かった頃に&lt;/del&gt; 施した設定が何のためのものだったのか忘れてしまっていた。別人が書いたスパゲティコードのようだった。&lt;/p&gt;
&lt;p&gt;また vim や zsh の設定を検索して理解するべきなんだろうか。ここで覚えた知識はまたすぐに忘れてしまうんじゃないだろうか。設定が洗練されるほどに、それを更新する機会もまた少なくなってくる。設定が必要になるきっかけは忘れた頃にやってくるもんだ。&lt;/p&gt;
&lt;p&gt;やり方を根本的に見直す時期なのかもしれない。新しいツールもいまなら選択できる。&lt;/p&gt;
&lt;p&gt;まず、vim から atom に移行した。git のコミットメッセージやちょっとしたファイルの修正ではまだ vim を使うものの、細かい設定が必要になる作業では vim を使うのをやめた。デフォルトでインストールされているプラグインのおかげで、開発環境に合ったプラグインをインストールだけで充分に使えるものになった。&lt;/p&gt;
&lt;p&gt;プラガブルな作りになっているから、プラグインのインストール・アンインストールだけで設定が完結してしまう。もしプラグインが壊れたら、替わりをインストールすればいい。解決すべき問題は局所化されているから、なんとか自作することも可能だろう。&lt;/p&gt;
&lt;p&gt;次に、zsh から fish に移行した。fish は設定しなくてもコマンドの補完などの設定がデフォルトでいい感じになっていて、ほとんど設定がいらなかった。しかも、設定ファイルも何種類もあるのではなくて、1つのファイルだけでいいようだ。&lt;/p&gt;
&lt;p&gt;fish 自体にはプラガブルな機構がないので、&lt;a href=&quot;https://github.com/fisherman/fisherman&quot;&gt;fisherman&lt;/a&gt; というツールを併用している。fisherman によってプラグインのインストール・アンインストール、依存関係の管理が可能になった。&lt;/p&gt;
&lt;p&gt;自分でいくつかプラグインをつくった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://github.com/naoty/fish-my_prompt&quot;&gt;naoty/fish-my_prompt&lt;/a&gt; : 自分好みのプロンプトが見当たらなかったので自作した。&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://github.com/naoty/fish-my_key_bindings&quot;&gt;naoty/fish-my_key_bindings&lt;/a&gt; : キーバインディングも関数として定義できるためプラグイン化した。これによって、インストール・アンインストールだけで設定を変更できる。&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://github.com/naoty/fish-my_peco_functions&quot;&gt;naoty/fish-my_peco_functions&lt;/a&gt; : 以前から peco を使っていたため、peco と組み合わせて使う関数群をプラグイン化した。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;結局、設定ファイルがプラグインという形に変わっただけではとも思ったが、一度壊れたプラグインはおそらくもう修正することはないだろう。アンインストールして、新たに必要なプラグインを見繕うことになる。ダメになったら捨てればいい、みたいな気軽さがある。&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;追記（2017-04-20）&lt;/h2&gt;
&lt;p&gt;思っていた以上に反響があって驚いた。修正点と反響へのコメントを載せます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「意識が高かった頃に施した」という表現を撤回しました。意識が高いとか低いとか不毛な話を避けたかったので。&lt;/li&gt;
&lt;li&gt;vim と zsh だけじゃなく tmux も捨てました。サーバー内で作業するなら必要かもしれないけど、普段の開発では主にウィンドウ分割の用途としてのみ使っており、iTerm 2 の機能だけで十分ではということに気づきました。&lt;/li&gt;
&lt;li&gt;デフォルトのままが良いという話について。僕は普段は iOS アプリの開発が主な仕事なので、シェルスクリプトに触れる機会はあんまりありません。サーバーにログインして何か作業するような仕事がメインであれば、bash をデフォルト設定で使ったり、ちゃんとシェルスクリプトを理解することは必要だと思います。あくまでここに書いたのは僕の場合なので、そこを考慮してくれると誤解がないかなと思います。&lt;/li&gt;
&lt;li&gt;Git で設定ファイル群、俗にいう dotfiles を管理すれば良いという話について。僕もかなり昔から &lt;a href=&quot;https://github.com/naoty/dotfiles&quot;&gt;dotfiles&lt;/a&gt; を GitHub で公開しており、かつてはちゃんとメンテナンスしていました。やらなくなった理由としては、細かいチューニングの度にコミットするのがめんどくさくなったということがありますね。あとは、直接設定ファイルを修正することが減ってきているというのもあります。atom の設定画面でポチポチ設定を修正すると、それをコミットするのを忘れてしまうのです。こうして大きい差分が生まれてしまい、メンテナンスをする意欲が失われていきました。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>vim も zsh も捨てた</title>
    <updated>2017-04-18T22:46:00+00:00</updated>
    <dc:date>2017-04-18T22:46:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/295/</id>
    <link href="https://blog.naoty.dev/295/"/>
    <summary>&lt;p&gt;既に似たような記事は存在するものの、 initializer や middleware の差分までは触れられていなかったので、捕捉するような記事です。&lt;/p&gt;
&lt;h2&gt;主な差分&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アセットパイプライン関連の設定やディレクトリがなくなった。&lt;/li&gt;
&lt;li&gt;Cookie 等 Web ブラウザでしか使われない設定やミドルウェアがなくなった。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rails new rails-sample
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rails new rails-api-sample &lt;span class=&quot;nt&quot;&gt;--api&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;--api&lt;/code&gt; をつけると API モードで rails アプリケーションを作成する。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;diff &lt;span class=&quot;nt&quot;&gt;-qr&lt;/span&gt; rails-sample rails-api-sample
Files rails-sample/Gemfile and rails-api-sample/Gemfile differ
Files rails-sample/Gemfile.lock and rails-api-sample/Gemfile.lock differ
Only &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;rails-sample/app: assets
Files rails-sample/app/controllers/application_controller.rb and rails-api-sample/app/controllers/application_controller.rb differ
Only &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;rails-sample/app: helpers
Only &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;rails-sample/app/views/layouts: application.html.erb
Files rails-sample/config/application.rb and rails-api-sample/config/application.rb differ
Files rails-sample/config/environments/development.rb and rails-api-sample/config/environments/development.rb differ
Files rails-sample/config/environments/production.rb and rails-api-sample/config/environments/production.rb differ
Only &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;rails-sample/config/initializers: assets.rb
Only &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;rails-sample/config/initializers: cookies_serializer.rb
Only &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;rails-api-sample/config/initializers: cors.rb
Files rails-sample/config/initializers/new_framework_defaults.rb and rails-api-sample/config/initializers/new_framework_defaults.rb differ
Only &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;rails-sample/config/initializers: session_store.rb
Files rails-sample/config/secrets.yml and rails-api-sample/config/secrets.yml differ
Only &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;rails-sample/lib: assets
Only &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;rails-sample/public: 404.html
Only &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;rails-sample/public: 422.html
Only &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;rails-sample/public: 500.html
Only &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;rails-sample/public: apple-touch-icon-precomposed.png
Only &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;rails-sample/public: apple-touch-icon.png
Only &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;rails-sample/public: favicon.ico
Only &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;rails-sample/test: helpers
Only &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;rails-sample/tmp/cache: assets
Only &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;rails-sample/vendor: assets
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;API モードの Rails アプリケーションには、アセット関連のファイルやディレクトリ、ヘルパー、レイアウトファイル、そして cookie 等の Web ブラウザに関連する設定ファイルがない。&lt;/li&gt;
&lt;li&gt;逆に API モードには CORS に関する initializer が存在する。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ diff {rails-sample,rails-api-sample}/Gemfile
15,27d14
&amp;lt; # Use SCSS for stylesheets
&amp;lt; gem 'sass-rails', '~&amp;gt; 5.0'
&amp;lt; # Use Uglifier as compressor for JavaScript assets
&amp;lt; gem 'uglifier', '&amp;gt;= 1.3.0'
&amp;lt; # Use CoffeeScript for .coffee assets and views
&amp;lt; gem 'coffee-rails', '~&amp;gt; 4.2'
&amp;lt; # See https://github.com/rails/execjs#readme for more supported runtimes
&amp;lt; # gem 'therubyracer', platforms: :ruby
&amp;lt;
&amp;lt; # Use jquery as the JavaScript library
&amp;lt; gem 'jquery-rails'
&amp;lt; # Turbolinks makes navigating your web application faster. Read more: https://github.com/turbolinks/turbolinks
&amp;lt; gem 'turbolinks', '~&amp;gt; 5'
29c16
&amp;lt; gem 'jbuilder', '~&amp;gt; 2.5'
---
&amp;gt; # gem 'jbuilder', '~&amp;gt; 2.5'
37a25,27
&amp;gt; # Use Rack CORS for handling Cross-Origin Resource Sharing (CORS), making cross-origin AJAX possible
&amp;gt; # gem 'rack-cors'
&amp;gt;
44,45d33
&amp;lt;   # Access an IRB console on exception pages or by using &amp;lt;%= console %&amp;gt; anywhere in the code.
&amp;lt;   gem 'web-console', '&amp;gt;= 3.3.0'
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;API モードでは、rack-cors という CORS をケアする rubygems が含まれる。&lt;/li&gt;
&lt;li&gt;逆に、API モードでは不要なアセットパイプラインに関わる rubygems は含まれない。&lt;/li&gt;
&lt;li&gt;API モードでは、jbuilder がコメントアウトされているのが興味深い。JSON 以外のフォーマットが採用される可能性を見越しているのかな。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;diff &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;rails-sample,rails-api-sample&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/app/controllers/application_controller.rb
1,2c1
&amp;lt; class ApplicationController &amp;lt; ActionController::Base
&amp;lt;   protect_from_forgery with: :exception
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; class ApplicationController &amp;lt; ActionController::API
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;API モードでは CSRF 対策は不要なので削除されている。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ActionController::Base&lt;/code&gt; ではなく &lt;code&gt;ActionController::API&lt;/code&gt; を継承するようになっている。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;diff &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;rails-sample,rails-api-sample&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/config/application.rb
3c3,13
&amp;lt; require &lt;span class=&quot;s1&quot;&gt;'rails/all'&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; require &lt;span class=&quot;s2&quot;&gt;&quot;rails&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Pick the frameworks you want:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; require &lt;span class=&quot;s2&quot;&gt;&quot;active_model/railtie&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; require &lt;span class=&quot;s2&quot;&gt;&quot;active_job/railtie&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; require &lt;span class=&quot;s2&quot;&gt;&quot;active_record/railtie&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; require &lt;span class=&quot;s2&quot;&gt;&quot;action_controller/railtie&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; require &lt;span class=&quot;s2&quot;&gt;&quot;action_mailer/railtie&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; require &lt;span class=&quot;s2&quot;&gt;&quot;action_view/railtie&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; require &lt;span class=&quot;s2&quot;&gt;&quot;action_cable/engine&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# require &quot;sprockets/railtie&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; require &lt;span class=&quot;s2&quot;&gt;&quot;rails/test_unit/railtie&quot;&lt;/span&gt;
9c19
&amp;lt; module RailsSample
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; module RailsApiSample
13a24,28
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;# Only loads a smaller set of middleware suitable for API only apps.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;# Middleware like session, flash, cookies can be added back manually.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;# Skip views, helpers and assets when generating a new resource.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;     config.api_only &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;API モードでは &lt;code&gt;require&lt;/code&gt; する rubygems をひとつひとつ書いている。sprockets は API モードでは不要なのでコメントアウトされている。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;require rails/all&lt;/code&gt; の内容と大差はなさそうだが、不要なものをコメントアウトできるようにしてある。&lt;/li&gt;
&lt;li&gt;API モードでは、generate 時にアセットやヘルパーの generate をスキップするオプションが設定されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;diff &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;rails-sample,rails-api-sample&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/config/environments/development.rb
40,46d39
&amp;lt;   &lt;span class=&quot;c&quot;&gt;# Debug mode disables concatenation and preprocessing of assets.&lt;/span&gt;
&amp;lt;   &lt;span class=&quot;c&quot;&gt;# This option may cause significant delays in view rendering with a large&lt;/span&gt;
&amp;lt;   &lt;span class=&quot;c&quot;&gt;# number of complex assets.&lt;/span&gt;
&amp;lt;   config.assets.debug &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&amp;lt;
&amp;lt;   &lt;span class=&quot;c&quot;&gt;# Suppress logger output for asset requests.&lt;/span&gt;
&amp;lt;   config.assets.quiet &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;diff &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;rails-sample,rails-api-sample&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/config/environments/production.rb
21,28d20
&amp;lt;   &lt;span class=&quot;c&quot;&gt;# Compress JavaScripts and CSS.&lt;/span&gt;
&amp;lt;   config.assets.js_compressor &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; :uglifier
&amp;lt;   &lt;span class=&quot;c&quot;&gt;# config.assets.css_compressor = :sass&lt;/span&gt;
&amp;lt;
&amp;lt;   &lt;span class=&quot;c&quot;&gt;# Do not fallback to assets pipeline if a precompiled asset is missed.&lt;/span&gt;
&amp;lt;   config.assets.compile &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&amp;lt;
&amp;lt;   &lt;span class=&quot;c&quot;&gt;# `config.assets.precompile` and `config.assets.version` have moved to config/initializers/assets.rb&lt;/span&gt;
57c49
&amp;lt;   &lt;span class=&quot;c&quot;&gt;# config.active_job.queue_name_prefix = &quot;rails-sample_#{Rails.env}&quot;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# config.active_job.queue_name_prefix = &quot;rails-api-sample_#{Rails.env}&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;環境設定ファイルはアセットパイプラインの設定の有無が異なっているだけだった。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;diff &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;rails-sample,rails-api-sample&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/config/initializers/new_framework_defaults.rb
7,12d6
&amp;lt; &lt;span class=&quot;c&quot;&gt;# Enable per-form CSRF tokens. Previous versions had false.&lt;/span&gt;
&amp;lt; Rails.application.config.action_controller.per_form_csrf_tokens &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&amp;lt;
&amp;lt; &lt;span class=&quot;c&quot;&gt;# Enable origin-checking CSRF mitigation. Previous versions had false.&lt;/span&gt;
&amp;lt; Rails.application.config.action_controller.forgery_protection_origin_check &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&amp;lt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;API モードには CSRF 対策は不要ということで、設定が省かれている。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;rails-sample
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bin/rails initializers &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; initializers.txt
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ../rails-api-sample
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bin/rails initializers &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; initializers.txt
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;diff &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;rails-sample,rails-api-sample&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/initializers.txt
3,5d2
&amp;lt; set_load_path
&amp;lt; set_load_path
&amp;lt; set_load_path
8,12d4
&amp;lt; set_autoload_paths
&amp;lt; set_autoload_paths
&amp;lt; set_autoload_paths
&amp;lt; add_routing_paths
&amp;lt; add_routing_paths
15,18d6
&amp;lt; add_routing_paths
&amp;lt; add_locales
&amp;lt; add_locales
&amp;lt; add_locales
23,28d10
&amp;lt; add_view_paths
&amp;lt; add_view_paths
&amp;lt; add_view_paths
&amp;lt; load_environment_config
&amp;lt; load_environment_config
&amp;lt; load_environment_config
43a26,29
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; global_id
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; active_job.logger
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; active_job.set_configs
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; active_job.set_reloader_hook
67,70d52
&amp;lt; global_id
&amp;lt; active_job.logger
&amp;lt; active_job.set_configs
&amp;lt; active_job.set_reloader_hook
75,90d56
&amp;lt; set_default_precompile
&amp;lt; quiet_assets
&amp;lt; setup_sass
&amp;lt; setup_compression
&amp;lt; jbuilder
&amp;lt; web_console.initialize
&amp;lt; web_console.development_only
&amp;lt; web_console.insert_middleware
&amp;lt; web_console.mount_point
&amp;lt; web_console.template_paths
&amp;lt; web_console.whitelisted_ips
&amp;lt; web_console.whiny_requests
&amp;lt; i18n.load_path
&amp;lt; prepend_helpers_path
&amp;lt; prepend_helpers_path
&amp;lt; prepend_helpers_path
95,98d60
&amp;lt; load_config_initializers
&amp;lt; load_config_initializers
&amp;lt; load_config_initializers
&amp;lt; engines_blank_point
100,103d61
&amp;lt; engines_blank_point
&amp;lt; engines_blank_point
&amp;lt; engines_blank_point
&amp;lt; append_assets_path
109,114c67
&amp;lt; append_assets_path
&amp;lt; override js_template hook
&amp;lt; append_assets_path
&amp;lt; append_assets_path
&amp;lt; turbolinks
&amp;lt; append_assets_path
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; engines_blank_point
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;API モードだと余計な initializers の読み込みが少なくなっているようだ。&lt;/li&gt;
&lt;li&gt;なお、このコマンドは筆者によって追加されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;rails-sample
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bin/rails middleware &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; middleware.txt
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ../rails-api-sample
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bin/rails middleware &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; middleware.txt
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;diff &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;rails-sample,rails-api-sample&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/middleware.txt
6d5
&amp;lt; use Rack::MethodOverride
8d6
&amp;lt; use Sprockets::Rails::QuietAssets
11d8
&amp;lt; use WebConsole::Middleware
17,19d13
&amp;lt; use ActionDispatch::Cookies
&amp;lt; use ActionDispatch::Session::CookieStore
&amp;lt; use ActionDispatch::Flash
23c17
&amp;lt; run RailsSample::Application.routes
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; run RailsApiSample::Application.routes
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Rack::MethodOverride&lt;/code&gt; とは &lt;code&gt;params[:_method]&lt;/code&gt; によって HTTP メソッドを上書きするためのミドルウェアで、PUT や DELETE リクエストはこれによって実現している。しかし、これらは フォーム等の HTML が存在しない API モードでは不要なので削除してあると思われる。&lt;/li&gt;
&lt;li&gt;cookie 等の Web ブラウザに関連するミドルウェアが API モードには含まれない。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Rails APIモードのdiff</title>
    <updated>2017-03-22T15:46:00+00:00</updated>
    <dc:date>2017-03-22T15:46:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/294/</id>
    <link href="https://blog.naoty.dev/294/"/>
    <summary>&lt;p&gt;Homebrew で自分のためだけの細々としたツール類を公開するのが楽しい。&lt;a href=&quot;http://github.com/naoty/homebrew-misc&quot;&gt;naoty/homebrew-misc&lt;/a&gt; という tap を作って、そこにツールのための Formula を置いている。&lt;code&gt;brew tap naoty/misc&lt;/code&gt; を実行すると、インストール可能になる。&lt;/p&gt;
&lt;p&gt;自分で作ったソフトウェアを日々自分で使っていると、ジワジワと幸福感が広がってくる。rubygems など、特定の言語、特定のバージョン、特定のライブラリに依存したソフトウェアはずっと使っていくことができなくなるかもしれない。使えなくなった頃には、もうそのソフトウェアを書き直す意欲やモチベーションは失われているかもしれない。&lt;/p&gt;
&lt;p&gt;できれば、コンパイル済みの実行ファイルのみを配布できるようにしたい。Go を好んで使ってるのはそういう理由だ。Go 以外の言語を使う場合は 2 パターンある。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;その言語でなければ実現できない機能。macOS の機能を使ったソフトウェアは Swift で書くだろう。&lt;a href=&quot;http://github.com/naoty/flock&quot;&gt;naoty/flock&lt;/a&gt; もこの理由で Swift で書かれている。&lt;/li&gt;
&lt;li&gt;ソフトウェアの利用者が特定の言語の利用者に偏ってる場合、メンテナンスしやすさを考えて利用者の言語でソフトウェアを書くことになりそう。CocoaPods や Fastlane が Ruby で書かれていることは、この理由で個人的に好きではない。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;自分のためのツールを Homebrew で配布するのは、仕事用の PC でもプライベート用の PC でも使えるようにしたかったり、PC を新調しても使えるようにしたいからだ。ポータビリティを高めて、ずっと長く使えるようにしたい。自分は iOS アプリのプログラマーなので、Linux に移ることはしばらくないと思う。なので、Homebrew を使ってる。まだ Homebrew に移せていないツールがたくさんあるので、隙を見て移していきたい。&lt;/p&gt;</summary>
    <title>Homebrew で自分のためのツールを公開するのが楽しい</title>
    <updated>2017-03-22T11:00:00+00:00</updated>
    <dc:date>2017-03-22T11:00:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/293/</id>
    <link href="https://blog.naoty.dev/293/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/flock&quot;&gt;naoty/flock&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Swift で定義されたオブジェクト間の依存関係を可視化する flock というツールを作った。これによって、 Swift で書かれたコードベース全体を把握しやすくなったり、リファクタリング時に影響範囲を把握しやすくなる。&lt;/p&gt;
&lt;h1&gt;Usage&lt;/h1&gt;
&lt;p&gt;Homebrew からインストールできる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ brew tap naoty/misc
$ brew install flock
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;flock は指定したディレクトリ（何も指定しなければカレントディレクトリ）以下の Swift のソースコードを解析して dot 形式のソースコードを出力する。これを Graphviz 等を用いて画像に出力して使う。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ flock &amp;lt;directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;試しに &lt;a href=&quot;https://github.com/Alamofire/Alamofire&quot;&gt;Alamofire&lt;/a&gt; で flock を試してみた。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20170313/20170313230437.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20170313/20170313230437.png&quot; alt=&quot;f:id:naoty_k:20170313230437p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20170313230437p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;横長になってしまうので、一部を切り取った。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20170313/20170313231019.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20170313/20170313231019.png&quot; alt=&quot;f:id:naoty_k:20170313231019p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20170313231019p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;コードの依存関係がハッキリと把握できるようになった。&lt;/p&gt;
&lt;h1&gt;How it works&lt;/h1&gt;
&lt;p&gt;Objective-C では &lt;a href=&quot;https://github.com/nst/objc_dep&quot;&gt;nst/objc_dep&lt;/a&gt; というツールがあった。これはシンプルな Python によるスクリプトでありながら、コードベースを把握する上で強力なツールだった。しかし、 Swift は Objective-C よりも文法がはるかに複雑なため、正規表現で依存関係を抽出するのは困難だ。&lt;/p&gt;
&lt;p&gt;幸いにも、 Apple は SourceKit という IDE のためのフレームワークを OSS として公開している。これを使うことで、正規表現によるパースなしに Swift のソースコードの AST を抽出することができる。 SourceKit を使った有名なツールに &lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;realm/SwiftLint&lt;/a&gt; がある。&lt;/p&gt;
&lt;p&gt;flock では、間接的に SourceKit を使っている。間接的に、というのは SourceKit を Swift から扱いやすくする &lt;a href=&quot;https://github.com/jpsim/SourceKitten&quot;&gt;jpsim/SourceKitten&lt;/a&gt; を使っているからだ。 flock は SourceKitten が提供する情報をもとに dot ファイルのソースコードを生成している。&lt;/p&gt;
&lt;h1&gt;課題&lt;/h1&gt;
&lt;p&gt;現状では、 &lt;code&gt;[String]&lt;/code&gt;, &lt;code&gt;String?&lt;/code&gt;, &lt;code&gt;Set&amp;lt;String&amp;gt;&lt;/code&gt; といった Compound Type を扱えていないため、依存関係の一部分しかグラフにできていない。 SourceKitten がこうした型を扱えていないため、 SourceKit を直接扱うか、こちら側でなんとかパースするかすることになりそう。&lt;/p&gt;</summary>
    <title>Swiftのオブジェクトグラフを生成する flock を作った</title>
    <updated>2017-03-13T23:17:00+00:00</updated>
    <dc:date>2017-03-13T23:17:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/292/</id>
    <link href="https://blog.naoty.dev/292/"/>
    <summary>&lt;h1&gt;あらすじ&lt;/h1&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;前回、 &lt;a href=&quot;https://github.com/naoty&quot;&gt;naoty/todo&lt;/a&gt; というツールを Homebrew で配布しようとしたときにとある問題にハマった。 &lt;code&gt;todo&lt;/code&gt; という名前を持つファイルが &lt;code&gt;README.md&lt;/code&gt; や &lt;code&gt;LICENSE&lt;/code&gt; のようなメタファイルとして判断されエラーが起きてしまうという問題だった。&lt;/p&gt;
&lt;h1&gt;Homebrew に Pull request を送った&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Homebrew/brew/pull/2106&quot;&gt;Exclude executables from metafiles by naoty · Pull Request #2106 · Homebrew/brew · GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;前回は、メタファイルではない適当な名前の空ファイルを置いてこの問題を回避していたが、なんというか負けな気がしてきたので、 Homebrew に Pull request を送った。前回、コードを読んで何が原因なのかは把握していたので、修正すべきポイントもおおよそ見当がついていた。&lt;/p&gt;
&lt;p&gt;当初は実行ファイルであればメタファイルではないという方針で Pull request を送ってみたが、パーミッションが正しく付与されていないものも稀にあるらしかった。そこで、コミッターのアドバイスを基にメタファイルは keg のルートディレクトリにしか存在しないだろうという前提で修正し、無事に merge された。&lt;/p&gt;
&lt;p&gt;この修正によって、 &lt;code&gt;todo&lt;/code&gt;, &lt;code&gt;changelog&lt;/code&gt;, &lt;code&gt;license&lt;/code&gt; といったメタファイルっぽい実行ファイルを配布したいときに &lt;code&gt;Empty installation&lt;/code&gt; エラーによって失敗することはなくなった。また一つ、世界が便利になった。&lt;/p&gt;</summary>
    <title>Homebrew にコントリビュートした</title>
    <updated>2017-02-28T09:58:00+00:00</updated>
    <dc:date>2017-02-28T09:58:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/291/</id>
    <link href="https://blog.naoty.dev/291/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/todo&quot;&gt;naoty/todo&lt;/a&gt; という CLI ツールを Homebrew で配布しようとしたときにハマったことを書く。&lt;/p&gt;
&lt;p&gt;naoty/todo は Go で書かれており、コンパイル済みのバイナリを GitHub Releases にアップロードしてそこから配信したいと思っていた。ドキュメント等を調べると以下のように formula を書くことでインストールが完了するものと思っていた。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Todo &amp;lt; Formula
  desc &quot;A todo management tool just for myself&quot;
  homepage &quot;https://github.com/naoty/todo&quot;
  url &quot;https://github.com/naoty/todo/releases/download/0.2.0/todo.tar.gz&quot;
  sha256 &quot;be20e4069c0ae49998dfc00a010ca8f5d49d26193bd0c3e8611a4bf53cac469d&quot;

  def install
    bin.install &quot;todo&quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;しかし、実際には &lt;code&gt;Empty installation&lt;/code&gt; というエラーが発生してインストールができない現象に遭遇した。ドキュメントを調べてみるも、なぜこれが失敗するのか突き止めることはできなかった。そこで、エラーメッセージを頼りに Homebrew のソースコードを読むことにした。&lt;/p&gt;
&lt;p&gt;まず、 Homebrew のソースコードは &lt;code&gt;/usr/local/Homebrew/Library/Homebrew&lt;/code&gt; にある。そこで ag で &lt;code&gt;Empty installation&lt;/code&gt; というエラーメッセージを検索してみると、以下のようなコードを見つけることができた。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if !formula.prefix.directory? || Keg.new(formula.prefix).empty_installation?
  raise &quot;Empty installation&quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここからは &lt;code&gt;pry&lt;/code&gt; を使ってブレークポイントを貼りながら進めようと思った。 Homebrew はシステムの Ruby を使っているようなので、 システムの rubygems で pry をインストールし調査を続けた。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;binding.pry&lt;/code&gt; で調べたところ、 &lt;code&gt;empty_installation?&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を返しているようだった。このメソッドの中身は以下のようになっていた。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def empty_installation?
  Pathname.glob(&quot;#{path}/**/*&quot;) do |file|
    next if file.directory?
    basename = file.basename.to_s
    next if Metafiles.copy?(basename)
    next if %w[.DS_Store INSTALL_RECEIPT.json].include?(basename)
    return false
  end

  true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;さらにここでイテレーションされている &lt;code&gt;file&lt;/code&gt; を調べると formula でインストールした &lt;code&gt;todo&lt;/code&gt; と &lt;code&gt;README&lt;/code&gt; 等のファイルが含まれていた。ここで何が原因か調べてみると、どうやら以下のように &lt;code&gt;todo&lt;/code&gt; が README や LICENSE といったメタファイルのひとつとして扱われていて、ここで &lt;code&gt;true&lt;/code&gt; が返っているようだった。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;BASENAMES = Set.new %w[
  about authors changelog changes copying copyright history license licence
  news notes notice readme todo
].freeze
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ということは、メタファイルではないものがひとつでも存在すれば &lt;code&gt;true&lt;/code&gt; が返るということなので、以下のような formula を定義して適当なファイルを置くことで、この問題を回避することができた。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def install
  bin.install &quot;todo&quot;

  # Avoid &quot;Empty installation&quot; error which will be caused when the only
  # &quot;todo&quot; file is installed.
  bin.install &quot;empty&quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この問題は &lt;code&gt;license&lt;/code&gt; や &lt;code&gt;changelog&lt;/code&gt; といった名前のパッケージを配布する場合でも起こる。ソースコードを読まないと原因が分からないので、同じ問題に直面した人は不運という感じがする。&lt;/p&gt;</summary>
    <title>Homebrewで自作Formulaを作るときの落とし穴</title>
    <updated>2017-02-20T22:30:00+00:00</updated>
    <dc:date>2017-02-20T22:30:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/290/</id>
    <link href="https://blog.naoty.dev/290/"/>
    <summary>&lt;p&gt;チビチビ開発しているライブラリの1.0.0をリリースしたのを機にCHANGELOGというものを書き始めた。その際にCHANGELOGについて調べていた。&lt;/p&gt;
&lt;p&gt;そもそもCHANGELOGは何のために必要なのか考えてみた。CHANGELOGは各バージョンの変更点をざっくり把握するためにあると思う。例えば、Railsの変更点を見たいと思ったとき、まず最初にCHANGELOGを見ると思う。いきなりPull requestやコミットログは見ないだろう。それらは各変更の実装や議論といった詳細を見るのに使われると思う。CHANGELOGは変更の詳細ではなく大まかな変更点の一覧を把握するために使われるんじゃないだろうか。&lt;/p&gt;
&lt;p&gt;CHANGELOGを構成する要素はなんだろうか。まず、バージョンとそこに含まれる変更点が挙げられる。そして、変更点の詳細が載ったページへのリンクがあると便利だと思う。変更の種類によってグルーピングするとより見やすくなると思う。よく見かけるのは&lt;code&gt;Added&lt;/code&gt;, &lt;code&gt;Changed&lt;/code&gt;, &lt;code&gt;Fixed&lt;/code&gt;, &lt;code&gt;Removed&lt;/code&gt;, &lt;code&gt;Deprecated&lt;/code&gt;などといったラベルで変更点をわけている。リリース前の変更点についても書いておくと、今後の変更予定が分かって便利だと思う。&lt;/p&gt;
&lt;p&gt;書き方としては、変更点を上から追記していくスタイルと、バージョンごとに書き換えるスタイルがあると思う。歴史の長いソフトウェアの場合、ひとつのファイルにそれらをすべて載せるのは見にくいので、後者のやり方が合うんじゃないかと思う。Railsなんかはこのスタイルだったと思う。&lt;/p&gt;
&lt;p&gt;以上のようなことを踏まえて、このようなフォーマットに至った。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Change Log

## Unreleased

### Added
* `changed(year:month:day:hour:minute:second:nanosecond:)`, which creates a `Date` instance by changing receiver's date components. [#77](https://github.com/naoty/Timepiece/pull/77)
* `changed(weekday:)`, which creates a `Date` instance by changing receiver's weekday. [#77](https://github.com/naoty/Timepiece/pull/77)

## 1.0.2
Released on 2016-12-20.

### Fixed
* Fix testDateInISO8601Format() availability. [#74](https://github.com/naoty/Timepiece/pull/74).
* Specify Swift version for the compilation of watchOS target. [#79](https://github.com/naoty/Timepiece/pull/79).
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;iOSアプリの開発でもCHANGELOGを書くようになった。CHANGELOGの読者としては、開発者自身もそうなんだけど、ベータ版を配信するテスターを主に想定している。ベータ版配信では、fastlaneからFabricを使って配信しているんだけど、その際にCHANGELOG.mdをパースしてリリースノートを自動生成するようにしている。このパーサーはrubygemとして公開している。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/NTYChangeLog&quot;&gt;naoty/NTYChangeLog&lt;/a&gt;&lt;/p&gt;</summary>
    <title>CHANGELOG.mdを書き始めた</title>
    <updated>2017-01-06T19:38:00+00:00</updated>
    <dc:date>2017-01-06T19:38:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/289/</id>
    <link href="https://blog.naoty.dev/289/"/>
    <summary>&lt;h2&gt;今年書いたコード&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;仕事のiOSアプリを0からSwiftで書いた。&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://github.com/naoty/Timepiece&quot;&gt;Timepiece&lt;/a&gt;: Swift 3に対応し、1.0.0をリリースした。&lt;/li&gt;
&lt;li&gt;cocoapodsにcontributeした。&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://github.com/naoty/AnyQuery&quot;&gt;AnyQuery&lt;/a&gt;: Swiftでのリポジトリパターンを設計していた。&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://github.com/naoty/clr&quot;&gt;clr&lt;/a&gt;: Swiftのアプリ開発以外のユースケースを見つけた。&lt;/li&gt;
&lt;li&gt;ABKit: なんとなくA/Bテストツールを作ってみた。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;感想&lt;/h2&gt;
&lt;p&gt;今年はiOSの一年だった。新卒以来、久々に仕事でiOSアプリをフルスクラッチで書いてリリースした。SwiftとiOSを勉強し、コードをたくさん書いた。&lt;/p&gt;
&lt;p&gt;プライベートでは、ずっと続いてるTimepieceをメンテナンスしていた。try! SwiftでTimepieceを使ってくれている海外の開発者と会い、自信がついた。&lt;/p&gt;
&lt;p&gt;来年は、Timepieceのメンテナンスを粛々と続けつつ、仕事で関わっているプロジェクトの成功を第一に考えていきたい。&lt;/p&gt;</summary>
    <title>2016年振り返り</title>
    <updated>2016-12-31T21:19:00+00:00</updated>
    <dc:date>2016-12-31T21:19:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/288/</id>
    <link href="https://blog.naoty.dev/288/"/>
    <summary>&lt;p&gt;iOS開発で頭を悩ます問題のひとつに、コード署名や証明書の問題がある。&lt;code&gt;Code Signing Error&lt;/code&gt;などのような単語で検索すると、どのように問題を解決するのか、どのような手順で証明書を発行しXcodeに設定するのか、といった情報がたくさん返ってくる。しかし、コード署名とは何か、証明書とは何か、といった根本的な疑問に答えているサイトは少ないように思える。コード署名や証明書はチーム開発において致命的な問題につながることもあり、十分な理解の上で慎重に運用すべきものであると思う。&lt;/p&gt;
&lt;p&gt;そこで、僕はこちらの本を読み、署名や証明書といったものを理解した。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4797382228/naotoknk-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51V6l3panVL._SL160_.jpg&quot; alt=&quot;暗号技術入門 第3版 秘密の国のアリス&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;暗号技術入門 第3版 秘密の国のアリス&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4797382228/naotoknk-22/&quot;&gt;暗号技術入門 第3版 秘密の国のアリス&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: 結城浩&lt;/li&gt;
&lt;li&gt;出版社/メーカー: SBクリエイティブ&lt;/li&gt;
&lt;li&gt;発売日: 2015/08/26&lt;/li&gt;
&lt;li&gt;メディア: 大型本&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4797382228/naotoknk-22&quot;&gt;この商品を含むブログ (14件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本書ではiOS開発における署名や証明書についての記述はないが、自分の中でiOS開発におきかえて読んでいた。そこで得られた理解をここに書いておこうと思う。&lt;/p&gt;
&lt;p&gt;まずコード署名とは、証明書を使ってアプリケーションにデジタル署名を施すことを指している。デジタル署名とは秘密鍵を使ってメッセージに施された署名のことで、署名は秘密鍵の対となる公開鍵を使って検証することができる。デジタル署名によって、メッセージが署名を施した人物のものであること、またメッセージが改ざんされていないことを保証することができる。&lt;/p&gt;
&lt;p&gt;iOSアプリケーション開発の文脈では、開発したアプリケーションがAppleによって認証された開発者によるものであること、そして開発したアプリケーションが改ざんされていないことをコード署名によって保証していることになる。&lt;/p&gt;
&lt;p&gt;一方、証明書とは認証局によってデジタル署名が施された公開鍵のことである。証明書を使わずに公開鍵の受け渡しを行う場合、man-in-the-middle攻撃という手法でなりすましされる危険性がある。攻撃者が公開鍵の受け渡しの間に入り、攻撃者の公開鍵を代わりに受け渡すという手口だ。こうした危険性を排除するため、公開鍵自体に認証情報が必要となる。そこで、認証局が電話番号などさまざまな情報を使って公開鍵を発行した主体を認証し、証明書を発行する。&lt;/p&gt;
&lt;p&gt;iOSアプリケーション開発の文脈では、キーチェーンアクセス.appでCSRファイルというものを作成している。このファイルはコード署名の検証に利用する公開鍵と公開鍵を発行する主体の認証情報を含んでいる。このファイルをMember CenterにアップロードすることでAppleから証明書をダウンロードすることができる。&lt;/p&gt;
&lt;p&gt;アプリケーションをApp Storeにアップロードする際、開発者は自身の秘密鍵を使ってコード署名を行い、Appleはアップロードされたアプリケーションを証明書に含まれる公開鍵で検証する。&lt;/p&gt;</summary>
    <title>コード署名・証明書</title>
    <updated>2016-12-11T23:56:00+00:00</updated>
    <dc:date>2016-12-11T23:56:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/287/</id>
    <link href="https://blog.naoty.dev/287/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;http://blog.hatena.ne.jp/-/odai/10328749687193803821&quot;&gt;お題「エンジニア立ち居振舞い」&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;僕は開発以外の立ち居振る舞いとして、いくつかのツールと習慣によって開発の生産性を計測している。&lt;/p&gt;
&lt;p&gt;自分のチームではスクラムを採用していて、各タスクにはストーリーポイントが割り振られている。相対的な作業量のようなものだ。また、個人的にポモドーロテクニックを採用している。25分開発したら5分休憩する周期を1ポモドーロと呼んで、そのリズムを繰り返すヤツです。&lt;/p&gt;
&lt;p&gt;毎日、完了したタスクのストーリーポイントと開発に費やしたポモドーロを計測している。Google Spreadsheetに書いている。やっていることはそれだけ。&lt;/p&gt;
&lt;p&gt;そうすることで見えてくることがいくつかある。まずは、曜日ごとの開発できる時間だ。会議が多い曜日はせいぜい4ポモドーロだなーとか、リモートワークできる曜日はこれくらいだなーとか。曜日ごとのポモドーロの平均をSpreadsheetで計算して見ている。そして、これは見積もりのときに利用できる。来スプリントに開発できるポモドーロを平均値から見積もれる。&lt;/p&gt;
&lt;p&gt;あとは、完了したタスクのストーリーポイントとポモドーロから、1ポモドーロあたりのストーリーポイントが分かる。自分のなかでは、この値を生産性の指標として考えてる。なんとなくグラフにしたりして、生産性を上げるモチベーションにしている。&lt;/p&gt;
&lt;p&gt;一番良いことは、上で話した「来スプリントのポモドーロの見積もり」と「1ポモドーロあたりのストーリーポイント」から「来スプリントで完了できるストーリーポイントの見積もり」が計算できることだ。この計算に基づいて、来スプリントでこなすタスク量を決めている。&lt;/p&gt;
&lt;p&gt;実績に基づいた見積もりができるようになったおかげで、マネージャー側からは安定したスケジュールが組めるようになるし、開発側からは無理のない仕事ができるようになる。さらに、無理のない仕事ができるようになると、無理のない生活ができるようになる。このことは最近結婚した僕にとって一番重要なことなのだ。&lt;/p&gt;</summary>
    <title>エンジニア立ち居振る舞い：生産性を計測する</title>
    <updated>2016-11-18T10:54:00+00:00</updated>
    <dc:date>2016-11-18T10:54:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/286/</id>
    <link href="https://blog.naoty.dev/286/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/Timepiece&quot;&gt;naoty/Timepiece&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最初のバージョンはSwiftが出た2014年だった。それ以降、細かな機能追加やバグ修正を繰り返し、0.5.0でSwift 2.3、0.6.0でSwift 3に対応した。どこかのタイミングで多くのStar、issueがつくようになり、多くのユーザーが使ってくれるようになった。&lt;/p&gt;
&lt;p&gt;そして昨日、ようやく安定版となる1.0.0をリリースした。1.0.0では破壊的な変更を行った。&lt;/p&gt;
&lt;h3&gt;メソッド名の変更&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;// 0.6.0
Date.date(year: 2016, month: 10, day: 31)
&quot;2016-10-31T12:00:00+0900&quot;.dateFromFormat(&quot;yyyy-MM-dd'T'HH:mm:ssZ&quot;)

// 1.0.0
Date(year: 2016, month: 10, day: 31)
&quot;2016-10-31T12:00:00+0900&quot;.date(inFormat: &quot;yyyy-MM-dd'T'HH:mm:ssZ&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;よりSwiftらしく、またSwift 3の命名規則に沿ったものに変更した。&lt;/p&gt;
&lt;h3&gt;タイムゾーンのサポートをやめた&lt;/h3&gt;
&lt;p&gt;個別の日付オブジェクトについてタイムゾーンをサポートするようにしていたが、バグになりかねない部分であり、後述するメンテナンスコストを下げていく方針に合わないため、この機能を削除した。&lt;/p&gt;
&lt;h3&gt;Durationの内部表現を変更した&lt;/h3&gt;
&lt;p&gt;これまでのバージョンでは、期間を表す概念として&lt;code&gt;Duration&lt;/code&gt;というstructを用意していたが、これをやめた。本来、期間を表す概念として&lt;code&gt;DateComponents&lt;/code&gt;というものがあるため（これまで&lt;code&gt;DateComponents&lt;/code&gt;が期間を表すということをちゃんと認識してなかった）、これを最大限利用した。この変更によって、1.0.0では新たに以下のような計算や処理が可能になった。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 1.0.0
Date() + (3.hours - 30.minutes)
(3.hours - 30.minutes).string(in: .abbreviated) //=&amp;gt; &quot;2h 30m&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;固定フォーマットでの出力をやめた&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;// 0.6.0
1.weeks.later.stringFromFormat(&quot;yyyy/MM/dd&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上のようなメソッドをやめた。&lt;code&gt;DateFormatter&lt;/code&gt;で簡単に実装できるが、この機能は暦やロケールを考慮していない実装なのであまりオススメできない。その代わりに&lt;code&gt;DateFormatter.Style&lt;/code&gt;を指定して出力できるようにした。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 1.0.0
1.weeks.later.dateString(in: .short)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;望ましい機能は実装しやすくする。望ましくない機能は実装しにくくする。というのが理想的なAPIのインターフェイスであるように思う。&lt;/p&gt;
&lt;h2&gt;変更の背景&lt;/h2&gt;
&lt;p&gt;OSSにかけられる時間が減った。メンテナンスコストを下げたかった。バグが出やすい機能はできるだけ削った。機能が豊富な日付操作ライブラリは他にもある。そんな中、最小限の機能でバグがなく正確で少し読めば何をしているか分かるようなライブラリが理想的だとおもった。&lt;/p&gt;</summary>
    <title>Timepiece 1.0.0をリリースした</title>
    <updated>2016-10-31T13:37:00+00:00</updated>
    <dc:date>2016-10-31T13:37:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/285/</id>
    <link href="https://blog.naoty.dev/285/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://github.com/CocoaPods/CocoaPods/pull/5436&quot;&gt;Add a license type to generated acknowledgements file in plist by naoty · Pull Request #5436 · CocoaPods/CocoaPods&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;開発中のiOSアプリでCocoaPodsでインストールしたライブラリのライセンス表示を実装する際に、とある理由でライセンスに表示したくない状況があった。いろいろ調べたところ、CocoaPodsが出力する&lt;code&gt;Pods-{ProjectName}-Acknowledgements.plist&lt;/code&gt;に&lt;code&gt;MIT&lt;/code&gt;といったライセンスタイプが含まれていないことがわかった（ライセンスのテキストはあるけど、そこから抽出するのは大変）。podspecにはライセンスタイプを記載する必要があるため、内部表現としてライセンスタイプをもっているはずだと思った。そこで、それをplistファイルに出力するようにするPull requestを送って、そしてmergeされた。&lt;/p&gt;
&lt;p&gt;Pull requestしてみた感想としては、RSpecのようなよく知らないテスティングフレームワークを使っており、自力ではどこをテストすればいいのか分からず困惑した。コミッターの方が修正してくれたようなのでよかった。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1.1.0.beta.1&lt;/code&gt;に含まれているので、今後は&lt;code&gt;MIT&lt;/code&gt;などライセンスタイプを基に表示するライブラリをフィルタリングできたりできると思う。よかったら利用してください。&lt;/p&gt;</summary>
    <title>CocoaPodsにコントリビュートした</title>
    <updated>2016-08-14T10:00:00+00:00</updated>
    <dc:date>2016-08-14T10:00:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/284/</id>
    <link href="https://blog.naoty.dev/284/"/>
    <summary>&lt;pre lang=&quot;swift&quot; class=&quot;highlight highlight-swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heightForHeaderInSection&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;heightForHeaderInSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;return 0&lt;/code&gt;だとうまくいかない。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;0&lt;/code&gt;より大きい値を返すことで変更できるため、&lt;code&gt;CGFloat.min&lt;/code&gt;を指定することで上端のmarginを消し去れる。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>GroupedなUITableViewで上端のmarginをとりたい</title>
    <updated>2016-07-19T17:20:00+00:00</updated>
    <dc:date>2016-07-19T17:20:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/283/</id>
    <link href="https://blog.naoty.dev/283/"/>
    <summary>&lt;h1&gt;課題感&lt;/h1&gt;
&lt;p&gt;APIリクエストの送信前、APIレスポンスの取得後にさまざまな処理をはさみたいことがある。例えば、こんな処理だ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ネットワークインジケータの表示・非表示&lt;/li&gt;
&lt;li&gt;リクエストとレスポンスのロギング&lt;/li&gt;
&lt;li&gt;二重送信の防止&lt;/li&gt;
&lt;li&gt;ログイントークンが有効期限切れだったときに、リフレッシュトークンを使ってログイントークンを更新した後、再送&lt;/li&gt;
&lt;li&gt;HTTPリクエストのスタブ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ただ、こういった処理をAPIクライアントにそのまま実装していくとAPIクライアントが肥大化するし、かと言ってViewControllerに実装するといろんな箇所で似たようなコードを書くことになる。&lt;/p&gt;
&lt;h1&gt;解決策&lt;/h1&gt;
&lt;p&gt;APIクライアントをラップして機能を拡張するミドルウェアをつくる。ミドルウェアはAPIクライアントを呼び出して通信処理を実行しつつ、リクエストの送信前とレスポンスの取得後に処理をはさむ。&lt;/p&gt;
&lt;p&gt;例えば、&lt;code&gt;APIClient&lt;/code&gt;というオブジェクトで本来の通信処理を実行するとする。ロギングを行うミドルウェアはこんな感じになる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;extension Middleware {
    struct Logger: RequestSendable {
        let client: RequestSendable

        func send(request: T) -&amp;gt; Task {
            print(request)
            return client.send(request)
                .success { response -&amp;gt; Task in
                    print(response)
                    return Task(value: response)
                }
                .failure { error, _ in
                    print(error)
                    return Task(error: error ?? ApplicationError.Unknown)
                }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そして、こんな感じで初期化する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let client: RequestSendable = Middleware.Logger(client: APIClient())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;だけど、ミドルウェアが増えると、以下のように初期化が大変になってくる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let client: RequestSendable = A(client: B(client: C(client: D(client: APIClient()))))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そこで、ミドルウェア群を簡単に組み合わせるための仕組みをつくる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;extension Middleware {
    struct Stack {
        let middlewareTypes: [RequestSendable.Type]

        init(_ middlewareTypes: [RequestSendable.Type]) {
            self.middlewareTypes = middlewareTypes
        }

        func buildClient() -&amp;gt; RequestSendable {
            let client = APIClient()
            return middlewareTypes.reverse().reduce(client) { (result: RequestSendable, middlewareType: RequestSendable.Type) in
                return middlewareType.init(client: result)
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これによって、こんな感じで直感的にAPIクライアントを初期化できる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let client = Middleware.Stack([A.self, B.self, C.self, D.self]).buildClient()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;たいていの場合、利用するミドルウェアは同じなのでデフォルトで利用するミドルウェアスタックを簡単に初期化できるようにする。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;extension Middleware {
    struct Stack {
        // ...

        static func defaultStack() -&amp;gt; Stack {
            var middlewares: [RequestSendable.Type] = []

            middlewares.append(A.self)

            if someCondition {
                middlewares.append(B.self)
            }

            middlewares.append(C.self)

            reeturn Stack(middlewares)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そして、APIクライアントの初期化はこうなる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let client = Middleware.Stack.defaultStack().buildClient()
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;まとめ&lt;/h1&gt;
&lt;p&gt;通信周りのさまざまな処理をミドルウェアという形で実装することで、疎結合なモジュールに分離することができた。将来的に新たな処理を追加する場合でもミドルウェアを新たに実装してスタックに追加するだけでよく、既存のAPIクライアントやミドルウェアに手を加える必要はない。テスト時のみ不要なミドルウェアを除くといった柔軟な設定も可能になるだろう。&lt;/p&gt;</summary>
    <title>通信周りの処理をミドルウェアで整理する</title>
    <updated>2016-07-14T11:00:00+00:00</updated>
    <dc:date>2016-07-14T11:00:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/282/</id>
    <link href="https://blog.naoty.dev/282/"/>
    <summary>&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20160317/20160317020138.gif&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20160317/20160317020138.gif&quot; alt=&quot;f:id:naoty_k:20160317020138g:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20160317020138g:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/clr&quot;&gt;naoty/clr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;clr&lt;/code&gt;というコマンドラインツールをSwiftで書いた。上のスクリーンキャストにあるようにXcodeで使うカラーパレットをターミナルから作成できる。&lt;/p&gt;
&lt;p&gt;近年ではStoryboard（かつてはXib）がどんどん進化しているので、見た目に関する設定はコードじゃなくてStoryboardに任せたいなという気持ちがある。特に色については、コードでやろうと思うと&lt;code&gt;UIColor&lt;/code&gt;のextensionをひとつひとつ書いていく感じになると思うけど、カラーパレットを自作する手もあるなということに最近気づいた。カラーパレットを使うと2、3回クリックするだけで色を指定できるから簡単だと思う。&lt;/p&gt;
&lt;p&gt;技術的な解説をすると、自作したカラーパレットは実は&lt;code&gt;$HOME/Library/Colors/&lt;/code&gt;以下に&lt;code&gt;*.clr&lt;/code&gt;という拡張子で保存されていて、このファイルを共有すれば他の開発者とカラーパレットを共有できる。ただ、これをXcodeでポチポチ自作するのはけっこう大変なので、これをコマンドラインから作れるようにした。カラーパレットは&lt;code&gt;NSColorList&lt;/code&gt;というOSXの&lt;code&gt;AppKit&lt;/code&gt;フレームワークにあるクラスで表されていて、&lt;code&gt;-writeToFile(_:)&lt;/code&gt;というメソッドでファイルに出力できる。なので、&lt;code&gt;NSColorList&lt;/code&gt;を操作するコマンドラインツールをSwiftで実装した。&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.natashatherobot.com/xcode-color-palette/&quot;&gt;XCode Tip: Color Palette&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Xcodeのカラーパレットを作るコマンドをSwiftで書いた</title>
    <updated>2016-03-17T10:00:00+00:00</updated>
    <dc:date>2016-03-17T10:00:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/281/</id>
    <link href="https://blog.naoty.dev/281/"/>
    <summary>&lt;p&gt;以前は&lt;code&gt;naoty.to_s&lt;/code&gt;というRuby-ishなタイトルだったけど、Swiftをやっていきたいという気持ちにマッチしなくなってきたのでSwiftyなタイトルに変えた。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AnyType&lt;/code&gt;はもちろんSwiftのそれのようにいろんな&lt;code&gt;Type&lt;/code&gt;の記事を書いていきたいという気持ちを表しているし、一方でタイピングの&lt;code&gt;Type&lt;/code&gt;にもかけている。一時期はかなり更新頻度が落ちていたけど、どんどん&lt;code&gt;Type&lt;/code&gt;してブログを更新していきたい。&lt;/p&gt;
&lt;p&gt;今後ともこのブログをどうぞよろしくおねがいします。&lt;/p&gt;</summary>
    <title>ブログタイトルを変えた</title>
    <updated>2016-03-13T16:24:00+00:00</updated>
    <dc:date>2016-03-13T16:24:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/280/</id>
    <link href="https://blog.naoty.dev/280/"/>
    <summary>&lt;h1&gt;リポジトリパターンとは&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;リポジトリはオブジェクトの参照を取得するのに必要なロジックをすべてカプセル化するためのパターンです。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Domain Driven Design Quickly 日本語訳&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;iOSアプリ開発の文脈では、オブジェクトをWeb APIから取得するのかRealmから取得するのかといった関心ごとがある。リポジトリを実装することで次のようなメリットがあると思う。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;どこからどのように取得するのかなどの関心ごとからドメインモデルを切り離せるため、ドメインモデルをクリアに保つことができる。（DDDの観点）&lt;/li&gt;
&lt;li&gt;テスト時にWeb APIやRealmにアクセスするリポジトリをメモリにアクセスするリポジトリに差し替えること（Dependency Injection）が可能になるため、テストデータを簡単に用意できたりテストのパフォーマンスを向上できるなど、テストしやすくなる。（テスタビリティの観点）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;型消去とは&lt;/h1&gt;
&lt;p&gt;先日行われた&lt;a href=&quot;http://www.tryswiftconf.com/&quot;&gt;try! Swift&lt;/a&gt;で紹介されたテクニックで、トークの内容については以下の書き起こし記事が詳しいと思う。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;型消去とは何か、端的に説明するのはかなり難しい。ただ、リポジトリパターンをSwiftで実装するにあたって非常に強力なテクニックであることが分かったので、型消去を用いない場合と用いた場合とを比べて型消去について説明してみたいと思う。&lt;/p&gt;
&lt;h2&gt;型消去を用いない場合&lt;/h2&gt;
&lt;p&gt;例のごとく&lt;code&gt;Pokemon&lt;/code&gt;オブジェクトを取得するリポジトリを考える。&lt;code&gt;Pokemon&lt;/code&gt;はWeb APIから取得するかもしれないし、Realmから取得するかもしれない。とりあえず以下のようなprotocolを定義して、&lt;code&gt;Pokemon&lt;/code&gt;を取得するインターフェイスを用意する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;protocol PokemonRepository {
    func find(ID: UInt) -&amp;gt; Pokemon?
    func findAll() -&amp;gt; [Pokemon]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そして、実際にRealmから&lt;code&gt;Pokemon&lt;/code&gt;を取得するリポジトリはこのprotocolを実装して以下のように書けると思う。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct RealmPokemonRepository: PokemonRepository {
    func find(ID: UInt) -&amp;gt; Pokemon? {
        let realm = try! Realm()
        return realm.objects(Pokemon).filter(&quot;ID == %d&quot;, ID).first
    }

    func findAll() -&amp;gt; [Pokemon] {
        let realm = try! Realm()
        return realm.objects(Pokemon)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同様にメモリ内の&lt;code&gt;[Pokemon]&lt;/code&gt;から&lt;code&gt;Pokemon&lt;/code&gt;を取得するリポジトリは以下のように書けると思う。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct MemoryPokemonRepository: PokemonRepository {
    let pokemons = [
        Pokemon(ID: 1, name: &quot;フシギダネ&quot;),
        Pokemon(ID: 2, name: &quot;フシギソウ&quot;),
        Pokemon(ID: 3, name: &quot;フシギバナ&quot;)
    ]

    func find(ID: UInt) -&amp;gt; Pokemon? {
        return pokemons.filter { $0.ID == ID }.first
    }

    func findAll() -&amp;gt; [Pokemon] {
        return pokemons
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ViewController等でこのリポジトリを使う場合は以下のように書けると思う。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class PokedexViewController: UITableViewController {
    var pokedex: [Pokemon] = []
    lazy var repository: PokemonRepository = RealmPokemonRepository()

    override func viewDidLoad() {
        super.viewDidLoad()

        pokedex = repository.findAll()
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;テストを書く際は以下のようにリポジトリを差し替えることでRealmへのアクセスを回避できる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class PokedexViewControllerTests: XCTestCase {
    var viewController: PokedexViewController!

    override func setUp() {
        viewController = PokedexViewController()
        viewController.repository = MemoryPokemonRepository()
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こうして&lt;code&gt;Pokemon&lt;/code&gt;を取得するリポジトリを実装することで、どのようにオブジェクトを取得するのかという関心ごとをカプセル化し、テスタビリティのある設計が可能になった。しかし、この実装には大きな問題がある。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;型消去を用いない実装の問題点は、ドメインモデルごとに似たようなprotocolを用意しなくてはならないことだ&lt;/strong&gt; 。例えば、今度は&lt;code&gt;Human&lt;/code&gt;を取得したいという場合に同様に&lt;code&gt;HumanRepository&lt;/code&gt;を定義しなくてはならないし、その次に&lt;code&gt;Town&lt;/code&gt;を取得したいという場合には&lt;code&gt;TownRepository&lt;/code&gt;を定義しなくてはならない。これらのprotocolはほとんど中身が同じボイラープレートになってしまうだろう。&lt;/p&gt;
&lt;p&gt;それでは、より汎用的な&lt;code&gt;Repository&lt;/code&gt;というprotocolを以下のように定義してみてはどうだろうかと考えてみる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;protocol Repository {
    typealias Domain

    func find(ID: UInt) -&amp;gt; Domain?
    func findAll() -&amp;gt; [Domain]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;typealiasを使ってGenericsなprotocolを定義することでより汎用的になった。そして、これを実装するリポジトリは例えばこんな感じになる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct RealmPokemonRepository: Repository {
    typealias Domain = Pokemon

    func find(ID: UInt) -&amp;gt; Pokemon? {
        let realm = try! Realm()
        return realm.objects(Pokemon).filter(&quot;ID == %d&quot;, ID).first
    }

    func findAll() -&amp;gt; [Pokemon] {
        let realm = try! Realm()
        return realm.objects(Pokemon)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;しかし、これはすぐにうまくいかないことがわかる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lazy var repository: Repository = RealmPokemonRepository
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;のようなコードはコンパイルエラーになってしまうのだ。&lt;code&gt;Repository&lt;/code&gt;のようなtypealiasをもつprotocolはtypealiasに具体的な型をもっていないため抽象型と呼ばれ、そのまま変数の型として宣言することができない。&lt;/p&gt;
&lt;p&gt;このままおとなしくドメインモデルごとにボイラープレートのようなprotocolを書かなくてはいけないんだろうか（←try! Swift参加前の筆者）。&lt;/p&gt;
&lt;h2&gt;型消去を用いた場合&lt;/h2&gt;
&lt;p&gt;あらゆるリポジトリを汎用的に扱えるようにするため、以下のような&lt;code&gt;AnyRepository&lt;/code&gt;を定義する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct AnyRepository: Repository {
    typealias Domain = DomainType

    private let _find: UInt -&amp;gt; DomainType?
    private let _findAll: () -&amp;gt; [DomainType]

    init(_ repository: T) {
        _find = repository.find
        _findAll = repository.findAll
    }

    func find(ID: UInt) -&amp;gt; DomainType? {
        return _find(ID)
    }

    func findAll() -&amp;gt; [DomainType] {
        return _findAll()
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;AnyRepository&amp;lt;Pokemon&amp;gt;&lt;/code&gt;として使う場合は、&lt;code&gt;typealias Domain = Pokemon&lt;/code&gt;となっている&lt;code&gt;Repository&lt;/code&gt;を実装した型のみ&lt;code&gt;AnyRepository()&lt;/code&gt;に渡すことができる。例えば、ViewControllerではこんな感じで使うことになる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class PokedexViewController: UITableViewController {
    var pokedex: [Pokemon] = []
    lazy var repository: AnyRepository = AnyRepository(RealmPokemonRepository())

    override func viewDidLoad() {
        super.viewDidLoad()

        pokedex = repository.findAll()
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同様にテストではこんな感じになると思う。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class PokedexViewControllerTests: XCTestCase {
    var viewController: PokedexViewController!

    override func setUp() {
        viewController = PokedexViewController()
        viewController.repository = AnyRepository(MemoryPokemonRepository())
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;AnyRepository&lt;/code&gt;があることで、&lt;code&gt;PokemonRepository&lt;/code&gt;や&lt;code&gt;HumanRepository&lt;/code&gt;のようなドメインモデルごとのprotocolは不要になり、それぞれ&lt;code&gt;AnyRepository&amp;lt;Pokemon&amp;gt;&lt;/code&gt;、&lt;code&gt;AnyRepository&amp;lt;Human&amp;gt;&lt;/code&gt;のような型を使うことで対処できる。これでボイラープレートのようなコードを書く必要はなくなった。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;型消去とは、この例で言うと&lt;code&gt;PokemonRepository&lt;/code&gt;型であった&lt;code&gt;repository&lt;/code&gt;が&lt;code&gt;AnyRepository&amp;lt;Pokemon&amp;gt;&lt;/code&gt;という型にしてしまうことを指しているようだ&lt;/strong&gt; 。型消去というのは、より柔軟な設計のための結果として考えることができそう。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以降は型消去とは無関係だけど、リポジトリパターンを実装するにあたって必要となった技術要素を紹介していきたいと思う。&lt;/p&gt;
&lt;h1&gt;クエリのインターフェイス&lt;/h1&gt;
&lt;p&gt;上で紹介した&lt;code&gt;Repository&lt;/code&gt;は意図的に不十分なインターフェイスだった。というのは、&lt;code&gt;findAll()&lt;/code&gt;というメソッドはその名の通りすべてのオブジェクトを取得してしまうので、現実的には検索条件やソートなどのパラメータを指定できる必要があると思う。&lt;/p&gt;
&lt;p&gt;ここで指定される検索条件は内部的にGETリクエストのパラメータやRealmに渡される&lt;code&gt;NSPredicate&lt;/code&gt;に変換されることになる。また、検索条件といっても単純に一致するためのものだけでなく、不一致や含んでいるかといった検索方法もある。Web APIに問い合わせるのかRealmに問い合わせるのかといったバックエンドに関わらず、これらを統一的に表すクエリの表現が必要となると思った。&lt;/p&gt;
&lt;p&gt;そこでAnyQueryという小さなライブラリを開発した。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/AnyQuery&quot;&gt;naoty/AnyQuery&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;これを使って&lt;code&gt;Repository&lt;/code&gt;はこんな感じに定義できる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;protocol Repository {
    typealias Domain

    func find(ID: UInt) -&amp;gt; Domain?
    func findAll(query query: AnyQuery?, sort: AnySort?) -&amp;gt; [Domain]
}

extension Repository {
    func findAll() -&amp;gt; Domain? {
        return findAll(query: nil, sort: nil)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;RealmPokemonRepository&lt;/code&gt;で実際に使う場合はこんな感じになる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct RealmPokemonRepository: Repository {
    typealias Domain = Pokemon

    func find(ID: UInt) -&amp;gt; Pokemon? {
        let realm = try! Realm()
        return realm.objects(Pokemon).filter(&quot;ID == %d&quot;, ID).first
    }

    func findAll(query query: AnyQuery?, sort: AnySort?) -&amp;gt; [Pokemon] {
        let realm = try! Realm()
        var result realm.objects(Pokemon)

        if let predicate = query?.predicate {
            result = result.filter(predicate)
        }

        if let sortDescriptors = sort?.sortDescriptors {
            for sortDescriptor in sortDescriptors {
                guard let key = sortDescriptor.key else {
                    continue
                }
                result = result.sorted(key, ascending: sortDescriptor.ascending)
            }
        }

        return result
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そして、ViewControllerからはこんな感じでクエリを組み立てることができる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class PokedexViewController: UITableViewController {
    var pokedex: [Pokemon] = []
    lazy var repository: PokemonRepository = RealmPokemonRepository()

    override func viewDidLoad() {
        super.viewDidLoad()

        let query = AnyQuery.In(key: &quot;ID&quot;, values: [1, 2, 3, 4, 5])
        let sort = AnySort.Ascending(key: &quot;name&quot;)
        pokedex = repository.findAll(query: query, sort: sort)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;詳細は&lt;a href=&quot;https://github.com/naoty/AnyQuery/blob/master/README.md&quot;&gt;README&lt;/a&gt;に書いてあるが、例えば、こんな風に複雑な条件も表現できる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let query = AnyQuery.Between(key: &quot;ID&quot;, lhs: 1, rhs: 100) &amp;amp;&amp;amp; AnyQuery.NotEqual(key: &quot;type&quot;, PokemonType.Fire.rawValue)
let sort = AnySort.Descending(key: &quot;weight&quot;) &amp;gt; AnySort.Descending(key: &quot;height&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;非同期処理の取り扱い&lt;/h1&gt;
&lt;p&gt;たいていの取得処理は非同期に行われるため、リポジトリのインターフェイスも非同期処理を前提にしなくてはならないと思う。しかし、取得完了時の処理をクロージャとして渡すインターフェイスはコールバック・ヘルにつながるため、Promiseライクなライブラリを使ってオブジェクトの代わりにPromiseオブジェクトを返すような形がいいと思った。&lt;/p&gt;
&lt;p&gt;例として&lt;a href=&quot;https://github.com/ReactKit/SwiftTask&quot;&gt;SwiftTask&lt;/a&gt;を使って以下のように&lt;code&gt;Repository&lt;/code&gt;を定義してみた。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;protocol Repository {
    typealias Domain
    
    func find(ID: UInt) -&amp;gt; Task
    func findAll(query query: AnyQuery?, sort: AnySort?) -&amp;gt; Task
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そして、実装は以下のようになる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class RealmPokemonRepository: Repository {
    typealias Domain = Pokemon

    func find(ID: UInt) -&amp;gt; Task {
        return Task&amp;lt;Float, Pokemon, ErrorType&amp;gt; { fulfill, reject in
            let realm = try! Realm()
            if let pokemon = realm.objects(Pokemon).filter(&quot;ID == %d&quot;, ID).first {
                fulfill(pokemon.pokemon)
            } else {
                reject(RepositoryError.NotFound)
            }
        }
    }

    func findAll(query query: AnyQuery?, sort: AnySort?) -&amp;gt; Task {
        return Task&amp;lt;Float, [Pokemon], ErrorType&amp;gt; { fulfill, reject in
            let realm = try! Realm()
            var result = realm.objects(RealmPokemon)
            
            if let predicate = query?.predicate {
                result = result.filter(predicate)
            }
            
            if let sortDescriptors = sort?.sortDescriptors {
                for sortDescriptor in sortDescriptors {
                    guard let key = sortDescriptor.key else {
                        continue
                    }
                    result = result.sorted(key, ascending: sortDescriptor.ascending)
                }
            }
            
            if result.isEmpty {
                reject(RepositoryError.NotFound)
            } else {
                let pokemons = result.map { $0.pokemon }
                fulfill(pokemons)
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;最後に&lt;/h1&gt;
&lt;p&gt;Swiftでリポジトリパターンを実装するにあたってのポイントは3つあった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;型消去によってリポジトリのための汎用的なインターフェイスを定義する。&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://github.com/naoty/AnyQuery&quot;&gt;AnyQuery&lt;/a&gt;を使ってクエリのインターフェイスを統一する。&lt;/li&gt;
&lt;li&gt;Promiseライクなライブラリを使って非同期処理も考慮したリポジトリを設計する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上で説明したことはすべてこちらのサンプルプロジェクトで詳細を見ることができるので、参考にしてほしい。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/Playground/tree/master/Repository&quot;&gt;naoty/Playground&lt;/a&gt;&lt;/p&gt;</summary>
    <title>型消去を用いたSwiftによるリポジトリパターンの実装</title>
    <updated>2016-03-11T16:00:00+00:00</updated>
    <dc:date>2016-03-11T16:00:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/279/</id>
    <link href="https://blog.naoty.dev/279/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;http://www.tryswiftconf.com/&quot;&gt;http://www.tryswiftconf.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3/2~3/4の三日間、try! Swiftというカンファレンスに参加してきた。&lt;/p&gt;
&lt;p&gt;33セッション * 30分という超濃密な構成で過去参加したカンファレンスの中でも最も充実した内容だった。特に、下のようなトピックが多かったような印象がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Protocol extensionなどのSwiftのパワーを使った、より洗練された実装方法の話&lt;/li&gt;
&lt;li&gt;Swiftを使った関数型プログラミングの話&lt;/li&gt;
&lt;li&gt;デザインやアニメーションなどUIにまつわる話&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちょうどいま直面していた課題に関わるようなトピックもあり、セッション後のQ&amp;amp;Aコーナーでスピーカーに話しかけて、ペアプロまでしてもらった。おかげでその課題はすっきり解決できた。&lt;/p&gt;
&lt;p&gt;今回のtry! Swiftで最大の収穫は、英語を本格的に学ぼうと思うきっかけがあったことだった。それは、try! Swift公式アプリで&lt;a href=&quot;https://github.com/naoty/Timepiece&quot;&gt;自分のライブラリ&lt;/a&gt;が使われていたことだった。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20160307/20160307003947.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20160307/20160307003947.png&quot; alt=&quot;f:id:naoty_k:20160307003947p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20160307003947p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;公式アプリの開発者の方と直接お話しする機会があった。本当はもっと伝えたいことがあったのだけど、あまりに英語ができなくて、ほとんど伝えられなかった。このライブラリのように海外の開発者に伝えられるコンテンツをもてるようになったものの、肝心の英語ができないばかりに非常にもったいないなーと強く感じた。それがきっかけで先月から英語を勉強しはじめている。&lt;/p&gt;</summary>
    <title>try! Swiftに参加してきた</title>
    <updated>2016-03-07T00:49:00+00:00</updated>
    <dc:date>2016-03-07T00:49:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/278/</id>
    <link href="https://blog.naoty.dev/278/"/>
    <summary>&lt;p&gt;おととしSwiftCSVというCSVをSwiftで扱うためのライブラリを作った。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/SwiftCSV&quot;&gt;naoty/SwiftCSV&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;けっこう思いつきで作ったので、あんまりちゃんとパースできないし、思ったよりissueがたくさん来てつらくなってしまったので、放置していた。仕事でもSwiftをまったく書けずにいて、Swiftを触るモチベーションも低かった。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;今年に入ってSwiftをガンガン仕事で書くようになってモチベーションが復活したので、ひどい有様だったSwiftCSVをフルスクラッチすることにした&lt;/strong&gt; 。幸い、テストコードはギリギリあったので振る舞いは変えずに内部のコードを綺麗にし、Swift 2.1に対応した。&lt;/p&gt;
&lt;p&gt;SwiftCSVを書くにあたって活躍したのは&lt;code&gt;GeneratorType&lt;/code&gt;と&lt;code&gt;SequenceType&lt;/code&gt;というprotocolだった。これらは&lt;code&gt;for ... in&lt;/code&gt;文に渡すことができる独自のイテレータを定義できる。これらの使い方は以前Qiitaにまとめたので参考になるかもしれない。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://qiita.com/naoty_k/items/970796fe56b4ab083278&quot;&gt;GeneratorとSequence - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;これらを使うことで、 &lt;strong&gt;「イテレートされる要素を作る責務」と「その要素を使う責務」を切り分けて、別々のオブジェクトとして定義できる&lt;/strong&gt; 。実際にSwiftCSVでは以下のように切り分けられている。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// CSV.swift

init(string: String, delimiter: NSCharacterSet = comma) {
    let headerSequence = HeaderSequence(text: string, delimiter: delimiter)
    for fieldName in headerSequence {
        header.append(fieldName)
        columns[fieldName] = []
    }

    // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;// HeaderSequence.swift

struct HeaderGenerator: GeneratorType {
    typealias Element = String
    
    private var fields: [String]
    
    init(text: String, delimiter: NSCharacterSet) {
        let header = text.lines[0]
        fields = header.componentsSeparatedByCharactersInSet(delimiter)
    }
    
    mutating func next() -&amp;gt; String? {
        return fields.isEmpty ? .None : fields.removeAtIndex(0)
    }
}

struct HeaderSequence: SequenceType {
    typealias Generator = HeaderGenerator
    
    private let text: String
    let delimiter: NSCharacterSet
    
    init(text: String, delimiter: NSCharacterSet) {
        self.text = text
        self.delimiter = delimiter
    }
    
    func generate() -&amp;gt; HeaderGenerator {
        return HeaderGenerator(text: text, delimiter: delimiter)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;GeneratorType&lt;/code&gt;と&lt;code&gt;SequenceType&lt;/code&gt;を使うことで設計上はうまく整理できたものの、CSVパーサとしての機能はかなりショボい。ダブルクォーテーションに囲まれた&lt;code&gt;,&lt;/code&gt;や改行を認識できていない。けっこう大変そうで僕だけでは対応ができないので、Pull requestを募集している。&lt;/p&gt;</summary>
    <title>SwiftCSVをフルスクラッチした</title>
    <updated>2016-02-24T23:15:00+00:00</updated>
    <dc:date>2016-02-24T23:15:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/277/</id>
    <link href="https://blog.naoty.dev/277/"/>
    <summary>&lt;p&gt;最近、Swiftにおけるエラーハンドリングについて興味をもっている。エラーハンドリングの中でアラートを組み立てて表示するコードをよく書いたり、目にしている。アラートを実装する際に気をつけているのは、ユーザーが目にしたときになるべく怒らせないようにすることだ。 &lt;strong&gt;ユーザーフレンドリーなアラートを実装する上で参考にするため、Human Interface Guidelines（以下、HIG）を読んでいる&lt;/strong&gt; 。HIGを読むと、アラートの実装にあたって問題点が見えてきた。&lt;/p&gt;
&lt;h1&gt;問題点&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;UIAlertController&lt;/code&gt;でアラートを組み立てるとき、テンプレのようなコードを長々書かないといけない。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;UIAlertController&lt;/code&gt;を使ってHIGで推奨されるアラートを組み立てるには、HIGの理解と注意深い実装が必要になる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;解決策&lt;/h1&gt;
&lt;p&gt;Swiftの表現力を駆使して、テンプレのようなコードをなるべく排除し、HIGの中で望ましいとされるUIを効率的に組み立てられるような設計を考えた。HIGでは、アラートは1つまたは2つのボタンを持つべきで、ボタンが3つ以上の場合はアクションシートを検討すべきだと書かれている。 &lt;strong&gt;アラートを1つのボタンを持つ&lt;code&gt;Confirmation&lt;/code&gt;と2つのボタンを持つ&lt;code&gt;Suggestion&lt;/code&gt;という2つのタイプに分類して、以下のようなenumで表現する&lt;/strong&gt; ことを考えてみた。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;enum Alert {
    case Confirmation
    case Suggestion
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この&lt;code&gt;Alert&lt;/code&gt;という型の値から&lt;code&gt;UIAlertController&lt;/code&gt;を生成する必要がある。 &lt;strong&gt;アラートに表示する情報はエラーオブジェクトから取得できると、エラーごとに表示すべき情報が統一されて効率的&lt;/strong&gt; だと思う。そこで、以下のように&lt;code&gt;NSError&lt;/code&gt;を各caseに関連付け（&lt;a href=&quot;http://naoty.hatenablog.com/entry/2016/02/10/132555&quot;&gt;前回記事&lt;/a&gt;を読むと&lt;code&gt;NSError&lt;/code&gt;ではなく&lt;code&gt;FriendlyErrorType&lt;/code&gt;を使うべき場面だと分かる）、&lt;code&gt;viewController&lt;/code&gt;というプロパティを定義した。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;enum Alert {
    case Confirmation(NSError)
    case Suggestion(NSError)

    var viewController: UIAlertController {
        switch self {
        case .Confirmation(let error):
            let alertController = buildAlertControllerWithError(error)

            let cancel = UIAlertAction(title: &quot;OK&quot;, style: .Cancel, handler: nil)
            alertController.addAction(cancel)

            return alertController
        case .Suggestion(let error):
            // 省略
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここでの&lt;code&gt;buildAlertControllerWithError(_:)&lt;/code&gt;は&lt;code&gt;NSError&lt;/code&gt;のもつ各情報を使って&lt;code&gt;UIAlertController&lt;/code&gt;を初期化するようなイメージだ。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Suggestion&lt;/code&gt;の場合、エラーから復帰するためのアクションをユーザーに提案することになるため、 &lt;strong&gt;その「復帰するためのアクション」を&lt;code&gt;Recovery&lt;/code&gt;として以下のように表現してみる&lt;/strong&gt; 。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct Recovery {
    let name: String
    let style: RecoveryStyle
    let recover: UIAlertAction -&amp;gt; Void

    enum RecoveryStyle {
        case Nondestructive
        case Destructive
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;RecoveryStyle&lt;/code&gt;は復帰するためのアクションが破壊的（＝アクション前に戻せない）か、非破壊的（＝アクション前に戻せる）かを表している。なぜこれらを区別するかというと、 &lt;strong&gt;HIGでは破壊的なアクションは赤字のタイトルにし、アラートの左側にボタンを置くべきとされている&lt;/strong&gt; からだ。逆に非破壊的なアクションのためのボタンは右側に置くべきとされている。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Recovery&lt;/code&gt;を踏まえると、&lt;code&gt;Alert&lt;/code&gt;の実装は以下のようになる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;enum Alert {
    case Confirmation(NSError)
    case Suggestion(NSError, Recovery)

    var viewController: UIAlertController {
        switch self {
        case .Confirmation(let error):
            // 省略
        case .Suggestion(let error, let recovery):
            let alertController = buildAlertControllerWithError(error)
            let cancel = UIAlertAction(title: &quot;Cancel&quot;, style: .Default, handler: nil)

            switch recovery.style {
            case .Nondestructive:
                let recover = UIAlertAction(title: recovery.name, style: .Default, handler: recovery.recover)
                alertController.addAction(cancel)
                alertController.addAction(recover)
            case .Destructive:
                let recover = UIAlertAction(title: recovery.name, style: .Destructive, handler: recovery.recover)
                alertController.addAction(recover)
                alertController.addAction(cancel)
            }

            return alertController
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;RecoveryStyle&lt;/code&gt;によって&lt;code&gt;addAction&lt;/code&gt;の順番を変えている。これによってHIGで推奨されているボタンの配置になる。&lt;/p&gt;
&lt;h1&gt;利用例&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;let alert = Alert.Confirmation(error)
presentViewController(alert.viewController, animated: true, completion: nil)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20160216/20160216000628.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20160216/20160216000628.png&quot; alt=&quot;f:id:naoty_k:20160216000628p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20160216000628p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let recovery = Alert.Recovery(name: &quot;Recover&quot;, style: .Nondestructive) { action in
    print(&quot;Recover!!&quot;)
}
let alert = Alert.Suggestion(error, recovery)
presentViewController(alert.viewController, animated: true, completion: nil)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20160216/20160216001159.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20160216/20160216001159.png&quot; alt=&quot;f:id:naoty_k:20160216001159p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20160216001159p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let recovery = Alert.Recovery(name: &quot;Recover&quot;, style: .Destructive) { action in
    print(&quot;Recover!!&quot;)
}
let alert = Alert.Suggestion(error, recovery)
presentViewController(alert.viewController, animated: true, completion: nil)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20160216/20160216000952.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20160216/20160216000952.png&quot; alt=&quot;f:id:naoty_k:20160216000952p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20160216000952p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1&gt;まとめ&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;HIGに沿って実装するとユーザーフレンドリーなアラートになる（はず）。&lt;/li&gt;
&lt;li&gt;HIGに沿って実装するのは、HIGの理解と注意深い実装が必要になる。&lt;/li&gt;
&lt;li&gt;上記のようなSwiftの表現力を駆使した設計によって、効率的にHIGに沿ったユーザーフレンドリーな実装を可能にできる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;関連記事&lt;/h1&gt;
&lt;!-- raw HTML omitted --&gt;</summary>
    <title>HIGで推奨されているアラートをSwiftで効率的に組み立てる</title>
    <updated>2016-02-17T10:00:00+00:00</updated>
    <dc:date>2016-02-17T10:00:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/276/</id>
    <link href="https://blog.naoty.dev/276/"/>
    <summary>&lt;h1&gt;新しいエラーハンドリング&lt;/h1&gt;
&lt;p&gt;Swift 2で&lt;code&gt;throw&lt;/code&gt;を使ったエラーハンドリングが新たに導入された。従来の&lt;code&gt;NSError&lt;/code&gt;を使ったエラーハンドリングの問題点は、メソッドに&lt;code&gt;NSError&lt;/code&gt;ポインタの代わりに&lt;code&gt;nil&lt;/code&gt;を渡すことで無視できてしまうことだった。新たに導入されたエラーハンドリングでは、&lt;code&gt;throws&lt;/code&gt;キーワードが宣言されたメソッドを呼び出す際に&lt;code&gt;do-catch&lt;/code&gt;文で囲うことを強制される。&lt;code&gt;throw&lt;/code&gt;で投げられるエラーは&lt;code&gt;NSError&lt;/code&gt;ではなく&lt;code&gt;ErrorType&lt;/code&gt;というprotocolを実装した値だ。Cocoaフレームワーク内の&lt;code&gt;NSError&lt;/code&gt;を使っていたメソッドは&lt;code&gt;throws&lt;/code&gt;を使うように置き換えられており、今後は独自のエラーを定義する場合は&lt;code&gt;NSError&lt;/code&gt;ではなく&lt;code&gt;ErrorType&lt;/code&gt;を使うのが望ましいと考えられる。しかし、&lt;code&gt;ErrorType&lt;/code&gt;にも問題点はあり現実的な設計方針を検討する必要がある。&lt;/p&gt;
&lt;h1&gt;アプリ独自エラーの実装&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;NSError&lt;/code&gt;の代わりに&lt;code&gt;ErrorType&lt;/code&gt;を使っていく流れがあるものの、&lt;code&gt;ErrorType&lt;/code&gt;には&lt;code&gt;NSError&lt;/code&gt;が持っていた&lt;code&gt;localizedDescription&lt;/code&gt;や&lt;code&gt;userInfo&lt;/code&gt;といったエラー情報がないという問題点がある。そこで、&lt;code&gt;ErrorType&lt;/code&gt;を継承した新たなprotocolを定義するという方針を考えてみた。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;protocol FriendlyErrorType: ErrorType {
    var summary: String { get }
    var reason: String? { get }
    var suggestion: String? { get }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この&lt;code&gt;FriendlyErrorType&lt;/code&gt;を使って以下のように独自エラーを定義できる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;enum ApplicationError: FriendlyErrorType {
    case SomethingWrong
    case DecodeFailed([String])

    var summary: String {
        switch self {
        case .SomethingWrong:
            return &quot;Something wrong&quot;
        case .DecodeFailed(_):
            return &quot;Decode failed&quot;
        }
    }

    var reason: String? {
        switch self {
        case .SomethingWrong:
            return .None
        case .DecodeFailed(let fields):
            let failedFields = fields.joinWithSeparator(&quot;, &quot;)
            return &quot;Failed to decode following fields: \(failedFields)&quot;
        }
    }
    
    var suggestion: String? {
        switch self {
        case .SomethingWrong:
            return .None
        case .DecodeFailed:
            return .None
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また、Cocoaフレームワークのメソッドは&lt;code&gt;ErrorType&lt;/code&gt;を投げるようになったものの、Alamofire等のライブラリを使う際には&lt;code&gt;NSError&lt;/code&gt;を使うことになるため、&lt;code&gt;FriendlyErrorType&lt;/code&gt;を実装するように&lt;code&gt;NSError&lt;/code&gt;を拡張する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;extension NSError: FriendlyErrorType {
    var summary: String {
        return localizedDescription
    }
    
    var reason: String? {
        return userInfo[NSLocalizedFailureReasonErrorKey] as? String
    }
    
    var suggestion: String? {
        return userInfo[NSLocalizedRecoverySuggestionErrorKey] as? String
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;なぜprotocol extensionではなく継承なのか&lt;/h2&gt;
&lt;p&gt;protocol extensionだと&lt;code&gt;ErrorType&lt;/code&gt;にデフォルトの実装を与えることになる。その場合、&lt;code&gt;ErrorType&lt;/code&gt;として渡されたエラーに対してメソッドを呼ぶと、すべてそのデフォルトの実装の結果が返るようになる。一方、&lt;code&gt;FriendlyErrorType&lt;/code&gt;はただのprotocolなので、メソッドの結果はメソッドを実装する各クラスの結果を反映する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;extension ErrorType {
    var summary: String {
        return &quot;&quot;
    }
}

extension NSError {
    var summary: String {
        return localizedDescription
    }
}

let error: ErrorType = NSError(domain: &quot;com.github.naoty.playground&quot;, code: 1000, userInfo: [NSLocalizedDescriptionKey: &quot;Something wrong&quot;])
print(error.summary) //=&amp;gt; &quot;\n&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;protocol FriendlyErrorType: ErrorType {
    var summary: String { get }
}

extension NSError: FriendlyErrorType {
    var summary: String {
        return localizedDescription
    }
}

let error: FriendlyErrorType = NSError(domain: &quot;com.github.naoty.playground&quot;, code: 1000, userInfo: [NSLocalizedDescriptionKey: &quot;Something wrong&quot;])
print(error.summary) //=&amp;gt; &quot;Something wrong\n&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;エラーの利用例&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;FriendlyErrorType&lt;/code&gt;を実装したエラー型を実際に利用してみる。Alamofire、SwiftTask、Himotokiを使ってQiita APIを呼び出している。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return Task&amp;lt;Void, [Item], FriendlyErrorType&amp;gt; { progress, fulfill, reject, configure in
    Alamofire.request(.GET, &quot;https://qiita.com/api/v2/items&quot;).responseJSON { response in
        switch response.status {
        case .Success(let value):
            if let objects = value as? [AnyObject] {
                var items: [Item] = []
                for object in objects {
                    do {
                        let item = try decode(object) as Item
                        items.append(item)
                    } catch DecodeError.MissingKeyPath(let keyPath) {
                        reject(ApplicationError.DecodeFailed(keyPath.components))
                    } catch {
                        reject(ApplicationError.SomethingWrong)
                    }
                }
                fulfill(items)
            } else {
                reject(ApplicationError.DecodeFailed([&quot;root&quot;]))
            }
        case .Failure(let error):
            reject(error)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;NSError&lt;/code&gt;を拡張しているため、&lt;code&gt;ApplicationError&lt;/code&gt;と&lt;code&gt;NSError&lt;/code&gt;を&lt;code&gt;FriendlyErrorType&lt;/code&gt;として並べて扱うことができている。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FriendlyErrorType&lt;/code&gt;を使ってアラートを表示する実装は以下のようなイメージだ。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let title = error.summary

var message = &quot;&quot;
if let reason = error.reason {
    message += reason
    message += &quot;\n&quot;
}
if let suggestion = error.suggestion {
    message += suggestion
}

let alertController = UIAlertController(title: title, message: message, preferredStyle: .Alert)
presentViewController(alertController, animated: true, completion: nil)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上のような方針に基づいたサンプルアプリケーションを用意した。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/MyQiita&quot;&gt;naoty/MyQiita&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;関連記事&lt;/h1&gt;
&lt;!-- raw HTML omitted --&gt;</summary>
    <title>FriendlyErrorType</title>
    <updated>2016-02-10T13:25:00+00:00</updated>
    <dc:date>2016-02-10T13:25:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/275/</id>
    <link href="https://blog.naoty.dev/275/"/>
    <summary>&lt;h1&gt;2015年&lt;/h1&gt;
&lt;p&gt;2015年はRailsをやってる時間が長かった。Androidを少々書いていた時期もあり、ほんの僅かな時期iOS（Objective-C）をちょろっとやってた。Rails自体への意識を高めていこうとした時期もあり、その結果として初のrails本体へのコミットも果たした。ただ、コードを書くこと自体よりも、チーム全体の成長や開発効率を高めることに集中していたように思う。どれか一つに注力していたわけではなかったので、外部イベントで話せるような深い話がまったくできなかったのが歯がゆかった。&lt;/p&gt;
&lt;p&gt;関数型プログラミング、DDD、Go言語など新しい分野の勉強もしていた。特にGo言語は、自分用の小さいツールをたくさんGoで書いたことでそれなりに書けるようになってきたと思う。一番驚いたのは、&lt;a href=&quot;https://github.com/naoty/Timepiece&quot;&gt;naoty/Timepiece&lt;/a&gt;がなぜかバズって、海外からStarをたくさんいただいたことだった。&lt;/p&gt;
&lt;p&gt;開発以外のトピックとしては、7、8年かけてたメガネをやめてコンタクトにしたこと、卓球ハウスが解散して練馬区に引っ越したこと、いろいろあって&quot;社会的状況&quot;になりつつあることがある。&lt;/p&gt;
&lt;p&gt;開発以外の時間が充実しすぎてあんまり開発してなかったが、最高の一年となった。開発してても幸せにはなれない、そこに幸せはない、という数年来の想いが確信へと変わった一年だった。&lt;/p&gt;
&lt;h1&gt;2016年&lt;/h1&gt;
&lt;p&gt;今年こそはiOSアプリ開発に専念できたらしたい。Railsはいい加減コリゴリなので。アプリ開発に専念するからには、UI設計などのデザイン業務にも徐々に慣れていきたいなーと欲が出てきている。&lt;/p&gt;
&lt;p&gt;前述のTimepieceの保守も継続させて☆1000を突破したい。ただ、これ以外にも他のジャンルで新しいiOS開発関連ライブラリを作っていきたい。できれば、少し大きめのイベントでも発表できるようになっていきたい（これまではあまり外部での発表に重きを置いてなかったけど、なんだかいろいろ心配になってきたので）。&lt;/p&gt;
&lt;p&gt;あとは、12月の引っ越しを期に人生初の自炊生活を始めたので、ちゃんと自炊を習慣にしていきたいというのが大きな目標。&lt;/p&gt;
&lt;p&gt;本年も何卒宜しくお願い致します。&lt;/p&gt;</summary>
    <title>2015年の振り返りと2016年に向けて</title>
    <updated>2016-01-02T03:49:00+00:00</updated>
    <dc:date>2016-01-02T03:49:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/274/</id>
    <link href="https://blog.naoty.dev/274/"/>
    <summary>&lt;h1&gt;やりたいこと&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;すべてのRakeタスクの前後で、開始と終了のメッセージを表示したい。&lt;/li&gt;
&lt;li&gt;毎回出るのは鬱陶しいので、指定したときだけ表示したい。&lt;/li&gt;
&lt;li&gt;いろんなところに&lt;code&gt;p&lt;/code&gt;とか&lt;code&gt;Rails.logger.info&lt;/code&gt;のような処理を書きたくない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;実装&lt;/h1&gt;
&lt;pre lang=&quot;ruby:lib/tasks/setup_account.rake&quot;&gt;&lt;code&gt;desc &quot;Setup an account&quot;
task setup_account: %i(common) do
  logger.debug &quot;creating account...&quot;
  logger.info  &quot;created account!&quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;ruby:lib/tasks/common.rake&quot;&gt;&lt;code&gt;# Extend logger to the main object
def logger
  Rails.logger
end

desc &quot;Setup a common setting for every tasks&quot;
task common: %i(environment) do
  Rails.logger = Logger.new(STDOUT)
  Rails.logger.level = Logger::INFO
end

desc &quot;Switch the level of a logger to DEBUG&quot;
task debug: %i(common) do
  Rails.logger.level = Logger::DEBUG
end

require &quot;task_logging&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;ruby:lib/task_logging.rb&quot;&gt;&lt;code&gt;module TaskLogging
  def task(*args, &amp;amp;block)
    Rake::Task.define_task(*args) do |task|
      if block_given?
        Rails.logger.debug &quot;[#{task.name}] started&quot;
        begin
          block.call(task)
          Rails.logger.debug &quot;[#{task.name}] finished&quot;
        rescue =&amp;gt; exception
          Rails.logger.debug &quot;[#{task.name}] failed&quot;
          raise exception
        end
      end
    end
  end
end

# Override Rake::DSL#task to inject logging
extend TaskLogging
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上のように実装すると、以下のように賢くログを出し分けられる。&lt;/p&gt;
&lt;pre lang=&quot;zsh&quot; class=&quot;highlight highlight-zsh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rake setup_account
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2015-10-10T17:38:58.192968 &lt;span class=&quot;c&quot;&gt;#15178]  INFO -- : created account!&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rake debug setup_account
D, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2015-10-10T17:38:00.704398 &lt;span class=&quot;c&quot;&gt;#11753] DEBUG -- : [setup_account] started&lt;/span&gt;
D, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2015-10-10T17:38:00.704460 &lt;span class=&quot;c&quot;&gt;#11753] DEBUG -- : creating account...&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2015-10-10T17:38:00.704478 &lt;span class=&quot;c&quot;&gt;#11753]  INFO -- : created account!&lt;/span&gt;
D, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2015-10-10T17:38:00.704491 &lt;span class=&quot;c&quot;&gt;#11753] DEBUG -- : [setup_account] finished&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>Rakeタスクの賢いロギング</title>
    <updated>2015-10-11T12:41:00+00:00</updated>
    <dc:date>2015-10-11T12:41:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/273/</id>
    <link href="https://blog.naoty.dev/273/"/>
    <summary>&lt;h1&gt;問題&lt;/h1&gt;
&lt;p&gt;Vagrantの共有フォルダでVM上とコードをrsync経由で同期させているとき、なぜかローカルで編集した変更がVM上のRailsサーバーに反映されないことがある。Railsサーバーを再起動すれば、ちゃんと反映される。&lt;/p&gt;
&lt;h1&gt;原因&lt;/h1&gt;
&lt;p&gt;VM上の変更したファイルのmtimeが更新されていないため、Railsのautoloadが実行されなかった。&lt;/p&gt;
&lt;p&gt;Railsのautoloadは&lt;code&gt;ActiveSupport::FileUpdateChecker&lt;/code&gt;を使って以下のようにファイルのmtimeを見て変更されたかどうかを判定している。&lt;/p&gt;
&lt;pre lang=&quot;rb:lib/active_support/file_update_checker.rb&quot;&gt;&lt;code&gt;def updated?
  current_watched = watched
  if @last_watched.size != current_watched.size
    @watched = current_watched
    true
  else
    current_updated_at = updated_at(current_watched)
    if @last_update_at &amp;lt; current_updated_at
      @watched    = current_watched
      @updated_at = current_updated_at
      true
    else
      false
    end
  end
end

# ...

def updated_at(paths)
  @updated_at || max_mtime(paths) || Time.at(0)
end

# ...

def max_mtime(paths)
  time_now = Time.now
  paths.map {|path| File.mtime(path)}.reject {|mtime| time_now &amp;lt; mtime}.max
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;変更したファイルのmtimeをローカルとVMで比べてみると、下のようになった。&lt;/p&gt;
&lt;pre lang=&quot;bash:local&quot;&gt;&lt;code&gt;$ stat -x app/controllers/accounts_controller.rb
  File: &quot;app/controllers/accounts_controller.rb&quot;
  Size: 117          FileType: Regular File
  Mode: (0644/-rw-r--r--)         Uid: (  501/   naoty)  Gid: (   20/   staff)
Device: 1,4   Inode: 17448444    Links: 1
Access: Wed Oct  7 23:17:24 2015
Modify: Wed Oct  7 23:17:21 2015
Change: Wed Oct  7 23:17:21 2015
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;bash:vm&quot;&gt;&lt;code&gt;$ stat app/controllers/accounts_controller.rb
  File: `app/controllers/accounts_controller.rb'
  Size: 117             Blocks: 8          IO Block: 4096   通常ファイル
Device: fd00h/64768d    Inode: 2331313     Links: 1
Access: (0644/-rw-r--r--)  Uid: ( 1000/ vagrant)   Gid: ( 1000/ vagrant)
Context: unconfined_u:object_r:default_t:s0
Access: 2015-10-06 17:47:42.590929945 +0000
Modify: 2015-10-07 14:17:21.000000000 +0000
Change: 2015-10-06 17:47:43.386929905 +0000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;確かにVM上のmtimeはぜんぜん更新されてない…。&lt;/p&gt;
&lt;h1&gt;解決&lt;/h1&gt;
&lt;p&gt;rsyncの&lt;code&gt;--times&lt;/code&gt;オプションをVagrantのrsyncオプションに渡すことで、ファイルのmtimeも転送されるようにする。&lt;/p&gt;
&lt;pre lang=&quot;ruby:Vagrantfile&quot;&gt;&lt;code&gt;config.vm.synced_folder &quot;.&quot;, &quot;/vagrant&quot;, type: &quot;rsync&quot;,
  rsync__args: %w(--verbose --archive --delete -z --copy-links --times),
  rsync__exclude: %w(.git/ log/ tmp/ vendor/)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;rsync__args&lt;/code&gt;で&lt;code&gt;rsync&lt;/code&gt;に渡す引数を指定できる。ここでは、デフォルトで渡される引数に加えて&lt;code&gt;--times&lt;/code&gt;オプションを指定している。&lt;/p&gt;</summary>
    <title>Vagrant rsync + Railsでコードの変更が反映されない件</title>
    <updated>2015-10-08T00:12:00+00:00</updated>
    <dc:date>2015-10-08T00:12:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/272/</id>
    <link href="https://blog.naoty.dev/272/"/>
    <summary>&lt;p&gt;自分の環境固有の設定や自分しか使わないであろうプラグインの設定などは、Vagrantfileに書いてgitで管理したくないので、別の設定ファイルに分けてignoreしておきたい。そういうときに以下のようにしておくと便利。&lt;/p&gt;
&lt;pre lang=&quot;rb:Vagrantfile&quot;&gt;&lt;code&gt;Vagrant.configure(2) do |config|
  # ...
end

# Load local configurations
load &quot;./Vagrantfile.local&quot; if File.exist?(&quot;./Vagrantfile.local&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;rb:Vagrantfile.local&quot;&gt;&lt;code&gt;Vagrant.configure(2) do |config|
  # ...
end
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>Vagrantfileを分割する</title>
    <updated>2015-10-03T15:12:00+00:00</updated>
    <dc:date>2015-10-03T15:12:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/271/</id>
    <link href="https://blog.naoty.dev/271/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4873113075/naotoknk-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51jWtxU0sAL._SL160_.jpg&quot; alt=&quot;エンジニアのための時間管理術&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;エンジニアのための時間管理術&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4873113075/naotoknk-22/&quot;&gt;エンジニアのための時間管理術&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: Thomas A. Limoncelli,株式会社クイープ&lt;/li&gt;
&lt;li&gt;出版社/メーカー: オライリー・ジャパン&lt;/li&gt;
&lt;li&gt;発売日: 2006/10/19&lt;/li&gt;
&lt;li&gt;メディア: 単行本（ソフトカバー）&lt;/li&gt;
&lt;li&gt;購入: 11人 クリック: 322回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4873113075/naotoknk-22&quot;&gt;この商品を含むブログ (153件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この本を読もうと思った背景は2つある。1つは、&lt;a href=&quot;http://naoty.hatenablog.com/entry/2015/08/23/164951&quot;&gt;前回のエントリー&lt;/a&gt;でも書いた通り、最近は仕事を効率的に終わらせてプライベートの時間をちゃんと確保しようとしていることだ。もう1つは、7月から新卒のメンターを担当しており、作業の割り込みが増えたことだ。新人には分からないことがあればどんどん割り込んでほしいと伝えているため、メンターが割り込みを処理しつつ普段の業務もそつなくこなす必要がある。&lt;/p&gt;
&lt;p&gt;この本は「エンジニアのための」と書いてあるが実際はシステム管理者をターゲットとしており、プログラマーである僕とは少し事情が異なるかもしれない。それでも、割り込みへの対処法やタイムマネジメントなど、その他の職業にとっても有用なノウハウがたくさん書いてある。&lt;/p&gt;
&lt;p&gt;本書を通して感じたことは「考えることを減らして、目の前の作業に集中しよう」というメッセージだ。良い習慣を身につけたり、外部記憶装置やカレンダーのようなツールを使ったり、単純で頻繁に行う作業を自動化したりすることで、考えることを減らすことができ、割り込みやタイトスケジュールによって作業効率が落ちるのを避けられるという話が多かったように思う。&lt;/p&gt;
&lt;p&gt;その中で特に印象に残ったのは、とにかく外部記憶装置を多用しようという話だ。本書ではPDAがその例として出てくるが、若者はPDAなんて使わないと思うので、仕事でよく使うツールに置き換えて読んでいた。本書で言われていた通り、頭のなかで覚えておく作業が増えてくるとだんだん目の前の作業に集中できなくなってくる気がする。&lt;/p&gt;
&lt;p&gt;僕の場合、会社ではメール、スケジュールはすべてOutlookで管理されているので、やるべき作業もすべてOutlookで管理するようにしてみた。その日のTODOリストは自作のtodo管理ツール&lt;a href=&quot;#f-b9b194d8&quot; title=&quot;https://github.com/naoty/todo&quot;&gt;*1&lt;/a&gt;で管理しているが、1日の始まりにOutlookからやるべきことを棚卸ししてTODOリストに追加している。逆に、すべてのTODOをTODOリストで管理してしまうと、TODOリストがいつになっても空にならず達成感がもてなくなってしまう。すべてのタスクを記録する外部記憶装置と短いTODOリストに分けることでうまく機能しそうだ。&lt;/p&gt;
&lt;p&gt;その他にも今すぐ実践できそうなノウハウがたくさんあったので試行錯誤して効率的に仕事をこなせるようになりたい。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#fn-b9b194d8&quot;&gt;*1&lt;/a&gt;:&lt;a href=&quot;https://github.com/naoty/todo&quot;&gt;https://github.com/naoty/todo&lt;/a&gt;&lt;/p&gt;</summary>
    <title>「エンジニアのための時間管理術」を読んだ</title>
    <updated>2015-09-06T15:34:00+00:00</updated>
    <dc:date>2015-09-06T15:34:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/270/</id>
    <link href="https://blog.naoty.dev/270/"/>
    <summary>&lt;p&gt;最近大きな環境の変化があったり先日行ってきたYAPCで影響を受けて心境が変わってきたので、近況という形でブログに残しておきたい。&lt;/p&gt;
&lt;p&gt;大きな心境の変化として、プライベートの時間の使い方を変えようと思っている。より優先度の高いことに時間を使うようにして、プライベートでプログラミングする時間は以前より少なくなりそう。あれこれ手を出すというよりは1つのことに集中して時間を充てる方が効果的なんじゃないかと思うようになったので、何にしようか考えている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仕事で使う可能性がありそうなScalaとPlayFrameworkに興味がある。以前にすごいH本を読んで関数型プログラミングを実践してみたい気持ちがある。&lt;/li&gt;
&lt;li&gt;あとは、いま仕事ではRailsプロジェクトに携わっているけど、リファクタリングを喫緊の課題として感じていて、プライベートの時間でいかに対処すべきか本を読んで考えてみたり、必要なライブラリの開発に時間を充てるのもいいかもしれない。&lt;/li&gt;
&lt;li&gt;JavaScriptをキャッチアップしたい気持ちもちょっとある。YAPCのセッションでES6の話を聞いて、ちゃんと学んで既存のプロジェクトに手を加えたい気持ちが湧いてきた。ただこれは上のリファクタリングが済んだ先の話だと思った。&lt;/li&gt;
&lt;li&gt;「ドメイン駆動設計」をずっと読んでたけど、引き続き「実践ドメイン駆動設計」も読んでみようかなという選択肢もある。ただ、まだ仕事で使えるような段階にはない気がする。&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://github.com/naoty/Timepiece&quot;&gt;naoty/Timepiece&lt;/a&gt;の開発は停滞しているけど、どうしようかなと思っている。仕事でSwiftが書けるのであればまだモチベーションを維持できるのだけど、残念ながらそのような環境にはいない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こう整理してみると、リファクタリングについてプライベートでも時間をとるのがよさそうだなと思う。それが一段落ついたらJavaScriptのリファクタリングとかDDDとかに移っていけそう。もっと余裕が出てきたらScalaやろうかなぁ。&lt;/p&gt;
&lt;p&gt;なんとなくあと2, 3年先までの見通しが立ってきた。仕事ではとりあえず今のプロジェクトを地道に改善していくことになりそう。自分の成長というよりはプロダクトの成功やチームの成長にフォーカスしていきたいという気持ちに移ってきている。Rubyの上にも3年、という感じ。iOS/Androidもやるけど。プライベートでも、今の生活の先に明るい未来が見えてきている。堅実に仕事を進めつつ、貴重な時間を大切にしていきたい。&lt;/p&gt;</summary>
    <title>近況</title>
    <updated>2015-08-23T16:49:00+00:00</updated>
    <dc:date>2015-08-23T16:49:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/269/</id>
    <link href="https://blog.naoty.dev/269/"/>
    <summary>&lt;pre lang=&quot;zsh&quot; class=&quot;highlight highlight-zsh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew uninstall go
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bash &amp;lt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vi .zprofile.local
&lt;/pre&gt;
&lt;pre lang=&quot;zsh:.zprofile.local&quot;&gt;&lt;code&gt;# gvm
[[ -s &quot;$HOME/.gvm/scripts/gvm&quot; ]] &amp;amp;&amp;amp; source &quot;$HOME/.gvm/scripts/gvm&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;まず、gomobileはGo 1.5以降が必要なので、HomebrewをやめてgvmでGoのバージョン管理をする。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;zsh&quot; class=&quot;highlight highlight-zsh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; .zprofile
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gvm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;go1.4.2
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gvm use go1.4.2 &lt;span class=&quot;nt&quot;&gt;--default&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ GOROOT_BOOTSTRAP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GOROOT&lt;/span&gt; gvm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;go1.5beta2
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gvm use go1.5beta2 &lt;span class=&quot;nt&quot;&gt;--default&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go get golang.org/x/mobile/cmd/gomobile
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gomobile init &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Go 1.5のインストールにはGo 1.4以降が必要なので先に1.4.2をインストールする。&lt;/li&gt;
&lt;li&gt;その後&lt;code&gt;GOROOT_BOOTSTRAP&lt;/code&gt;で1.4.2の&lt;code&gt;GOROOT&lt;/code&gt;を指定して1.5beta2をインストールする。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;gomobile init&lt;/code&gt;でiOSやAndroid向けにツールチェーンをインストールしたり標準ライブラリをビルドしたりしているようだ。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;zsh&quot; class=&quot;highlight highlight-zsh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GOROOT&lt;/span&gt;/src
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;gomobile_playground &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;hello
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vi hello/hello.go
&lt;/pre&gt;
&lt;pre lang=&quot;go:gomobile_playground/hello/hello.go&quot;&gt;&lt;code&gt;package hello

func World() string {
    return &quot;Hello, world!&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;hello&lt;/code&gt;というパッケージをとりあえず書いてみる。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;zsh&quot; class=&quot;highlight highlight-zsh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;hello
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gomobile &lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-target&lt;/span&gt; ios
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;hello.framework hello.go
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;gomobile bind -target ios&lt;/code&gt;でパッケージをiOS用のフレームワークにビルドする。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;cpp:hello.framework/Versions/Current/Headers/Hello.h&quot;&gt;&lt;code&gt;// Objective-C API for talking to github.com/naoty/gomobile_playground/hello Go package.
//   gobind -lang=objc github.com/naoty/gomobile_playground/hello
//
// File is generated by gobind. Do not edit.

#ifndef __GoHello_H__
#define __GoHello_H__

#include &amp;lt;Foundation/Foundation.h&amp;gt;

FOUNDATION_EXPORT NSString* GoHelloWorld();

#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;ヘッダーファイルを見てみると、確かに文字列を返す関数が定義されているようだ。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>gomobileでiOS用のライブラリをビルドするまで</title>
    <updated>2015-07-26T11:21:00+00:00</updated>
    <dc:date>2015-07-26T11:21:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/268/</id>
    <link href="https://blog.naoty.dev/268/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/Timepiece&quot;&gt;naoty/Timepiece&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Timepieceを&lt;code&gt;0.4.0&lt;/code&gt;にアップデートした。ぶっちゃけブログの記事にするくらいならちゃんとCHANGELOGにしろという話なんだけど、技術的な詳細も少し話したいのでブログの記事にした。軽微なバグの修正と以下の2点が今回の変更点だ。&lt;/p&gt;
&lt;h1&gt;タイムゾーンのサポート&lt;/h1&gt;
&lt;p&gt;これがメインの変更になる。「サーバー側から受け取る時間のタイムゾーンとiOSアプリケーションのタイムゾーンが異なっており、それらを比較したい」みたいなissueをもらったので対応した。「こういう感じのインターフェイスはどう？」みたいなのを聞いてたら「Sweet!」だのと褒められたので、その気になって実装してしまった。けっこう大変だった。&lt;/p&gt;
&lt;p&gt;iOSでは、&lt;code&gt;NSDate&lt;/code&gt;オブジェクトそのものにタイムゾーンは存在しない。システムで設定されるタイムゾーンを&lt;code&gt;NSCalendar&lt;/code&gt;経由で取得することになる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NSCalendar.currentCalendar().timeZone
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;なので、今回のようなケースだと、&lt;code&gt;NSDate&lt;/code&gt;オブジェクトそれぞれにタイムゾーンが存在するように見せる必要がありそうだった。なお、オフセットを調整することも考えられるが、時間を足し引きしてしまった段階でそれは別の時間となってしまう。同じ時間で別のタイムゾーンを持つ&lt;code&gt;NSDate&lt;/code&gt;オブジェクトが必要だった。実装方針としては、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;デフォルトでは&lt;code&gt;NSCalendar&lt;/code&gt;経由でシステムのタイムゾーンを取得する&lt;/li&gt;
&lt;li&gt;タイムゾーンをセットする場合はそのタイムゾーンを持つ新しい&lt;code&gt;NSDate&lt;/code&gt;を生成して返す（状態を更新しない）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ということを念頭に置いた。&lt;/p&gt;
&lt;p&gt;ところで、Timepieceは&lt;code&gt;NSDate&lt;/code&gt;を始めとするいくつかの既存のオブジェクトのextensionとして実装されている。extensionで&lt;code&gt;NSDate&lt;/code&gt;オブジェクトに&lt;code&gt;timeZone&lt;/code&gt;のようなプロパティを追加することは普通はできない。しかし、Objective-CのランタイムAPIを使って動的にプロパティを追加することで、これをなんとか実現させることができる。Swiftの場合でも、ランタイムAPIを使うことは可能だ。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import ObjectiveC

public extension NSDate {
    var timeZone {
        return objc_getAssociatedObject(self, &amp;amp;AssociatedKeys.TimeZone) as? NSTimeZone ?? calendar.timeZone
    }

    func change(#timeZone: NSTimeZone) -&amp;gt; NSDate! {
        // ...

        objc_setAssociatedObject(newDate, &amp;amp;AssociatedKeys.TimeZone, timeZone, UInt(OBJC_ASSOCIATION_RETAIN_NONATOMIC))

        // ...
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;objc_&lt;/code&gt;から始まる関数がランタイムAPIだ。これらの関数によって動的にオブジェクトにプロパティを読み書きしている。&lt;code&gt;change(timeZone:)&lt;/code&gt;で生成された&lt;code&gt;NSDate&lt;/code&gt;オブジェクトのみ動的に追加されたプロパティを持つ。タイムゾーンが異なる&lt;code&gt;NSDate&lt;/code&gt;同士の計算も問題なく行われている。これは上述の通りオフセットの調整による実装ではないためだと思う。&lt;/p&gt;
&lt;h1&gt;playgroundの追加&lt;/h1&gt;
&lt;p&gt;機能というわけじゃないけど、リポジトリにplaygroundを追加した。それに伴ってプロジェクトからワークスペースに変更した。実際にTimepieceを試してもらうには、サンプルのアプリケーションを作ってPodfileを書いて…みたいなことをする必要がありとても面倒だったので、Timepieceが使えるplaygroundを用意した。&lt;/p&gt;
&lt;h1&gt;Pull request大歓迎&lt;/h1&gt;
&lt;p&gt;タイムゾーン周りの実装は正直あんまり自信はないんだけど、テストはちゃんと通ってるしまぁいいかくらいの気持ちでリリースした。観点が漏れている可能性は大いにありうるので、ぜひPull requestしてもらいたい。&lt;/p&gt;</summary>
    <title>Timepieceを0.4.0にアップデートした</title>
    <updated>2015-07-19T23:06:00+00:00</updated>
    <dc:date>2015-07-19T23:06:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/267/</id>
    <link href="https://blog.naoty.dev/267/"/>
    <summary>&lt;p&gt;gitなど既存のコマンドラインを拡張して新しいサブコマンドを追加する方法はいくつか考えられる。&lt;/p&gt;
&lt;h1&gt;git alias&lt;/h1&gt;
&lt;p&gt;gitの場合は&lt;code&gt;git alias&lt;/code&gt;を使うことで簡単にサブコマンドを追加できる。gitのとき限定。&lt;/p&gt;
&lt;h1&gt;ラッパー&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/github/hub&quot;&gt;github/hub&lt;/a&gt;のような既存のコマンドラインをラップしたスクリプトを書き、&lt;code&gt;alias hub=git&lt;/code&gt;のように&lt;code&gt;alias&lt;/code&gt;することで既存の機能を保ちつつ機能を追加できる。&lt;/p&gt;
&lt;p&gt;問題点としては、複数のラッパーによる拡張が難しくなる。例えば、ここで&lt;code&gt;bub&lt;/code&gt;という&lt;code&gt;git&lt;/code&gt;のラッパーを書いたとする。&lt;code&gt;git&lt;/code&gt;に&lt;code&gt;hub&lt;/code&gt;の機能と&lt;code&gt;bub&lt;/code&gt;の機能を拡張したい。&lt;code&gt;hub&lt;/code&gt;は入力されたサブコマンドが&lt;code&gt;hub&lt;/code&gt;になければ&lt;code&gt;git&lt;/code&gt;にフォワードしている。なので、&lt;code&gt;hub&lt;/code&gt;と&lt;code&gt;bub&lt;/code&gt;を同時に拡張するには&lt;code&gt;bub&lt;/code&gt;を&lt;code&gt;hub&lt;/code&gt;のラッパーとして実装することになってしまう。依存関係をハードコーディングすることになるため、まったくスケーラブルじゃない。&lt;/p&gt;
&lt;h1&gt;命名規則とext&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;command subcommand&lt;/code&gt;と入力されたら&lt;code&gt;command-subcommand&lt;/code&gt;を実行するように名前解決する仕組みがよさそうだと思う。例えば、&lt;code&gt;git pr&lt;/code&gt;というコマンドはまず&lt;code&gt;git-pr&lt;/code&gt;を探し、あれば実行し、なければ&lt;code&gt;git pr&lt;/code&gt;を実行する（そしてエラーになる）。&lt;code&gt;gem uninstall all&lt;/code&gt;というコマンドは&lt;code&gt;gem-uninstall-all&lt;/code&gt;、&lt;code&gt;gem-uninstall all&lt;/code&gt;、&lt;code&gt;gem uninstall all&lt;/code&gt;の順に探索されて見つかり次第実行される。&lt;/p&gt;
&lt;p&gt;このような命名規則を基に名前解決するツールを書いた。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/ext&quot;&gt;naoty/ext&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ go get github.com/naoty/ext
$ go get github.com/naoty/gem-uninstall-all
$ alias gem=&quot;ext gem&quot;
$ gem uninstall all # Run gem-uninstall-all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;正直、いろんな問題がありえそうだが、昨日思いついたままに書いたものなので、まだ想定できてない。&lt;code&gt;gem-uninstall-rails&lt;/code&gt;というコマンドがあったらrailsをアンインストールできないとかありそう。&lt;/p&gt;
&lt;p&gt;上の例で、&lt;code&gt;hub&lt;/code&gt;と&lt;code&gt;bub&lt;/code&gt;を同時に拡張したい場合に&lt;code&gt;ext&lt;/code&gt;を使うと以下のようにできる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ go get github.com/naoty/hub-bub
$ alias git=&quot;ext hub&quot;
$ git bub # Run `hub-bub`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;残念ながら、&lt;code&gt;hub&lt;/code&gt;を使いたい場合はこうするしかないような気がする。&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;追記(2015-07-23)&lt;/h1&gt;
&lt;p&gt;gitには、&lt;code&gt;git subcommand&lt;/code&gt;を&lt;code&gt;git-&amp;lt;subcommand&amp;gt;&lt;/code&gt;として名前解決して実行する機能があったことをさっき知った。なので、gitに限って言えばextのようなツールは不要だと思う。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd $HOME/bin
$ vi git-hello
#!/bin/sh

echo &quot;Hello, world!&quot;
$ chmod +x git-hello
$ git hello
Hello, world!
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>コマンドラインを拡張しやすくするヤツ書いた</title>
    <updated>2015-07-14T10:15:00+00:00</updated>
    <dc:date>2015-07-14T10:15:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/266/</id>
    <link href="https://blog.naoty.dev/266/"/>
    <summary>&lt;h1&gt;GeneratorType&lt;/h1&gt;
&lt;p&gt;generatorとは新しい要素を返す処理のことで、以下の&lt;code&gt;GeneratorType&lt;/code&gt;プロトコルに従う。&lt;/p&gt;
&lt;pre lang=&quot;swift&quot; class=&quot;highlight highlight-swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GeneratorType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;例えば、文字列を各行を返すgeneratorはこんな感じで実装する。&lt;/p&gt;
&lt;pre lang=&quot;swift&quot; class=&quot;highlight highlight-swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LineGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GeneratorType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;componentsSeparatedByString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeAtIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;いろはにほへと ちりぬるを&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;わかよたれそ つねならむ&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ういのおくやま けふこえて&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;あさきゆめみし よひもせず&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;generator1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LineGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;generator1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; いろはにほへと ちりぬるを&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;generator1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; わかよたれそ つねならむ&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;generator1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; ういのおくやま けふこえて&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;generator1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; あさきゆめみし よひもせず&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;generator1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; nil&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;GeneratorOf&lt;/h1&gt;
&lt;p&gt;generatorを書くとき上のようにクラスを定義するのが面倒なら、&lt;code&gt;GeneratorOf&amp;lt;T&amp;gt;&lt;/code&gt;構造体が便利。以下のような感じで定義されている。&lt;/p&gt;
&lt;pre lang=&quot;swift&quot; class=&quot;highlight highlight-swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GeneratorOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GeneratorType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SequenceType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nextElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;GeneratorOf&lt;/code&gt;構造体は&lt;code&gt;GeneratorType&lt;/code&gt;プロトコルに従っており、初期化時に渡されたクロージャを&lt;code&gt;next()&lt;/code&gt;で実行するようになっている。なので、上のコードは以下のように書き直せる。&lt;/p&gt;
&lt;pre lang=&quot;swift&quot; class=&quot;highlight highlight-swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lineGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;#text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GeneratorOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;componentsSeparatedByString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GeneratorOf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeAtIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;generator2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lineGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;generator2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; いろはにほへと ちりぬるを&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;generator2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; わかよたれそ つねならむ&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;generator2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; ういのおくやま けふこえて&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;generator2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; あさきゆめみし よひもせず&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;generator2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; nil&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;SequenceType&lt;/h1&gt;
&lt;p&gt;sequenceはループによって中身の要素を走査できる構造のことで、以下の&lt;code&gt;SequenceType&lt;/code&gt;プロトコルに従う。&lt;/p&gt;
&lt;pre lang=&quot;swift&quot; class=&quot;highlight highlight-swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SequenceType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GeneratorType&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Generator&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;sequenceはgeneratorを&lt;code&gt;generate()&lt;/code&gt;で生成して、それを使って中身の要素に順にアクセスする。&lt;code&gt;SequenceType&lt;/code&gt;プロトコルに従うオブジェクトは&lt;code&gt;for-in&lt;/code&gt;ループに渡すことができる。&lt;/p&gt;
&lt;pre lang=&quot;swift&quot; class=&quot;highlight highlight-swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LineSequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SequenceType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Generator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LineGenerator&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Generator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LineGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LineSequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;h1&gt;SequenceOf&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;GeneratorOf&lt;/code&gt;と同様に&lt;code&gt;SequenceOf&lt;/code&gt;も存在する。&lt;/p&gt;
&lt;pre lang=&quot;swift&quot; class=&quot;highlight highlight-swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SequenceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SequenceType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GeneratorType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;makeUnderlyingGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GeneratorOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;pre lang=&quot;swift&quot; class=&quot;highlight highlight-swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lineSequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;#text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SequenceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SequenceOf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lineGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lineSequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>GeneratorとSequence</title>
    <updated>2015-07-11T19:07:00+00:00</updated>
    <dc:date>2015-07-11T19:07:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/265/</id>
    <link href="https://blog.naoty.dev/265/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/sweep&quot;&gt;naoty/sweep&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;普段、&lt;a href=&quot;https://getpocket.com&quot;&gt;Pocket&lt;/a&gt;を使って「あとで読む」記事を管理している。ちょっとした時間に見つけた記事をPocketに追加しておいて、通勤時間などにiOSアプリで消化している。ただ、長い記事が増えてくるとだんだん消化しきれなくなってきて、消化しようというモチベーションが失せてくる。そこで、一定期間が経っても消化できていない記事を自動的に削除するツールを書いた。&lt;/p&gt;
&lt;h1&gt;使い方&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;まず、Pocketのdeveloperサイトに行ってアプリケーションを作成する。すると、Consumer keyが得られる。次に、Access tokenが必要なのだけど、これは&lt;a href=&quot;https://github.com/motemen/go-pocket&quot;&gt;motemen/go-pocket&lt;/a&gt;を使ってOAuth認証を行い取得した。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Herokuボタンからデプロイする。ここで、上で取得したconsumer keyとaccess tokenを環境変数としてセットする。さらに、削除対象とする期限を環境変数で指定できる。デフォルトは24時間となっている。僕は72時間にしている。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Heroku schedulerのダッシュボードで&lt;code&gt;sweep&lt;/code&gt;を実行するタイミングを設定する。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://heroku.com/deploy?template=https://github.com/naoty/sweep&quot;&gt;&lt;img src=&quot;https://www.herokucdn.com/deploy/button.png&quot; alt=&quot;Deploy&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;所感&lt;/h1&gt;
&lt;p&gt;先日、Herokuが公式にGoをサポートしたので、さっそくテストを兼ねてこういうものをGoで書いてみた。&lt;a href=&quot;https://github.com/tools/godep&quot;&gt;tools/godep&lt;/a&gt;の使い方を覚えなくてはいけないことを除けば、いつもどおりにHerokuにアプリケーションをデプロイできた。&lt;/p&gt;
&lt;p&gt;個人的にちょっとしたCLIツールをGoで書くことが増えたが、ちょっとしたジョブを定期実行させるときにGoでちょっとしたツールを書いてHeroku schedulerにやらせるという手法は非常にお手軽なので今後も機会がありそうだなと思った。&lt;/p&gt;</summary>
    <title>Pocketのもう読んでない記事を掃除するヤツ書いた</title>
    <updated>2015-07-11T16:19:00+00:00</updated>
    <dc:date>2015-07-11T16:19:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/264/</id>
    <link href="https://blog.naoty.dev/264/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/hot&quot;&gt;naoty/hot&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;インストール&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$ go get github.com/naoty/hot
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;使い方&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$ cd src/github.com/naoty/Timepiece
$ hot
24: README.md
17: Sources/NSDate+Timepiece.swift
15: Tests/NSDate+TimepieceTests.swift
10: Timepiece.xcodeproj/project.pbxproj
9: Timepiece.podspec
7: Sources/Duration.swift
7: Tests/DurationTests.swift
7: Tests/Int+TimepieceTests.swift
6: Sources/Int+Timepiece.swift
4: Sources/NSDateComponents+Timepiece.swift
2: .travis.yml
2: Tests/NSTimeInterval+TimepieceTests.swift
2: Timepiece.xcodeproj/xcshareddata/xcschemes/Timepiece OSX.xcscheme
2: Sources/NSTimeInterval+Timepiece.swift
1: Timepiece.xcodeproj/xcshareddata/xcschemes/Timepiece iOS.xcscheme
1: Timepiece.xcworkspace/contents.xcworkspacedata
1: .gitignore
1: LICENSE
1: Sources/NSCalendar+Timepiece.swift
1: Sources/NSCalendarUnit+Timepiece.swift
1: Sources/String+Timepiece.swift
1: Tests/NSCalendarUnit+TimepieceTests.swift
1: Tests/String+TimepieceTests.swift
1: Timepiece.playground/Contents.swift
1: Timepiece.playground/Sources/SupportCode.swift
1: Timepiece.playground/contents.xcplayground
1: Timepiece.playground/playground.xcworkspace/contents.xcworkspacedata
1: Timepiece.xcodeproj/Timepiece-Info.plist
1: Timepiece.xcodeproj/TimepieceTests-Info.plist
1: Timepiece.xcodeproj/project.xcworkspace/contents.xcworkspacedata
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;表示件数を&lt;code&gt;-n &amp;lt;表示したい件数&amp;gt;&lt;/code&gt;で指定したり、パターンを指定してマッチしたファイルだけ表示することができる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hot -n 5 &quot;**/*.swift&quot;
17: Sources/NSDate+Timepiece.swift
15: Tests/NSDate+TimepieceTests.swift
7: Sources/Duration.swift
7: Tests/DurationTests.swift
7: Tests/Int+TimepieceTests.swift
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;動機&lt;/h1&gt;
&lt;p&gt;仕事で1年以上開発が行われているコードベースを引き継ぐことになった。僕の仕事は既存のコードを理解しつつ、新たに機能を追加していくことだ。そこで、効率的に既存のコードベースの全体像を把握するため、このようなツールを作ることにした。どれが主要なファイルなのかコミットログから把握できる。&lt;/p&gt;
&lt;p&gt;他の使い方としては、例えば各ファイルのコミット数、循環的複雑度、テストカバレッジ等から、プロジェクト全体のバグの出やすさみたいなものを可視化できるかもしれない。&lt;/p&gt;</summary>
    <title>コミット数が多いファイルを表示するコマンドを書いた</title>
    <updated>2015-06-20T19:04:00+00:00</updated>
    <dc:date>2015-06-20T19:04:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/263/</id>
    <link href="https://blog.naoty.dev/263/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/B009RO80XY/naotoknk-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51pYSdnkuNL._SL160_.jpg&quot; alt=&quot;すごいHaskellたのしく学ぼう！&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;すごいHaskellたのしく学ぼう！&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/B009RO80XY/naotoknk-22/&quot;&gt;すごいHaskellたのしく学ぼう！&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: Miran Lipovaca&lt;/li&gt;
&lt;li&gt;出版社/メーカー: オーム社&lt;/li&gt;
&lt;li&gt;発売日: 2012/09/21&lt;/li&gt;
&lt;li&gt;メディア: Kindle版&lt;/li&gt;
&lt;li&gt;購入: 4人 クリック: 9回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/B009RO80XY/naotoknk-22&quot;&gt;この商品を含むブログを見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本書は一度は8章あたりで挫折したが、今回13章あたりまで読みファンクタ―、アプリカティブファンクタ―、モノイド、モナドといった概念がなんなのか理解とまでは言えないけど知ることができた。&lt;/p&gt;
&lt;p&gt;一度は挫折したが今回またリベンジしようと思った理由は、今後モバイルアプリを開発していくにあたって関数型プログラミングの概念を理解して採り入れていくことが必要になってくると思ったからだ。Swiftは&lt;code&gt;let&lt;/code&gt;による不変型の宣言や&lt;code&gt;Optional&lt;/code&gt;型などの文脈付きの型など関数型プログラミング言語としての側面をもっていると思う。また、データバインディング（&lt;a href=&quot;https://github.com/SwiftBond/Bond&quot;&gt;SwiftBond/Bond&lt;/a&gt;など）やJSONのパース（&lt;a href=&quot;https://github.com/thoughtbot/Argo&quot;&gt;thoughtbot/Argo&lt;/a&gt;など）といった場面で関数型プログラミングの概念が登場してきている。Swiftのポテンシャルを最大限に発揮して、堅牢で生産性の高いコードを書くには関数型プログラミングの知識が必要になってきていると最近感じている。&lt;/p&gt;
&lt;p&gt;本書を読んだ結果として、データの構造について新しい視点を得ることができた。&lt;code&gt;Maybe&lt;/code&gt;や&lt;code&gt;Either&lt;/code&gt;といった概念を&quot;文脈&quot;と呼んでいるのが自分の中にはなかった発想だった。例えば、&lt;code&gt;Maybe&lt;/code&gt;と&lt;code&gt;Maybe Int&lt;/code&gt;を区別して考えるのはとても抽象的だけど強力な考え方と思った。&lt;code&gt;Maybe&lt;/code&gt;は「あるかもしれないし、ないかもしれない」という文脈を表し、&lt;code&gt;Maybe Int&lt;/code&gt;は「&lt;code&gt;Int&lt;/code&gt;型かもしれないし、何もないかもしれない」型を表している。これらを分けることで、文脈を保ったまま計算するという発想が出てくるのだと思う。文脈を保ったまま計算する段階として、本書では&lt;code&gt;Functor&lt;/code&gt;や&lt;code&gt;Applicative&lt;/code&gt;、そして&lt;code&gt;Monad&lt;/code&gt;が登場してきた。&lt;/p&gt;
&lt;p&gt;Swiftでは、Haskellにおける型コンストラクタにあたる概念がない。Genericsを使うことで&lt;code&gt;Maybe&lt;/code&gt;のような型を表現することはできるが、ある型が型引数をとるのかとらないのか、とるとしたらいくつとるのかを知る術はない（はず）。Haskellではそれらは種類という概念で説明されている。&lt;code&gt;Maybe&lt;/code&gt;の種類は&lt;code&gt;Maybe :: * -&amp;gt; *&lt;/code&gt;だし、&lt;code&gt;Either&lt;/code&gt;の種類は&lt;code&gt;Either: * -&amp;gt; * -&amp;gt; *&lt;/code&gt;となっているので、それぞれ型引数を1つと2つとることがわかる。Haskellの&lt;code&gt;Functor&lt;/code&gt;は種類が&lt;code&gt;* -&amp;gt; *&lt;/code&gt;の型コンストラクタしかインスタンスにできないのだけど、こういう概念をSwiftで表現できない。&lt;/p&gt;
&lt;p&gt;というわけで、Swiftで関数型プログラミングをするにはHaskellほどうまくはできないことがなんとなくわかった。Genericsなどで擬似的に表現するしかない。&lt;code&gt;Functor&lt;/code&gt;の&lt;code&gt;fmap&lt;/code&gt;を以下のように実装してみた。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;extension Optional {
    func fmap&amp;lt;U&amp;gt;(f: T -&amp;gt; U) -&amp;gt; U? {
        switch self {
        case .Some(let value):
            return f(value)
        case .None:
            return .None
        }
    }
}

let maybeOne: Int? = 1
let maybeTen = maybeOne.fmap({ x in x * 10 })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Swiftの&lt;code&gt;Optional&amp;lt;T&amp;gt;&lt;/code&gt;型はつまり&lt;code&gt;T?&lt;/code&gt;型のことなのだけど、&lt;code&gt;Optional&lt;/code&gt;型を拡張して&lt;code&gt;fmap&lt;/code&gt;を追加している。&lt;code&gt;return f(value)&lt;/code&gt;のところは暗黙的に&lt;code&gt;U?&lt;/code&gt;型にラップしている。このように実装することで、&lt;code&gt;Optional&lt;/code&gt;型のもつ「あるかもしれないし、ないかもしれない」という文脈を保ちつつ、中身の&lt;code&gt;1&lt;/code&gt;という&lt;code&gt;Int&lt;/code&gt;を計算している。&lt;/p&gt;
&lt;p&gt;ここでは&lt;code&gt;Functor&lt;/code&gt;だけを簡単に実装してみたが、これに加えて&lt;code&gt;Applicative&lt;/code&gt;と&lt;code&gt;Monad&lt;/code&gt;を実装するとより抽象的な計算が可能になってくる。JSONのパースなどを実装する際には&lt;code&gt;Applicative&lt;/code&gt;の操作が必要になってきそうな感じがする。自分はまだ関数型プログラミングの実装を実際にしたわけではないので、理解したとは到底いえない。パーサーの実装をしてみたり、上で紹介したライブラリのコードを読んでみることで関数型プログラミングを実践的に理解していきたい。&lt;/p&gt;</summary>
    <title>「すごいHaskell たのしく学ぼう！」を読んだ</title>
    <updated>2015-06-14T18:40:00+00:00</updated>
    <dc:date>2015-06-14T18:40:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/262/</id>
    <link href="https://blog.naoty.dev/262/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;http://naoty.hatenablog.com/entry/2015/05/23/171705&quot;&gt;前回&lt;/a&gt;のエントリで紹介した&lt;a href=&quot;https://github.com/naoty/todo&quot;&gt;naoty/todo&lt;/a&gt;と今回作ったnaoty/nowisを組み合わせることで、定期的なtodoをコマンドラインで管理できるようにした。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/nowis&quot;&gt;naoty/nowis&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;使い方&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$ nowis saturday &amp;amp;&amp;amp; echo 'Today is Saturday!'
Today is Saturday!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;nowis&lt;/code&gt;コマンドは、現在時刻が引数で与えた曜日かどうかを判定して真なら終了コード&lt;code&gt;0&lt;/code&gt;を返し偽なら&lt;code&gt;1&lt;/code&gt;を返す。上のように&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;で任意のコマンドと組み合わせることで、特定の曜日だけ実行できるようになる。&lt;/p&gt;
&lt;h1&gt;定期的なtodoの管理&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;nowis&lt;/code&gt;を組み合わせて定期的なtodoを管理するにはいくつか方法が考えられるが、zshの設定ファイルを使う。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# .zlogin

nowis sunday &amp;amp;&amp;amp; todo add --once 部屋を掃除する
(nowis tuesday || nowis thursday) &amp;amp;&amp;amp; todo add --once 燃えるゴミを出す
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上のように設定することでzshにログインするたびに上のスクリプトが実行される。&lt;code&gt;todo add --once&lt;/code&gt;で既に存在する場合は追加しないようにできるので、これで特定の曜日になると自動的に&lt;code&gt;todo add&lt;/code&gt;されるようになる。&lt;/p&gt;
&lt;p&gt;15分くらいで作ったので現状は曜日の判定しかできないけど、応用範囲が広そうなのでもうちょっと細かく判定できるようにするかも。&lt;/p&gt;</summary>
    <title>naoty/todoとnaoty/nowisで定期的なtodoを管理できるようにした</title>
    <updated>2015-05-30T19:32:00+00:00</updated>
    <dc:date>2015-05-30T19:32:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/261/</id>
    <link href="https://blog.naoty.dev/261/"/>
    <summary>&lt;p&gt;最近、プライベートでの開発したいことや勉強したいことが増えてきたので、それらを管理するツールを書いた。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/todo&quot;&gt;naoty/todo&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;使い方&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$ todo add Go言語を勉強する
$ todo add todo管理ツールを書く
$ todo add ブログ記事を書く
$ todo list
[] 001: Go言語を勉強する
[] 002: todo管理ツールを書く
[] 003: ブログ記事を書く
$ todo done 1
$ todo done 2
[x] 001: Go言語を勉強する
[x] 002: todo管理ツールを書く
[] 003: ブログ記事を書く
$ todo clear
$ todo list
[] 001: ブログ記事を書く
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;その他、todoの削除や移動などができる（詳細はGitHubのページを参照）。個人的に便利だと思っている機能がtodoをmarkdownのtask list形式で出力する機能だ。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ todo list -m
- [x] Go言語を勉強する
- [x] todo管理ツールを書く
- [] ブログ記事を書く
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これを使ってQiita:Teamの日報に今日やったこと、やれなかったことを簡単にコピペできる。一日の作業フローはこうだ。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;todo list&lt;/code&gt;で残タスクを確認する。&lt;/li&gt;
&lt;li&gt;適宜&lt;code&gt;todo add&lt;/code&gt;でタスクを追加したり、&lt;code&gt;todo move&lt;/code&gt;で順番を入れ替えて優先度を調整する。&lt;/li&gt;
&lt;li&gt;完了したら&lt;code&gt;todo done&lt;/code&gt;でタスクを完了させる。&lt;/li&gt;
&lt;li&gt;一日の終わりに&lt;code&gt;todo list -m&lt;/code&gt;で作業内容を出力してQiita:Teamにコピペして、感想などを付け加えて日報として公開する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;todo clear&lt;/code&gt;で完了したタスクを消去する。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;tips&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;todoはLTSV形式のファイルとして保存され、ファイルのパスは&lt;code&gt;TODO_PATH&lt;/code&gt;という環境変数で指定できる（デフォルトは&lt;code&gt;HOME&lt;/code&gt;）。なので、環境変数でDropbox内のパスを指定すれば簡単にtodoを同期できる。&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://github.com/zimbatm/direnv&quot;&gt;zimbatm/direnv&lt;/a&gt;を使うと、プロジェクトルートに&lt;code&gt;cd&lt;/code&gt;したときに&lt;code&gt;TODO_PATH&lt;/code&gt;を書き換えられるのでプロジェクトのスコープのtodoを別に管理できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;実装&lt;/h1&gt;
&lt;p&gt;最近はGoが気に入っているので、コマンドラインツールを作るときはすべてGoで書いている。CLIを作る際のフレームワークはいくつかあるようだが、一番Starが多そうだった&lt;a href=&quot;https://github.com/codegangsta/cli&quot;&gt;codegangsta/cli&lt;/a&gt;を使っている。標準の出力とmarkdown形式の出力の切り替えを実装する際に&lt;code&gt;interface&lt;/code&gt;を使ってみた。ファイルの入出力には&lt;code&gt;ioutil&lt;/code&gt;パッケージが手っ取り早かった。ファイルの扱いを通じて&lt;code&gt;io.Writer&lt;/code&gt;インターフェイスについても理解が深まった。&lt;/p&gt;
&lt;h1&gt;done&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$ todo done 1
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>自分専用のtodo管理ツールを書いた</title>
    <updated>2015-05-23T17:17:00+00:00</updated>
    <dc:date>2015-05-23T17:17:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/260/</id>
    <link href="https://blog.naoty.dev/260/"/>
    <summary>&lt;h1&gt;potatotips&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://connpass.com/event/14143/&quot;&gt;【第17回】potatotips(iOS/Android開発Tips共有会) (2015/05/13 19:00〜)&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;資料&lt;/h1&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1&gt;最近のTimepiece&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;GW前あたりから急激にバズってきた。一時GitHubのトレンドで1位になった。それまでは☆70くらいだったけど、もうそろそろ☆500になりそうな勢いだ。&lt;/li&gt;
&lt;li&gt;それに伴っていくつかの要望をPull requestでいただいた。それらはほぼすべてmergeした。機能追加やバグ修正まで自分では見落としていた部分を指摘していただいて、多くの方に使われていそうだという実感がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;イベントの感想&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;最近はiOSではなくAndroidアプリ開発をしているので、iOS/Android両方楽しめて非常に良かった。&lt;/li&gt;
&lt;li&gt;Timepieceを検討したけど採用を見送った方の意見を聞けたのが非常に良かった。そういう方の意見を聞ける機会は多くないからだ。いただいた要望について今実装方針を考えていて、ちゃんと形にしていきたい。&lt;/li&gt;
&lt;li&gt;最近気になっているResultについての議論はとても勉強になった。&lt;a href=&quot;https://github.com/naoty/SwiftCSV&quot;&gt;naoty/SwiftCSV&lt;/a&gt;でエラー情報を扱う際にResultが使えそうだと思っていた。ただ、議論を聞いてオレオレResultが乱立しそうな流れがありそうだというのを知った。そうなると、ライブラリ提供者が実装するよりも利用者側でResultを定義する方が利便性を損ねないのでは、という意見に変わった。&lt;/li&gt;
&lt;li&gt;ドキュメントだけではよく理解できなかったDagger 2については、あまりよくわかってなかった&lt;code&gt;@Provide&lt;/code&gt;について理解が深まった。Androidのテストについて意見交換をさせていただいて、自分の意見は間違ってなさそうだという確信を得られたのもよかった。&lt;/li&gt;
&lt;li&gt;その他、Androidの&lt;code&gt;@Nullable&lt;/code&gt;, &lt;code&gt;@NonNull&lt;/code&gt;はすぐに使おうと思ったし、Lastlaneやdeliverといったワークフローを自動化するツールも実践的な内容で勉強になった。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>#potatotips でTimepieceについて発表した</title>
    <updated>2015-05-14T00:20:00+00:00</updated>
    <dc:date>2015-05-14T00:20:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/259/</id>
    <link href="https://blog.naoty.dev/259/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://qiita-image-store.s3.amazonaws.com/0/1044/2f5da814-dcc9-3fde-7c10-a4cb379174e5.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/1044/2f5da814-dcc9-3fde-7c10-a4cb379174e5.png&quot; alt=&quot;スクリーンショット 2015-04-17 11.55.02.png&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Preferences &amp;gt; Vim Emulation&lt;/code&gt;から上のキャプチャのような画面にVimとIDEで衝突しているキーマップを表示してくれる。右の&lt;code&gt;Handler&lt;/code&gt;の列でVimとIDEどちらに割り当てるか設定できる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Ctrl-r&lt;/code&gt;, &lt;code&gt;Ctrl-d&lt;/code&gt;でアプリケーションを実行したかったのにVimのキーマップが実行されるのがちょっとストレスだったので修正した。&lt;/p&gt;</summary>
    <title>IdeaVimでキーマップが衝突した場合の対応</title>
    <updated>2015-04-17T11:59:00+00:00</updated>
    <dc:date>2015-04-17T11:59:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/258/</id>
    <link href="https://blog.naoty.dev/258/"/>
    <summary>&lt;p&gt;Dockerの理解を深めるため、またGo言語の経験を積むためにoasisというツールを書いた。「とりあえず動いた」レベルの完成度であり、実用で使うにはもっと時間をかけて改善していく必要がある。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/oasis&quot;&gt;naoty/oasis&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;これはコミット毎の実行環境をdockerのコンテナとして提供するリバースプロキシだ。例えば、以下のようにoasisを起動する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% oasis start \
    --proxy master.oasis.local:8080 \
    --container-host 192.168.99.100 \
    --repository github.com/naoty/sample_rails_app
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このとき&lt;code&gt;http://master.oasis.local:8080&lt;/code&gt;にアクセスすると、oasisは以下のようなことを行う。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;--repository&lt;/code&gt;で指定されたリポジトリを&lt;code&gt;git clone&lt;/code&gt;する。&lt;/li&gt;
&lt;li&gt;サブドメインで指定されたリビジョン、ここでは&lt;code&gt;master&lt;/code&gt;に&lt;code&gt;git checkout&lt;/code&gt;する。&lt;/li&gt;
&lt;li&gt;リポジトリに含まれるDockerfileを使って&lt;code&gt;docker build&lt;/code&gt;する。&lt;/li&gt;
&lt;li&gt;ビルドしたイメージを&lt;code&gt;docker run -P -d&lt;/code&gt;して、コンテナを起動する。&lt;/li&gt;
&lt;li&gt;コンテナのホスト側ポート（例: &lt;code&gt;49154&lt;/code&gt;）を調べて、oasisへのアクセスを&lt;code&gt;--container-host&lt;/code&gt;で指定されたホスト上のコンテナ（例: &lt;code&gt;192.168.99.100:49154&lt;/code&gt;）にリダイレクトする。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20150409/20150409225939.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20150409/20150409225939.png&quot; alt=&quot;f:id:naoty_k:20150409225939p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20150409225939p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;実際にOSXで試す場合は、&lt;code&gt;--proxy 127.0.0.1:8080&lt;/code&gt;のようなオプションで起動して、サブドメインの解決を&lt;a href=&quot;http://pow.cx/manual.html&quot;&gt;Pow&lt;/a&gt;に任せるといいと思う。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% cd ~/.pow
% echo 8080 &amp;gt; oasis
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上のようにすると、&lt;code&gt;http://*.oasis.dev&lt;/code&gt;のように任意のサブドメインにアクセスできるようになり、&lt;code&gt;8080&lt;/code&gt;ポートのoasisにポートフォワーディングされる。&lt;/p&gt;
&lt;h1&gt;所感&lt;/h1&gt;
&lt;p&gt;もともとは同僚の方が開発に携わっている&lt;a href=&quot;https://github.com/mookjp/pool&quot;&gt;mookjp/pool&lt;/a&gt;を見て、もうちょっとシンプルにセットアップできるようにしたいと思ったのがきっかけだった。実行ファイルをダウンロードして即実行できるようなものが理想だったので、Go言語を勉強しはじめこんなものを作ってみた。名前の「oasis」は最近ハマっているドミニオン・異郷に出てくるアクションカードであること、コンセプトのオリジナル実装であるpoolに雰囲気が似ていることから採った。&lt;/p&gt;
&lt;p&gt;Go言語はとてもシンプルですんなり理解できたし、標準パッケージでリバースプロキシを簡単に実装できたため、短時間でここまで作ることができた。ちょっとしたツールを作るとき、これまではRubyでrubygemを書くようなことをしていたが、Go言語であればrubygemを書くほどのハードルの高さもなく、シンプルで生産性の高いコードを書いてそのまま配布することができていい感じだなと思った。&lt;/p&gt;
&lt;p&gt;また、DockerについてもDocker Remote APIを触ってみたり、&lt;code&gt;docker run&lt;/code&gt;の&lt;code&gt;-p&lt;/code&gt;と&lt;code&gt;-P&lt;/code&gt;の違いを理解できたり、理解が深まったと思う。あんまり関係ないけど、サンプルアプリで使ったDockerfileはDocker Hubで配布された公式のrails用イメージを使ってるだけで、何も考えなくてよくて便利だった。&lt;/p&gt;</summary>
    <title>コミット毎に実行環境をビルドするoasisを書いた</title>
    <updated>2015-04-09T23:24:00+00:00</updated>
    <dc:date>2015-04-09T23:24:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/257/</id>
    <link href="https://blog.naoty.dev/257/"/>
    <summary>&lt;p&gt;Goの勉強のため、普段からお世話になっている&lt;a href=&quot;https://github.com/motemen/ghq&quot;&gt;motemen/ghq&lt;/a&gt;を読むことにした。なお、現在の僕のGoの知識はgotourを完走した程度だ。最初から現在のコミットを追いかけるのは骨が折れそうだったので、最初のコミット&lt;a href=&quot;https://github.com/motemen/ghq/commit/bad21c7df65ccefd74530d6fcc5f0707b63e0266&quot;&gt;&lt;code&gt;bad21c7df65ccefd74530d6fcc5f0707b63e0266&lt;/code&gt;&lt;/a&gt;から読むことにした。&lt;/p&gt;
&lt;p&gt;Goのプログラムは&lt;code&gt;main&lt;/code&gt;パッケージの&lt;code&gt;main()&lt;/code&gt;から実行されるため、&lt;code&gt;main.go&lt;/code&gt;の&lt;code&gt;main()&lt;/code&gt;から読む。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import {
    // ...

    &quot;github.com/codegangsta/cli&quot;
}

func main() {
    app := cli.NewApp()
    app.Name = &quot;ghq&quot;
    app.Usage = &quot;Manage GitHub repository clones&quot;
    app.Version = &quot;0.1.0&quot;
    app.Author = &quot;motemen&quot;
    app.Email = &quot;motemen@gmail.com&quot;
    app.Commands = []cli.Command{
        {
            Name: &quot;get&quot;,
            Usage: &quot;Clone/sync with a remote repository&quot;,
            Action: CommandGet,
        },
        {
            Name: &quot;list&quot;,
            Usage: &quot;List local repositories&quot;,
            Action: CommandList,
            Flags: []cli.Flag{
                cli.BoolFlag{&quot;exact, e&quot;, &quot;Exact match&quot;}
            }
        }
    }

    app.Run(os.Args)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;cli&lt;/code&gt;パッケージは&lt;a href=&quot;https://github.com/codegangsta/cli&quot;&gt;codegangsta/cli&lt;/a&gt;というコマンドを簡単に作成するライブラリのもののようだ。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cli.NewApp()&lt;/code&gt;は&lt;code&gt;*cli.App&lt;/code&gt;（構造体&lt;code&gt;App&lt;/code&gt;のポインタ）を返している。この構造体はCLIアプリケーションを表している。これに続くコードはそのCLIアプリケーションの情報を設定している。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app.Commands&lt;/code&gt;というフィールドには&lt;code&gt;cli.Command&lt;/code&gt;型のスライスが入る。&lt;code&gt;cli.Command&lt;/code&gt;型はCLIアプリケーションのサブコマンドを定義するために使われる。サブコマンドの名前、ドキュメント、フラグなどを設定し実際に実行される関数を指定することができる。実行される関数は&lt;code&gt;Action&lt;/code&gt;というフィールドに指定する。このフィールドは&lt;code&gt;func(context *Context)&lt;/code&gt;という型になっている。ここでは、&lt;code&gt;get&lt;/code&gt;と&lt;code&gt;list&lt;/code&gt;というサブコマンドが定義されており、それぞれ&lt;code&gt;CommandGet&lt;/code&gt;, &lt;code&gt;CommandList&lt;/code&gt;という関数が実行されるように設定されている。&lt;/li&gt;
&lt;li&gt;最後に&lt;code&gt;app.Run()&lt;/code&gt;でコマンドライン引数を受け取ってCLIアプリケーションを実行している。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;とりあえず&lt;code&gt;get&lt;/code&gt;サブコマンドを理解したいので、&lt;code&gt;CommandGet&lt;/code&gt;を見ていく。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func CommandGet(c *cli.Context) {
    argUrl := c.Args().Get(0)

    if argUrl == &quot;&quot; {
        cli.ShowCommandHelp(c, &quot;get&quot;)
        os.Exit(1)
    }

    // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;上述の通り、&lt;code&gt;Command.Action&lt;/code&gt;は&lt;code&gt;func(context *Context)&lt;/code&gt;という型なので、&lt;code&gt;CommandGet&lt;/code&gt;関数もそれに従っている。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cli.Context.Args()&lt;/code&gt;は&lt;code&gt;cli.Args&lt;/code&gt;型を返すが、これは&lt;code&gt;type Args []string&lt;/code&gt;と定義されており、実体は&lt;code&gt;string&lt;/code&gt;のスライスだ。&lt;code&gt;Args.Get(n int)&lt;/code&gt;は&lt;code&gt;n&lt;/code&gt;がスライスのサイズより大きかった場合に空文字を返すようになっている。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ShowCommandHelp&lt;/code&gt;は&lt;code&gt;Context&lt;/code&gt;ポインタとサブコマンドを表す文字列を渡すことで、そのサブコマンドのヘルプメッセージを出力する。&lt;/li&gt;
&lt;li&gt;第1引数をURLとして取得し、それが空であればヘルプメッセージを表示するようになっている。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;func CommandGet(c *cli.Context) {
    // ...

    u, err := ParseGithubURL(argUrl)
    if err != nil {
        log.Fatalf(&quot;While parsing URL: %s&quot;, err)
    }

    path := pathForRepository(u)
    if err != nil {
        log.Fatalf(&quot;Could not obtain path for repository %s: %s&quot;, u, err)
    }

    // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ParseGithubURL()&lt;/code&gt;と&lt;code&gt;pathForRepository()&lt;/code&gt;いう関数についてはあとで見ていくことにする。&lt;/li&gt;
&lt;li&gt;エラーがあった場合、&lt;code&gt;log.Fatalf&lt;/code&gt;関数でエラーメッセージを表示するものと思われる。&lt;code&gt;log&lt;/code&gt;パッケージはGoの標準パッケージで、&lt;code&gt;log.Fatalf&lt;/code&gt;関数はエラーメッセージを表示するだけでなく&lt;code&gt;exit(1)&lt;/code&gt;によってプログラムを異常終了させる。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;func CommandGet(c *cli.Context) {
    // ...

    newPath := false

    _, err := os.Stat(path)
    if err != nil {
        if os.IsNotExist(err) {
            newPath = true
            err = nil
        }
        mustBeOkay(err)
    }

    // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;os.Stat&lt;/code&gt;関数はファイルの存在をチェックする際によく用いられるようだ。この関数は指定したパスにあるファイルの情報を表す&lt;code&gt;FileInfo&lt;/code&gt;構造体と、エラー時にはエラーを返す。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;os.IsNotExist()&lt;/code&gt;関数も存在チェックを行うように見える。ファイルの存在をチェックするGoの実装は諸説あるようだ。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mustBeOkay()&lt;/code&gt;関数は定義を見てみると、引数の渡したエラーが存在すればエラーメッセージを表示して異常終了させるようだ。アサーションのような役割を果たしているようだ。&lt;/li&gt;
&lt;li&gt;ファイルパスが存在しない場合は&lt;code&gt;newPath&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;になる。また、&lt;code&gt;err&lt;/code&gt;が&lt;code&gt;nil&lt;/code&gt;になるため、&lt;code&gt;mustBeOkay()&lt;/code&gt;で異常終了は起きなくなる。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;func CommandGet(c *cli.Context) {
    // ...

    if newPath {
        dir, _ := filepath.Split(path)
        mustBeOkay(os.MkdirAll(dir, 0755))
        Git(&quot;clone&quot;, u.String(), path)
    } else {
        mustBeOkay(os.Chdir(path))
        Git(&quot;remote&quot;, &quot;update&quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;filepath.Split()&lt;/code&gt;は与えられたパスをディレクトリとファイル名に分け、ディレクトリ、ファイル名の順に返す。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Git()&lt;/code&gt;関数はあとで詳しく見る。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;newPath&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;になるのは上述の通り&lt;code&gt;path&lt;/code&gt;が存在しない場合で、このときは&lt;code&gt;git clone&lt;/code&gt;が行われ、そうでなければ&lt;code&gt;git remote update&lt;/code&gt;が行われるようだ。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ghq get&lt;/code&gt;コマンドの全体像についておおまかに理解できたので、飛ばした関数について1つずつ読んでいく。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type GitHubURL struct {
    *url.URL
    User string
    Repo string
}

func ParseGitHubURL(urlString string) (*GitHubURL, error) {
    u, err := url.Parse(urlString)
    if err != nil {
        return nil, err
    }

    if !u.IsAbs() {
        u.Scheme = &quot;https&quot;
        u.Host = &quot;github.com&quot;
        if u.Path[0] != '/' {
            u.Path = '/' + u.Path
        }
    }

    if u.Host != &quot;github.com&quot; {
        return nil, fmt.Errorf(&quot;URL is not of github.com: %s&quot;, u)
    }

    components := strings.Split(u.Path, &quot;/&quot;)
    if len(components) &amp;lt; 3 {
        return nil, fmt.Errorf(&quot;URL does not contain user and repo: %s %v&quot;, u, components)
    }
    user, repo := components[1], components[2]

    return &amp;amp;GitHubURL{u, user, repo}, nil
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;url.Parse()&lt;/code&gt;は与えられた文字列をパースして&lt;code&gt;URL&lt;/code&gt;構造体のポインタと失敗した場合は&lt;code&gt;error&lt;/code&gt;を返す。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;URL&lt;/code&gt;構造体は&lt;code&gt;Scheme&lt;/code&gt;や&lt;code&gt;Host&lt;/code&gt;といったフィールドを持っているため、相対パスであればこれらを設定している。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;fmt.Errorf()&lt;/code&gt;はフォーマット化された文字列からエラー値を返す。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;strings.Split()&lt;/code&gt;は文字列を第2引数で渡されたセパレータで分解し&lt;code&gt;string&lt;/code&gt;のスライスとして返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;続いて&lt;code&gt;pathForRepository()&lt;/code&gt;関数を読んでいく。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func reposRoot() string {
    reposRoot, err := GitConfig(&quot;ghq.root&quot;)
    mustBeOkay(err)

    if reposRoot == &quot;&quot; {
        usr, err := user.Current()
        mustBeOkay(err)

        reposRoot = path.Join(usr.HomeDir, &quot;.ghq&quot;, &quot;repos&quot;)
    }

    return reposRoot
}

func pathForRepository(u *GitHubURL) string {
    return path.Join(reposRoot(), &quot;@&quot;+u.User, u.Repo)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;path.Join&lt;/code&gt;はパスの要素を&lt;code&gt;/&lt;/code&gt;で結合してパスにする。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GitConfig()&lt;/code&gt;は後ほど読んでいく。おそらくリポジトリのルートパスを返すものと思われる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;reposRoot&lt;/code&gt;が空であれば&lt;code&gt;$HOME/.ghq/repos&lt;/code&gt;を返すようになっている。&lt;code&gt;user.Current()&lt;/code&gt;はカレントユーザーを表す&lt;code&gt;User&lt;/code&gt;構造体のポインタを返す。&lt;code&gt;User&lt;/code&gt;構造体はユーザー名やホームディレクトリなどの情報を持っている。&lt;code&gt;usr.HomeDir&lt;/code&gt;でホームディレクトリを取得している。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;続いて&lt;code&gt;Git()&lt;/code&gt;関数を読んでいく。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func Git(command ...string) {
    log.Printf(&quot;Running 'git %s'\n&quot;, strings.Join(command, &quot; &quot;))
    cmd := exec.Command(&quot;git&quot;, command...)
    cmd.Stdout = os.Stdout
    cmd.Stderr = os.Stderr

    err := cmd.Run()
    if err != nil {
        log.Fatalf(&quot;git %s: %s&quot;, strings.Join(command, &quot; &quot;), err)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;...string&lt;/code&gt;のように引数の型名の前に&lt;code&gt;...&lt;/code&gt;をつけると可変長引数をとることができる。この引数の型は型名で指定した型のスライスとなる。つまりここでは&lt;code&gt;string&lt;/code&gt;のスライスとなる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;fmt.Printf()&lt;/code&gt;関数は標準出力に出力するものだが、&lt;code&gt;log.Printf&lt;/code&gt;はロガーで指定された出力先に出力する点が異なる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;exec.Command()&lt;/code&gt;関数は、第1引数で指定された名前のコマンドを渡された可変長引数で実行するコマンドを表す&lt;code&gt;Cmd&lt;/code&gt;構造体のポインタを返す。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;...&lt;/code&gt;で渡された可変長引数は上述の通りスライスなのだけど、スライスを展開して可変長引数として関数に渡す場合は&lt;code&gt;command...&lt;/code&gt;のようにスライスのあとに&lt;code&gt;...&lt;/code&gt;とつける。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cmd.Run&lt;/code&gt;で指定されたコマンドを実行する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;続いて&lt;code&gt;GitConfig()&lt;/code&gt;関数を読んでいく。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func GitConfig(key string) (string, error) {
    defaultValue := &quot;&quot;

    cmd := exec.Command(&quot;git&quot;, &quot;config&quot;, &quot;--path&quot;, &quot;--null&quot;, &quot;--get&quot;, key)
    cmd.Stderr = os.Stderr

    buf, err := cmd.Output()

    if exitError, ok := err.(*exec.ExitError); ok {
        if waitStatus, ok := exitError.Sys().(syscall.WaitStatus); ok {
            if waitStatus.ExitStatus() == 1 {
                return defaultValue, nil
            } else {
                return &quot;&quot;, err
            }
        } else {
            return &quot;&quot;, err
        }
    }

    return strings.TrimRight(string(buf), &quot;\000&quot;), nil
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;cmd.Output()&lt;/code&gt;関数はコマンドを実行して標準出力を返す。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;err.(*exec.ExitError)&lt;/code&gt;というのは型アサーションという文法だそうだ。&lt;code&gt;err&lt;/code&gt;は&lt;code&gt;error&lt;/code&gt;インターフェイス型で、これが&lt;code&gt;*exec.ExitError&lt;/code&gt;型の値であると断定する。変換された値が第1返り値、変換に成功したかどうかが第2返り値になる。&lt;/li&gt;
&lt;li&gt;ここらへんでやっていることは終了ステータスを取得しようとしている。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;strings.TrimRight()&lt;/code&gt;関数は第2引数を削除した&lt;code&gt;string&lt;/code&gt;スライスを返す。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>ghqを読んだ</title>
    <updated>2015-03-29T01:58:00+00:00</updated>
    <dc:date>2015-03-29T01:58:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/256/</id>
    <link href="https://blog.naoty.dev/256/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://github.com/rails/rails/pull/19323&quot;&gt;Add &lt;code&gt;rake initializer&lt;/code&gt; by naoty · Pull Request #19323 · rails/rails&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;軽い気持ちでpull requestを送ってみたら数十分後になんとmergeされてしまった。間違ってmasterブランチに送ってしまったため、おそらくrails 5で公開されることになる。&lt;/p&gt;
&lt;p&gt;追加したのは&lt;code&gt;rake initializer&lt;/code&gt;という簡単なrakeタスクで、railsの起動時に実行されるinitializerを実行順に出力する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% rake initializer
set_load_path
set_load_path
set_load_path
set_load_path
set_autoload_paths
set_autoload_paths
set_autoload_paths
set_autoload_paths
add_routing_paths
add_routing_paths
add_routing_paths
add_routing_paths
add_locales
add_locales
add_locales
add_locales
add_view_paths
add_view_paths
add_view_paths
add_view_paths
load_environment_config
load_environment_config
load_environment_config
load_environment_config
load_environment_hook
load_active_support
set_eager_load
initialize_logger
initialize_cache
initialize_dependency_mechanism
bootstrap_hook
active_support.deprecation_behavior
prepend_helpers_path
prepend_helpers_path
prepend_helpers_path
prepend_helpers_path
load_config_initializers
load_config_initializers
load_config_initializers
load_config_initializers
active_support.halt_callback_chains_on_return_false
active_support.initialize_time_zone
active_support.initialize_beginning_of_week
active_support.set_configs
action_dispatch.configure
active_model.secure_password
action_view.embed_authenticity_token_in_remote_forms
action_view.logger
action_view.set_configs
action_view.caching
action_view.collection_caching
action_view.setup_action_pack
action_controller.assets_config
action_controller.set_helpers_path
action_controller.parameters_config
action_controller.set_configs
action_controller.compile_config_methods
active_record.initialize_timezone
active_record.logger
active_record.migration_error
active_record.check_schema_cache_dump
active_record.set_configs
brancher.rename_database
active_record.initialize_database
active_record.log_runtime
active_record.set_reloader_hooks
active_record.add_watchable_files
global_id
active_job.logger
active_job.set_configs
action_mailer.logger
action_mailer.set_configs
action_mailer.compile_config_methods
setup_sass
setup_compression
jbuilder
web_console.initialize
web_console.insert_middleware
web_console.templates_path
web_console.whitelisted_ips
web_console.whiny_requests
web_console.acceptable_content_types
engines_blank_point
engines_blank_point
engines_blank_point
engines_blank_point
append_assets_path
append_assets_path
append_assets_path
turbolinks
append_assets_path
add_generator_templates
ensure_autoload_once_paths_as_subset
add_builtin_route
build_middleware_stack
define_main_app_helper
add_to_prepare_blocks
run_prepare_callbacks
eager_load!
finisher_hook
set_routes_reloader_hook
set_clear_dependencies_hook
disable_dependency_loading
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;もともとは、&lt;a href=&quot;https://github.com/naoty/brancher&quot;&gt;naoty/brancher&lt;/a&gt;というrubygemを作るときに、railsの初期化プロセスにコードを差し込みたくてinitializerが実行される順番を確認するデバッグ用のコードを書いていたのがきっかけだった。似たようなrakeタスクに&lt;code&gt;rake middleware&lt;/code&gt;というものがあり、これがあるなら&lt;code&gt;rake initializer&lt;/code&gt;もあっていいだろうという軽い気持ちでpull requestを送ってみた。&lt;/p&gt;
&lt;p&gt;意外とすんなりmergeしてもらったので、railsへのコントリビュートに対して心理的なハードルがかなり低くなった。上の出力を見てもらえればわかるとおり同じようなinitializerが実行されており、起動が遅くなったり、initializerで定数を定義したときに大量のwarningが出たりする。前々から定数のwarningが大量に出る問題は不思議に思っていたが、これが原因なのかもしれない。またコントリビュートするとしたら、ここらへんを解決するところになりそう。&lt;/p&gt;</summary>
    <title>Railsにコントリビュートした</title>
    <updated>2015-03-14T16:10:00+00:00</updated>
    <dc:date>2015-03-14T16:10:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/255/</id>
    <link href="https://blog.naoty.dev/255/"/>
    <summary>&lt;p&gt;リモートワークのときでも勤務時間を自動的に記録するため、botに発言時間を監視させ、だいたいの勤務時間を記録させるようにした。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20150313/20150313220454.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20150313/20150313220454.png&quot; alt=&quot;f:id:naoty_k:20150313220454p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20150313220454p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;いま使っているbotは&lt;a href=&quot;https://github.com/r7kamura/ruboty&quot;&gt;r7kamura/ruboty&lt;/a&gt;製で、これに機能を追加するプラグインを書いた。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/ruboty-timecard&quot;&gt;naoty/ruboty-timecard&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;このプラグインは発言者ごとに発言時間を記録する。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/ruboty-google_spreadsheet&quot;&gt;naoty/ruboty-google_spreadsheet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;このプラグインは勤務時間のストレージを提供する。既存のストレージには&lt;a href=&quot;https://github.com/r7kamura/ruboty-redis&quot;&gt;r7kamura/ruboty-redis&lt;/a&gt;がある。これを利用する場合、保存された勤務時間を取得するコマンドを用意する必要がある。それを非エンジニアに理解してもらうのは厳しいと思ったので、直感的に理解できるGoogle Spreadsheetをストレージとして利用できるようにするプラグインを作った。&lt;/p&gt;
&lt;p&gt;ソースコードを読むとわかるけど、この2つのプラグインは密結合しているため、設計上はいい出来とは言えない。ruboty-timecard内でruboty-google_spreadsheetを使うことを想定したアクセスの仕方をしている。rubotyのストレージをうまく抽象化するインターフェイスがあると解決しそうだが、なかなか難しい問題だと思う。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/ruboty-timecard-template&quot;&gt;naoty/ruboty-timecard-template&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;これら2つのプラグインは共に使われることを想定しているため、勤務時間を記録する用のテンプレートを作った。Herokuボタンから簡単にデプロイできる。&lt;/p&gt;</summary>
    <title>Rubotyで勤務時間を管理する</title>
    <updated>2015-03-13T22:10:00+00:00</updated>
    <dc:date>2015-03-13T22:10:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/254/</id>
    <link href="https://blog.naoty.dev/254/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/Timepiece&quot;&gt;naoty/Timepiece&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Swiftの日付操作ライブラリであるTimepieceに機能を追加し0.2.0にアップデートした。また、1ヶ月くらい前からしれっとCocoaPods（現在はまだrc版）をサポートしたのでCocoaPodsからインストールできるようになってる。&lt;/p&gt;
&lt;h1&gt;NSDate &amp;lt;-&amp;gt; Stringの変換&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;let timestamp = 3.years.ago.stringFromFormat(&quot;yyyy-MM-dd&quot;)
XCTAssertEqual(timestamp, &quot;2012-03-01&quot;, &quot;&quot;)

if let birthday = &quot;1987-06-02&quot;.dateFromFormat(&quot;yyyy-MM-dd&quot;) {
    XCTAssertEqual(birthday.year, 1987, &quot;&quot;)
    XCTAssertEqual(birthday.month, 6, &quot;&quot;)
    XCTAssertEqual(birthday.day, 2, &quot;&quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;NSDateFormatter&lt;/code&gt;をいちいち初期化するのが面倒だったので、これを内部的に呼び出す直感的なメソッドを追加した。フォーマット文字列は同じ。&lt;/p&gt;
&lt;h1&gt;オーバーロードの追加&lt;/h1&gt;
&lt;p&gt;Before: &lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20150301/20150301145950.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20150301/20150301145950.png&quot; alt=&quot;f:id:naoty_k:20150301145950p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20150301145950p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;After: &lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20150301/20150301150005.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20150301/20150301150005.png&quot; alt=&quot;f:id:naoty_k:20150301150005p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20150301150005p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;これまでは&lt;code&gt;NSDate.date(year:month:day:hour:minute:second:)&lt;/code&gt;は&lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt;のデフォルト引数を&lt;code&gt;0&lt;/code&gt;にセットしていたが、これではBeforeのスクショの通り補完候補に&lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt;も含まれてしまう。デフォルト引数を使うよりも引数を省略したオーバーロードを提供した方が、補完候補に省略版のメソッドが現れるため使いやすいと思う。&lt;/p&gt;
&lt;h1&gt;今後の予定&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;NSDate&lt;/code&gt;同士を比較演算子で比較できるようにしたい。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;1.5.hour&lt;/code&gt;のような&lt;code&gt;Float&lt;/code&gt;のサポート（けっこう難しそう）&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Timepieceを0.2.0にアップデートした</title>
    <updated>2015-03-01T15:06:00+00:00</updated>
    <dc:date>2015-03-01T15:06:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/253/</id>
    <link href="https://blog.naoty.dev/253/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4822284646/naotoknk-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/41LkPJiQcNL._SL160_.jpg&quot; alt=&quot;UMLモデリングの本質 第2版&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;UMLモデリングの本質 第2版&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4822284646/naotoknk-22/&quot;&gt;UMLモデリングの本質 第2版&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: 児玉公信&lt;/li&gt;
&lt;li&gt;出版社/メーカー: 日経BP社&lt;/li&gt;
&lt;li&gt;発売日: 2011/05/26&lt;/li&gt;
&lt;li&gt;メディア: 単行本&lt;/li&gt;
&lt;li&gt;購入: 6人 クリック: 23回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4822284646/naotoknk-22&quot;&gt;この商品を含むブログ (6件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「UMLモデリングの本質」という本を読んだ。最近、ソフトウェアの設計について興味があって、いろいろ調べてみたところ各所でこの本がオススメされていたので手にとってみた。以前のエントリー（&lt;a href=&quot;http://naoty.hatenablog.com/entry/2015/02/02/012733&quot;&gt;「達人に学ぶDB設計徹底指南書」を読んだ - naoty.to_s&lt;/a&gt;）でデータベースの設計について理解できたんだけど、結局のところ、そのシステムが扱う業務内容をいかにして実装可能なモデルに落とし込むか（=モデリング）が重要になってくると思う。この本で理解したかったのはそこだった。タイトルからUMLの書き方についての本のようにも思えるが、そうではなく、むしろまったくUMLの書き方は書いてない。UMLを使って、複雑な業務用件をいかにモデリングするかを説いている。本書は300ページに満たないものの、密度が非常にあり2, 3週間でゆっくり読んでも第3章までしか読めていない。それでも、十分に学びがあったので忘れてしまう前にエントリーとして残しておきたいと思う。&lt;/p&gt;
&lt;h1&gt;モデリングとは&lt;/h1&gt;
&lt;p&gt;モデリングとは「仕組みや概念を理解するために概念的な要素とそれらの関係を記述すること」とあった。これは普段の業務で多かれ少なかれ必ず行っていると思う。ただ、それをモデリングという工程として認識してはいなかった。そして、モデリングの手法についても特に考えることはなかった。いつも漫然とノートに四角形と線を書いて整理してた（以下、イメージ）。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20150228/20150228013509.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20150228/20150228013509.jpg&quot; alt=&quot;f:id:naoty_k:20150228013509j:plain:h400&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20150228013509j:plain:h400&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;こういう自己流ではなくて、標準的な概念の表記法がある。その1つがUMLだ。UMLを習得することで、他人とのコミュニケーションの手段として使えるようになるし、UMLを通して標準的なモデリングの手法も学べるようになる。&lt;/p&gt;
&lt;p&gt;本書によると、モデリングは大まかに以下の順番に行っていくようだ。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;業務フロー図を書いて業務フローを整理する。&lt;/li&gt;
&lt;li&gt;業務フローからユースケース図を書いてユースケースを洗い出す。&lt;/li&gt;
&lt;li&gt;ユースケースから概念となる名詞を抜き出し、初期の型図を作成する。型図というのは実際はクラス図のことで、クラスと言っちゃうとクラスとして実装されることを含意してしまうが、実際にはクラスとは限らないため型図という言い方をしている。&lt;/li&gt;
&lt;li&gt;ユースケースごとにシーケンス図を書く。これによって各アクターの責務が明確になり、初期の型図を機能的側面から修正することができる。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;UMLはけっこうな種類があるような気がするけど、とりあえず上に出てきた図だけ覚えておけばよさそうだ。各ステップの具体的な方法については本書を参照してほしい。読んだだけではあまり意味がないと思うので、近いうちに簡単な例で実践してみたいと思っている。&lt;/p&gt;
&lt;h1&gt;分類の実装&lt;/h1&gt;
&lt;p&gt;モデリングの手法の次はより実装に近い話が続く。その中でも分類の実装の話がよかった。例えば、ユーザーに「有料会員」と「無料会員」という分類がある場合に、それをフラグとして実装するのか「Stateクラス」として実装するのかという議論がある。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# フラグで実装

class User &amp;lt; ActiveRecord::Base
  enum plan: %i(free premium)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# Stateクラスで実装

class User &amp;lt; ActiveRecord::Base
  has_one :plan
end

class Plan &amp;lt; ActiveRecord::Base
end

class Free &amp;lt; Plan
end

class Premium &amp;lt; Plan
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;個人的にはStateクラスという手法を知らなかったので、いつも前者のフラグとして実装していた。この実装の問題点は、状態が増えた場合にコードを修正する必要がある点と、if文の分岐を多用することになりコードが複雑になってしまう点がある。特に後者は、状態フラグの種類（例えば、「公開アカウント」or「非公開アカウント」）が増えたときに組み合わせが倍になり指数関数的に複雑になってしまうため、重大な問題点だと思う。&lt;/p&gt;
&lt;p&gt;Stateクラスであれば、サブクラスを追加するだけでよく既存のコードを修正する必要がない。if文による分岐もダックタイピングによって解決する。状態フラグが複数になった場合は、直交する状態をサブクラスとして定義する（&lt;code&gt;PublicFree&lt;/code&gt;, &lt;code&gt;PrivatePremium&lt;/code&gt;など）のがよいと本書では書かれていた。状態によって振る舞いが異なる場合や状態が増える可能性がある場合は、フラグではなくStateクラスで実装する方がいいのかもしれない。&lt;/p&gt;
&lt;h1&gt;ファサード&lt;/h1&gt;
&lt;p&gt;モデリングによって整理された概念をクラスとして実装する際、層別化アーキテクチャを使うのがいいという話が出てくる。よく知られた4層モデルの話で、システムを「ユーザーインターフェイス層」「アプリケーション層」「ドメイン層」「永続層」に分離し、層間の参照を一方向にすることで結合度を抑えるというアプローチだ。このとき、モデリングによって整理された概念はそのままドメイン層に配置することになる。そして、アプリケーション層には業務フローで定義された手続きや処理の手順を定義していくことになる。&lt;/p&gt;
&lt;p&gt;アプリケーション層を実装していくなかで、ドメイン層に定義された概念が高度に抽象化されていて扱いづらいときがある。とは言え、これまでのモデリングで練り上げてきた概念をアプリケーション層の都合でねじまげるわけにはいかないだろう。そこで登場するのがファサードというオブジェクトだ。ファサードはアプリケーション層からは冗長に見えるドメインを1つにまとめて扱いやすくする。さらに、複数のドメインにまたがった排他制御も扱う。&lt;/p&gt;
&lt;p&gt;ファサードという概念はなんとなく耳にしたことがあったが、モデリング→実装という流れの文脈で捉えるとその必要性を実感することができた。普段RailsでMVCだけを書いていると、こうした視点が持てずにドメインをねじ曲げてしまうことがある。なので、ファサードの実装方法について調べて実践していきたいと思った。&lt;/p&gt;</summary>
    <title>「UMLモデリングの本質」を読んだ</title>
    <updated>2015-02-28T11:25:00+00:00</updated>
    <dc:date>2015-02-28T11:25:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/252/</id>
    <link href="https://blog.naoty.dev/252/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4798124702/naotoknk-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51vol70XHoL._SL160_.jpg&quot; alt=&quot;達人に学ぶDB設計 徹底指南書 初級者で終わりたくないあなたへ&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;達人に学ぶDB設計 徹底指南書 初級者で終わりたくないあなたへ&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4798124702/naotoknk-22/&quot;&gt;達人に学ぶDB設計 徹底指南書 初級者で終わりたくないあなたへ&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: ミック&lt;/li&gt;
&lt;li&gt;出版社/メーカー: 翔泳社&lt;/li&gt;
&lt;li&gt;発売日: 2012/03/16&lt;/li&gt;
&lt;li&gt;メディア: 単行本（ソフトカバー）&lt;/li&gt;
&lt;li&gt;購入: 21人 クリック: 316回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4798124702/naotoknk-22&quot;&gt;この商品を含むブログ (23件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「達人に学ぶDB設計徹底指南書」を読んだ。最近、Webアプリケーションを開発する中で設計に問題意識を感じるようになった。ただ、具体的にどこが問題なのかうまく言語化できなくて、というか設計という言葉が何を指しているのかイマイチ分かってなかったので、データベースの設計について本を読んでみた。&lt;/p&gt;
&lt;h1&gt;内容&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;データベースの設計は「論理設計」→「物理設計」の順に行う。論理設計はデータの要素やデータ間の関係を定める工程を指す。物理設計はデータを格納する物理的な領域や格納方法を定める工程を指す。&lt;/li&gt;
&lt;li&gt;論理設計は「エンティティの抽出」→「エンティティの定義」→「正規化」→「ER図の作成」の順に行う。エンティティというのは業務内容に現れるデータの集合体を指す。&lt;/li&gt;
&lt;li&gt;物理設計は「テーブル定義」→「インデックス定義」→「ハードウェアのサイジング」→「ストレージの冗長構成決定」→「ファイルの物理配置決定」の順に行う。&lt;/li&gt;
&lt;li&gt;正規化というのはデータの形式を正規形にすることであり、正規形というのはデータの冗長性が排除され一貫性と効率性が保持されるデータ形式のこと。異なるエンティティを異なるテーブルに分離することによって第3正規形までは実現できる。&lt;/li&gt;
&lt;li&gt;正規化の目的はデータの冗長性を排除して不整合な更新を避けることにある。ただし、正規化はテーブルを分離するため、SQLでjoinを使うことになる。joinはパフォーマンスが悪化するため、正規化とパフォーマンスはトレードオフの関係にある。&lt;/li&gt;
&lt;li&gt;「非正規化は最後の手段」というのが筆者の意見である。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;感想&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;データベース設計で最初に行うのは「エンティティの抽出」であるということがとても重要なポイントに感じた。&lt;/li&gt;
&lt;li&gt;いつもRailsでアプリケーションを開発するとき、正規化を意識することはない。Modelを定義することはテーブルを定義することと同義だ。なので、適切にエンティティを定義できていれば、意識せずとも第2正規形、第3正規形を実現できると思う。筆者の「非正規化は最後の手段」という立場にたつと、いつもどおりModelを定義することで正規化を行い、非正規化以外の手段でパフォーマンスを向上させていけばいいということになる。つまり、今まで通りでいいってことか。&lt;/li&gt;
&lt;li&gt;結局、「いかにしてエンティティを抽出・定義するか」という問題を考える必要がありそうだ。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>「達人に学ぶDB設計徹底指南書」を読んだ</title>
    <updated>2015-02-02T01:27:00+00:00</updated>
    <dc:date>2015-02-02T01:27:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/251/</id>
    <link href="https://blog.naoty.dev/251/"/>
    <summary>&lt;p&gt;Gitのブランチ名をもとにActiveRecordが接続するDBを切り替えるRubygemを作った。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/brancher&quot;&gt;naoty/brancher&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;使い方&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;group :development do
  gem &quot;brancher&quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Gemfileに書いて&lt;code&gt;bundle install&lt;/code&gt;するだけ。あとは自動的にブランチごとに別々のDBが使われるようになる。&lt;/p&gt;
&lt;p&gt;config/database.ymlでdevelopment環境のDB名を&lt;code&gt;sample_app_dev&lt;/code&gt;と指定していた場合、&lt;code&gt;master&lt;/code&gt;ブランチなら&lt;code&gt;sample_app_dev_master&lt;/code&gt;が使われるし、&lt;code&gt;some_feature&lt;/code&gt;ブランチなら&lt;code&gt;sample_app_dev_some_feature&lt;/code&gt;が使われる。&lt;/p&gt;
&lt;h1&gt;問題意識&lt;/h1&gt;
&lt;p&gt;複数のブランチを移りながら開発していると、migrationを実行したブランチとしてないブランチでDBのスキーマが不整合になってエラーをおこすことがよくある。そのたびに&lt;code&gt;rake db:migrate&lt;/code&gt;だったり&lt;code&gt;rake db:reset&lt;/code&gt;だったり&lt;code&gt;rake db:schema:load&lt;/code&gt;したりするのが非常に面倒だった。そういった問題を解決するためにブランチごとにDBを分けられるツールを作った。&lt;/p&gt;
&lt;h1&gt;どう実現しているか&lt;/h1&gt;
&lt;p&gt;やっていることはconfig/database.ymlをロードしたオブジェクトをいじっているだけ。これをいじるタイミングは2つある。Railsアプリケーションの初期化時と&lt;code&gt;db:load_config&lt;/code&gt;タスクだ。&lt;/p&gt;
&lt;p&gt;Railsアプリケーションを初期化する際、&lt;code&gt;ActiveRecord::Base&lt;/code&gt;がロードされたあとに&lt;code&gt;establish_connection&lt;/code&gt;が実行される。このメソッドはconfig/database.ymlに基いてDBとのコネクションを接続するものなので、これが実行される前にDB名をブランチ名に従っていじってあげる必要がある。実際に実行されているコードは以下の通りだ。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/active_record/railtie.rb

initializer &quot;active_record.initialize_database&quot; do |app|
  ActiveSupport.on_load(:active_record) do
    self.configurations = Rails.application.config.database_configuration

    begin
      establish_connection
      # ...
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Rails.application.config.database_configuration&lt;/code&gt;はconfig/database.ymlの中身をERBで展開してYAMLとしてロードしたHashオブジェクトだ。これが&lt;code&gt;self.configurations&lt;/code&gt;にセットされて&lt;code&gt;establish_connection&lt;/code&gt;が実行される（ここでの&lt;code&gt;self&lt;/code&gt;は&lt;code&gt;ActiveRecord::Base&lt;/code&gt;）。よって、この初期化処理が実行される前に&lt;code&gt;Rails.application.config.database_configuration&lt;/code&gt;をいじればいい。&lt;/p&gt;
&lt;p&gt;初期化処理の一連の流れに割り込むには&lt;code&gt;Rails::Initializable.initializer&lt;/code&gt;メソッドのオプションを使う。そして、その中で&lt;code&gt;Rails.application.config.database_configuration&lt;/code&gt;の中身を上書きする。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/brancher/railtie.rb

initializer &quot;brancher.rename_database&quot;, before: &quot;active_record.initialize_database&quot; do
  Rails::Application::Configuration.send(:prepend, DatabaseConfigurationRenaming)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次に、&lt;code&gt;db:load_config&lt;/code&gt;タスク内でもconfig/database.ymlをいじる必要がある。なぜかというと、&lt;code&gt;rake db:create&lt;/code&gt;などの一部のRakeタスクは上述の初期化処理が実行されないからだ。&lt;code&gt;environment&lt;/code&gt;タスクに依存しているタスクであれば、&lt;code&gt;environment&lt;/code&gt;タスク内で初期化処理が行われるため問題ない。一方、&lt;code&gt;db:load_config&lt;/code&gt;タスクは（おそらく）すべてのDBに関連するRakeタスクが依存しているため、ここでDB名をいじってあげればいい。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/brancher/railtie.rb

rake_tasks do
  namespace :db do
    task :load_config do
      DatabaseRenameService.rename!(ActiveRecord::Base.configurations)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rakeタスクは通常のメソッドとは異なり、同名のタスクを定義しても上書きされることはない。先に定義された順に同名のタスクが実行される。&lt;/p&gt;
&lt;h1&gt;所感&lt;/h1&gt;
&lt;p&gt;上のような初期化処理の仕組みやRakeタスクの追加などは&lt;a href=&quot;http://naoty.hatenablog.com/entry/2015/01/10/215538&quot;&gt;以前のエントリ&lt;/a&gt;などでRailsの内部を読み理解を深めることによって実現することができた。ブラックボックスの中身が見えてくると、こういったRails自体に関わる便利ツールを簡単に作ることができてしまう。引き続きRailsのソースコードリーディングは続けていきたい。&lt;/p&gt;</summary>
    <title>ブランチごとにDB切り替えるヤツ作った</title>
    <updated>2015-01-19T00:32:00+00:00</updated>
    <dc:date>2015-01-19T00:32:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/250/</id>
    <link href="https://blog.naoty.dev/250/"/>
    <summary>&lt;p&gt;&lt;code&gt;rails s&lt;/code&gt;でRailsサーバーが起動するまでに何が起きているのかを紐解くことでRailsとは何なのかを理解していきたい。今回読んでいくソースコードのコミットは&lt;code&gt;2d9b9fb5b5f6015e66d3ad5cb96bc1ba117fd626&lt;/code&gt;だ。&lt;/p&gt;
&lt;h1&gt;TL;DR&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;bin/rails s&lt;/code&gt;がユーザーによって実行される。
&lt;ul&gt;
&lt;li&gt;Gemfileで管理されるrubygemを&lt;code&gt;require&lt;/code&gt;する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Rails::CommandsTasks#server&lt;/code&gt;を実行する。
&lt;ul&gt;
&lt;li&gt;config/application.rbを&lt;code&gt;require&lt;/code&gt;する。
&lt;ul&gt;
&lt;li&gt;Railsを構成する各rubygemのrailtieを&lt;code&gt;require&lt;/code&gt;する。
&lt;ul&gt;
&lt;li&gt;各rubygemのinitializerが登録される。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;config.ruが実行される。
&lt;ul&gt;
&lt;li&gt;登録されたinitializerが実行される。&lt;/li&gt;
&lt;li&gt;RailsアプリケーションがRackアプリケーションとして起動する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;コマンドの実行&lt;/h1&gt;
&lt;p&gt;まずbin/railsを見る。bin/railsは&lt;code&gt;rails new&lt;/code&gt;を実行したときに生成されるのだが、このひな形はrailties/lib/rails/generators/rails/app/templates/bin/railsにある。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# bin/rails

#!/usr/bin/env ruby
APP_PATH = File.expand_path('../../config/application', __FILE__ )
require_relative '../config/boot'
require 'rails/commands'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;config/boot.rbとrails/commands.rbを見る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config/boot.rb

ENV['BUNDLE_GEMFILE'] ||= File.expand_path('../../Gemfile', __FILE__ )

require 'bundler/setup' # Set up gems listed in the Gemfile.
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;config/boot.rbはGemfileにあるgemをrequireするようだ。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# railties/lib/rails/commands.rb

ARGV &amp;lt;&amp;lt; '--help' if ARGV.empty?

aliases = {
  &quot;g&quot; =&amp;gt; &quot;generate&quot;,
  &quot;d&quot; =&amp;gt; &quot;destroy&quot;,
  &quot;c&quot; =&amp;gt; &quot;console&quot;,
  &quot;s&quot; =&amp;gt; &quot;server&quot;,
  &quot;db&quot; =&amp;gt; &quot;dbconsole&quot;,
  &quot;r&quot; =&amp;gt; &quot;runner&quot;
}

command = ARGV.shift
command = aliases[command] || command

require 'rails/commands/commands_tasks'

Rails::CommandsTasks.new(ARGV).run_command!(command)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;rails s&lt;/code&gt;と実行すると&lt;code&gt;aliases&lt;/code&gt;の中から&lt;code&gt;&quot;server&quot;&lt;/code&gt;という文字列を取得して&lt;code&gt;rails server&lt;/code&gt;を実行することになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;rails/commands/commands_tasksを見る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# railsties/lib/rails/commands/commands_tasks.rb

module Rails
  class CommandsTasks
    # ...

    def initialize(argv)
      @argv = argv
    end

    def run_command!(command)
      command = parse_command(command)
      if COMMAND_WHITELIST.include?(command)
        send(command)
      else
        write_error_message(command)
      end
    end

    # ...
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;#parse_command&lt;/code&gt;は&lt;code&gt;--version&lt;/code&gt;や&lt;code&gt;--help&lt;/code&gt;をそれぞれ&lt;code&gt;&quot;version&quot;&lt;/code&gt;と&lt;code&gt;&quot;help&quot;&lt;/code&gt;というコマンドに変換するもの。それ以外はそのまま返す。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;COMMAND_WHITELIST&lt;/code&gt;に含まれていれば実行、そうでなければエラーを出力する。&lt;/li&gt;
&lt;li&gt;今回は&lt;code&gt;&quot;server&quot;&lt;/code&gt;が&lt;code&gt;command&lt;/code&gt;に入るので&lt;code&gt;send(&quot;server&quot;)&lt;/code&gt;が実行され、&lt;code&gt;#server&lt;/code&gt;が実行されることになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# railsties/lib/rails/commands/commands_tasks.rb

module Rails
  class CommandsTasks
    # ...

    def server
      set_application_directory!
      require_command!(&quot;server&quot;)

      Rails::Server.new.tap do |server|
        require APP_PATH
        Dir.chdir(Rails.application.root)
        server.start
      end
    end

    # ...
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;#set_application_directory!&lt;/code&gt;はconfig.ruがないディレクトリからでも&lt;code&gt;rails s&lt;/code&gt;を実行できるようにするためのものらしい。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;APP_PATH&lt;/code&gt;bin/railsの中で代入されたconfig/application.rbなので、&lt;code&gt;require &quot;config/application&quot;&lt;/code&gt;を&lt;code&gt;server.start&lt;/code&gt;の前に実行している。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;設定の読み込み&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;# config/application.rb

require File.expand_path('../boot', __FILE__ )

require 'rails/all'

Bundler.require(*Rails.groups)

module SampleApp
  class Application &amp;lt; Rails::Application
    config.active_record.raise_in_transactional_callbacks = true
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;前述の通り、config/boot.rbは&lt;code&gt;require &quot;bundler/setup&quot;&lt;/code&gt;を実行しておりGemfile.lockに記載されたバージョンのrubygemを&lt;code&gt;require&lt;/code&gt;している。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;rails/all.rbを見る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# railties/lib/rails/all.rb

require &quot;rails&quot;

%w(
  active_record
  action_controller
  action_view
  action_mailer
  active_job
  rails/test_unit
  sprockets
).each do |framework|
  begin
    require &quot;#{framework}/railtie&quot;
  rescue LoadError
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Railsを構成する各rubygemのrailtieを&lt;code&gt;require&lt;/code&gt;している。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;rails.rbを見る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# railsties/lib/rails.rb

module Rails
  # ...

  class &amp;lt;&amp;lt; self
    # ...
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;ここには&lt;code&gt;Rails.application&lt;/code&gt;, &lt;code&gt;Rails.configuration&lt;/code&gt;, &lt;code&gt;Rails.env&lt;/code&gt;などの重要なメソッドが定義されているため、登場次第また見ていくことにする。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;rails/all.rbとrails.rbについて見たので、config/applicationに戻る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config/application.rb

# ...

Bundler.require(*Rails.groups)

module SampleApp
  class Application &amp;lt; Rails::Application
    config.active_record.raise_in_transactional_callbacks = true
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Rails.groups&lt;/code&gt;は上述したrails.rbで定義されているのでさっそく見る。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# railties/lib/rails.rb

module Rails
  class &amp;lt;&amp;lt; self
    # ...

    def env
      @_env ||= ActiveSupport::StringInquirer.new(ENV[&quot;RAILS_ENV&quot;] || ENV[&quot;RACK_ENV&quot;] || &quot;development&quot;)
    end

    # ...

    def groups(*groups)
      hash = groups.extract_options!
      env = Rails.env
      groups.unshift(:default, env)
      groups.concat ENV[&quot;RAILS_GROUPS&quot;].to_s.split(&quot;,&quot;)
      groups.concat hash.map { |k, v| k if v.map(&amp;amp;:to_s).include?(env) }
      groups.compact!
      groups.uniq!
      groups
    end

    # ...
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Rails.groups&lt;/code&gt;は&lt;code&gt;Rails.env&lt;/code&gt;の値に合わせてBundlerが読みこむべきgroupを返す。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Rails.env&lt;/code&gt;は環境変数&lt;code&gt;&quot;RAILS_ENV&quot;&lt;/code&gt;または&lt;code&gt;&quot;RACK_ENV&quot;&lt;/code&gt;から実行環境を返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;config/application.rbに戻る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config/application.rb

# ...

module SampleApp
  class Application &amp;lt; Rails::Application
    config.active_record.raise_in_transactional_callbacks = true
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;SampleApp::Application&lt;/code&gt;が&lt;code&gt;Rails::Application&lt;/code&gt;を継承するとき、以下のような実装によって&lt;code&gt;Rails::Application.inherited&lt;/code&gt;が呼ばれ、&lt;code&gt;Rails.app_class&lt;/code&gt;が&lt;code&gt;SampleApp::Application&lt;/code&gt;となる。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# railties/lib/rails/application.rb

module Rails
  class Application &amp;lt; Engine
    class &amp;lt;&amp;lt; self
      def inherited(base)
        super
        Rails.app_class = base
        add_lib_to_load_path!(find_root(base.called_from))
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;サーバーの起動&lt;/h1&gt;
&lt;p&gt;サーバー起動前にどういった設定を読み込んでいるか見たので、サーバーの起動について詳細に見ていく。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# railsties/lib/rails/commands/commands_tasks.rb

module Rails
  class CommandsTasks
    # ...

    def server
      set_application_directory!
      require_command!(&quot;server&quot;)

      Rails::Server.new.tap do |server|
        require APP_PATH
        Dir.chdir(Rails.application.root)
        server.start
      end
    end

    # ...
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;#require_command!(&quot;server&quot;)&lt;/code&gt;で&lt;code&gt;require &quot;rails/commands/server&quot;&lt;/code&gt;をしている。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Rails::Server&lt;/code&gt;はrails/commands/server.rbで定義されているので見る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# railsties/lib/rails/commands/server

module Rails
  class Server &amp;lt; ::Rack::Server
    # ...

    def initialize(*)
      super
      set_environment
    end

    # ...

    def start
      print_boot_information
      trap(:INT) { exit }
      create_tmp_directories
      log_to_stdout if options[:log_stdout]

      super
    ensure
      puts 'Exiting' unless @options &amp;amp;&amp;amp; options[:daemonize]
    end

    # ...
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;スーパークラスの&lt;code&gt;::Rack::Server&lt;/code&gt;がサーバー起動において主な役割を果たしているようだ。&lt;/li&gt;
&lt;li&gt;これ以降はRackのソースコードを追うことになるが本題から反れるので、結論だけ言うとconfig.ruが実行されることになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;config.ruを見る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config.ru

require ::File.expand_path('../config/environment', __FILE__ )
run Rails.application
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;config/environment.rbを読み込んでいる。&lt;/li&gt;
&lt;li&gt;その後&lt;code&gt;Rails.application&lt;/code&gt;をrackアプリケーションとして実行している。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;とりあえずconfig/environment.rbを見る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config/environment.rb

require File.expand_path('../application', __FILE__ )
Rails.application.initialize!
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;config/application.rbは既に読み込まれているはず。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Rails.application.initialize!&lt;/code&gt;について見ていくため、まずは&lt;code&gt;Rails.application&lt;/code&gt;の定義を見る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# railties/lib/rails.rb

module Rails
  class &amp;lt;&amp;lt; self
    def application
      @application ||= (app_class.instance if app_class)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;app_class&lt;/code&gt;は、config/application.rbで&lt;code&gt;Rails::Application&lt;/code&gt;のサブクラスが定義されたときにそのサブクラスが代入される。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;SampleApp::Application.instance&lt;/code&gt;が呼ばれているが、これのメソッドは&lt;code&gt;Rails::Application&lt;/code&gt;に定義されていると思われる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Rails::Application&lt;/code&gt;を見る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# railties/lib/rails/application.rb

module Rails
  class Application &amp;lt; Engine
    class &amp;lt;&amp;lt; self
      def instance
        super.run_load_hooks!
      end
    end

    def run_load_hooks!
      return self if @ran_load_hooks
      @ran_load_hooks = true
      ActiveSupport.run_load_hooks(:before_configuration, self)

      @initial_variable_values.each do |variable_name, value|
        if INITIAL_VARIABLES.include?(variable_name)
          instance_variable_set(&quot;@#{variable_name}&quot;, value)
        end
      end

      instance_eval(&amp;amp;@block) if @block
      self
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;SampleApp::Application.instance&lt;/code&gt;内で&lt;code&gt;super.run_load_hooks!&lt;/code&gt;が呼ばれている。この&lt;code&gt;super&lt;/code&gt;はスーパークラスで定義された&lt;code&gt;.instance&lt;/code&gt;を呼んでおり、スーパークラスをたどると&lt;code&gt;Rails::Railtie.instance&lt;/code&gt;が呼ばれていることがわかる。これはそのまま&lt;code&gt;new&lt;/code&gt;を呼んでインスタンスを返すだけだ。なので、&lt;code&gt;super.run_load_hooks!&lt;/code&gt;というのは&lt;code&gt;SampleApp::Application#run_load_hooks!&lt;/code&gt;を指す。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;SampleApp::Application#run_load_hooks!&lt;/code&gt;は&lt;code&gt;Rails::Application&lt;/code&gt;で上のように定義されており自分自身を返す。中で&lt;code&gt;ActiveSupport.run_load_hooks(:before_configuration, self)&lt;/code&gt;を呼んでおり、これによって&lt;code&gt;:before_configuration&lt;/code&gt;をフックとして登録しておいた処理が実行される。&lt;/li&gt;
&lt;li&gt;結局、&lt;code&gt;Rails.application&lt;/code&gt;は&lt;code&gt;SampleApp::Application&lt;/code&gt;インスタンスということになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;initializerの実行&lt;/h2&gt;
&lt;p&gt;config/environment.rbに戻る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config/environment.rb

require File.expand_path('../application', __FILE__ )
Rails.application.initialize!
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Rails.application.initialize!&lt;/code&gt;はつまり&lt;code&gt;SampleApp::Application#initialize!&lt;/code&gt;ということ。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Rails::Application&lt;/code&gt;を見る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# railties/lib/rails/application.rb

module Rails
  class Application
    def initialize!(group=:default) #:nodoc:
      raise &quot;Application has been already initialized.&quot; if @initialized
      run_initializers(group, self)
      @initialized = true
      self
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;#run_initializers&lt;/code&gt;は&lt;code&gt;Rails::Initializable&lt;/code&gt;で以下のように定義されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# railties/lib/rails/initializable.rb

module Rails
  module Initializable
    def run_initializers(group=:default, *args)
      return if instance_variable_defined?(:@ran)
      initializers.tsort_each do |initializer|
        initializer.run(*args) if initializer.belongs_to?(group)
      end
      @ran = true
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;#initializers&lt;/code&gt;は&lt;code&gt;Rails::Application&lt;/code&gt;で以下のように定義されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# railties/lib/rails/application.rb

module Rails
  class Application
    def initializers
      Bootstrap.initializers_for(self) +
      railties_initializers(super) +
      Finisher.initializers_for(self)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Bootstrap.initializers_for&lt;/code&gt;とか&lt;code&gt;Finisher.initializers_for&lt;/code&gt;は&lt;code&gt;Rails::Initializable&lt;/code&gt;モジュールで以下のように定義されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# railties/lib/rails/initializable.rb

def initializers_for(binding)
  Collection.new(initializers_chain.map { |i| i.bind(binding) })
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Initializable::Collection&lt;/code&gt;を初期化しているようだ。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# railties/lib/rails/initializable.rb

class Collection &amp;lt; Array
  include TSort

  alias :tsort_each_node :each
  def tsort_each_child(initializer, &amp;amp;block)
    select { |i| i.before == initializer.name || i.name == initializer.after }.each(&amp;amp;block)
  end

  def +(other)
    Collection.new(to_a + other.to_a)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;TSort&lt;/code&gt;モジュールはRubyの標準モジュールで、依存関係を解決する順番に並び替える（＝トポロジカルソート）実装を提供する。&lt;code&gt;#tsort_each_node&lt;/code&gt;と&lt;code&gt;#tsort_each_child&lt;/code&gt;の2つを実装する必要がある。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;#tsort_each_node&lt;/code&gt;はすべての要素を走査するメソッド、&lt;code&gt;#tsort_each_child&lt;/code&gt;は子要素を走査するメソッド。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Collection#tsort_each_child&lt;/code&gt;では与えられた&lt;code&gt;initializer&lt;/code&gt;の前後の&lt;code&gt;initlaizer&lt;/code&gt;に対してブロックを実行する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Initializable.initializers_for&lt;/code&gt;に戻る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# railties/lib/rails/initializable.rb

def initializers_chain
  initializers = Collection.new
  ancestors.reverse_each do |klass|
    next unless klass.respond_to?(:initializers)
    initializers = initializers + klass.initializers
  end
  initializers
end

def initializers_for(binding)
  Collection.new(initializers_chain.map { |i| i.bind(binding) })
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;続いて&lt;code&gt;.initializers_chain&lt;/code&gt;を見る。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.ancestors&lt;/code&gt;はスーパークラスや&lt;code&gt;include&lt;/code&gt;しているモジュールを直接の親から順に並べて配列で返す。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.ancestors.reverse_each&lt;/code&gt;なので、最も遠いクラスまたはモジュールから順に&lt;code&gt;initializers&lt;/code&gt;を取得して一つの&lt;code&gt;Collection&lt;/code&gt;に連結させている。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;initializers_chain&lt;/code&gt;の要素はおそらく&lt;code&gt;Initializer&lt;/code&gt;インスタンスだと思われるので、&lt;code&gt;Initializer#bind&lt;/code&gt;を見る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# railties/lib/rails/Initializable.rb

class Initializer
  def bind(context)
    return self if @context
    Initializer.new(@name, context, @options, &amp;amp;block)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Initializer#initialize&lt;/code&gt;の第2引数は、&lt;code&gt;Initializer#run&lt;/code&gt;で&lt;code&gt;instance_exec&lt;/code&gt;のレシーバとして利用される。今回の場合、これは&lt;code&gt;Rails::Application&lt;/code&gt;インスタンスとなる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Rails::Application#initializers&lt;/code&gt;に戻る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# railties/lib/rails/application.rb

module Rails
  class Application
    def initializers
      Bootstrap.initializers_for(self) +
      railties_initializers(super) +
      Finisher.initializers_for(self)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;#railties_initializers&lt;/code&gt;がまだ残っているので見る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# railties/lib/rails/application.rb

module Rails
  class Application
    def ordered_railties
      @ordered_railties ||= begin
        order = config.railties_order.map do |railtie|
          # ...
        end

        all = (railties - order)
        all.push(self) unless (all + order).include?(self)
        order.push(:all) unless order.include?(:all)

        index = order.index(:all)
        order[index] = all
        order
      end
    end

    def railties_initializers(current)
      initializers = []
      ordered_railties.reverse.flatten.each do |r|
        if r == self
          initializers += current
        else
          initializers += r.initializers
        end
      end
      initializers
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;config.railties_order&lt;/code&gt;はデフォルトでは&lt;code&gt;[:all]&lt;/code&gt;を返すようになっているが、ここを変更することで実行するRailtieの&lt;code&gt;initializer&lt;/code&gt;の順番を変更することもできるようだ。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;#ordered_railties&lt;/code&gt;が返すのは&lt;code&gt;all = (railties - order)&lt;/code&gt;の部分なので、あとで詳しく&lt;code&gt;#railties&lt;/code&gt;について見る。&lt;/li&gt;
&lt;li&gt;ある順番でソートされた各Railtieの&lt;code&gt;initializers&lt;/code&gt;を結合して返している。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;#railties&lt;/code&gt;は&lt;code&gt;Rails::Engine&lt;/code&gt;から継承されたメソッドなので見る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# railties/lib/rails/engine.rb

def railties
  @railties ||= Railties.new
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Rails::Engine::Railties&lt;/code&gt;を見る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# railties/lib/rails/engine/railties.rb

def initialize
  @_all ||= ::Rails::Railtie.subclasses.map(&amp;amp;:instance) +
    ::Rails::Engine.subclasses.map(&amp;amp;:instance)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;::Rails::Railtie&lt;/code&gt;または&lt;code&gt;Rails::Engine&lt;/code&gt;のサブクラスをすべて返している（！）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;railties_initializers&lt;/code&gt;に戻る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# railties/lib/rails/application.rb

def railties_initializers(current)
  initializers = []
  ordered_railties.reverse.flatten.each do |r|
    if r == self
      initializers += current
    else
      initializers += r.initializers
    end
  end
  initializers
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ordered_railties&lt;/code&gt;は&lt;code&gt;::Rails::Railtie&lt;/code&gt;または&lt;code&gt;::Rails::Engine&lt;/code&gt;のサブクラスすべてだということがわかった。&lt;/li&gt;
&lt;li&gt;よって、それらの&lt;code&gt;initializers&lt;/code&gt;をすべて連結したものを返していることになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Rails::Application#initializers&lt;/code&gt;について見たので、&lt;code&gt;#run_initializers&lt;/code&gt;に戻る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# railties/lib/rails/initializable.rb

def run_initializers(group=:default, *args)
  return if instance_variable_defined?(:@ran)
  initializers.tsort_each do |initializer|
    initializer.run(*args) if initializer.belongs_to?(group)
  end
  @ran = true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;initializers&lt;/code&gt;は&lt;code&gt;Initializable::Collection&lt;/code&gt;インスタンスなので、&lt;code&gt;#tsort_each&lt;/code&gt;によって依存関係を解決する順番で&lt;code&gt;#each&lt;/code&gt;を行う。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Initializer#run&lt;/code&gt;を見る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# railties/lib/rails/initializable.rb

class Initializer
  def run(*args)
    @context.instance_exec(*args, &amp;amp;block)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;@context&lt;/code&gt;は&lt;code&gt;#bind&lt;/code&gt;によってセットされる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;block&lt;/code&gt;は&lt;code&gt;Initializer&lt;/code&gt;が初期化される際に渡されたブロックだ。この&lt;code&gt;block&lt;/code&gt;は&lt;code&gt;#bind&lt;/code&gt;によってセットされた&lt;code&gt;@context&lt;/code&gt;をレシーバとして実行される。&lt;/li&gt;
&lt;li&gt;今回の場合、&lt;code&gt;@context&lt;/code&gt;は&lt;code&gt;Rails::Application&lt;/code&gt;インスタンスをレシーバとして&lt;code&gt;block&lt;/code&gt;が実行されることになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;続いて、実行される&lt;code&gt;Initializer&lt;/code&gt;がどのように初期化されて登録されているのか見ていく。これは&lt;code&gt;Rails::Initializable::ClassMethods.initializer&lt;/code&gt;によって行われる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# railties/lib/rails/initializable.rb

def initializer(name, opts = {}, &amp;amp;blk)
  raise ArgumentError, &quot;A block must be passed when defining an initializer&quot; unless blk
  opts[:after] ||= initializers.last.name unless initializers.empty? || initializers.find { |i| i.name == opts[:before] }
  initializers &amp;lt;&amp;lt; Initializer.new(name, nil, opts, &amp;amp;blk)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;opts[:after]&lt;/code&gt;は&lt;code&gt;Initializer&lt;/code&gt;インスタンス間の依存関係の解決に利用される。&lt;code&gt;initializer&lt;/code&gt;で特に指定しなければ既存の&lt;code&gt;initializers&lt;/code&gt;の最後の要素が&lt;code&gt;initializer#after&lt;/code&gt;になる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Railsアプリケーションの起動&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;initializers&lt;/code&gt;の実行について一通り眺めたのでこれでconfig/environment.rbを読んだことになる。config.ruに戻る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config.ru

require ::File.expand_path('../config/environment', __FILE__ )
run Rails.application
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;ようやく&lt;code&gt;run Rails.application&lt;/code&gt;でアプリケーションを起動できる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Rails.application&lt;/code&gt;が&lt;code&gt;SampleApp::Application&lt;/code&gt;インスタンスであることは上述の通り。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/a_matsuda/ruby-on-rails-hacking-guide&quot;&gt;Ruby on Rails Hacking Guide // Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>`rails s`読んだ</title>
    <updated>2015-01-10T21:55:00+00:00</updated>
    <dc:date>2015-01-10T21:55:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/249/</id>
    <link href="https://blog.naoty.dev/249/"/>
    <summary>&lt;p&gt;Faraday middlewareの要件としては、Rack middleware同様に&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;#initialize(app)&lt;/code&gt;で他のmiddlewareを引数にとる&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;#call(env)&lt;/code&gt;でリクエストの前処理を実装する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の2点だけを満たせばいい。ただし、レスポンスを処理する場合は&lt;code&gt;#on_complete&lt;/code&gt;内のブロックで実装する必要がある。&lt;/p&gt;
&lt;pre lang=&quot;rb&quot; class=&quot;highlight highlight-rb&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on_complete&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response_env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# パースなどレスポンスの処理&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ここまではREADME.mdにも書いてあるのだけど、レスポンスの処理を効率的に実装するための方法が用意されている。それは&lt;code&gt;Faraday::Response::Middleware&lt;/code&gt;だ。使い方は以下の通り。&lt;/p&gt;
&lt;pre lang=&quot;rb&quot; class=&quot;highlight highlight-rb&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;faraday&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Faraday&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JSON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Middleware&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;register_middleware&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;#initialize(app)&lt;/code&gt;で&lt;code&gt;@app = app&lt;/code&gt;のようなことをしているため、特に書く必要はない。特別になにか必要であればoverrideする。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;#parse(body)&lt;/code&gt;でレスポンスをパースの処理を書くと、上述した&lt;code&gt;#on_complete&lt;/code&gt;のブロックの中でこのメソッドが呼ばれ、&lt;code&gt;env.body&lt;/code&gt;を&lt;code&gt;#parse(body)&lt;/code&gt;の結果によって更新する。&lt;/li&gt;
&lt;li&gt;パース以外にレスポンス時の処理を記述したい場合、&lt;code&gt;#on_complete&lt;/code&gt;を実装する。このメソッドは上述の&lt;code&gt;#on_complete&lt;/code&gt;のブロック内で呼ばれるのだけど、これを実装すると&lt;code&gt;#parse&lt;/code&gt;が呼ばれないので注意。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Faraday::Response.register_middleware&lt;/code&gt;でキーとミドルウェアを登録できる。このキーを使って以下のように&lt;code&gt;:json&lt;/code&gt;とミドルウェアを指定できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;rb&quot; class=&quot;highlight highlight-rb&quot;&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Faraday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:json&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;adapter&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Faraday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default_adapter&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;簡単なので&lt;code&gt;Faraday::Response::Middleware&lt;/code&gt;のソースコードを見てみる。&lt;/p&gt;
&lt;pre lang=&quot;rb&quot; class=&quot;highlight highlight-rb&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Faraday&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Middleware&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Faraday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Middleware&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on_complete&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;on_complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enrivonment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on_complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse_body?&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;#on_complete&lt;/code&gt;ブロック内で&lt;code&gt;Middleware#on_complete&lt;/code&gt;が呼ばれていることがわかる。&lt;/li&gt;
&lt;li&gt;さらにその中で&lt;code&gt;#parse&lt;/code&gt;が実装されていれば呼ぶようになっている。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;rb&quot; class=&quot;highlight highlight-rb&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Faraday&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Middleware&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MiddlwareRegistry&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;#initialize&lt;/code&gt;であとに続くmiddlewareを取り込んでいる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Faraday::MiddlewareRegistry&lt;/code&gt;というモジュールで&lt;code&gt;.register_middleware&lt;/code&gt;が定義されており、このメソッドでFaraday middlewareを指定する際のキーを登録できる。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Faraday middlewareの作り方</title>
    <updated>2015-01-03T23:02:00+00:00</updated>
    <dc:date>2015-01-03T23:02:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/248/</id>
    <link href="https://blog.naoty.dev/248/"/>
    <summary>&lt;p&gt;あけましておめでとうございます。&lt;/p&gt;
&lt;p&gt;プログラミング初めとして&lt;a href=&quot;https://github.com/naoty/qiita-build&quot;&gt;naoty/qiita-build&lt;/a&gt;という簡単なrubygemを作りました。Qiita:Teamで下のようなテンプレートがあったときに&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 自己紹介
* 氏名: %{fullname}
* ニックネーム: %{nickname}
* 居住地: %{location}
* 生年月日: %{birthday}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;標準入力でJSON文字列を渡すと、変数の中身をそれで展開するだけ。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo '{&quot;fullname&quot;: &quot;Naoto Kaneko&quot;, &quot;nickname&quot;: &quot;naoty&quot;, &quot;location&quot;: &quot;Tokyo&quot;, &quot;birthday&quot;: &quot;1987/6/2&quot;}' | qiita-build -t &amp;lt;TEAM&amp;gt; -a &amp;lt;ACCESS TOKEN&amp;gt; &amp;lt;TEMPLATE ID&amp;gt;
# 自己紹介
* 氏名: Naoto Kaneko
* ニックネーム: naoty
* 居住地: Tokyo
* 生年月日: 1987/6/2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;とある用途で使いたくて作ったものの、Qiita:Team周りのワークフローを自動化するときに便利そうだなと思ったのでrubygemにしました。&lt;/p&gt;
&lt;p&gt;本年も宜しくお願い致します。&lt;/p&gt;</summary>
    <title>Qiita:TeamのテンプレートとJSONからテキストを組み立てるヤツ</title>
    <updated>2015-01-02T18:07:00+00:00</updated>
    <dc:date>2015-01-02T18:07:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/247/</id>
    <link href="https://blog.naoty.dev/247/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://github.com/activeadmin/activeadmin&quot;&gt;activeadmin/activeadmin&lt;/a&gt;を初めて使うことになったので、どういう仕組みになっているのか調べてみた。&lt;/p&gt;
&lt;h1&gt;TL;DR&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;rails g active_admin:install&lt;/code&gt;を実行するとlib/generators/active_admin/install_generator.rbが実行され、&lt;code&gt;ActiveAdmin.routes(self)&lt;/code&gt;がconfig/routes.rbに追加される。&lt;/li&gt;
&lt;li&gt;app/admin/以下にあるResource定義ファイル内で実行される&lt;code&gt;ActiveAdmin.register&lt;/code&gt;では、&lt;code&gt;ActiveAdmin::Resource&lt;/code&gt;インスタンスが生成され、動的にResourceごとのcontrollerが生成される。それらはすべて&lt;code&gt;ActiveAdmin::ResourceController&lt;/code&gt;を継承している。&lt;/li&gt;
&lt;li&gt;config/routes.rbに追加された&lt;code&gt;ActiveAdmin.routes(self)&lt;/code&gt;は内部でapp/admin/以下のファイルをロードし（このタイミングで上述の&lt;code&gt;ActiveAdmin.register&lt;/code&gt;が実行される）、&lt;code&gt;ActiveAdmin::Resource&lt;/code&gt;インスタンスから動的にroutingが定義される。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;長いので、以下&lt;code&gt;ActiveAdmin::&lt;/code&gt;を&lt;code&gt;AA::&lt;/code&gt;と略記する。&lt;/p&gt;
&lt;h1&gt;Generator&lt;/h1&gt;
&lt;p&gt;Active Adminをセットアップするにはまず&lt;code&gt;rails g active_admin:install&lt;/code&gt;を実行する。&lt;/p&gt;
&lt;p&gt;このとき、lib/generators/active_admin/install_generator.rbに定義された&lt;code&gt;Rails::Generators::Base&lt;/code&gt;のサブクラスにあるpublicメソッドが上から順番に実行される。Railsはlib/generators/**/*_generator.rbにマッチするファイルに定義された&lt;code&gt;Rails::Generators::Base&lt;/code&gt;のサブクラスをRails Generatorとして実行することができる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/generators/active_admin/install_generator.rb

module ActiveAdmin
  module Generators
    class InstallGenerator &amp;lt; ActiveRecord::Generators::Base
      # ...

      def setup_routes
        if options[:user]
          inject_into_file &quot;config/routes.rb&quot;, &quot;\n ActiveAdmin.routes(self)&quot;, after: /devise_for .*, ActiveAdmin::Devise\.config/
        else
          route &quot;ActiveAdmin.routes(self)&quot;
        end
      end

      # ...
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;いくつかメソッドが定義されている中で&lt;code&gt;setup_routes&lt;/code&gt;を見ると、config/routes.rbに&lt;code&gt;ActiveAdmin.route(self)&lt;/code&gt;を追記しているようだ。&lt;code&gt;self&lt;/code&gt;は&lt;code&gt;Rails.application.routes.draw do ... end&lt;/code&gt;のブロック内での&lt;code&gt;self&lt;/code&gt;なので&lt;code&gt;ActionDispatch::Routing::Mapper&lt;/code&gt;インスタンスを表している。&lt;/p&gt;
&lt;h1&gt;Register a resource&lt;/h1&gt;
&lt;p&gt;Generatorでファイルの追加と変更を行ったあとは、管理画面で管理するResourceを作成する。例えば、&lt;code&gt;rails g active_admin:resource Post&lt;/code&gt;を実行すると以下のようなapp/admin/post.rbが生成される。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/admin/post.rb

ActiveAdmin.register Post do
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このブロックの中にviewやcontrollerの設定を追加していくのだけど、まず&lt;code&gt;ActiveAdmin.register&lt;/code&gt;の定義を調べる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/active_admin.rb

module ActiveAdmin
  class &amp;lt;&amp;lt; self
    # ...

    def application
      @application ||= ::ActiveAdmin::Application.new
    end

    # ...

    delegate :register, to: :application

    # ...
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ActiveSupportが拡張したメソッド&lt;code&gt;delegate&lt;/code&gt;によって、&lt;code&gt;ActiveAdmin.register&lt;/code&gt;の処理は実際には&lt;code&gt;AA::Application#register&lt;/code&gt;が行っている。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/active_admin/application.rb

def register(resource, options = {}, &amp;amp;block)
  ns = options.fetch(:namespace){ default_namespace }
  namespace(ns).register resource, options, &amp;amp;block
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;options[:namespace]&lt;/code&gt;がなければ&lt;code&gt;default_namespace&lt;/code&gt;つまり&lt;code&gt;:admin&lt;/code&gt;が&lt;code&gt;ns&lt;/code&gt;に入る。&lt;code&gt;#namespace&lt;/code&gt;は&lt;code&gt;namespaces[ns]&lt;/code&gt;があればそれを返し、なければ&lt;code&gt;AA::Namespace&lt;/code&gt;インスタンスを初期化し&lt;code&gt;namespaces&lt;/code&gt;に追加した上で返す。よって、&lt;code&gt;AA::Namespace#register&lt;/code&gt;が処理が渡っている。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/active_admin/namespace.rb

def register(resource_class, options = {}, &amp;amp;block)
  config = find_or_build_resource(resource_class, options)

  register_resource_controller(config)
  parse_registration_block(config, resource_class, &amp;amp;block) if block_given?
  reset_menu!

  ActiveAdmin::Event.dispatch ActiveAdmin::Resource::RegisterEvent, config

  config
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;find_or_build_resource&lt;/code&gt;は&lt;code&gt;AA::Resource&lt;/code&gt;インスタンスを返す。&lt;code&gt;#register_resource_controller&lt;/code&gt;は以下のように定義されており、&lt;code&gt;Resource&lt;/code&gt;インスタンスから動的に&lt;code&gt;AA::ResourceController&lt;/code&gt;を継承するResourceごとのcontrollerを定義している。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/active_admin/namespace.rb

def register_resource_controller
  eval &quot;class ::#{config.controller_name} &amp;lt; ActiveAdmin::ResourceController; end&quot;
  config.controller.active_admin_config = config
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;parse_registration_block&lt;/code&gt;は上述の例のapp/admin/post.rbで&lt;code&gt;ActiveAdmin.register&lt;/code&gt;に渡されていたブロックを評価する部分だと思う。ブロックの中身を独自のDSLとして評価してカスタマイズを行っていると思う。&lt;/p&gt;
&lt;h1&gt;Routing&lt;/h1&gt;
&lt;p&gt;Generatorによってconfig/routes.rbに追加された&lt;code&gt;ActiveAdmin.routes&lt;/code&gt;の定義を調べる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/active_admin.rb

module ActiveAdmin
  # ...

  def application
    @application ||= ::ActiveAdmin::Application.new
  end

  # ...

  delegate :routes, to: :application

  # ...
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;delegate&lt;/code&gt;はActiveSupportが拡張しているメソッドで、メソッドの呼び出しを&lt;code&gt;to&lt;/code&gt;で指定したオブジェクトに委譲する。なので、&lt;code&gt;ActiveAdmin.routes&lt;/code&gt;は実際には&lt;code&gt;AA::Application#routes&lt;/code&gt;を指している。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/active_admin/application.rb

def routes(rails_router)
  load!
  router.apply(rails_router)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;load!&lt;/code&gt;はapp/admin/**/*.rbを&lt;code&gt;Kernel.load&lt;/code&gt;する。このとき上述したapp/admin/post.rbのようなResource定義ファイルがロードされる。そして、&lt;code&gt;ActiveAdmin.register&lt;/code&gt;が実行され各Resourceのcontrollerが定義される。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;router&lt;/code&gt;は&lt;code&gt;Router&lt;/code&gt;インスタンスなので、&lt;code&gt;Router#apply&lt;/code&gt;を調べる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/active_admin/router.rb

def apply(router)
  define_root_routes router
  define_resource_routes router
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;まず&lt;code&gt;define_root_routes&lt;/code&gt;は以下のように定義されている。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/active_admin/router.rb

def define_root_routes(router)
  router.instance_exec @application.namespaces.values do |namespaces|
    namespaces.each do |namespace|
      if namespace.root?
        root namespace.root_to_options.merge(to: namespace.root_to)
      else
        namespace namespace.name do
          root namespace.root_to_options.merge(to: namespace.root_to)
        end  
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この&lt;code&gt;router&lt;/code&gt;は&lt;code&gt;ActionDispatch::Routing::Mapper&lt;/code&gt;であり、&lt;code&gt;@application.namespaces.values&lt;/code&gt;は&lt;code&gt;AA::Namespace&lt;/code&gt;インスタンスの配列だ。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ActiveAdmin.register&lt;/code&gt;に特にoptionを指定しない場合、&lt;code&gt;namespace.root?&lt;/code&gt;は&lt;code&gt;true&lt;/code&gt;となる。&lt;code&gt;namespace.root_to_options&lt;/code&gt;と&lt;code&gt;namespace.root_to&lt;/code&gt;がどこで定義されているのか不明。。。なんだけど、&lt;code&gt;AA::Application&lt;/code&gt;内にこれらが定義されており、&lt;code&gt;root_to_options&lt;/code&gt;は&lt;code&gt;{}&lt;/code&gt;で&lt;code&gt;root_to&lt;/code&gt;は&lt;code&gt;&quot;dashboard#index&quot;&lt;/code&gt;となっている。どのようにして&lt;code&gt;AA::Namespace&lt;/code&gt;にそれらが定義されるのか不明ではあるが、おそらくこれらの値が使われるのだと思う。よって、結局このメソッドは&lt;code&gt;root to: &quot;dashboard#index&quot;&lt;/code&gt;としているだけだ。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/active_admin/router.rb

def define_resource_routes(router)
  router.instance_exec @application.namespaces, self do |namespaces, aa_router|
    resources = namespaces.value.flat_map{ |n| n.resources.values }
    resources.each do |config|
      routes = aa_router.resource_routes(config)

      # ...

      instance_exec &amp;amp;routes
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;config&lt;/code&gt;は先述した&lt;code&gt;AA::Resource&lt;/code&gt;インスタンスだ。&lt;code&gt;aa_router&lt;/code&gt;は&lt;code&gt;AA::Router&lt;/code&gt;インスタンスなので&lt;code&gt;AA::Router#resource_routes&lt;/code&gt;を見る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/active_admin/router.rb

def resource_routes(config)
  Prox.new do
    build_route = proc{ |verbs, *args|
      [*verbs].each{ |verb| send verb, *args }
    }
    build_action = proc{ |action|
      build_route.call(action.http_verb, action.name)
    }
    case config
    when ::ActiveAdmin::Resource
      resources config.resource_name.route_key, only: config.defined_actions do
        member do
          config.member_actions.each &amp;amp;build_action
        end

        collection do
          config.collection_actions.each &amp;amp;build_action
          post :batch_action if config.batch_action_enabled?
        end
      end
    when ::ActiveAdmin::Page
      # ...
    else
      # ...
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このメソッドで返されるProcオブジェクトは&lt;code&gt;ActionDispatch::Routing::Mapper&lt;/code&gt;インスタンスのコンテキストで&lt;code&gt;instance_exec&lt;/code&gt;されるため、要するにこのProcオブジェクト内の処理がそのままconfig/routes.rb内のroutingの設定となる。Resourceインスタンスの情報から動的にroutingを組み立てているようだ。&lt;/p&gt;
&lt;h1&gt;所感&lt;/h1&gt;
&lt;p&gt;軽く触ってみたけど、Resource定義ファイルに独自DSLでviewを書いていくのが非常にカスタマイズが大変だし覚えることが多そうだな、あまり筋がよくなさそうという印象を受けた。&lt;/p&gt;
&lt;p&gt;で、調べてみた結果、Resource定義ファイルから動的にcontrollerとかroutingとかを定義していて、それらをカスタマイズするのに独自DSLを使うという構図になっていることが分かった。管理画面って、ビジネスサイドの要求によってどんどんカスタマイズが必要になるので、カスタマイズに独自のDSLを覚えなくてはいけないとか、場合によってはカスタマイズできないみたいな状況は大きな問題だと思う。だから、動的にいろいろ生成する方針は管理画面の実装には適していないのではないかと思った。なんでこれがこんなに支持されているのかよくわからない。&lt;/p&gt;</summary>
    <title>activeadmin読んだ</title>
    <updated>2014-12-31T01:32:00+00:00</updated>
    <dc:date>2014-12-31T01:32:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/246/</id>
    <link href="https://blog.naoty.dev/246/"/>
    <summary>&lt;p&gt;Resqueのworker上で実行されるコードが古いまま更新されないというような問題があって、意味もわからず書いたコードでなんとかその場を収めたんだけど、気持ち悪いのでRailsでいかにしてコードが更新されるのか調べてみることにした。&lt;/p&gt;
&lt;h1&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;未定義の定数が参照されると、&lt;code&gt;ActiveSupport::ModuleConstMissing&lt;/code&gt;によって拡張された&lt;code&gt;Module#const_missing&lt;/code&gt;が呼ばれる。命名規則に基いて定数名からファイル名が推測され、&lt;code&gt;autoload_paths&lt;/code&gt;に存在するファイルを見つける。そのファイルがロード済みであればそこで終了。ロード済みでなければ&lt;code&gt;Kernel.load&lt;/code&gt;でロードし、ロードされた定数は配列で管理される。&lt;/p&gt;
&lt;p&gt;development環境では、Railsのmiddleware stackに&lt;code&gt;ActionDispatch::Reloader&lt;/code&gt;というmiddlewareがあり、リクエストごとにファイルの最終更新日時を確認し、変更されていれば&lt;code&gt;ActiveSupport::Dependencies.clear&lt;/code&gt;を呼ぶ。これによって、ロード済みのファイルが空っぽになり、ロードされた定数もすべて削除される（＝未定義状態に戻る）。なので、ファイルが変更されるたびに&lt;code&gt;const_missing&lt;/code&gt;から始まる一連のフローが起こり、&lt;code&gt;Kernel.load&lt;/code&gt;によって最新のコードがロードされるようになっている。&lt;/p&gt;
&lt;p&gt;以下は、上述の結論に至るまでのソースコードリーディングのメモです。分かりにくいかも。&lt;/p&gt;
&lt;h1&gt;ActionDispatch::Reloader&lt;/h1&gt;
&lt;p&gt;ActionDispatch::ReloaderはRackミドルウェアなので、&lt;code&gt;#call&lt;/code&gt;の中で初期化時に受け取った他のRackミドルウェアの&lt;code&gt;#call&lt;/code&gt;を呼んでいる。その前後でリロードに関する処理を実行しているはずだ。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def call(env)
  @validated = @condition.call
  prepare!

  response = @app.call(env)
  response[2] = ::Rack::BodyProxy.new(response[2]) { cleanup! }

  response
rescue Exception
  cleanup!
  raise
end

def prepare!
  run_callbacks :prepare if validated?
end

def cleanup!
  run_callbacks :cleanup if validated?
ensure
  @validated = true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次のRackミドルウェアが処理を行う前後で&lt;code&gt;prepare!&lt;/code&gt;と&lt;code&gt;cleanup!&lt;/code&gt;を呼んでいる。その中身は&lt;code&gt;run_callbacks&lt;/code&gt;を呼んでいる。これは&lt;code&gt;ActiveSupport::Callbacks&lt;/code&gt;で定義されているメソッドで、&lt;code&gt;set_callbacks&lt;/code&gt;で登録されたcallbackを実行する。なので、&lt;code&gt;:prepare&lt;/code&gt;と&lt;code&gt;:cleanup&lt;/code&gt;というイベントに対してどこかで登録されたcallbackがされている。このcallbackの登録を行うメソッドも&lt;code&gt;ActionDispatch::Reloader&lt;/code&gt;に含まれている。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def self.to_prepare(*args, &amp;amp;block)
  # ...
  set_callbacks(:prepare, *args, &amp;amp;block)
end

def self.to_cleanup(*args, &amp;amp;block)
  # ...
  set_callbacks(:cleanup, *args, &amp;amp;block)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この2つのメソッドを使ってcallbackの登録が行われている。これらを呼び出している箇所を探すと、&lt;code&gt;Rails::Application::Finisher&lt;/code&gt;で呼ばれていることがわかる。&lt;/p&gt;
&lt;h1&gt;Rails::Application::Finisher&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;initializer :set_clear_dependencies_hook, group: :all do
  callback = lambda do
    ActiveSupport::DescendantsTracker.clear
    ActiveSupport::Dependencies.clear
  end

  if config.reload_classes_only_on_change
    reloader = config.file_watcher.new(*watchable_args, &amp;amp;callback)
    self.reloaders &amp;lt;&amp;lt; reloader

    ActionDispatch::Reloader.to_prepare(prepend: true) do
      reloader.execute
    end
  else
    ActionDispatch::Reloader.to_cleanup(&amp;amp;callback)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;initializer&lt;/code&gt;は&lt;code&gt;Rails::Initializable&lt;/code&gt;で定義されているメソッドでRailsの初期化時に実行される処理を登録することができる。つまり、Railsの初期化時に&lt;code&gt;:prepare&lt;/code&gt;または&lt;code&gt;:cleanup&lt;/code&gt;のcallbackを登録しているということになる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;reload_classes_only_on_change&lt;/code&gt;という設定はデフォルトで&lt;code&gt;true&lt;/code&gt;になっていて、依存するファイルが変更されたときだけクラスを再読み込みするかどうかを制御する。&lt;code&gt;file_watcher&lt;/code&gt;はデフォルトでは&lt;code&gt;ActiveSupport::FileUpdateChecker&lt;/code&gt;を指している。つまり、デフォルトでは、&lt;code&gt;:prepare&lt;/code&gt;のときに&lt;code&gt;ActiveSupport::FileUpdateChecker#execute&lt;/code&gt;が実行されるように設定されていることになる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ActiveSupport::FileUpdateChecker&lt;/code&gt;は初期化時に渡されたファイルを配列として受け取り、またそれらが更新されたときに実行されるブロックを受け取る。&lt;code&gt;#execute&lt;/code&gt;はファイルが更新されているかどうかに関わらずブロックを実行する。ここで実行されるのは、以下のブロックとなる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;callback = lambda do
  ActiveSupport::DescendantsTracker.clear
  ActiveSupport::Dependencies.clear
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここまでをまとめると、リクエストを受けるごとに上の2つのメソッドが実行されコードのリロードが行われるということになる。&lt;/p&gt;
&lt;h1&gt;ActiveSupport::DescendantsTracker&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;def clear
  if defined? ActiveSupport::Dependencies
    @@direct_descendants.each do |klass, descendants|
      if ActiveSupport::Dependencies.autoloaded?(klass)
        @@direct_descendants.delete(klass)
      else
        descendants.reject! { |v| ActiveSupport::Dependencies.autoloaded?(v) }
      end
    end
  else
    @@direct_descendants.clear
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;@@direct_descendants&lt;/code&gt;の中身を消去しているようだ。これはHashであり、中身がキーがクラスで、値がそのクラスを継承したサブクラスの配列となっている。&lt;code&gt;Class#inherited&lt;/code&gt;をoverrideしており、&lt;code&gt;ActiveSupport::DescendantsTracker&lt;/code&gt;を&lt;code&gt;extend&lt;/code&gt;しているクラスを継承したタイミングで&lt;code&gt;@@direct_descendants&lt;/code&gt;に追加される。&lt;code&gt;ActiveSupport::DescendantsTracker&lt;/code&gt;は例えば&lt;code&gt;ActiveRecord::Base&lt;/code&gt;で&lt;code&gt;extend&lt;/code&gt;されているため、&lt;code&gt;ActiveRecord::Base&lt;/code&gt;のサブクラス、つまり通常のModelクラスは&lt;code&gt;ActiveRecord::Base.descendants&lt;/code&gt;から取得できる。これを利用しているのが先述した&lt;code&gt;ActiveSupport::Callbacks&lt;/code&gt;で、callbackをサブクラスから親クラスへ辿っていくときに利用されている。&lt;/p&gt;
&lt;h1&gt;ActiveSupport::Dependencies&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;def clear
  log_call
  loaded.clear
  loading.clear
  remove_unloadable_constants!
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;loaded&lt;/code&gt;と&lt;code&gt;loading&lt;/code&gt;はクラス変数&lt;code&gt;@@loaded&lt;/code&gt;および&lt;code&gt;@@loading&lt;/code&gt;へのアクセサで&lt;code&gt;mattr_accessor&lt;/code&gt;によって定義されている。そして、これらのクラス変数の実体は&lt;code&gt;Set&lt;/code&gt;オブジェクトだ。&lt;/p&gt;
&lt;p&gt;次に&lt;code&gt;loaded&lt;/code&gt;と&lt;code&gt;loading&lt;/code&gt;にいつ何が追加されるのか調べると、&lt;code&gt;ActiveSupport::Dependencies.require_or_load&lt;/code&gt;というメソッドで呼ばれている。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def require_or_load(file_name, const_path = nil)
  # ...
  file_name = $` if file_name =~ /\.rb\z/
  expanded = File.expanded_path(file_name)
  return if loaded.include?(expanded)

  loaded &amp;lt;&amp;lt; expanded
  loading &amp;lt;&amp;lt; expanded

  begin
    if load?
      # ...

      load_args = [&quot;#{file_name}.rb&quot;]
      load_args &amp;lt;&amp;lt; const_path unless const_path.nil?

      if !warnings_on_first_load or history.include?(expanded)
        result = load_file(*load_args)
      else
        enable_warnings { result = load_file(*load_args) }
      end      
    else
      # ...
    end
  rescue Exception
    loaded.delete expanded
    raise
  ensure
    loading.pop
  end

  history &amp;lt;&amp;lt; expanded
  result
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;loaded&lt;/code&gt;と&lt;code&gt;loading&lt;/code&gt;に追加されているのはおそらくロードするファイルの絶対パスと思われる。そして、一連のロードが完了したら&lt;code&gt;loading&lt;/code&gt;からは削除されるようだ。&lt;code&gt;loading&lt;/code&gt;は読み込み中の再読み込みを防ぐために一時的に利用される変数らしい。一方、&lt;code&gt;loaded&lt;/code&gt;は既にロード済みかどうかをチェックして、ロード済みであれば&lt;code&gt;require_or_load&lt;/code&gt;を中断させるために使われているようだ。実際のロードの処理は&lt;code&gt;load_file&lt;/code&gt;で行われるようだ。&lt;code&gt;ActiveSupport::Dependencies.clear&lt;/code&gt;によって&lt;code&gt;loaded&lt;/code&gt;が空になると、&lt;code&gt;require_or_load&lt;/code&gt;内で再度&lt;code&gt;load_file&lt;/code&gt;を実行することになる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def load_file(path, const_paths = loadable_constants_for_path(path))
  # ...
  const_paths = [const_paths].compact unless const_paths.is_a? Array
  parent_paths = const_paths.collect { |const_path| const_path[/.*(?=::)/] || ::Object }

  result = nil
  newly_defined_paths = new_constants_in(*parent_paths) do
    result = Kernel.load path
  end

  autoloaded_constants.concat newly_defined_paths unless load_once_path?(path)
  autoloaded_constants.uniq!
  # ...
  result
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;const_paths&lt;/code&gt;は&lt;code&gt;app/models/user.rb&lt;/code&gt;と&lt;code&gt;app/controllers/users_controller.rb&lt;/code&gt;いうファイルがあれば&lt;code&gt;&quot;User&quot;&lt;/code&gt;と&lt;code&gt;&quot;UsersController&quot;&lt;/code&gt;という表す文字列を含む配列となる。&lt;code&gt;parent_paths&lt;/code&gt;は&lt;code&gt;const_paths&lt;/code&gt;の中で&lt;code&gt;&quot;Admin::UsersController&quot;&lt;/code&gt;のようなネストするものと&lt;code&gt;&quot;::Object&quot;&lt;/code&gt;を抽出した配列となる。&lt;code&gt;new_constants_in&lt;/code&gt;は渡したブロックを実行し、その中で新たにロードされた定数を返す。なので、&lt;code&gt;Kernel.load&lt;/code&gt;がとりあえず実行されるようだ。&lt;/p&gt;
&lt;p&gt;話を少し戻して&lt;code&gt;require_or_load&lt;/code&gt;はどこで呼ばれているかを調べると、&lt;code&gt;load_missing_constant&lt;/code&gt;で呼ばれており、さらにこのメソッドは&lt;code&gt;ActiveSupport::ModuleConstMissing#const_missing&lt;/code&gt;で呼ばれている。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module ModuleConstMissing
  # ...

  def const_missing(const_name)
    from_mod = anonymous ? guess_for_anonymous(const_name) : self
    Dependencies.load_missing_constant(from_mod, const_name)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そしてこのmoduleは以下のようにして&lt;code&gt;Module&lt;/code&gt;クラスに&lt;code&gt;include&lt;/code&gt;されるため、デフォルトの&lt;code&gt;const_missing&lt;/code&gt;の挙動をoverrideすることになる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module ActiveSupport
  module Dependencies
    # ...

    def hook!
      Object.class_eval { include Loadable }
      Module.class_eval { include ModuleConstMissing }
      Exception.class_eval { include Blamable }
    end

    # ...
  end
end

ActiveSupport::Dependencies.hook!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;つまり、定義されていない定数を参照する→&lt;code&gt;const_missing&lt;/code&gt;→&lt;code&gt;load_missing_constant&lt;/code&gt;→&lt;code&gt;require_or_load&lt;/code&gt;→&lt;code&gt;load_file&lt;/code&gt;という順番で呼ばれることになる。&lt;/p&gt;
&lt;p&gt;ここで、&lt;code&gt;ActiveSupport::Dependencies.clear&lt;/code&gt;の定義に戻る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def clear
  log_call
  loaded.clear
  loading.clear
  remove_unloadable_constants!
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;見ていなかった&lt;code&gt;remove_unloadable_constants!&lt;/code&gt;について見ていく。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def remove_unloadable_constants!
  autoloaded_constants.each { |const| remove_constant const }
  autoloaded_constants.clear
  Reference.clear!
  explicitly_unloadable_constants.each { |const| remove_constant const }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;autoloaded_constants&lt;/code&gt;は上述の&lt;code&gt;load_file&lt;/code&gt;でロードされた定数を含む配列だ。&lt;code&gt;remove_constant&lt;/code&gt;はその名の通り定数を削除するメソッドで内部で&lt;code&gt;Module#remove_const&lt;/code&gt;を呼んでいる。&lt;/p&gt;</summary>
    <title>RailsのReloaderの仕組み</title>
    <updated>2014-12-30T01:39:00+00:00</updated>
    <dc:date>2014-12-30T01:39:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/245/</id>
    <link href="https://blog.naoty.dev/245/"/>
    <summary>&lt;p&gt;昨日、&lt;a href=&quot;http://peatix.com/event/55420&quot;&gt;Qiita API v2 Hackathon&lt;/a&gt;に参加してきた。&lt;/p&gt;
&lt;p&gt;僕はハッカソンで&lt;a href=&quot;https://github.com/naoty/qiita-swift&quot;&gt;naoty/qiita-swift&lt;/a&gt;を作った。Qiita API v2のSwiftクライアントだ。動機としては、Swiftはすごく楽しいのだけどJSONのパースあたりがとてもつらいという問題があって、そこらへんの地味な実装を代わりに担うライブラリを書くことで、楽しいSwiftの開発をより楽しくできると思った。&lt;/p&gt;
&lt;h1&gt;使い方&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;let client = Qiita.Client(accessToken: &quot;...&quot;)

let parameters = [&quot;query&quot;: &quot;user:naoty_k&quot;]
client.getItems(parameters: parameters).onComplete({ items in
  // ...
}).onError({ error in
  // ...
}).resume()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Promiseっぽい感じで非同期処理をメソッドチェーンで記述することができる。対応しているAPIは、ハッカソンで数時間で作っただけだから、まだユーザーと投稿のGETリクエストのみしかないので、今後追加していきたい。&lt;/p&gt;
&lt;h1&gt;ハッカソンについての所見&lt;/h1&gt;
&lt;p&gt;これまで何回かハッカソンに参加してきたけど、ハッカソンで作ったソフトウェアの開発をその後も続けた、ということはなかった。そのことがハッカソンに参加するたびに心にひっかかっていた。というのも、ハッカソンで開発するソフトウェアはなにかしらの問題を解決するために作っているはずで、その場かぎりの開発で解決できることはめったにないと思うからだ。ハッカソンは解決する価値のある問題を発見し、その解決策のプロトタイピングを短時間で行うイベントだと思う。だから、ハッカソンはきっかけであって解決に値する問題であればその後も継続的に開発していくべきなんだと思う。だから、開発しようと思った動機を大切にして、開発を継続していこうと思う。&lt;/p&gt;</summary>
    <title>Qiita API v2のSwiftクライアントを書き始めた</title>
    <updated>2014-12-14T00:29:00+00:00</updated>
    <dc:date>2014-12-14T00:29:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/244/</id>
    <link href="https://blog.naoty.dev/244/"/>
    <summary>&lt;p&gt;12/1から新しい職場で働くことになりました。久々のチーム開発なので楽しみです。相変わらずRailsやったりiOSやったりな感じになりそうです。転職先は&lt;a href=&quot;https://gist.github.com/yayugu/5983210&quot;&gt;卓球ハウス&lt;/a&gt;に遊びに来られたときにでもお話します。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/gp/registry/wishlist/1DPEDYTGCS593/ref=cm_wl_huc_view&quot;&gt;いつもの&lt;/a&gt;です。よろしくお願いします。&lt;/p&gt;</summary>
    <title>転職のお知らせ</title>
    <updated>2014-11-28T16:21:00+00:00</updated>
    <dc:date>2014-11-28T16:21:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/243/</id>
    <link href="https://blog.naoty.dev/243/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4873116864/hatena-blog-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51GHwTNJgSL._SL160_.jpg&quot; alt=&quot;Web API: The Good Parts&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;Web API: The Good Parts&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4873116864/hatena-blog-22/&quot;&gt;Web API: The Good Parts&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: 水野貴明&lt;/li&gt;
&lt;li&gt;出版社/メーカー: オライリージャパン&lt;/li&gt;
&lt;li&gt;発売日: 2014/11/21&lt;/li&gt;
&lt;li&gt;メディア: 大型本&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4873116864/hatena-blog-22&quot;&gt;この商品を含むブログ (1件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;業務ではiOSアプリとバックエンドの開発を両方担当しているので、APIの設計を何回かやってきた。しかし、自分なりのやり方でやってきた部分が多かったので、最近発売された&lt;a href=&quot;http://www.oreilly.co.jp/books/9784873116860/&quot;&gt;Web API: The Good Parts&lt;/a&gt;を読んでちゃんとした設計について学ぶことにした。&lt;/p&gt;
&lt;p&gt;得られた学びをメモとして残す。&lt;/p&gt;
&lt;h1&gt;HATEOAS&lt;/h1&gt;
&lt;p&gt;HATEOAS（Hypermedia As The Engine Of Application State）という設計方法を初めて知った。HATEOASではまず、サーバー側はレスポンスに関連するエンドポイントを含め次にアクセスするAPIを簡単に辿れるようにする。クライアント側は最初のエンドポイント以外はハードコーディングせずにレスポンスに含まれるエンドポイントだけにアクセスを制限する。このようにすることで、アプリケーションのワークフローをクライアント側で制御するのではなく、サーバーサイドで制御できるようになる。&lt;/p&gt;
&lt;p&gt;HATEOASのメリットとしては、特にモバイルアプリケーション開発の文脈で重要なこととして、最初にアクセスするものを除いてエンドポイントをハードコーディングせずに済むということだと思う。一度リリースしてしまったアプリにハードコーディングされたエンドポイントは互換性を死守しなければならないが、レスポンス中に含まれるものを使うのであれば柔軟にエンドポイントを変更することが可能になる。&lt;/p&gt;
&lt;p&gt;例として、配列を返すレスポンスに前後のページへのリンクを含める場合はこのようになる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  friends: [
    {
      id: 12345,
      name: &quot;Alice&quot;
    },
    {
      id: 12346,
      name: &quot;Bob&quot;
    }
  ],
  hasNext: true,
  links: [
    {
      uri: &quot;http://api.example.com/v1/users?page=3&amp;amp;per_page=20&quot;,
      rel: &quot;next&quot;
    },
    {
      uri: &quot;http://api.example.com/v1/users?page=1&amp;amp;per_page=20&quot;,
      rel: &quot;prev&quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;エラー時のレスポンス&lt;/h1&gt;
&lt;p&gt;エラーが発生した場合は適切なHTTPステータスコードを返すのは当然としてエラーの詳細情報を返す必要がある。それらはレスポンスボディに含めることが多い。複数のエラーが同時に発生する場合を考慮して、詳細情報を配列で返す方が親切だと思う。詳細情報には、エラーメッセージだけでなく、API提供側で独自に定義した詳細コードが含まれることがある。詳細コードはステータスコードと混同しないように4桁にして、1000番台は汎用的なエラー、2000番台はユーザー情報に関連するエラーというようにカテゴリー分けすると便利。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  errors: [
    {
      message: &quot;Not Found&quot;,
      code: 1013
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;クライアント側の実装としては、HTTPステータスコードではなく詳細コードごとにエラーメッセージを出し分ける方がユーザーにとってフレンドリーなUIになるだろう。&lt;/p&gt;
&lt;h1&gt;キャッシュ&lt;/h1&gt;
&lt;p&gt;HTTPのキャッシュの仕様には2種類あり、期限切れモデルと検証モデルがある。&lt;/p&gt;
&lt;p&gt;期限切れモデルでは、キャッシュの保存期限をサーバー側で指定し、クライアントはその期限中は通信を行わなくなり期限が切れたらアクセスを再開する。期限の指定方法は&lt;code&gt;Cache-Control&lt;/code&gt;ヘッダーと&lt;code&gt;Expires&lt;/code&gt;ヘッダーの2種類ある。&lt;code&gt;Cache-Control&lt;/code&gt;は&lt;code&gt;Date&lt;/code&gt;ヘッダーの日時からの経過時間を指定する。&lt;code&gt;Expires&lt;/code&gt;は期限を表す日時を指定する。&lt;code&gt;Cache-Control&lt;/code&gt;は頻繁には更新されないデータに使われ、&lt;code&gt;Expires&lt;/code&gt;は天気情報など決まった時間に更新されることがわかっている場合に使われることが多い。&lt;/p&gt;
&lt;p&gt;検証モデルでは、クライアントは今持っているキャッシュが有効かどうかを問い合わせて無効だったときだけ取得する。サーバー側はデータを返す際&lt;code&gt;Last-Modified&lt;/code&gt;ヘッダーと&lt;code&gt;ETag&lt;/code&gt;ヘッダーを返し、クライアントに保持してもらう。そして、クライアントが問い合わせるときに送られた&lt;code&gt;If-Modified-Since&lt;/code&gt;や&lt;code&gt;If-None-Match&lt;/code&gt;と比較して変化しているかどうかを判定する。変化していればキャッシュは無効とみなし再取得させる。期限切れモデルとは異なり、毎回アクセスは発生しているため、データ自体がそこまで大きくないとあまり効果はない。&lt;/p&gt;
&lt;p&gt;使い分けとしては、頻繁に更新されないものや定期的に更新されるようなデータは期限切れモデルを使い、頻繁に更新される可能性があるものは検証モデルを利用するのがよさそうだ。&lt;/p&gt;
&lt;h1&gt;その他&lt;/h1&gt;
&lt;p&gt;OAuth2.0のフロー、各HTTPステータスコードの説明、APIにまつわるセキュリティなどAPIを設計する上で必要となる周辺知識がのっている。個人的に気になっていたAPIオーケストレーションの話はそこまで取り上げられていなかった。&lt;/p&gt;</summary>
    <title>Web API: The Good Partsを読んだ</title>
    <updated>2014-11-27T14:55:00+00:00</updated>
    <dc:date>2014-11-27T14:55:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/242/</id>
    <link href="https://blog.naoty.dev/242/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;http://naoty.hatenablog.com/entry/2014/11/18/212355&quot;&gt;前回&lt;/a&gt;に引き続き、UI周りのテクニックを学ぶため&lt;a href=&quot;https://github.com/modocache/MDCSwipeToChoose&quot;&gt;https://github.com/modocache/MDCSwipeToChoose&lt;/a&gt;を読む。海外で話題のTinder風のアプリを簡単に開発することができる。&lt;/p&gt;
&lt;p&gt;まず使い方を簡単に見ていく。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;override func viewDidLoad() {
    let options = MDCSwipeToChooseViewOptions()
    options.delegate = self
    options.likedText = &quot;Like&quot;
    options.likedColor = UIColor.blueColor()
    options.nopeText = &quot;Nope&quot;
    options.nopeColor = UIColor.redColor()
    options.onPan = { state in NSLog(&quot;Panning&quot;) }

    let swipableView = MDCSwipeToChooseView(frame: view.frame, options: options)
    view.addSubview(swipableview)
}

func viewDidCancelSwipe(view: UIView!) {
    NSLog(&quot;Cancel to choose&quot;)
}

func view(view: UIView!, wasChoosenWithDirection direction: MDCSwipeDirection) }
    NSLog(&quot;Choose to \(direction == .Left ? &quot;Left&quot; : &quot;Right&quot;)&quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;MDCSwipeToChooseViewOptions&lt;/code&gt;オブジェクトにスワイプするViewの設定をまとめて初期化時に渡している。
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;delegate&lt;/code&gt;は&lt;code&gt;MDCSwipeToChooseDelegate&lt;/code&gt;を実装するオブジェクトである必要がある。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;likedText&lt;/code&gt;とか&lt;code&gt;nopeText&lt;/code&gt;というのは、右もしくは左にスワイプされるときにView上に表示されるテキストのこと。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onPan&lt;/code&gt;はスワイプされているときに呼ばれる処理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;MDCSwipeToChooseDelegate&lt;/code&gt;のメソッドとして&lt;code&gt;viewDidCancelSwipe()&lt;/code&gt;と&lt;code&gt;view(view:wasChoosenWithDirection:)&lt;/code&gt;がある。前者はスワイプを途中でやめたとき、後者はスワイプしてViewをどちらかに選んだときに呼ばれる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;さらに、&lt;code&gt;MDCSwipeToChooseView&lt;/code&gt;だけではなく、&lt;code&gt;UIView&lt;/code&gt;をスワイプできるようにするカテゴリも用意されているため、より柔軟に実装できるようになっている。&lt;/p&gt;
&lt;p&gt;今回、重点的に読んでいきたいのは以下のポイントだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ライブラリの設計。カテゴリも含めた柔軟な実装を可能にするのは優れた設計があるからだと思うので参考にしたい。&lt;/li&gt;
&lt;li&gt;スワイプに合わせたViewの動き。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ライブラリの設計&lt;/h1&gt;
&lt;p&gt;このライブラリの作者の書いた&lt;a href=&quot;http://modocache.svbtle.com/ios-ui-component-api-design&quot;&gt;iOS UI Component API Design&lt;/a&gt;という記事によると、設計において2点考慮されているようだ。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;継承よりカテゴリーによるコンポジションを選ぶ。&lt;/li&gt;
&lt;li&gt;デリゲートメソッドやブロックの引数にパラメータオブジェクトを使う。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;継承よりカテゴリーによるコンポジション&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;MDCSwipeToChooseView&lt;/code&gt;に機能を追加したい場合、サブクラスを定義する必要がある。しかし、この方法では別のライブラリが提供するViewのもつ機能を組み込むことができない。そこで、カテゴリーで&lt;code&gt;UIView&lt;/code&gt;に機能を拡張することで、他のライブラリとも組み合わせることができる。&lt;/p&gt;
&lt;p&gt;カテゴリーによる拡張の欠点はインスタンス変数を追加することができないことだ。そのため、プロパティをカテゴリーによって拡張する場合は、&lt;code&gt;&amp;lt;objc/runtime.h&amp;gt;&lt;/code&gt;の&lt;code&gt;objc_setAssociatedObject()&lt;/code&gt;を使ったトリッキーな実装が必要になる。&lt;/p&gt;
&lt;p&gt;より簡単に実装するには、カスタマイズ用のパラメータを束ねる設定オブジェクトを使うのがよさそう。この設定オブジェクトのプロパティだけは上記のトリッキーな手法で拡張するしかないが、Viewをカスタマイズする変数はすべてのこの設定オブジェクトに隠ぺいする。このライブラリでの設定オブジェクトは&lt;code&gt;MDCSwipeOptions&lt;/code&gt;と&lt;code&gt;MDCSwipeToChooseViewOptions&lt;/code&gt;だった。&lt;/p&gt;
&lt;h2&gt;パラメータオブジェクト&lt;/h2&gt;
&lt;p&gt;デリゲートメソッドや&lt;code&gt;onPan&lt;/code&gt;などのブロックのシグネチャがバージョンアップデートで変更されてしまうと互換性がなくなってしまう。そこで、複数の引数をまとめたパラメータオブジェクトというのを用意し、引数の変更をすべてパラメータオブジェクト内の変更で吸収することで、メソッドのシグネチャを変更せずに互換性を保つことができる。このライブラリでは&lt;code&gt;MDCPanState&lt;/code&gt;がパラメータオブジェクトの役割を果たしている。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typedef void (^MDCSwipeToChooseOnPanBlock)(MDCPanState *state);

@interface MDCSwipeOptions : NSObject

// ...

@property (nonatomic, copy) MDCSwipeToChooseOnPanBlock onPan;

// ...

@end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;@interface MDCPanState : NSObject

@property (nonatomic, strong) UIView *view;
@property (nonatomic, assign) MDCSwipeDirection direction;
@property (nonatomic, assign) CGFloat thresholdRatio;

@end
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;初期化から表示まで&lt;/h1&gt;
&lt;p&gt;設計について確認したので、初期化から表示されるまでの流れからソースコードを読んでいく。&lt;/p&gt;
&lt;h2&gt;MDCSwipeToChooseView.m:44&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- (instancetype)initWithFrame:(CGRect)frame options:(MDCSwipeToChooseViewOptions *)options {
    self = [super initWithFrame:frame];
    if (self) {
        _options = options ? options : [MDCSwipeToChooseViewOptions new];
        [self setupView];
        [self constructImageView];
        [self constructLikedView];
        [self constructNopeImageView];
        [self setupSwipeToChoose];
    }
    return self;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;まずこのクラスのスーパークラスは&lt;code&gt;UIView&lt;/code&gt;なので、普通の初期化処理をしたあとにセットアップ処理を実行している。&lt;/li&gt;
&lt;li&gt;いくつかのセットアップ処理を順に見ていく。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;MDCSwipeToChooseView.m:59&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- (void)setupView {
    self.backgroundColor = [UIColor clearColor];
    self.layer.cornerRadius = 5.f;
    self.layer.borderWidth = 2.f;
    self.layer.borderColor = [UIColor colorWith8BitRed:220.f
                                                 green:220.f
                                                  blue:220.f
                                                 alpha:1.f].CGColor;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;self&lt;/code&gt;の見た目に関する設定をしている。&lt;/li&gt;
&lt;li&gt;背景色が透明で、角丸で、枠線の太さと色を指定しているだけのようだ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;MDCSwipeToChooseView.m:69&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- (void)constructImageView {
    _imageView = [[UIImageView alloc] initWithFrame:self.bounds];
    _imageView.clipsToBounds = YES;
    [self addSubview:_imageView];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;self&lt;/code&gt;と同じ大きさの&lt;code&gt;_imageView&lt;/code&gt;を作ってサブビューに追加している。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-[UIView clipsToBounds]&lt;/code&gt;はサブビューを自分の&lt;code&gt;bounds&lt;/code&gt;のサイズで切り抜く設定だ。&lt;code&gt;YES&lt;/code&gt;を指定すると、サブビューの自分からはみ出た部分は表示されなくなる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;MDCSwipeToChooseView.m:75&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- (void)constructLikedView {
    CGRect frame = CGRectMake(MDCSwipeToChooseViewHorizontalPadding,
                              MDCSwipeToChooseViewTopPadding,
                              CGRectGetMidX(_imageView.bounds),
                              MDCSwipeToChooseViewLabelWidth);
    self.likedView = [[UIView alloc] initWithFrame:frame];
    [self.likedView constructBorderedLabelWithText:self.options.likedText
                                             color:self.options.likedColor
                                             angle:self.options.likedRotationAngle];
    self.likedView.alpha = 0.f;
    [self.imageView addSubview:self.likedView];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;likedView&lt;/code&gt;というのは右にスワイプしたときに浮かび上がるテキストのためのビュー。&lt;/li&gt;
&lt;li&gt;最初は非表示になっているので&lt;code&gt;alpha&lt;/code&gt;が&lt;code&gt;0&lt;/code&gt;になっている。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-[UIView constructBorderedLabelWithText:color:angle]&lt;/code&gt;というメソッドは&lt;code&gt;UIView+MDCBorderedLabel.m&lt;/code&gt;で定義されている拡張。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;UIView+MDCBorderedLabel.m:31&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- (void)constructBorderedLabelWithText:(NSString *)text
                                 color:(UIColor *)color
                                 angle:(CGFloat)angle {
    self.layer.borderColor = color.CGColor;
    self.layer.borderWidth = 5.f;
    self.layer.cornerRadius = 10.f;

    UILabel *label = [[UILabel alloc] initWithFrame:self.bounds];
    label.text = [text uppercaseString];
    label.textAlignment = NSTextAlignmentCenter;
    label.font = [UIFont fontWithName:@&quot;HelveticaNeue-CondensedBlack&quot;
                                 size:48.f];
    label.textColor = color;
    [self addSubview:label];

    self.transform = CGAffineTransformRotate(CGAffineTransformIdentity,
                                             MDCDegreesToRadians(angle));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;角丸や枠線の設定をして、&lt;code&gt;UILabel&lt;/code&gt;をサブビューに追加している。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-[UIView transform]&lt;/code&gt;は&lt;code&gt;center&lt;/code&gt;または&lt;code&gt;anchorPoint&lt;/code&gt;を基準とした変換値を表す。これを設定するとその変換が適用される。&lt;code&gt;CGAffineTransformRotate()&lt;/code&gt;は回転のためのアフィン変換行列を返す。第1引数に既存のアフィン変換、第2引数に回転角度を指定する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;MDCSwipeToChooseView.m:88&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- (void)constructNopeImageView {
    CGFloat width = CGRectGetMidX(self.imageView.bounds);
    CGFloat xOrigin = CGRectGetMaxX(_imageView.bounds) - width - MDCSwipeToChooseViewHorizontalPadding;
    self.nopeView = [[UIImageView alloc] initWithFrame:CGRectMake(xOrigin,
                                                                  MDCSwipeToChooseViewTopPadding,
                                                                  width,
                                                                  MDCSwipeToChooseViewLabelWidth)];
    [self.nopeView constructBorderedLabelWithText:self.options.nopeText
                                            color:self.options.nopeColor
                                            angle:self.options.nopeRotationAngle];
    self.nopeView.alpha = 0.f;
    [self.imageView addSubview:self.nopeView];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;こちらは左にスワイプしたときに浮かび上がるテキストのビュー。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;_likedView&lt;/code&gt;と大差ない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;MDCSwipeToChooseView.m:102&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- (void)setupSwipeToChoose {
    MDCSwipeOptions *options = [MDCSwipeOptions new];
    options.delegate = self.options.delegate;
    options.threshold = self.options.threshold;

    __block UIView *likedImageView = self.likedView;
    __block UIView *nopeImageView = self.nopeView;
    __weak MDCSwipeToChooseView *weakself = self;
    options.onPan = ^(MDCPanState *state) {
        if (state.direction == MDCSwipeDirectionNone) {
            likedImageView.alpha = 0.f;
            nopeImageView.alpha = 0.f;
        } else if (state.direction == MDCSwipeDirectionLeft) {
            likedImageView.alpha = 0.f;
            nopeImageView.alpha = state.thresholdRatio;
        } else if (state.direction == MDCSwipeDirectionRight) {
            likedImageView.alpha = state.thresholdRatio;
            nopeImageView.alpha = 0.f;
        }

        if (weakself.options.onPan) {
            weakself.options.onPan(state);
        }
    };

    [self mdc_swipeToChooseSetup:options];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;MDCSwipeOptions&lt;/code&gt;オブジェクトを生成して、初期化時に渡された&lt;code&gt;self.options&lt;/code&gt;のプロパティをコピーしている。&lt;code&gt;onPan&lt;/code&gt;ブロック内で最後に初期化時に渡された&lt;code&gt;self.options.onPan&lt;/code&gt;が実行されるようになっている。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;__block&lt;/code&gt;属性はブロック内で変更する場合に変数につける必要がある。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onPan&lt;/code&gt;内の処理を詳しく見ていく。
&lt;ul&gt;
&lt;li&gt;ブロックの引数に渡される&lt;code&gt;state&lt;/code&gt;の&lt;code&gt;direction&lt;/code&gt;プロパティは&lt;code&gt;MDCSwipeDirection&lt;/code&gt;型の値で、&lt;code&gt;None&lt;/code&gt;, &lt;code&gt;Left&lt;/code&gt;, &lt;code&gt;Right&lt;/code&gt;のいずれかだ。&lt;code&gt;Left&lt;/code&gt;なら``nopeImageView&lt;code&gt;のアルファ値を変更し表示されるようにしている。逆に&lt;/code&gt;Right`なら`likedImageView`を同様にして表示されるようにしている。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;state&lt;/code&gt;の&lt;code&gt;thresholdRatio&lt;/code&gt;プロパティはコメントによると、ある閾値にどれだけ近づいているかを表す、&lt;code&gt;0&lt;/code&gt;から&lt;code&gt;1&lt;/code&gt;までの値だ。&lt;code&gt;1&lt;/code&gt;のとき閾値に達したことを意味する。よって、ある閾値に達したとき&lt;code&gt;thresholdRatio&lt;/code&gt;が&lt;code&gt;1&lt;/code&gt;になり、&lt;code&gt;likedImageView&lt;/code&gt;または&lt;code&gt;nopeImageView&lt;/code&gt;のアルファ値が&lt;code&gt;1&lt;/code&gt;になって完全に表示されるようになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-[UIView mdc_swipeToChooseSetup:]&lt;/code&gt;は&lt;code&gt;UIView+MDCSwipeToChoose.m&lt;/code&gt;で定義されたカテゴリーによって拡張されたメソッドだ。このライブラリは&lt;code&gt;MDCSwipeToChooseView&lt;/code&gt;という専用のクラスだけでなく、&lt;code&gt;UIView&lt;/code&gt;のカテゴリーを提供することでより柔軟に実装できるようになっているが、その中心部分はこのカテゴリー内で実装しているようだ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;UIView+MDCSwipeToChoose.m:38&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- (void)mdc_swipeToChooseSetup:(MDCSwipeOptions *)options {
    self.mdc_options = options ? options : [MDCSwipeOptions new];
    self.mdc_viewState = [MDCViewState new];
    self.mdc_viewState.originalCenter = self.center;

    [self mdc_setupPanGestureRecognizer];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;self.mdc_options&lt;/code&gt;と&lt;code&gt;self.mdc_viewState&lt;/code&gt;を初期化している。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-[UIView mdc_setupPanGestureRecognizer]&lt;/code&gt;でジェスチャーのイベントハンドリングを実装しているのだろう。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;スワイプに合わせたViewの動き&lt;/h1&gt;
&lt;p&gt;これまで&lt;code&gt;MDCSwipeToChooseView&lt;/code&gt;および&lt;code&gt;UIView+MDCSwipeToChoose&lt;/code&gt;による拡張部分の初期化について見てきた。これからスワイプに合わせてViewをどのように動かしているのかについて詳細に見ていく。&lt;/p&gt;
&lt;h2&gt;UIView+MDCSwipeToChoose.m:104&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- (void)mdc_setupPanGestureRecognizer {
    SEL action = @selector(mdc_onSwipeToChoosePanGestureRecognizer:);
    UIPanGestureRecognizer *panGestureRecognizer =
    [[UIPanGestureRecognizer alloc] initWithTarget:self
                                            action:action];
    [self addGestureRecognizer:panGestureRecognizer];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;UIPanGestureRecognizer&lt;/code&gt;を初期化して&lt;code&gt;UIView&lt;/code&gt;に追加している。パンというジェスチャーはスワイプとかドラッグのことだ。&lt;/li&gt;
&lt;li&gt;スワイプされると&lt;code&gt;-[UIView mdc_onSwipeToChoosePanGestureRecognizer:]&lt;/code&gt;が呼ばれるようだ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;UIView+MDCSwipeToChoose.m:227&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- (void)mdc_onSwipeToChoosePanGestureRecognizer:(UIPanGestureRecognizer *)panGestureRecognizer {
    UIView *view = panGestureRecognizer.view;

    if (panGestureRecognizer.state == UIGestureRecognizerStateBegan) {
        self.mdc_viewState.originalCenter = view.center;

        // If the pan gesture originated at the top half of the view, rotate the view
        // away from the center. Otherwise, rotate towards the center.
        if ([panGestureRecognizer locationInView:view].y &amp;lt; view.center.y) {
            self.mdc_viewState.rotationDirection = MDCRotationAwayFromCenter;
        } else {
            self.mdc_viewState.rotationDirection = MDCRotationTowardsCenter;
        }
    } else if (panGestureRecognizer.state == UIGestureRecognizerStateEnded) {
        // Either move the view back to its original position or move it off screen.
        [self mdc_finalizePosition];
    } else {
        // Update the position and transform. Then, notify any listeners of
        // the updates via the pan block.
        CGPoint translation = [panGestureRecognizer translationInView:view];
        view.center = MDCCGPointAdd(self.mdc_viewState.originalCenter, translation);
        [self mdc_rotateForTranslation:translation
                     rotationDirection:self.mdc_viewState.rotationDirection];
        [self mdc_executeOnPanBlockForTranslation:translation];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;スワイプが始まったとき、ユーザーの指の位置がViewの上半分なら&lt;code&gt;MDCRotationAwayFromCenter&lt;/code&gt;すなわち&lt;code&gt;1.0&lt;/code&gt;、下半分なら&lt;code&gt;MDCRotationTowardsCenter&lt;/code&gt;すなわち&lt;code&gt;-1.0&lt;/code&gt;を&lt;code&gt;self.mdc_viewState.rotationDirection&lt;/code&gt;にセットしている。&lt;/li&gt;
&lt;li&gt;スワイプが終わったとき、&lt;code&gt;-[UIVIew mdc_finalizePosition]&lt;/code&gt;を呼ぶ。ここはあとで詳細に見ることにしてスキップする。&lt;/li&gt;
&lt;li&gt;スワイプ中
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-[UIPanGestureRecognizer translationInView:]&lt;/code&gt;によって最初に指が触れた点からの移動量を取得している。&lt;/li&gt;
&lt;li&gt;取得した移動量を&lt;code&gt;originalCenter&lt;/code&gt;に加えた値を&lt;code&gt;center&lt;/code&gt;とすることで、ユーザーの指の位置が常に&lt;code&gt;center&lt;/code&gt;になるようにViewを移動させているようだ。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-[UIView mdc_rotateForTranslation:rotationDirection:]&lt;/code&gt;によってViewを回転させているようだ。あとで詳細を見ることにする。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-[UIView mdc_executeOnPanBlockForTranslation:]&lt;/code&gt;はスワイプの状態から&lt;code&gt;thresholdRatio&lt;/code&gt;を計算したり&lt;code&gt;MDCPanState&lt;/code&gt;を生成したりして&lt;code&gt;self.mdc_options.onPan()&lt;/code&gt;の引数に渡して実行している。ここで、Viewの初期化時に指定した&lt;code&gt;onPan&lt;/code&gt;のブロックが実行されることになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;UIView+MDCSwipeToChoose.m:189&lt;/h2&gt;
&lt;p&gt;後回しにしていた&lt;code&gt;-[UIView mdc_rotateForTranslation:rotationDirection:]&lt;/code&gt;を先に見る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)mdc_rotateForTranslation:(CGPoint)translation
               rotationDirection:(MDCRotationDirection)rotationDirection {
    CGFloat rotation = MDCDegreesToRadians(translation.x/100 * self.mdc_options.rotationFactor);
    self.transform = CGAffineTransformRotate(CGAffineTransformIdentity,
                                             rotationDirection * rotation);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;x軸方向への移動量 / 100&lt;/code&gt;に定数倍したものをラジアンに変換して、&lt;code&gt;rotationDirection&lt;/code&gt;（&lt;code&gt;1.0&lt;/code&gt;or&lt;code&gt;-1.0&lt;/code&gt;）を掛けた量を回転させている。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;UIView+MDCSwipeToChoose.m:114&lt;/h2&gt;
&lt;p&gt;次に、スワイプが終了したときに呼ばれる&lt;code&gt;-[UIView mdc_finalizePosition]&lt;/code&gt;を見ていく。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)mdc_finalizePosition {
    MDCSwipeDirection direction = [self mdc_directionOfExceededThreshold];
    switch (direction) {
        case MDCSwipeDirectionRight:
        case MDCSwipeDirectionLeft: {
            CGPoint translation = MDCCGPointSubtract(self.center,
                                                     self.mdc_viewState.originalCenter);
            [self mdc_exitSuperviewFromTranslation:translation];
            break;
        }
        case MDCSwipeDirectionNone:
            [self mdc_returnToOriginalCenter];
            [self mdc_executeOnPanBlockForTranslation:CGPointZero];
            break;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-[UIView mdc_directionOfExceededThreshold]&lt;/code&gt;である閾値を超えた方向を取得しているようだ。&lt;/li&gt;
&lt;li&gt;取得した方向が左か右であれば&lt;code&gt;-[UIView mdc_exitSuperviewFromTranslation:]&lt;/code&gt;を呼び、どちらでもなかった場合は&lt;code&gt;-[UIView mdc_returnToOriginalCenter]&lt;/code&gt;と&lt;code&gt;-[UIView mdc_executeOnPanBlockForTranslation:]&lt;/code&gt;を呼んでいる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;UIView+MDCSwipeToChoose.m:215&lt;/h2&gt;
&lt;p&gt;まず閾値をを超えた方向を取得する部分から見ていく。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (MDCSwipeDirection)mdc_directionOfExceededThreshold {
    if (self.center.x &amp;gt; self.mdc_viewState.originalCenter.x + self.mdc_options.threshold) {
        return MDCSwipeDirectionRight;
    } else if (self.center.x &amp;lt; self.mdc_viewState.originalCenter.x - self.mdc_options.threshold) {
        return MDCSwipeDirectionLeft;
    } else {
        return MDCSwipeDirectionNone;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;どうやら閾値というのは&lt;code&gt;self.mdc_options.threshold&lt;/code&gt;のことのようだ。デフォルトでは&lt;code&gt;100.0&lt;/code&gt;だ。&lt;/li&gt;
&lt;li&gt;Viewの中心点のx座標がもともとの中心点のx座標から閾値以上移動した場合、右方向なら&lt;code&gt;Right&lt;/code&gt;、左方向なら&lt;code&gt;Left&lt;/code&gt;を返している。そうでなければ&lt;code&gt;None&lt;/code&gt;を返している。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;UIView+MDCSwipeToChoose.m:146&lt;/h2&gt;
&lt;p&gt;次に、上記の閾値を超えてどちらかの方向が返ってきた場合に呼ばれる&lt;code&gt;-[UIView mdc_exitSuperviewFromTranslation:]&lt;/code&gt;を見る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)mdc_exitSuperviewFromTranslation:(CGPoint)translation {
    MDCSwipeDirection direction = [self mdc_directionOfExceededThreshold];
    id&amp;lt;MDCSwipeToChooseDelegate&amp;gt; delegate = self.mdc_options.delegate;
    if ([delegate respondsToSelector:@selector(view:shouldBeChosenWithDirection:)]) {
        BOOL should = [delegate view:self shouldBeChosenWithDirection:direction];
        if (!should) {
            return;
        }
    }

    MDCSwipeResult *state = [MDCSwipeResult new];
    state.view = self;
    state.translation = translation;
    state.direction = direction;
    state.onCompletion = ^{
        if ([delegate respondsToSelector:@selector(view:wasChosenWithDirection:)]) {
            [delegate view:self wasChosenWithDirection:direction];
        }
    };
    self.mdc_options.onChosen(state);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;delegate&lt;/code&gt;に&lt;code&gt;view:shouldBeChosenWithDirection:&lt;/code&gt;が実装されていれば、それを呼び&lt;code&gt;NO&lt;/code&gt;が返ってきた場合そこで終了する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;MDCSwipeResult&lt;/code&gt;オブジェクトを初期化して&lt;code&gt;self.mdc_options.onChosen()&lt;/code&gt;に渡して実行している。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;MDCSwipeOptions.m:33&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;onChosen&lt;/code&gt;は何を参照しているのか確認する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (instancetype)init {
    self = [super init];
    if (self) {
        _swipeCancelledAnimationDuration = 0.2;
        _swipeCancelledAnimationOptions = UIViewAnimationOptionCurveEaseOut;
        _swipeAnimationDuration = 0.1;
        _swipeAnimationOptions = UIViewAnimationOptionCurveEaseIn;
        _rotationFactor = 3.f;

        _onChosen = [[self class] exitScreenOnChosenWithDuration:0.1
                                                         options:UIViewAnimationOptionCurveLinear];
    }
    return self;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;_onChosen&lt;/code&gt;は&lt;code&gt;+[MDCSwipeOptions exitScreenOnChosenWithDuration:options]&lt;/code&gt;の返り値を参照している。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;MDCSwipeOptions.m:50&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;+ (MDCSwipeToChooseOnChosenBlock)exitScreenOnChosenWithDuration:(NSTimeInterval)duration
                                                        options:(UIViewAnimationOptions)options {
    return ^(MDCSwipeResult *state) {
        CGRect destination = MDCCGRectExtendedOutOfBounds(state.view.frame,
                                                          state.view.superview.bounds,
                                                          state.translation);
        [UIView animateWithDuration:duration
                              delay:0.0
                            options:options
                         animations:^{
                             state.view.frame = destination;
                         } completion:^(BOOL finished) {
                             if (finished) {
                                 [state.view removeFromSuperview];
                                 state.onCompletion();
                             }
                         }];
    };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;このメソッドはブロックを返しているのであって、ブロックを実行しているわけではない。&lt;/li&gt;
&lt;li&gt;その内容としては、Viewをスーパービューの外にアニメーションつきで移動させ、完了後にそのViewをスーパービューから削除し、&lt;code&gt;state.onCompletion()&lt;/code&gt;を実行するというものだ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;UIView+MDCSwipeToChoose.m:146&lt;/h2&gt;
&lt;p&gt;いったん&lt;code&gt;-[UIView mdc_exitSuperviewFromTranslation:]&lt;/code&gt;に戻って&lt;code&gt;onCompletion&lt;/code&gt;を確認する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)mdc_exitSuperviewFromTranslation:(CGPoint)translation {
    // ...

    MDCSwipeResult *state = [MDCSwipeResult new];
    state.view = self;
    state.translation = translation;
    state.direction = direction;
    state.onCompletion = ^{
        if ([delegate respondsToSelector:@selector(view:wasChosenWithDirection:)]) {
            [delegate view:self wasChosenWithDirection:direction];
        }
    };
    self.mdc_options.onChosen(state);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Viewが枠外に消えた後に、&lt;code&gt;onChosen()&lt;/code&gt;の引数に渡された&lt;code&gt;state&lt;/code&gt;の&lt;code&gt;onCompletion&lt;/code&gt;が実行されるので、ここでは&lt;code&gt;delegate&lt;/code&gt;の&lt;code&gt;view:wasChosenWithDirection:&lt;/code&gt;が呼ばれることになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;UIView+MDCSwipeToChoose.m:131&lt;/h2&gt;
&lt;p&gt;続いて、&lt;code&gt;-[UIView mdc_finalizePosition]&lt;/code&gt;で閾値を超えなかった場合に呼ばれる2つのメソッドのうち、&lt;code&gt;-[UIView mdc_returnToOriginalCenter]&lt;/code&gt;を見る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)mdc_returnToOriginalCenter {
    [UIView animateWithDuration:self.mdc_options.swipeCancelledAnimationDuration
                          delay:0.0
                        options:self.mdc_options.swipeCancelledAnimationOptions
                     animations:^{
                         self.transform = CGAffineTransformIdentity;
                         self.center = self.mdc_viewState.originalCenter;
                     } completion:^(BOOL finished) {
                         id&amp;lt;MDCSwipeToChooseDelegate&amp;gt; delegate = self.mdc_options.delegate;
                         if ([delegate respondsToSelector:@selector(viewDidCancelSwipe:)]) {
                             [delegate viewDidCancelSwipe:self];
                         }
                     }];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;アニメーションつきで回転を打ち消し、もともとの中心点に移動させている。&lt;/li&gt;
&lt;li&gt;それらが完了したあと、&lt;code&gt;delegate&lt;/code&gt;の&lt;code&gt;viewDidCancelSwipe:&lt;/code&gt;を呼んでいる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;UIView+MDCSwipeToChoose.m:168&lt;/h2&gt;
&lt;p&gt;もう1つの&lt;code&gt;-[UIView mdc_executeOnPanBlockForTranslation:]&lt;/code&gt;を見る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)mdc_executeOnPanBlockForTranslation:(CGPoint)translation {
    if (self.mdc_options.onPan) {
        CGFloat thresholdRatio = MIN(1.f, fabsf(translation.x)/self.mdc_options.threshold);

        MDCSwipeDirection direction = MDCSwipeDirectionNone;
        if (translation.x &amp;gt; 0.f) {
            direction = MDCSwipeDirectionRight;
        } else if (translation.x &amp;lt; 0.f) {
            direction = MDCSwipeDirectionLeft;
        }

        MDCPanState *state = [MDCPanState new];
        state.view = self;
        state.direction = direction;
        state.thresholdRatio = thresholdRatio;
        self.mdc_options.onPan(state);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;中心点に戻る際の&lt;code&gt;onPan&lt;/code&gt;ブロックを実行している。そのために、&lt;code&gt;thresholdRatio&lt;/code&gt;を計算し&lt;code&gt;MDCPanState&lt;/code&gt;を初期化している。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>MDCSwipeToChooseを読んだ</title>
    <updated>2014-11-23T16:27:00+00:00</updated>
    <dc:date>2014-11-23T16:27:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/241/</id>
    <link href="https://blog.naoty.dev/241/"/>
    <summary>&lt;p&gt;UI周りの理解を深めるため、Slackが公開している&lt;a href=&quot;https://github.com/slackhq/SlackTextViewController&quot;&gt;https://github.com/slackhq/SlackTextViewController&lt;/a&gt;を読む。コミット番号は&lt;code&gt;9fcf06ac6f7004e4aacb6536b375d1cb03f08289&lt;/code&gt;だ。&lt;/p&gt;
&lt;p&gt;全部はさすがに読みきれないので、以下の気になるポイントに集中してコードを読んでいくことにする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;キーボードの表示／非表示に伴うレイアウトの調整。何も工夫しないとキーボードでViewが隠れてしまうはずだ。&lt;/li&gt;
&lt;li&gt;ユーザー名や絵文字の補完&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;TL;DR&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;キーボードの表示／非表示の際に送信される通知&lt;code&gt;UIKeyboardWillShowNotification&lt;/code&gt;等を使ってレイアウトを調整している。レイアウトはすべてAuto Layout上の制約をプログラムで制御することで調整している。例えば、キーボードの高さに併せてスクロールビューの高さを大きくしたり小さくしたりしている。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;UITextView&lt;/code&gt;上のカーソル位置が変更されるタイミングで、事前に登録されたプレフィックスにマッチするかどうかチェックしている。マッチすれば、補完候補を表示する&lt;code&gt;UITextView&lt;/code&gt;を表示し、それに併せて各Viewのレイアウトを調整している。&lt;/li&gt;
&lt;li&gt;全体を通して「キーボード等の状態が変化する」→「各Viewの適切な高さを計算する」→「&lt;code&gt;-[NSLayoutConstraint constant]&lt;/code&gt;を更新する」→「&lt;code&gt;-[CALayer layoutIfNeeded]&lt;/code&gt;を呼んで再描画する」という流れだった。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;初期化から表示まで&lt;/h1&gt;
&lt;p&gt;とりあえず、初期化から表示までの流れを先に抑えておく。&lt;/p&gt;
&lt;h2&gt;SlackTextViewController.m:115&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- (instancetype)initWithCoder:(NSCoder *)decoder
{
    NSAssert([self class] != [SLKTextViewController class], @&quot;Oops! You must subclass SLKTextViewController.&quot;);
    
    if (self = [super initWithCoder:decoder])
    {
        UITableViewStyle tableViewStyle = [[self class] tableViewStyleForCoder:decoder];
        UICollectionViewLayout *collectionViewLayout = [[self class] collectionViewLayoutForCoder:decoder];
        
        if ([collectionViewLayout isKindOfClass:[UICollectionViewLayout class]]) {
            [self collectionViewWithLayout:collectionViewLayout];
        }
        else if (tableViewStyle == UITableViewStylePlain || tableViewStyle == UITableViewStyleGrouped) {
            [self tableViewWithStyle:tableViewStyle];
        }
        else {
            return nil;
        }
        
        [self commonInit];
    }
    return self;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;NSAssert()&lt;/code&gt;は第一引数が&lt;code&gt;true&lt;/code&gt;であることを表明するために使われる。&lt;code&gt;false&lt;/code&gt;ならそこで第二引数のメッセージをログに出力して強制終了する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-[tableViewWithStyle:]&lt;/code&gt;がやっていることは主に2つ。
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;_tableView&lt;/code&gt;の初期化。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;_scrollViewProxy&lt;/code&gt;の初期化。これは実際には&lt;code&gt;_tableView&lt;/code&gt;を参照している。また、タップしたらキーボードを閉じる設定をしている。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-[commonInit]&lt;/code&gt;は名前の通り、他の初期化メソッド内でも呼ばれており、主に以下のようなことを行っている。
&lt;ul&gt;
&lt;li&gt;各状態プロパティの初期化。&lt;/li&gt;
&lt;li&gt;多数のオブザーバーを登録する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;SlackTextViewController.m:160&lt;/h2&gt;
&lt;p&gt;次に、ViewControllerが&lt;code&gt;self.view&lt;/code&gt;を初期化する際に呼ばれる&lt;code&gt;loadView&lt;/code&gt;を読む。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)loadView
{
    [super loadView];
        
    [self.view addSubview:self.scrollViewProxy];
    [self.view addSubview:self.autoCompletionView];
    [self.view addSubview:self.typingIndicatorView];
    [self.view addSubview:self.textInputbar];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;self.view&lt;/code&gt;を初期化したあと、&lt;code&gt;self.scrollViewProxy&lt;/code&gt;, &lt;code&gt;self.autoCompletionView&lt;/code&gt;, &lt;code&gt;self.typingIndicatorView&lt;/code&gt;, &lt;code&gt;self.textInputbar&lt;/code&gt;の4つのサブビューが追加されている。それぞれのサブビューは以下のようなものだ。
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;self.scrollViewProxy&lt;/code&gt;: 上でも見たように&lt;code&gt;self.tableView&lt;/code&gt;のこと。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;self.autoCompletionView&lt;/code&gt;: おそらく補完候補を表示する&lt;code&gt;UITableView&lt;/code&gt;だと思われる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;self.typingIndicatorView&lt;/code&gt;: 「◯◯が入力中…」のようなメッセージを表示するためのViewで、&lt;code&gt;SLKTextIndicatorView&lt;/code&gt;というカスタムViewとして定義されている。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;self.textInputbar&lt;/code&gt;: テキストの入力フォームや送信ボタンを含む&lt;code&gt;UIToolBar&lt;/code&gt;で、これも&lt;code&gt;SLKTextInputbar&lt;/code&gt;というカスタムViewとして定義されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;SlackTextViewController.m:165&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad
{
    [super viewDidLoad];
    
    [UIView performWithoutAnimation:^{
        [self reloadTextView];
        [self setupViewConstraints];
    }];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-[reloadTextView]&lt;/code&gt;はキャッシュされた入力テキストを復旧してTextFieldに表示している。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-[SlackTextViewController setupViewConstraints]&lt;/code&gt;は全体を通して重要なメソッドなので、詳細に見ていく。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;SlackTextViewController.m:1681&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- (void)setupViewConstraints
{
    NSDictionary *views = @{@&quot;scrollView&quot;: self.scrollViewProxy,
                            @&quot;autoCompletionView&quot;: self.autoCompletionView,
                            @&quot;typingIndicatorView&quot;: self.typingIndicatorView,
                            @&quot;textInputbar&quot;: self.textInputbar,
                            };
    
    [self.view addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@&quot;V:|[scrollView(0@750)][autoCompletionView(0)][typingIndicatorView(0)]-0@999-[textInputbar(&amp;gt;=0)]|&quot; options:0 metrics:nil views:views]];
    [self.view addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@&quot;H:|[scrollView]|&quot; options:0 metrics:nil views:views]];
    [self.view addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@&quot;H:|[autoCompletionView]|&quot; options:0 metrics:nil views:views]];
    [self.view addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@&quot;H:|[typingIndicatorView]|&quot; options:0 metrics:nil views:views]];
    [self.view addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@&quot;H:|[textInputbar]|&quot; options:0 metrics:nil views:views]];
    
    self.scrollViewHC = [self.view slk_constraintForAttribute:NSLayoutAttributeHeight firstItem:self.scrollViewProxy secondItem:nil];
    self.autoCompletionViewHC = [self.view slk_constraintForAttribute:NSLayoutAttributeHeight firstItem:self.autoCompletionView secondItem:nil];
    self.typingIndicatorViewHC = [self.view slk_constraintForAttribute:NSLayoutAttributeHeight firstItem:self.typingIndicatorView secondItem:nil];
    self.textInputbarHC = [self.view slk_constraintForAttribute:NSLayoutAttributeHeight firstItem:self.textInputbar secondItem:nil];
    self.keyboardHC = [self.view slk_constraintForAttribute:NSLayoutAttributeBottom firstItem:self.view secondItem:self.textInputbar];
    
    self.textInputbarHC.constant = [self minimumInputbarHeight];
    self.scrollViewHC.constant = [self appropriateScrollViewHeight];

    if (self.isEditing) {
        self.textInputbarHC.constant += self.textInputbar.accessoryViewHeight;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-[UIView addConstraints:]&lt;/code&gt;の部分は&lt;code&gt;self.view&lt;/code&gt;のサブビューに対する以下のような制約を追加している。
&lt;ul&gt;
&lt;li&gt;各サブビューの高さ、およびサブビュー間の垂直方向の余白を設定&lt;/li&gt;
&lt;li&gt;各サブビューの水平方向の親Viewとの余白はなし&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;各サブビュー間に制約が追加された結果、計算された制約の値をプロパティに保持する。このプロパティはレイアウトを調整する際にどんどん更新していくため重要。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;キーボードの表示／非表示に伴うレイアウトの調整&lt;/h1&gt;
&lt;p&gt;キーボードは&lt;code&gt;self.textInputbar&lt;/code&gt;内の&lt;code&gt;UITextField&lt;/code&gt;がfirstResponderになったときに表示されるはずだ。キーボードが表示される直前／直後にはそれぞれ&lt;code&gt;UIKeyboardWillShowNotification&lt;/code&gt;, &lt;code&gt;UIKeyboardDidShowNotification&lt;/code&gt;という通知がポストされる。そこで、この通知を監視するオブザーバーを探す。&lt;/p&gt;
&lt;h2&gt;SlackTextViewController.m:1719&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- (void)registerNotifications
{
    // Keyboard notifications
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(willShowOrHideKeyboard:) name:UIKeyboardWillShowNotification object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(willShowOrHideKeyboard:) name:UIKeyboardWillHideNotification object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(didShowOrHideKeyboard:) name:UIKeyboardDidShowNotification object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(didShowOrHideKeyboard:) name:UIKeyboardDidHideNotification object:nil];
    
    // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;UIKeyboardWillShowNotification&lt;/code&gt;がポストされたとき、&lt;code&gt;willShowOrHideKeyboard:&lt;/code&gt;が呼ばれるようになっている。また、&lt;code&gt;UIKeyboardDidShowNotification&lt;/code&gt;がポストされたとき、&lt;code&gt;didShowOrHideKeyboard:&lt;/code&gt;が呼ばれるようになっている。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;SlackTextViewController.m:1048&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;-[willShowOrHideKeyboard:]&lt;/code&gt;の中でレイアウトの変更に関わる部分を抽出した。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)willShowOrHideKeyboard:(NSNotification *)notification
{
    // ...
    
    // Updates the height constraints' constants
    self.keyboardHC.constant = [self appropriateKeyboardHeight:notification];
    self.scrollViewHC.constant = [self appropriateScrollViewHeight];
    
    // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;self.keyboardHC&lt;/code&gt;および&lt;code&gt;self.scrollViewHC&lt;/code&gt;は&lt;code&gt;-[setupViewConstraints]&lt;/code&gt;内で設定された、それぞれの高さに対する制約だ。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-[appropriateKeyboardHeight:notification]&lt;/code&gt;と&lt;code&gt;-[appropriateScrollViewHeight]&lt;/code&gt;で適切な高さを計算しているようなので、詳細に見ていく。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;SlackTextViewController.m:412&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- (CGFloat)appropriateKeyboardHeight:(NSNotification *)notification
{
    CGFloat keyboardHeight = 0.0;

    CGRect endFrame = [notification.userInfo[UIKeyboardFrameEndUserInfoKey] CGRectValue];
    
    // ...
    
    // Sets the minimum height of the keyboard
    if (self.isMovingKeyboard) {
        if (!UI_IS_IOS8_AND_HIGHER &amp;amp;&amp;amp; UI_IS_LANDSCAPE) {
            keyboardHeight = MIN(CGRectGetWidth([UIScreen mainScreen].bounds), CGRectGetHeight([UIScreen mainScreen].bounds));
            keyboardHeight -= MAX(endFrame.origin.x, endFrame.origin.y);
        }
        else {
            keyboardHeight = CGRectGetHeight([UIScreen mainScreen].bounds);
            keyboardHeight -= endFrame.origin.y;
        }
    }
    else {
        if ([notification.name isEqualToString:UIKeyboardWillShowNotification] || [notification.name isEqualToString:UIKeyboardDidShowNotification]) {
            CGRect convertedRect = [self.view convertRect:endFrame toView:self.view.window];
            keyboardHeight = CGRectGetHeight(convertedRect);
        }
        else {
            keyboardHeight = 0.0;
        }
    }
    
    // ...
    
    return keyboardHeight;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;引数で渡される&lt;code&gt;notification&lt;/code&gt;には&lt;code&gt;UIKeyboardWillShowNotification&lt;/code&gt;などが入る。これらの通知の&lt;code&gt;userInfo&lt;/code&gt;の&lt;code&gt;UIKeyboardFrameEndUserInfoKey&lt;/code&gt;にはキーボードが表示された後のframeを表すCGRectが含まれる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;self.isMovingKeyboard&lt;/code&gt;はキーボードが閉じようといるとき、または開こうとしているときに&lt;code&gt;YES&lt;/code&gt;となるようだ。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;self.isMovingKeyboard&lt;/code&gt;が&lt;code&gt;YES&lt;/code&gt;である場合、画面全体の高さからキーボードの&lt;code&gt;origin.y&lt;/code&gt;を引いた値を&lt;code&gt;keyboardHeight&lt;/code&gt;としている。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;self.isMovingKeyboard&lt;/code&gt;が&lt;code&gt;NO&lt;/code&gt;である場合、これからキーボードが表示されるかそれとも非表示になるかでまた分岐する。
&lt;ul&gt;
&lt;li&gt;非表示になる場合は0。&lt;/li&gt;
&lt;li&gt;表示する場合、キーボードのframeのWindow座標系を変換してその高さを取得し&lt;code&gt;keyboardHeight&lt;/code&gt;としている。キーボードの座標系はデバイスの向きを考慮していないため、Window座標系かView座標系に変換する必要がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Slacktextviewcontroller.m:456&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- (CGFloat)appropriateScrollViewHeight
{
    CGFloat height = self.view.bounds.size.height;
    
    height -= self.keyboardHC.constant;
    height -= self.textInputbarHC.constant;
    height -= self.autoCompletionViewHC.constant;
    height -= self.typingIndicatorViewHC.constant;
    
    if (height &amp;lt; 0) return 0;
    else return roundf(height);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;スクロールビューの高さは親Viewの高さからサブビューの高さを引いた余りとなっている。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;SlackTextViewController.m:1060&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;willShowOrHideKeyboard:&lt;/code&gt;に戻る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)willShowOrHideKeyboard:(NSNotification *)notification
{
    // ...
    
    // Updates the height constraints' constants
    self.keyboardHC.constant = [self appropriateKeyboardHeight:notification];
    self.scrollViewHC.constant = [self appropriateScrollViewHeight];
    
    // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;キーボードに関する通知によってキーボードの高さを計算し、それに合わせてスクロールビューの高さを調整していることがわかった。&lt;/li&gt;
&lt;li&gt;ただ、&lt;code&gt;constant&lt;/code&gt;に値を代入してもすぐに反映されるわけではないため、どこかで再描画をリクエストしているはずだ。キーボードが表示されたあとに呼ばれる&lt;code&gt;didShowOrHideKeyboard:&lt;/code&gt;を見る。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Slacktextviewcontroller.m:1112&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;-[didShowOrHideKeyboard:]&lt;/code&gt;の中でレイアウトの変更に関わる部分を探す。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)didShowOrHideKeyboard:(NSNotification *)notification
{
    // ...

    [self reloadInputAccessoryViewIfNeeded];
    [self updateKeyboardDismissModeIfNeeded];

    // Very important to invalidate this flag after the keyboard is dismissed or presented
    self.movingKeyboard = NO;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-[reloadInputAccessoryViewIfNeeded]&lt;/code&gt;で後ほど出てくる&lt;code&gt;textView.inputAccessoryView&lt;/code&gt;が初期化される。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-[updatekeyboarddismissmodeifneeded]&lt;/code&gt;を詳しく見る。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Slacktextviewcontroller.m:993&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- (void)updateKeyboardDismissModeIfNeeded
{
    // Skips if the keyboard panning is disabled
    if (!self.isKeyboardPanningEnabled) {
        return;
    }
    
    UIScrollView *scrollView = self.scrollViewProxy;
    UIScrollViewKeyboardDismissMode dismissMode = scrollView.keyboardDismissMode;
    
    BOOL isPannable = self.textView.inputAccessoryView ? YES : NO;
    
    // Enables the keyboard dismiss mode
    if (dismissMode == UIScrollViewKeyboardDismissModeNone &amp;amp;&amp;amp; isPannable) {
        scrollView.keyboardDismissMode = UIScrollViewKeyboardDismissModeInteractive;
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(didChangeKeyboardFrame:) name:SLKInputAccessoryViewKeyboardFrameDidChangeNotification object:nil];
    }
    // Disables the keyboard dismiss mode
    else if (dismissMode == UIScrollViewKeyboardDismissModeInteractive &amp;amp;&amp;amp; !isPannable) {
        scrollView.keyboardDismissMode = UIScrollViewKeyboardDismissModeNone;
        [[NSNotificationCenter defaultCenter] removeObserver:self name:SLKInputAccessoryViewKeyboardFrameDidChangeNotification object:nil];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;UIScrollView&lt;/code&gt;の&lt;code&gt;keyboardDismissMode&lt;/code&gt;というプロパティはiOS 7から登場したプロパティで、スクロールビューがドラッグされたときのキーボードの振る舞いを以下の値で指定できる。
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;UIScrollViewKeyboardDismissModeNone&lt;/code&gt;: ドラッグでキーボードを閉じない。デフォルト値。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;UIScrollViewKeyboardDismissModeOnDrag&lt;/code&gt;: ドラッグが始まったときにキーボードを閉じる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;UIScrollViewKeyboardDismissModeInteractive&lt;/code&gt;: スクロールビューから下にドラッグするとキーボードを閉じ、途中で上にドラッグすると閉じるのをキャンセルできる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;UITextView&lt;/code&gt;の&lt;code&gt;inputAccessoryView&lt;/code&gt;はキーボードの上に出てくる、よく「次へ」とか「閉じる」のようなボタンを載せるViewのこと。キーボードが表示され&lt;code&gt;-[didShowOrHideKeyboard:]&lt;/code&gt;が呼ばれる中で初期化されているため、&lt;code&gt;isPannable&lt;/code&gt;は&lt;code&gt;YES&lt;/code&gt;となっているはず。&lt;/li&gt;
&lt;li&gt;よって、&lt;code&gt;keyboardDismissMode&lt;/code&gt;が&lt;code&gt;UIScrollViewKeyboardDismissModeInteractive&lt;/code&gt;に変更され、&lt;code&gt;SLKInputAccessoryViewKeyboardFrameDidChangeNotification&lt;/code&gt;という通知に対して&lt;code&gt;didChangeKeyboardFrame&lt;/code&gt;というメソッドが呼ばれるように登録される。
&lt;ul&gt;
&lt;li&gt;この通知は&lt;code&gt;textView&lt;/code&gt;の&lt;code&gt;center&lt;/code&gt;（iOS8以降場合）または&lt;code&gt;frame&lt;/code&gt;（それ未満の場合）が変更されたときに送信される。&lt;/li&gt;
&lt;li&gt;つまり、&lt;code&gt;textView&lt;/code&gt;の描画領域が変更されたときに、&lt;code&gt;-[didChangeKeyboardFrame:]&lt;/code&gt;が呼ばれることになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;SlackTextViewController.m:1150&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- (void)didChangeKeyboardFrame:(NSNotification *)notification
{
    // ...
    
    self.keyboardHC.constant = [self appropriateKeyboardHeight:notification];
    self.scrollViewHC.constant = [self appropriateScrollViewHeight];
    
    // ...
    
    [self.view layoutIfNeeded];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;再び2つの&lt;code&gt;HC&lt;/code&gt;（高さに対する制約）の値を更新している。&lt;/li&gt;
&lt;li&gt;最後に&lt;code&gt;-[CALayer layoutIfNeeded]&lt;/code&gt;を呼んでいる。このメソッドは描画が必要な上位レイヤーが見つからなくなるまでツリーを遡り、描画が必要なレイヤー全体を描画する。この段階で制約に対する変更が反映されることになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ここまでのおさらい&lt;/h2&gt;
&lt;p&gt;ここまで、キーボードの表示／非表示に伴うレイアウトの調整についてどのように実装されているのか調べてきた。キーボードの表示からレイアウトの調整が反映されるまで、おおまかに以下のような流れで処理が進行する。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ユーザーが入力を開始する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;UIKeyboardWillShowNotification&lt;/code&gt;が送信され、オブザーバーによって&lt;code&gt;-[willShowOrHideKeyboard:]&lt;/code&gt;が呼ばれる。キーボードの高さとスクロールビューの適切な高さが再計算され、高さの制約上の数値が更新される（ここではまだViewに反映されない）。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;UIKeyboardDidShowNotification&lt;/code&gt;が送信され、オブザーバーによって&lt;code&gt;-[didShowOrHideKeyboard:]&lt;/code&gt;が呼ばれる。&lt;code&gt;textView&lt;/code&gt;の&lt;code&gt;frame&lt;/code&gt;の更新時に&lt;code&gt;-[didChangeKeyboardFrame:]&lt;/code&gt;を呼ぶようにオブザーバーに登録する。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;何かしらのタイミング&lt;/strong&gt; で&lt;code&gt;textView&lt;/code&gt;の&lt;code&gt;frame&lt;/code&gt;が更新され、オブザーバーによって&lt;code&gt;-[didChangeKeyboardFrame:]&lt;/code&gt;が呼ばれる。再度、キーボードとスクロールビューの高さが計算され設定される。そして、&lt;code&gt;-[CALayer layoutIfNeeded]&lt;/code&gt;によって変更された制約上の値がViewに反映され再描画される。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ここで&lt;code&gt;textView&lt;/code&gt;の&lt;code&gt;frame&lt;/code&gt;が更新されるのはどのタイミングか考えてみると、2つ考えられる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;textView&lt;/code&gt;の中身のテキストの行数が変更された場合。&lt;code&gt;textView&lt;/code&gt;の中でテキストが改行されると、当然その高さが変わるのでそれに併せてスクロールビューの高さを小さくしなければならなくなる。そういった場合に対処する実装だと思う。&lt;/li&gt;
&lt;li&gt;ユーザーによってtextViewの位置が変更された場合。&lt;code&gt;scrollViewProxy&lt;/code&gt;の&lt;code&gt;keyboardDismissMode&lt;/code&gt;は&lt;code&gt;UIScrollViewKeyboardDismissModeInteractive&lt;/code&gt;となっているため、ユーザーの操作によってキーボードを閉じることができる。キーボードを閉じる動作をした場合、当然&lt;code&gt;frame&lt;/code&gt;も変更されるのでこのタイミングでも&lt;code&gt;-[didChangeKeyboardFrame:]&lt;/code&gt;が呼ばれることになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ユーザー名や絵文字の補完&lt;/h1&gt;
&lt;p&gt;続いて、ユーザー名や絵文字の補完がどのように実装されているのか調べる。ドキュメントによると、補完機能を利用する場合は&lt;code&gt;SlackTextViewController&lt;/code&gt;のサブクラスは以下のような実装を行う必要がある。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;-[SlackTextViewController registerPrefixesForAutoCompletion:]&lt;/code&gt;を呼んで自動補完を起動するプレフィックスを登録する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-[SlackTextViewController canShowAutoCompletion]&lt;/code&gt;を実装して、自動補完Viewを表示するかどうかを&lt;code&gt;BOOL&lt;/code&gt;で返すようにする。このメソッドはテキストが入力されたとき上で登録したプレフィックスを発見した場合に呼ばれる。自動補完Viewは&lt;code&gt;UITableView&lt;/code&gt;のインスタンスであり、自由にカスタマイズできる。自動補完の候補はこのメソッドの中で用意する。&lt;/li&gt;
&lt;li&gt;自動補完Viewの高さを返すメソッド&lt;code&gt;heightForAutoCompletionView&lt;/code&gt;を実装する。&lt;/li&gt;
&lt;li&gt;自動補完の候補が選択された場合、自動補完Viewの&lt;code&gt;-[UITableViewDelegate tableView:didSelectRowAtIndexPath:]&lt;/code&gt;が呼ばれるので、この中で&lt;code&gt;-[SlackTextViewController acceptAutoCompletionWithString:]&lt;/code&gt;を呼ぶと選択されたテキストが補完される。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これらのメソッドの実装を見ていくことにする。&lt;/p&gt;
&lt;h2&gt;SlackTextViewController.m:1279&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- (void)registerPrefixesForAutoCompletion:(NSArray *)prefixes
{
    NSMutableArray *array = [NSMutableArray arrayWithArray:self.registeredPrefixes];
    
    for (NSString *prefix in prefixes) {
        // Skips if the prefix is not a valid string
        if (![prefix isKindOfClass:[NSString class]] || prefix.length == 0) {
            continue;
        }
        
        // Adds the prefix if not contained already
        if (![array containsObject:prefix]) {
            [array addObject:prefix];
        }
    }
    
    if (_registeredPrefixes) {
        _registeredPrefixes = nil;
    }
    
    _registeredPrefixes = [[NSArray alloc] initWithArray:array];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;内部的にミュータブルな配列に変換してプレフィックスを追加したあと、その結果をイミュータブルな配列に変換したものをインスタンス変数に入れている。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;SlackTextViewController.m:1575&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- (void)textViewDidChangeSelection:(SLKTextView *)textView
{
    // The text view must be first responder
    if (![self.textView isFirstResponder]) {
        return;
    }
    
    // Skips if the loupe is visible or if there is a real text selection
    if (textView.isLoupeVisible || self.textView.selectedRange.length &amp;gt; 0) {
        return;
    }
    
    // Process the text at every caret movement
    [self processTextForAutoCompletion];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;textView&lt;/code&gt;の選択範囲、つまりカーソル位置が変わったとき&lt;code&gt;-[UITextViewDelegate textViewDidChangeSelection:]&lt;/code&gt;が呼ばれる。&lt;/li&gt;
&lt;li&gt;この中で呼ばれる&lt;code&gt;-[SlackTextViewController processTextForAutoCompletion]&lt;/code&gt;の中で、さらに呼ばれる&lt;code&gt;-[SlackTextViewController handleProcessesWord:range:]&lt;/code&gt;を見る。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;SlackTextViewController.m:1343&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- (void)handleProcessedWord:(NSString *)word range:(NSRange)range
{
    // ...
    
    BOOL canShow = [self canShowAutoCompletion];
    
    // Reload the tableview before showing it
    [self.autoCompletionView reloadData];
    [self.autoCompletionView setContentOffset:CGPointZero];
    
    [self showAutoCompletionView:canShow];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-[UITableView reloadData]&lt;/code&gt;の前に&lt;code&gt;-[SlackTextViewController canShowAutoCompletion]&lt;/code&gt;が呼ばれているので、ドキュメントの通り、このタイミングで補完候補を用意する必要がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;SlackTextViewController.m:1417&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- (void)showAutoCompletionView:(BOOL)show
{
    CGFloat viewHeight = show ? [self heightForAutoCompletionView] : 0.0;
    
    // ...
    
    self.autoCompletionViewHC.constant = viewHeight;
    self.autoCompleting = show;
    
    // Toggles auto-correction if requiered
    [self enableTypingSuggestionIfNeeded];
    
    [self.view slk_animateLayoutIfNeededWithBounce:self.bounces
                                           options:UIViewAnimationOptionCurveEaseInOut|UIViewAnimationOptionLayoutSubviews|UIViewAnimationOptionBeginFromCurrentState
                                        animations:NULL];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;ドキュメントの通り、&lt;code&gt;-[SlackTextViewController heightForAutoCompletionView]&lt;/code&gt;を実装して自動補完Viewの高さを返すように実装しておくと、その値が&lt;code&gt;autoCompletionViewHC.constant&lt;/code&gt;にセットされる。&lt;/li&gt;
&lt;li&gt;最後に&lt;code&gt;-[UIView slk_animateLayoutIfNeededWithBounce:options:animations]&lt;/code&gt;によってアニメーションつきで再描画され、セットされた値が反映される。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;SlackTextViewController.m:1394&lt;/h2&gt;
&lt;p&gt;最後に、選択したテキストが補完される部分の実装を見ていく。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)acceptAutoCompletionWithString:(NSString *)string
{
    if (string.length == 0) {
        return;
    }
    
    SLKTextView *textView = self.textView;
    
    NSRange range = NSMakeRange(self.foundPrefixRange.location+1, self.foundWord.length);
    NSRange insertionRange = [textView slk_insertText:string inRange:range];
    
    textView.selectedRange = NSMakeRange(insertionRange.location, 0);
    
    [self cancelAutoCompletion];
    
    [textView slk_scrollToCaretPositonAnimated:NO];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;引数の&lt;code&gt;string&lt;/code&gt;に選択された文字列が入っている。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-[UITextView slk_insertText:]&lt;/code&gt;で選択された文字列を&lt;code&gt;textView&lt;/code&gt;に挿入しているようだ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;UITextView+SLKAdditions.m:90&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- (NSRange)slk_insertText:(NSString *)text inRange:(NSRange)range
{
    // ...
    
    // Append the new string at the caret position
    if (range.length == 0)
    {
        NSString *leftString = [self.text substringToIndex:range.location];
        NSString *rightString = [self.text substringFromIndex: range.location];
        
        self.text = [NSString stringWithFormat:@&quot;%@%@%@&quot;, leftString, text, rightString];
        
        range.location += [text length];
        return range;
    }
    // Some text is selected, so we replace it with the new text
    else if (range.location != NSNotFound &amp;amp;&amp;amp; range.length &amp;gt; 0)
    {
        self.text = [self.text stringByReplacingCharactersInRange:range withString:text];
        
        return NSMakeRange(range.location+[self.text rangeOfString:text].length, text.length);
    }
    
    // No text has been inserted, but still return the caret range
    return self.selectedRange;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-[NSRange length]&lt;/code&gt;が&lt;code&gt;0&lt;/code&gt;の場合、何も選択されていない状態なので、カーソルのある位置に足りない部分の文字列を挿入している。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-[NSRange length]&lt;/code&gt;が&lt;code&gt;1&lt;/code&gt;以上の場合、文字列が選択されている状態なので、補完されるテキストと置換する。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>SlackTextViewControllerを読んだ</title>
    <updated>2014-11-18T21:23:00+00:00</updated>
    <dc:date>2014-11-18T21:23:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/240/</id>
    <link href="https://blog.naoty.dev/240/"/>
    <summary>&lt;p&gt;自分のTwitterアカウントをコピーするbotを簡単に作れるmirror botというものを作りました。&lt;a href=&quot;https://twitter.com/naoty_bot&quot;&gt;@naoty_bot&lt;/a&gt;はこれを使って作りました。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/naoty_k&quot;&gt;@naoty_k&lt;/a&gt; なんでわざわざ大金払って太ろうとしてるの？バカなの？&lt;/p&gt;
&lt;p&gt;— なおてぃー（bot） (@naoty_bot) &lt;a href=&quot;https://twitter.com/naoty_bot/status/531779458177323009&quot;&gt;2014, 11月 10&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1&gt;コピーbotを作る手順&lt;/h1&gt;
&lt;p&gt;１. bot用のアカウントを作ります。&lt;/p&gt;
&lt;p&gt;２. 人間とbotそれぞれのアカウントでTwitterアプリケーションを作ります。&lt;a href=&quot;https://apps.twitter.com/app/new&quot;&gt;ここ&lt;/a&gt;から作れます。そして、人間とbotの両方のアカウント用の「Consumer Key」「Consumer Secret」「Access Token」「Access Token Secret」を取得します（下のスクショのモザイクかかってるところです）。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20141110/20141110230321.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20141110/20141110230321.png&quot; alt=&quot;f:id:naoty_k:20141110230321p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20141110230321p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20141110/20141110230752.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20141110/20141110230752.png&quot; alt=&quot;f:id:naoty_k:20141110230752p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20141110230752p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20141110/20141110230803.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20141110/20141110230803.png&quot; alt=&quot;f:id:naoty_k:20141110230803p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20141110230803p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;追記&lt;/strong&gt; : bot用のアプリケーションを作成する際、権限を &lt;strong&gt;Read and Write&lt;/strong&gt; にする必要があります。一度Read Onlyでアクセストークンを発行している場合は権限を変更した後もう一度発行しなおして、Herokuアプリケーションの環境変数を新しいアクセストークンに替えてください。&lt;/p&gt;
&lt;p&gt;３. こちらのHerokuボタンを押します（別サイトに飛びます）。もしHerokuのアカウントがなければ作ってください。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://heroku.com/deploy?template=https://github.com/naoty/mirror_bot&quot;&gt;&lt;img src=&quot;https://www.herokucdn.com/deploy/button.png&quot; alt=&quot;Deploy&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;４. 適当なHerokuアプリ名を入れて、「Env」の各項目に2.で取得した「Consumer Key」「Consumer Secret」「Access Token」「Access Token Secret」を入力します。人間のアカウントのものは「HUMAN_*」に、botのアカウントのものは「BOT_*」に入れていきます。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20141110/20141110232038.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20141110/20141110232038.png&quot; alt=&quot;f:id:naoty_k:20141110232038p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20141110232038p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;５．「Deploy for Free」ボタンを押してしばらく待ちます。Herokuにアプリケーションがデプロイされます。その後、アプリのダッシュボード画面で以下のようにdynosを1xにすると、アプリケーションが起動します。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20141110/20141110232352.gif&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20141110/20141110232352.gif&quot; alt=&quot;f:id:naoty_k:20141110232352g:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20141110232352g:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;６．終わり。&lt;/p&gt;
&lt;h1&gt;コピーbotの機能&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;過去のtweetからランダムに選んで投稿します。ランダムに選ぶとき、現在の時間帯を考慮します。だから、朝には朝っぽいことをtweetするはずです。&lt;/li&gt;
&lt;li&gt;一日のtweet数やどの時間帯にtweetされる傾向があるかを計算し、そのパターンに従います。例えば、一日にたくさんtweetする人のbotはたくさんtweetしますし、あなたが通勤時間と帰宅時間にtweetする傾向があると、botもその時間帯にtweetする確率が高いです。&lt;/li&gt;
&lt;li&gt;話しかけるとreplyを返します。replyは過去にあなたがその人に返したreplyからランダムに選ばれます。&lt;/li&gt;
&lt;li&gt;あなたがfavりやすいtweetを学習し、favります。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;技術的な話&lt;/h1&gt;
&lt;h2&gt;tweetするタイミングの決定&lt;/h2&gt;
&lt;p&gt;人間のtweetはHeroku Postgresqlのfree planの上限である10000レコードまで保存されます（上限を超えると古い順に消します）。そのとき、一日の中で何分目に投稿されたかを同時に記録します。たとえば、01:00の投稿は60分目だし、02:00の投稿は120分目、23:59の投稿は1439分目となります。すると、投稿数が多い分と少ない分がわかります。なので、&lt;code&gt;n分に投稿される確率＝n分の投稿数／総投稿数&lt;/code&gt;を計算することができます。ここから0分から1359分までの確率分布を作ることができます。この確率分布を累積分布にすると実装が簡単になります。そして、0から1までの乱数を生成して累積分布上の重なる分数をbotがtweetする分数として決定します。これを一日にtweetする回数分行い、その日tweetする分を事前に決定しておきます。&lt;/p&gt;
&lt;p&gt;以上のようなことを行っているのが&lt;code&gt;./lib/mirror_bot/scheduler.rb&lt;/code&gt;というファイルです。&lt;/p&gt;
&lt;h2&gt;favりやすいtweetの学習と分類&lt;/h2&gt;
&lt;p&gt;人間は大量に流れてくるtweetの中から特定のtweetだけを選んでfavっています。この行動は大量のメールの中から迷惑メールだけをゴミ箱送りにする行動と似ています。つまり、大量のデータから特定のカテゴリーに含まれるものを識別する、という問題に一般化できると考えました。そこで、スパムフィルタリングと同じアルゴリズムで、大量のtweetから特定のtweetだけをfavoriteというカテゴリーに分類する実装をしました。&lt;/p&gt;
&lt;p&gt;スパムフィルタリングの実装はごく普通のベイジアンフィルタです。簡単に言ってしまうと、favられたtweetに含まれやすい単語とか含まれにくい単語を調べていくということをしていきます。形態素解析には&lt;a href=&quot;https://github.com/todesking/okura&quot;&gt;okura&lt;/a&gt;を使いました。とても便利でした。各単語の各カテゴリーに含まれた回数はRedis（redistogo）に保存しています。&lt;/p&gt;
&lt;p&gt;以上のようなことを行っているのが&lt;code&gt;./lib/mirror_bot/classifier.rb&lt;/code&gt;というファイルです。&lt;/p&gt;
&lt;h2&gt;事前学習とHerokuボタン&lt;/h2&gt;
&lt;p&gt;以上の2つのモジュール、schedulerとclassifierを機能させるには事前に多くのデータを学習させることが必要です。schedulerについては過去3,200件のtweet、classifierについては800件ずつのfavったtweetとfavってないtweetを学習させています。これを行っているのがtrainerです。trainerは&lt;code&gt;./lib/mirror_bot/trainer.rb&lt;/code&gt;で定義されており、&lt;code&gt;./bin/mirror_bot&lt;/code&gt;スクリプトから実行します。&lt;/p&gt;
&lt;p&gt;Herokuボタンからbotをデプロイする場合、デプロイして起動するまでにtrainerを実行する必要があります。Herokuボタンによるデプロイを設定する&lt;code&gt;app.json&lt;/code&gt;には&lt;code&gt;scripts&lt;/code&gt;という項目があり、こうしたセットアップのための設定が可能です。以下のように指定するだけです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &quot;scripts&quot;: {
        &quot;postdeploy&quot;: &quot;bundle exec sequel -m migrations $DATABASE_URL &amp;amp;&amp;amp; bin/mirror_bot train scheduler &amp;amp;&amp;amp; bin/mirror_bot train classifier&quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでデプロイしてから起動する直前に事前学習を実行することができました。&lt;/p&gt;
&lt;h1&gt;なぜ作ったか&lt;/h1&gt;
&lt;p&gt;最近、機械学習とか自然言語処理に興味が出てきて勉強をしはじめたのですが、何か具体的な目標がほしいと思って「ちょっと賢いbot」を作ることにしました。いろいろ試行錯誤した結果、自分の行動パターンを学習してまねするbotを作ることにしました。&lt;/p&gt;
&lt;h1&gt;得られた知見&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;botっぽいアイコンは&lt;a href=&quot;http://robohash.org/&quot;&gt;http://robohash.org/&lt;/a&gt;で生成できて便利。&lt;/li&gt;
&lt;li&gt;botによる発言を自動生成させようと試行錯誤したけど、結局コピーにすることにしました。まず、マルコフ連鎖を使った文章生成はbotっぽいけど人間らしさはないので、今回は却下。次に、word2vecを使って文章に含まれる単語を類義語と入れ替えることで似たような文章の生成を試みました。word2vecをRubyから使う術がないので、別プロセスでPythonのgensimを使った類義語サーバーを立ててプロセス間通信でRubyに返すみたいな実装をしてみました。ですが、これだとそもそもHerokuの無料枠では不可能でした。さらに、word2vecで使われるモデルファイルが大きすぎてディスクにのっかりません。VPSで挑戦してみましたが、今度は1GBのメモリにのっかりきらずに動きませんでした。思ったほど意味の通じる文章を生成できるわけでもなかったので、この方法は諦めました。&lt;/li&gt;
&lt;li&gt;herokuのオペレーションをスムーズに進めるときに&lt;a href=&quot;https://github.com/ddollar/heroku-config&quot;&gt;https://github.com/ddollar/heroku-config&lt;/a&gt;と&lt;a href=&quot;https://github.com/ddollar/heroku-redis-cli&quot;&gt;https://github.com/ddollar/heroku-redis-cli&lt;/a&gt;が便利でした。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4873113644/hatena-blog-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51FgSThMzVL._SL160_.jpg&quot; alt=&quot;集合知プログラミング&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;集合知プログラミング&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4873113644/hatena-blog-22/&quot;&gt;集合知プログラミング&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;作者: Toby Segaran,當山仁健,鴨澤眞夫&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;出版社/メーカー: オライリージャパン&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発売日: 2008/07/25&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;メディア: 大型本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;購入: 91人 クリック: 2,220回&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4873113644/hatena-blog-22&quot;&gt;この商品を含むブログ (277件) を見る&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4274066649/hatena-blog-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51Al%2BAe8d1L._SL160_.jpg&quot; alt=&quot;はじめてのAIプログラミング―C言語で作る人工知能と人工無能&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;はじめてのAIプログラミング―C言語で作る人工知能と人工無能&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4274066649/hatena-blog-22/&quot;&gt;はじめてのAIプログラミング―C言語で作る人工知能と人工無能&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;作者: 小高知宏&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;出版社/メーカー: オーム社&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発売日: 2006/10&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;メディア: 単行本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;クリック: 112回&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4274066649/hatena-blog-22&quot;&gt;この商品を含むブログ (24件) を見る&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.oreilly.co.jp/books/9784873116839/&quot;&gt;word2vecによる自然言語処理&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>自分をコピーするbotを作る</title>
    <updated>2014-11-11T15:10:00+00:00</updated>
    <dc:date>2014-11-11T15:10:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/239/</id>
    <link href="https://blog.naoty.dev/239/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/cocoapods-src&quot;&gt;naoty/cocoapods-src&lt;/a&gt;を使う。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;coocapods
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;cocoapods-src
&lt;/pre&gt;
&lt;pre lang=&quot;yaml:~/.cocoapods/.podrc&quot;&gt;&lt;code&gt;cocoapods-src_use_ghq: true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;pod install&lt;/code&gt;するとインストールしたライブラリのソースコードを自動的に&lt;code&gt;ghq get&lt;/code&gt;してくれる。&lt;/p&gt;</summary>
    <title>pod installしたら自動的にghq getする</title>
    <updated>2014-10-22T18:18:00+00:00</updated>
    <dc:date>2014-10-22T18:18:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/238/</id>
    <link href="https://blog.naoty.dev/238/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;http://blog.kentarok.org/entry/2014/06/03/135300&quot;&gt;ghqを使ったローカルリポジトリの統一的・効率的な管理について - delirious thoughts&lt;/a&gt;を拝見して良さそうだったので、iOS開発にも持ち込むためCocoaPodsのプラグインを書いた。20行くらいしか書いてないし、ghqとの連携もまだ実装できてないけど、取り急ぎ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/cocoapods-src&quot;&gt;naoty/cocoapods-src · GitHub&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;使い方&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ gem install cocoapods-src
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cocoapodsは入っている前提で、cocoapods-srcをインストールする。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pod install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;インストールすると、あとは&lt;code&gt;pod install&lt;/code&gt;すれば勝手にpodsを&lt;code&gt;git clone&lt;/code&gt;してくれる。今のところ&lt;code&gt;~/.cocoapods/src/&lt;/code&gt;に以下のような感じでダウンロードされる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ tree ~/.cocoapods/src -I .git -L 2
.cocoapods/src
├── .DS_Store
├── AFNetworking
│   ├── .cocoadocs.yml
│   ├── .gitignore
│   ├── .travis.yml
│   ├── AFNetworking
│   ├── AFNetworking.podspec
│   ├── AFNetworking.xcworkspace
│   ├── CHANGES
│   ├── CONTRIBUTING.md
│   ├── Example
│   ├── LICENSE
│   ├── README.md
│   ├── Rakefile
│   ├── Tests
│   └── UIKit+AFNetworking
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;今後&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ghq連携&lt;/li&gt;
&lt;li&gt;git以外のVCSのサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;追記（10/22）&lt;/h2&gt;
&lt;p&gt;0.2.0にアップデートして、ghqと連携できるようになった。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~/.podrc&lt;/code&gt;、&lt;code&gt;~/.cocoapods/.podrc&lt;/code&gt;、&lt;code&gt;./.podrc&lt;/code&gt;のいずれかに以下のような設定を書くと&lt;code&gt;git clone&lt;/code&gt;の代わりにghqを使ってダウンロードする。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cocoapods-src_use_ghq: true
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>pod installしたらgit cloneしてくれるヤツ書いた</title>
    <updated>2014-10-20T00:15:00+00:00</updated>
    <dc:date>2014-10-20T00:15:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/237/</id>
    <link href="https://blog.naoty.dev/237/"/>
    <summary>&lt;p&gt;「集合知プログラミング」という本を先週から読み始めた。この本は機械学習をテーマとしていて、現実にありそうな問題（例えば、映画の評点から似ているユーザーを推薦するとか、数ある旅行プランの組み合わせから最適なプランを選択するとか）を題材にさまざまなアルゴリズムをチュートリアル形式で学んでいける。登場するサンプルコードはすべてPythonで書かれているため、まずこの本を読む前に軽くPythonについて勉強した。機械学習の本というと、むずかしい数式がたくさんでてきて近寄りがたいイメージがあるのだけど、この本についてはほとんど数式は出てこないので、カジュアルに読み進められる。&lt;/p&gt;
&lt;p&gt;まだ半分も進んでないけど、その中で一番おもしろかったのが最適化アルゴリズムの話だった。ある最適な値を求めたいとき、「となりあう値と比較して良い方を選択する」というのを繰り返していくとどこか最適な値で落ち着くはずというアルゴリズム（ヒルクライム）があるのだけど、これだと局所最適に陥ってしまうということを最近勉強した。つまり、全体を見渡すともっと最適な値があるのだけど、近くの値とだけ比較しているとそれを見逃してしまうということだ。また、別のアルゴリズム（模擬アニーリング）は、試行回数が少ないうちは悪い結果を受け入れ、回数を経るにつれてその悪い結果を受け入れ難くしていくことで局所最適を回避する。&lt;/p&gt;
&lt;p&gt;これはいろんなところで当てはまりそうな考え方だなと思った。見える範囲、理解できる範囲だけで最適な選択をとろうとするとより適切な解を見落としてしまう。若いうちは結果が悪かろうともそれを受け止めることで局所最適を回避し全体最適に近づくことができるのかもしれない。&lt;/p&gt;
&lt;p&gt;この本を読もうと思った理由としては、いろんな領域と機械学習を組み合わせるとなんか面白いものが作れそうな気がしたから。これまで自分が作ってきたソフトウェアの中で自分自身気に入っているものの多くは別の領域のアイデアを持ち込むところから生まれている。だから、組み合わせの可能性が大きい領域を何か新しく学びたいと思ったときに機械学習というものが浮かんでてきてこの本から取り組んでみることにした。今は「iOS x 機械学習」みたいな掛け合わせで何か面白いものが作れないか考えている。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4873113644/hatena-blog-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51FgSThMzVL._SL160_.jpg&quot; alt=&quot;集合知プログラミング&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;集合知プログラミング&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4873113644/hatena-blog-22/&quot;&gt;集合知プログラミング&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: Toby Segaran,當山仁健,鴨澤眞夫&lt;/li&gt;
&lt;li&gt;出版社/メーカー: オライリージャパン&lt;/li&gt;
&lt;li&gt;発売日: 2008/07/25&lt;/li&gt;
&lt;li&gt;メディア: 大型本&lt;/li&gt;
&lt;li&gt;購入: 91人 クリック: 2,220回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4873113644/hatena-blog-22&quot;&gt;この商品を含むブログ (277件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>「集合知プログラミング」を読んでる</title>
    <updated>2014-10-13T23:12:00+00:00</updated>
    <dc:date>2014-10-13T23:12:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/236/</id>
    <link href="https://blog.naoty.dev/236/"/>
    <summary>&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20140930/20140930233211.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20140930/20140930233211.png&quot; alt=&quot;f:id:naoty_k:20140930233211p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20140930233211p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;このスクリーンショットに映された2つの線は共にiPhoneの加速度センサーの値を表しており、下の緑が加工していない生データ、上の青い線がローパスフィルタという仕組みで揺れを除去したデータだ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://naoty.hatenablog.com/entry/2014/08/31/000115&quot;&gt;以前の記事&lt;/a&gt;でSwiftを使ったストリームの実装をしてみたのだけど、その使いどころを考えてみたところセンサーデータの加工にストリームという概念が適しているのではないかと思いついた。センサーから送られてくるデータは連続的で、その加工には複雑な計算を要するためだ。&lt;/p&gt;
&lt;p&gt;そこで、加速度センサーをグラフに表示する簡単なアプリを作ってみて、生データとストリームを使って加工したデータを視覚的に表現してみることにした。その結果が上のスクリーンショットとなる。今回はローパスフィルタと呼ばれる手法を用いて生データを加工した。そちらの方面にはまるっきり分からないのだけど、以下のようなとてもシンプルなアルゴリズムでデータを加工できるとのことだったので利用した。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;今回の加工したデータ = 前回の加工したデータ * 0.9 + 今回の生データ * 0.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このローパスフィルタを以前開発した&lt;a href=&quot;https://github.com/naoty/Stream&quot;&gt;ストリームライブラリ&lt;/a&gt;で実装してみる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var x: [CGFloat] = []
var filteredX: [CGFloat] = []

let xStream = Stream&amp;lt;CGFloat&amp;gt;()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;まず、生データと加工したデータをグラフに描画するための配列と生データを扱うストリームを用意する。加速度センサーから値を取得する度にこのストリームに値を出力していく。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;override func viewDidLoad() {
    // ...

    motionManager.startAccelerometerUpdatesToQueue(NSOperationQueue.currentQueue(), withHandler: accelerometerHandler)
}

private func accelerometerHandler(data: CMAccelerometerData!, error: NSError!) {
    xStream.publish(CGFloat(data.acceleration.x))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ストリームに渡された生データをグラフに描画するための配列に入れるため、値が出力されたときに実行される関数を登録しておく。これで生データが出力されたときはいつでもこの関数が実行される。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;override func viewDidLoad() {
    // ...

    xStream.subscribe { [unowned self] message in self.x.append(message) }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;続いて、上のストリームに出力された生データを加工して出力する別のストリームを作成する。これは&lt;code&gt;scan&lt;/code&gt;関数を利用することで簡単に実現できる。&lt;code&gt;scan&lt;/code&gt;関数は「前回出力された値と今回出力された値を使って、新たな値を出力するストリーム」を簡単に作成できる。なので、上で示したローパスフィルタのアルゴリズムを以下のように実装することができる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;override func viewDidLoad() {
    // ...

    xStream.subscribe { [unowned self] message in self.x.append(message) }

    let filteredStream: Stream&amp;lt;CGFloat&amp;gt; = xStream.scan(0) { previousMessage, message in
        return previousMessage * 0.9 + message * 0.1
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最後に、加工した値の出力を見張ってグラフ描画用の配列に追加するための関数を登録しておく。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;override func viewDidLoad() {
    // ...

    xStream.subscribe { [unowned self] message in self.x.append(message) }

    let filteredStream: Stream&amp;lt;CGFloat&amp;gt; = xStream.scan(0) { previousMessage, message in
        return previousMessage * 0.9 + message * 0.1
    }.subscribe { [unowned self] message in
        self.filteredX.append(message)
        // ...
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このように、ストリームの性質やストリームを扱う様々な関数を利用すると、簡単にセンサーデータを扱うプログラムを実装することができた。アプリのソースコードは&lt;a href=&quot;https://github.com/naoty/LowpassStreamSample&quot;&gt;github&lt;/a&gt;にアップしてあるので、参考にしてほしい。&lt;/p&gt;</summary>
    <title>ストリームを利用したローパスフィルタの実装</title>
    <updated>2014-10-01T00:07:00+00:00</updated>
    <dc:date>2014-10-01T00:07:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/235/</id>
    <link href="https://blog.naoty.dev/235/"/>
    <summary>&lt;pre lang=&quot;zsh:.zshrc&quot;&gt;&lt;code&gt;pecogibo() {
    gibo -l | peco | xargs gibo
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://qiita-image-store.s3.amazonaws.com/0/1044/cdd66863-9ebd-a59c-f032-728e2ac5bfb1.gif&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/1044/cdd66863-9ebd-a59c-f032-728e2ac5bfb1.gif&quot; alt=&quot;tty.gif&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/simonwhitaker/gibo&quot;&gt;gibo&lt;/a&gt;は &lt;a href=&quot;https://github.com/github/gitignore&quot;&gt;https://github.com/github/gitignore&lt;/a&gt; から.gitignoreのテンプレを取得するコマンドラインツールで、&lt;code&gt;brew install gibo&lt;/code&gt;からインストールできる。&lt;/p&gt;</summary>
    <title>peco+giboで.gitignoreのテンプレを1秒で取得</title>
    <updated>2014-09-30T10:50:00+00:00</updated>
    <dc:date>2014-09-30T10:50:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/234/</id>
    <link href="https://blog.naoty.dev/234/"/>
    <summary>&lt;p&gt;普段iOSのフロント寄りの実装やデザインについて手が着けられていなかったけど、Xcode6の新機能のおかげでそっちも興味がでてきたので、ログインフォームを想定してiOSアプリのフォームの設計について本気出して考えてみた。&lt;/p&gt;
&lt;h1&gt;最もシンプルなフォーム&lt;/h1&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20140918/20140918011114.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20140918/20140918011114.png&quot; alt=&quot;f:id:naoty_k:20140918011114p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20140918011114p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;メールアドレス用の&lt;code&gt;UITextField&lt;/code&gt;（以下&lt;code&gt;emailField&lt;/code&gt;）、パスワード用の&lt;code&gt;UITextField&lt;/code&gt;（以下&lt;code&gt;passwordField&lt;/code&gt;）、そしてログインボタン用の&lt;code&gt;UIButton&lt;/code&gt;（以下&lt;code&gt;loginButton&lt;/code&gt;）の3つをStoryboardで配置した。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;emailField&lt;/code&gt;はKeyboard TypeをE-mail Addressに、Return KeyをNextに設定した。&lt;code&gt;passwordField&lt;/code&gt;はSecure Text EntryのチェックをオンにしReturn KeyをGoに設定した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;問題点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;emailField&lt;/code&gt;でReturn Keyを押しても&lt;code&gt;passwordField&lt;/code&gt;が選択されないし、&lt;code&gt;passwordField&lt;/code&gt;でReturn Keyを押してもsubmitされない。&lt;/li&gt;
&lt;li&gt;コントロール部品以外をタップしたとき、キーボードが閉じない。端末サイズが小さい場合、キーボードによって他のコントロールや表示すべきViewが隠れたままになる可能性がある。&lt;/li&gt;
&lt;li&gt;追加した3つのViewが指の大きさに対して小さい。ユーザーは正確にタップするために注意を向ける必要があり、間違ったViewをタップしてしまう可能性がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;改善1: Return Keyで適切なアクションを起こす&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;// ViewController.swift

@IBOutlet var emailField: UITextField?
@IBOutlet var passwordField: UITextField?
@IBOutlet var loginButton: UIButton?

@IBAction func login() {
    println(&quot;Login&quot;)
}

// MARK: - UITextFieldDelegate

func textFieldShouldReturn(textField: UITextField) -&amp;gt; Bool {
    if (textField == emailField) {
        passwordField?.becomeFirstResponder()
    } else {
        login()
    }

    return true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;login()&lt;/code&gt;は&lt;code&gt;loginButton&lt;/code&gt;が押された場合、または&lt;code&gt;passwordField&lt;/code&gt;でReturn Keyが押された場合に実行される。今後、このメソッドにログイン処理を実装していく予定。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;emailField&lt;/code&gt;と&lt;code&gt;passwordField&lt;/code&gt;の&lt;code&gt;delegate&lt;/code&gt;をこのViewControllerに設定し&lt;code&gt;textFieldShouldReturn(textField:)&lt;/code&gt;を実装することで、2つのUITextFieldでReturn Keyが押されたときの処理を実装できる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;becomeFirstResponder()&lt;/code&gt;はレシーバーのViewを最初に応答するオブジェクトとして設定する。キーボードはこのFirst Responderに合わせてキーボードタイプや入力先を替える。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;改善2: キーボードを閉じる&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;@IBAction func login() {
    resignFirstResponderAtControls()
    println(&quot;Login&quot;)
}

override func touchesBegan(touches: NSSet, withEvent event: UIEvent) {
    resignFirstResponderAtControls()
}

private func resignFirstResponderAtControls() {
    emailField?.resignFirstResponder()
    passwordField?.resignFirstResponder()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;非公開メソッドとして&lt;code&gt;resignFirstResponderAtControls()&lt;/code&gt;を定義した。これによって2つのUITextFieldの選択状態を外しキーボードを閉じることができる。&lt;code&gt;resignFirstResponder()&lt;/code&gt;メソッドはレシーバーのViewをFirst Responderでなくす。これによってキーボードが閉じる。&lt;/li&gt;
&lt;li&gt;これを&lt;code&gt;login()&lt;/code&gt;と&lt;code&gt;touchesBegan(touches:withEvent:)&lt;/code&gt;で呼び出す。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;UIViewController&lt;/code&gt;は&lt;code&gt;UIResponder&lt;/code&gt;を継承しており&lt;code&gt;self.view&lt;/code&gt;のイベントハンドリングを扱うことができる。そのため、&lt;code&gt;touchesBegan(touches:withEvent:)&lt;/code&gt;で&lt;code&gt;resignFirstResponderAtControls()&lt;/code&gt;を呼ぶことで、追加した3つのView以外を選択されたときにキーボードを閉じることができる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;改善3: タップしやすくする&lt;/h1&gt;
&lt;p&gt;「ヒューマンユーザーインターフェイスガイドライン」（以下HIG）にはこのような指針が載っている。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;アプリケーション内のタップ可能な要素には、約44x44ポイントのターゲット領域を割り当てる。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;これに従って「44x44ポイント以上」にサイズを変更する。&lt;/p&gt;
&lt;p&gt;まず、&lt;code&gt;UITextField&lt;/code&gt;は高さが30ポイントに固定されているため、高さ44ポイントのViewの上に&lt;code&gt;UITextField&lt;/code&gt;を乗せてボーダーを非表示にし、その親Viewがタップされたら&lt;code&gt;UITextField&lt;/code&gt;がFirst Responderになるようにする。実装としては、&lt;code&gt;UITextField&lt;/code&gt;を含む高さ44ポイントの&lt;code&gt;UIView&lt;/code&gt;のサブクラスを用意する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// TextFieldContainer.swift

@IBDesignable
class TextFieldContainer: UIView {
    @IBInspectable
    var borderWidth: CGFloat = 0 {
        didSet {
            layer.borderWidth = borderWidth
        }
    }

    override func touchesBegan(touches: NSSet, withEvent event: UIEvent) {
        subviews.first?.becomeFirstResponder()
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Xcode 6からの新機能であるLive Viewsを利用し、カスタムViewも可能な限りStoryboard上でそのプロパティを変更できるようにする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;@IBDesignable&lt;/code&gt;によってカスタムViewをStoryboard上でレンダリングして、その見た目をStoryboardからも確認できるようになる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@IBInspectable&lt;/code&gt;によって下のスクリーンショットのようにカスタムViewの&lt;code&gt;borderWidth&lt;/code&gt;というプロパティをStoryboardから変更できるようになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20140918/20140918011350.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20140918/20140918011350.png&quot; alt=&quot;f:id:naoty_k:20140918011350p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20140918011350p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;次に、&lt;code&gt;UIButton&lt;/code&gt;もHIGの方針に従って修正する。&lt;code&gt;UIButton&lt;/code&gt;はサイズを自由に変更できるので、とりあえず44x44ポイントに変更した。ボタンの大きさは変更したものの、ボタンの「Login」というテキストはまだ小さいため、ユーザーの目からはサイズが大きくなったようには見えていない。そこで、ボタンにもボーダーをつけてみる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// BorderedButton.swift

@IBDesignable
class BorderedButton: UIButton {
    @IBInspectable
    var borderWidth: CGFloat = 0 {
        didSet {
            layer.borderWidth = borderWidth
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;TextFieldContainer&lt;/code&gt;と同じようにstoryboardから枠線の幅を変えられるようにした。&lt;/p&gt;
&lt;h1&gt;マシなフォーム&lt;/h1&gt;
&lt;p&gt;以上の変更を行った結果このようになった。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20140918/20140918011412.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20140918/20140918011412.png&quot; alt=&quot;f:id:naoty_k:20140918011412p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20140918011412p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;間違いなくタップはしやすくなった。&lt;/p&gt;
&lt;h2&gt;問題点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;フラットデザインに則っていない。標準のアプリや人気の高いアプリはiOS 7から導入されたフラットデザインに沿ってデザインされており、同様なインターフェイスをもたなければユーザーは慣れ親しんだ動作で直感的にアプリを操作できなくなってしまう。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;改善4: フラットデザインに従う&lt;/h2&gt;
&lt;p&gt;HIGではフラットデザインの基本的な設計方針として以下の3つを挙げている。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;控えめであること&lt;/li&gt;
&lt;li&gt;明瞭であること&lt;/li&gt;
&lt;li&gt;奥行きを与えること&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;具体的な作業として&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;画面全体を使う&lt;/li&gt;
&lt;li&gt;枠線を使わない&lt;/li&gt;
&lt;li&gt;余白を十分にとる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を意識してStoryboardを編集した。Auto Layoutで各Viewの余白を固定したり、枠線の太さを0ポイントにした。その結果、以下のようになった。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20140918/20140918011429.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20140918/20140918011429.png&quot; alt=&quot;f:id:naoty_k:20140918011429p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20140918011429p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;フラットデザインに対するよくある批判として「ボタンがどこにあるのか認識しにくい」というものがある。&quot;Email&quot;や&quot;Login&quot;といった文字がある部分にしかViewがないように見えてしまうため、Viewの領域を表す枠線や背景色を控えめに加えた方がもっとよくなると考えた。そこで、2つの&lt;code&gt;UITextField&lt;/code&gt;の領域を控えめに表すため、領域の下辺だけ枠線を表示してみる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// TextFieldContainer.swift

@IBDesignable
class TextFieldContainer: UIView {
    private var width: CGFloat {
        return CGRectGetWidth(frame)
    }
    private var height: CGFloat {
        return CGRectGetHeight(frame)
    }
    private let borderBottom: CALayer = CALayer()

    @IBInspectable
    var borderColor: UIColor = UIColor.blackColor() {
        didSet {
            setupBorderBottom()
        }
    }

    @IBInspectable
    var borderBottomWidth: CGFloat = 0 {
        didSet {
            setupBorderBottom()
        }
    }

    override func touchesBegan(touches: NSSet, withEvent event: UIEvent) {
        subviews.first?.becomeFirstResponder()
    }

    private func setupBorderBottom() {
        borderBottom.removeFromSuperlayer()
        borderBottom.frame = CGRectMake(0, height - borderBottomWidth, width, borderBottomWidth)
        borderBottom.backgroundColor = borderColor.CGColor
        layer.addSublayer(borderBottom)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;以前の実装にあった&lt;code&gt;borderWidth&lt;/code&gt;を削除し、下辺の枠線の太さを表す&lt;code&gt;borderBottomWidth&lt;/code&gt;と枠線の色を表す&lt;code&gt;borderColor&lt;/code&gt;を追加した。これらのプロパティがXcodeから変更されるたびに&lt;code&gt;setupBorderBottom()&lt;/code&gt;が呼び出されてborderが追加される。&lt;/li&gt;
&lt;li&gt;下辺だけの枠線は枠線の幅を高さとする&lt;code&gt;CALayer&lt;/code&gt;として実装した。&lt;/li&gt;
&lt;li&gt;ショートカットのため&lt;code&gt;width&lt;/code&gt;と&lt;code&gt;height&lt;/code&gt;というcomputed propertyを用意した。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;そして、Storyboardから枠線の色と幅を設定し余白を調整すると以下のようになった。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20140918/20140918011441.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20140918/20140918011441.png&quot; alt=&quot;f:id:naoty_k:20140918011441p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20140918011441p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1&gt;まとめ&lt;/h1&gt;
&lt;p&gt;最初と最後を比べると少しはマシなフォームになったと思う。改善したポイントをまとめると以下のようになる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Return Keyで適切なアクションを起こす&lt;/li&gt;
&lt;li&gt;キーボードを閉じる&lt;/li&gt;
&lt;li&gt;タップしやすくする&lt;/li&gt;
&lt;li&gt;フラットデザインに従う&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;現実の開発では、アプリごとのテーマに合わせた色やタイポグラフィを使うことになるだろうし、フォームのエラーメッセージの扱いについても触れられていない。残された課題については、経験を積む中で考えていくことにしたい。&lt;/p&gt;
&lt;p&gt;最後に上で載せたコードを含んだプロジェクトをGitHubに公開したので参考にしてほしい。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/BetterFormApp&quot;&gt;naoty/BetterFormApp · GitHub&lt;/a&gt;&lt;/p&gt;</summary>
    <title>マシなiOSアプリのフォームを実装・デザインする</title>
    <updated>2014-09-18T01:22:00+00:00</updated>
    <dc:date>2014-09-18T01:22:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/233/</id>
    <link href="https://blog.naoty.dev/233/"/>
    <summary>&lt;p&gt;FRPの記事をいくつか見てあまり理解できなかったので、Swiftでストリームを扱うライブラリを書いてみた。結論から言うと、まだストリームについて深く理解できていない感じがするので「FRPとは何か」「ストリームとは何か」といった話はしない。そういう話は他のエントリーを読んでほしいと思う。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/Stream&quot;&gt;naoty/Stream · GitHub&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;demo&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;let stream = Stream&amp;lt;String&amp;gt;()
let counterStream: Stream&amp;lt;Int&amp;gt; = stream.map({ message in
    return countElements(message)
}).scan(0, { previousMessage, message in
    return previousMessage + message
}).subscribe({ message in
    println(message)
})
stream.publish(&quot;Hello, &quot;) //=&amp;gt; 7
stream.publish(&quot;wor&quot;) //=&amp;gt; 10
stream.publish(&quot;ld!&quot;) //=&amp;gt; 13
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;機能&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ストリームに&lt;code&gt;subscribe&lt;/code&gt;で関数を渡すと、&lt;code&gt;publish&lt;/code&gt;されたときにその関数が&lt;code&gt;publish&lt;/code&gt;の引数が渡されて実行される。&lt;code&gt;subscribe&lt;/code&gt;は失敗時と完了時に実行する関数を指定することもできる。ストリームに失敗を通知するのは&lt;code&gt;publish&lt;/code&gt;の代わりに&lt;code&gt;fail&lt;/code&gt;、完了を通知するのは&lt;code&gt;complete&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;その他FRPのライブラリで実装されている次のような基本的なストリーム操作を実装した: &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;scan&lt;/code&gt;, &lt;code&gt;flatMap&lt;/code&gt;, &lt;code&gt;throttle&lt;/code&gt;, &lt;code&gt;debounce&lt;/code&gt;, &lt;code&gt;buffer&lt;/code&gt;, &lt;code&gt;merge&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;結果&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ストリームという概念については理解できたけど、FRPという世界観の一部を理解しただけのような気がする。&lt;/li&gt;
&lt;li&gt;ライブラリ書いてみたけどSwiftのクロージャの循環参照らへんの実装があやしい。おかしなところがあれば指摘してもらえると助かります。&lt;/li&gt;
&lt;li&gt;iOS開発においてFRPをどのように適用できるか、まだ具体的なシーンがあまり思い浮かばない。けど、ストリームというのは概念をモデル化する際の見方の一つだと思うので、そういう見方があるということを理解した上で少しずつ既存のものの見方を変えてみるとわかってくるのかもしれないと思う。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Swiftでストリームを扱うライブラリを書いた</title>
    <updated>2014-08-31T00:01:00+00:00</updated>
    <dc:date>2014-08-31T00:01:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/232/</id>
    <link href="https://blog.naoty.dev/232/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/Timepiece&quot;&gt;Timepiece&lt;/a&gt;というライブラリを使うとNSDateを直感的に扱うことができる。&lt;/p&gt;
&lt;pre lang=&quot;swift&quot; class=&quot;highlight highlight-swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Timepiece&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 3時間前&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hours&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ago&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 4年後&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;years&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;later&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 今日（0:00）&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 明日（0:00）&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tomorrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 昨日（0:00）&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yesterday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 足し算・引き算&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 正月&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beginningOfYear&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 特定の日時&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2014&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;minute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;以上、自分で作ったライブラリの宣伝でした。issueやPull requestお待ちしてます。&lt;/p&gt;</summary>
    <title>SwiftでNSDateを直感的に扱う</title>
    <updated>2014-08-20T17:16:00+00:00</updated>
    <dc:date>2014-08-20T17:16:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/231/</id>
    <link href="https://blog.naoty.dev/231/"/>
    <summary>&lt;p&gt;Swiftの実験的なプロジェクトとしてActiveSupportの拡張っぽく直感的に時間を扱うライブラリ&quot;Timepiece&quot;というものを書いた。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/Timepiece&quot;&gt;naoty/Timepiece · GitHub&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;demo&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;let today = NSDate.today()
let tomorrow = NSDate.tomorrow()
let dayAfterTomorrow = tomorrow + 1.day
let dayBeforeYesterday = 2.days.ago
let birthday = NSDate.date(year: 1987, month: 6, day: 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;機能&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;1.day.ago&lt;/code&gt;（1日前）、&lt;code&gt;4.years.later&lt;/code&gt;（4年後）というように&lt;code&gt;Int&lt;/code&gt;型を拡張し、&lt;code&gt;数.単位.前/後&lt;/code&gt;という書き方で&lt;code&gt;NSDate&lt;/code&gt;オブジェクトを初期化できる。単位は単数形、複数形どちらも使える。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;NSDate() + 1.minute&lt;/code&gt;（1分後）、&lt;code&gt;NSDate() - 3.hours&lt;/code&gt;（3時間前）というように、&lt;code&gt;NSDate&lt;/code&gt;オブジェクトから&lt;code&gt;数.単位&lt;/code&gt;を加算・減算できる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;NSDate.date(year:month:day:hour:minute:second)&lt;/code&gt;, &lt;code&gt;NSDate.today()&lt;/code&gt;, &lt;code&gt;NSDate.yesterday()&lt;/code&gt;, &lt;code&gt;NSDate.tomorrow()&lt;/code&gt;というように、&lt;code&gt;NSDate&lt;/code&gt;オブジェクトをより直感的に初期化できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;今後&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;既存の&lt;code&gt;NSDate&lt;/code&gt;オブジェクトの時間だけ変更したいとか、その日の0:00を取得したいという場合に対応したい。ActiveSupportとかmoment.jsの&lt;code&gt;beginning_of_day&lt;/code&gt;, &lt;code&gt;endOf(&quot;day&quot;)&lt;/code&gt;のようなやつ。&lt;/li&gt;
&lt;li&gt;範囲オブジェクトのようなものを生成できるようにしたい。例えば、今日から1週間分の&lt;code&gt;NSDate&lt;/code&gt;オブジェクトの範囲オブジェクトを作って繰り返し処理させられたら便利そう。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;悩み&lt;/h1&gt;
&lt;p&gt;こういうライブラリでよくあるのがパース処理とフォーマット処理なんだけど、このライブラリでサポートすべきかどうか悩む。というのも、この手の処理は&lt;code&gt;NSDateFormatter&lt;/code&gt;オブジェクトを使うと思うのだけど、便利なAPIのせいで無意識にムダな&lt;code&gt;NSDateFormatter&lt;/code&gt;オブジェクトを何度も生成してしまう可能性がありそうだなと懸念している。&lt;/p&gt;
&lt;h1&gt;プルリクチャンス&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;こういう機能がほしいという希望があれば&lt;a href=&quot;https://github.com/naoty/Timepiece/issues&quot;&gt;issues&lt;/a&gt;でどんどん要望を伝えてほしいです。&lt;/li&gt;
&lt;li&gt;もちろん&lt;a href=&quot;https://github.com/naoty/Timepiece/pulls&quot;&gt;Pull request&lt;/a&gt;も歓迎です。コード量は多くないので、ちょっと読めば何をしているか思います。テストはちゃんと書いてます。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>SwiftでNSDateを簡単に扱うライブラリを書いた</title>
    <updated>2014-08-17T16:39:00+00:00</updated>
    <dc:date>2014-08-17T16:39:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/230/</id>
    <link href="https://blog.naoty.dev/230/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;http://naoty.hatenablog.com/entry/2014/08/14/225112&quot;&gt;前回&lt;/a&gt;Alamofireの実装を読んだので、ついでにテストコードも読んでみた。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ tree -P &quot;*Tests.swift&quot; -I .git
.
├── Source
└── Tests
    ├── DownloadTests.swift
    ├── ParameterEncodingTests.swift
    ├── RequestTests.swift
    ├── ResponseTests.swift
    └── UploadTests.swift
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;とりあえず&lt;code&gt;RequestTests.swift&lt;/code&gt;から読んでみる。&lt;/p&gt;
&lt;h1&gt;RequestTests.swift&lt;/h1&gt;
&lt;h2&gt;L:26&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;extension Alamofire {
    struct RequestTests {
        class RequestInitializationTestCase: XCTestCase {
            // ...
        }

        class RequestResponseTestCase: XCTestCase {
            // ...
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;このプロジェクトはビルドターゲットをもたないため、ターゲットごとに名前空間が作られるわけではない。そのため、&lt;code&gt;Alamofire&lt;/code&gt;という構造体の中にテストクラスをネストさせることで実装コードを参照できるようにしている。&lt;/li&gt;
&lt;li&gt;テストケース、この場合は&lt;code&gt;init&lt;/code&gt;とか&lt;code&gt;response&lt;/code&gt;といったメソッドの単位でテストケースのクラスを作っているようだ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;L:49&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;class RequestResponseTestCase: XCTestCase {
    func testRequestResponse() {
        let URL = &quot;http://httpbin.org/get&quot;
        let serializer = Alamofire.Request.stringResponseSerializer(encoding: NSUTF8StringEncoding)

        let expectation = expectationWithDescription(&quot;\(URL)&quot;)

        Alamofire.request(.GET, URL, parameters: [&quot;foo&quot;: &quot;bar&quot;])
                 .response(serializer: serializer){ (request, response, string, error) in
                   expectation.fulfill()

                   XCTAssertNotNil(request, &quot;request should not be nil&quot;)
                   XCTAssertNotNil(response, &quot;response should not be nil&quot;)
                   XCTAssertNotNil(string, &quot;string should not be nil&quot;)
                   XCTAssertNil(error, &quot;error should be nil&quot;)
                 }

        waitForExpectationWithTimeout(10){ error in
            XCTAssertNil(error, &quot;\(error)&quot;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;expectationWithDescription&lt;/code&gt;と&lt;code&gt;waitForExpectationWithTimeout&lt;/code&gt;はXcode 6からXCTestに追加された非同期テスト用のAPI。&lt;/li&gt;
&lt;li&gt;まず、&lt;code&gt;expectationWithDescription&lt;/code&gt;メソッドで&lt;code&gt;XCTestExpectation&lt;/code&gt;オブジェクトを生成する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;waitForExpectationWithTimeout&lt;/code&gt;は指定された秒数、上で生成された&lt;code&gt;XCTestExpectation&lt;/code&gt;オブジェクトの&lt;code&gt;fulfill&lt;/code&gt;メソッドが呼ばれるのを待つ。呼ばれれば成功、呼ばれずに指定された秒数が経過すると失敗となり引数に渡されたクロージャを実行する。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;他のテストコードも読んでみたけど、上と同じようなコードがあり特に読む必要はなさそうだった。&lt;/p&gt;</summary>
    <title>Alamofire/**/*Tests.swiftを読んだ</title>
    <updated>2014-08-15T17:01:00+00:00</updated>
    <dc:date>2014-08-15T17:01:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/229/</id>
    <link href="https://blog.naoty.dev/229/"/>
    <summary>&lt;h1&gt;Alamofireとは&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire&quot;&gt;https://github.com/Alamofire/Alamofire&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Swiftで書かれたHTTP通信ライブラリ。&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://afnetworking.com/&quot;&gt;AFNetworking&lt;/a&gt;の作者であるmatttさんの新作。&lt;/li&gt;
&lt;li&gt;AFNetworkingをリプレースするものではなく、AFNetworkingはSwiftでも安定して動くのでそのまま使えるとのこと。（参考: &lt;a href=&quot;http://nshipster.com/alamofire/&quot;&gt;http://nshipster.com/alamofire/&lt;/a&gt;の最後の方）&lt;/li&gt;
&lt;li&gt;ファイルは&lt;code&gt;Alamofire.swift&lt;/code&gt;だけで1000行に満たない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;使い方&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;Alamofire.request(.GET, &quot;http://httpbin.org/get&quot;)
         .responseJSON { (request, response, JSON, error) in
                           println(JSON)
                       }

Alamofire.request(.GET, &quot;http://httpbin.org/get&quot;, parameters: [&quot;foo&quot;: &quot;bar&quot;])
         .authenticate(HTTPBasic: user, password: password)
         .responseJSON { (request, response, JSON, error) in
                           println(JSON)
                       }
         .responseString { (request, response, string, error) in
                             println(string)
                         }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;※読んだコードのコミット番号は&lt;code&gt;76266c95564912f228e76a1868e50b6a33f104e7&lt;/code&gt;である。&lt;/p&gt;
&lt;h1&gt;Alamofire.swift&lt;/h1&gt;
&lt;h2&gt;tl;dr&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Manager&lt;/code&gt;オブジェクトが通信を行い、通信完了時のdelegateオブジェクトを管理する。
&lt;ul&gt;
&lt;li&gt;初期化時に&lt;code&gt;NSURLSession&lt;/code&gt;オブジェクトやdelegateオブジェクトをプロパティとして保持する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;request&lt;/code&gt;メソッドは以下のことをする。
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;NSURLSessionTask&lt;/code&gt;を生成して通信を開始する。&lt;/li&gt;
&lt;li&gt;実行する通信タスクに合わせたdelegateオブジェクトを設定する。delegateオブジェクトはユニークなSerial Dispatch Queueを持つが、最初は停止状態になっている。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Request&lt;/code&gt;オブジェクトを生成して返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;response&lt;/code&gt;メソッドは以下のことをする。
&lt;ul&gt;
&lt;li&gt;引数に渡されたクロージャを停止状態になっているSerial Dispatch Queueに追加する。&lt;/li&gt;
&lt;li&gt;自分自身を返すため、続けて&lt;code&gt;response&lt;/code&gt;メソッドをメソッドチェーンで呼ぶことができる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通信が完了するとdelegateメソッドは以下のことをする。
&lt;ul&gt;
&lt;li&gt;停止状態になっているSerial Dispatch Queueを再開する。追加されたタスクは順番に1つずつ実行されていく。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;L:25&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;public struct Alamofire {
    // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Alamofire&lt;/code&gt;そのものはクラスではなくstructになっている。&lt;/li&gt;
&lt;li&gt;Swiftにおいてstructはクラスと同様にプロパティやメソッドを持つことができたりprotocolに準拠することができる等多くの点で共通しているのだけど、structはクラスとは違って常に値渡しになり参照カウントを使わない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;L:928&lt;/h2&gt;
&lt;p&gt;最初に呼ばれるメソッドである&lt;code&gt;Alamofire.request&lt;/code&gt;の実装を読む。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;extension Alamofire {
    // ...

    static func request(method: Method, _ URL: String, parameters: [String: AnyObject]? = nil, encoding: ParameterEncoding = .URL) -&amp;gt; Request {
        return Manager.sharedInstance.request(encoding.encode(URLRequest(method, URL), parameters: parameters).0)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;static&lt;/code&gt;とついているのは、クラスではなくstructだから&lt;code&gt;class func&lt;/code&gt;ではなく&lt;code&gt;static func&lt;/code&gt;と書くのであろう。Javaみたいに&lt;code&gt;static&lt;/code&gt;に統一してもいいと思う。&lt;/li&gt;
&lt;li&gt;内部では&lt;code&gt;Manager&lt;/code&gt;クラスのシングルトンインスタンスの&lt;code&gt;request&lt;/code&gt;メソッドを呼んでいる。&lt;/li&gt;
&lt;li&gt;引数に&lt;code&gt;ParameterEncoding&lt;/code&gt;インスタンスの&lt;code&gt;encode&lt;/code&gt;メソッドの返り値を渡している。&lt;code&gt;.0&lt;/code&gt;というのはtupleの要素を取り出すときにこういう書き方をする。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;L:141&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Manager&lt;/code&gt;クラスの初期化について見る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Manager {
    class var sharedInstance: Manager {
        struct Singleton {
            static let instance = Manager()
        }

        return Singleton.instance
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;このシングルトンパターンの実装は&lt;a href=&quot;https://github.com/hpique/SwiftSingleton&quot;&gt;hpique/SwiftSingleton&lt;/a&gt;で推奨されているアプローチ。&lt;/li&gt;
&lt;li&gt;現在はクラスにstaticな定数を定義することができない一方でstructであればそれが可能なので、ネストしたstructにシングルトンオブジェクトを定数として定義してそれを外側のクラスの型プロパティからアクセスできるようにしている。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;L:208&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;func request(request: NSURLRequest) -&amp;gt; Request {
    // ...

    var dataTask: NSURLSessionDataTask?
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)) {
        dataTask = self.session.dataTaskWithRequest(mutableRequest)
    }

    let request = Request(session: self.session, task: dataTask!)
    self.delegate[request.delegate.task] = request.delegate
    request.resume()

    return request
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;NSURLSession&lt;/code&gt;オブジェクトから&lt;code&gt;Request&lt;/code&gt;オブジェクトを初期化している。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;delegate&lt;/code&gt;を登録し、&lt;code&gt;Request&lt;/code&gt;オブジェクトの&lt;code&gt;resume&lt;/code&gt;メソッドを呼んでいる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Request&lt;/code&gt;オブジェクトを返している。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;L:403&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;class Request {
    // ...

    private init(session: NSURLSession, task: NSURLSessionTask) {
        self.session = session

        if task is NSURLSessionUploadTask {
            self.delegate = UploadTaskDelegate(task: task)
        } else if task is NSURLSessionDownloadTask {
            self.delegate = DownloadTaskDelegate(task: task)
        } else if task is NSURLSessionDataTask {
            self.delegate = DataTaskDelegate(task: task)
        } else {
            self.delegate = TaskDelegate(task: task)
        }
    }

    // ...

    func resume() {
        self.task.resume()
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Request&lt;/code&gt;オブジェクトは初期化されるときに渡された&lt;code&gt;task&lt;/code&gt;のクラスに合わせて&lt;code&gt;delegate&lt;/code&gt;プロパティを初期化している。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;is&lt;/code&gt;はオブジェクトがその型に属するかどうかをチェックする。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;resume&lt;/code&gt;メソッドは&lt;code&gt;task&lt;/code&gt;プロパティ、つまり&lt;code&gt;NSURLSessionTask&lt;/code&gt;（またはそのサブクラスの）オブジェクトの&lt;code&gt;resume&lt;/code&gt;メソッドを呼び、ここで通信を開始する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;L:208&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Request&lt;/code&gt;オブジェクトの概要をつかんだので、&lt;code&gt;request&lt;/code&gt;メソッドに戻る。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func request(request: NSURLRequest) -&amp;gt; Request {
    // ...

    let request = Request(session: self.session, task: dataTask!)
    self.delegate[request.delegate.task] = request.delegate
    request.resume()

    return request
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;request.delegate&lt;/code&gt;は実行する&lt;code&gt;task&lt;/code&gt;に応じたdelegateクラス、つまり&lt;code&gt;UploadTaskDelegate&lt;/code&gt;, &lt;code&gt;DownloadTaskDelegate&lt;/code&gt;, &lt;code&gt;DataTaskDelegate&lt;/code&gt;, &lt;code&gt;TaskDelegate&lt;/code&gt;のいずれかが入る。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;request.resume()&lt;/code&gt;で通信を開始する。&lt;/li&gt;
&lt;li&gt;開始された通信が完了したときに呼ばれるdelegateは&lt;code&gt;request.delegate&lt;/code&gt;であり、これは&lt;code&gt;self.delegate&lt;/code&gt;という領域に確保される。このプロパティは&lt;code&gt;SessionDelegate&lt;/code&gt;という型である。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;L:229&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;class SessionDelegate: NSObject, NSURLSessionDelegate, NSURLSessionTaskDelegate, NSURLSessionDataDelegate, NSURLSessionDownloadDelegate {
    private var subdelegates: [Int: Request.TaskDelegate]
    private subscript(task: NSURLSessionTask) -&amp;gt; Request.TaskDelegate? {
        get {
            return self.subdelegates[task.taskIdentifier]
        }

        set(newValue) {
            self.subdelegates[task.taskIdentifier] = newValue
        }
    }

    // ...

    required override init() {
        self.subdelegates = Dictionary()
        super.init()
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;SessionDelegate&lt;/code&gt;オブジェクトは複数のdelegateをラップする構造をもっているようだ。&lt;/li&gt;
&lt;li&gt;subscriptを定義することで&lt;code&gt;self.delegate[request.delegate.task] = request.delegate&lt;/code&gt;のようなアクセスを実現している。内部では、キーとして渡された&lt;code&gt;Request.TaskDelegate&lt;/code&gt;オブジェクトの&lt;code&gt;taskIdentifier&lt;/code&gt;を実際のキーとして使っているようだ。オブジェクトそのものではなくInt型のidentifierをキーとして使った方が効率がいいのだろう。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;request&lt;/code&gt;メソッドの実装についておおまかに読んだので、続いて&lt;code&gt;response&lt;/code&gt;メソッドを読んでいく。&lt;code&gt;response&lt;/code&gt;メソッドは&lt;code&gt;request&lt;/code&gt;メソッドの返り値である&lt;code&gt;Request&lt;/code&gt;型に対して呼ばれているので、&lt;code&gt;Request&lt;/code&gt;クラスの定義を調べる。&lt;/p&gt;
&lt;h2&gt;L:458&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;func response(completionHandler: (NSURLRequest, NSHTTPURLResponse?, AnyObject?, NSError?) -&amp;gt; Void) -&amp;gt; Self {
    return response({ (request, response, data, error) in
                        return (data, error)
                    }, completionHandler: completionHandler)
}

func response(priority: Int = DISPATCH_QUEUE_PRIORITY_DEFAULT, queue: dispatch_queue_t? = nil, serializer: (NSURLRequest, NSHTTPURLResponse?, NSData?, NSError?) -&amp;gt; (AnyObject?, NSError?), completionHandler: (NSURLRequest, NSHTTPURLResponse?, AnyObject?, NSError?) -&amp;gt; Void) -&amp;gt; Self {

    dispatch_async(self.delegate.queue, {
        dispatch_async(dispatch_get_global_queue(priority, 0), {
            let (responseObject: AnyObject?, error: NSError?) = serializer(self.request, self.response, self.delegate.data, self.delegate.error)

            dispatch_async(queue ?? dispatch_get_main_queue(), {
                completionHandler(self.request, self.response, responseObject, error)
            })
        })
    })

    return self
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;response&lt;/code&gt;メソッドに&lt;code&gt;completionHandler&lt;/code&gt;だけ渡すと、前者のメソッドが呼ばれ内部的に後者のメソッドが呼ばれる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;self.delegate.queue&lt;/code&gt;プロパティは&lt;code&gt;Request.TaskDelegate&lt;/code&gt;クラス（またはそのサブクラス）のプロパティであり、レスポンスの処理はこのqueueで行われるようだ。このqueueについて詳しく見ていくことにする。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;L:497&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;private class TaskDelegate: NSObject, NSURLSessionTaskDelegate {
    // ...

    let queue: dispatch_queue_t?

    // ...

    init(task: NSURLSessionTask) {
        // ...

        let label: String = &quot;com.alamofire.task-\(task.taskIdentifier)&quot;
        let queue = dispatch_queue_create((label as NSString).UTF8String, DISPATCH_QUEUE_SERIAL)
        dispatch_suspend(queue)
        self.queue = queue
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;queue&lt;/code&gt;は&lt;code&gt;task&lt;/code&gt;に対して一意なラベルを持ったSerial Dispatch Queueである。&lt;/li&gt;
&lt;li&gt;つまり、各タスクに対してキューが1つ作成される。そのキューは追加されたタスクを1つずつ順番に実行していく。&lt;/li&gt;
&lt;li&gt;そして、&lt;code&gt;dispatch_suspend&lt;/code&gt;によってキューは停止された状態になっているため、この状態ではタスクが追加されてもすぐに実行されるわけではない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;self.delegate.queue&lt;/code&gt;がどのようなキューなのか把握したので&lt;code&gt;response&lt;/code&gt;メソッドに戻る。&lt;/p&gt;
&lt;h2&gt;L:464&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;func response(priority: Int = DISPATCH_QUEUE_PRIORITY_DEFAULT, queue: dispatch_queue_t? = nil, serializer: (NSURLRequest, NSHTTPURLResponse?, NSData?, NSError?) -&amp;gt; (AnyObject?, NSError?), completionHandler: (NSURLRequest, NSHTTPURLResponse?, AnyObject?, NSError?) -&amp;gt; Void) -&amp;gt; Self {

    dispatch_async(self.delegate.queue, {
        dispatch_async(dispatch_get_global_queue(priority, 0), {
            let (responseObject: AnyObject?, error: NSError?) = serializer(self.request, self.response, self.delegate.data, self.delegate.error)

            dispatch_async(queue ?? dispatch_get_main_queue(), {
                completionHandler(self.request, self.response, responseObject, error)
            })
        })
    })

    return self
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;タスクごとのキューに追加される。ただし、この段階ではキューは停止状態なのでまだ実行されない。&lt;/li&gt;
&lt;li&gt;各タスクごとのキューから、グローバルキューにタスクを追加している。グローバルキューに追加されたタスクは並列に実行される。&lt;/li&gt;
&lt;li&gt;グローバルキューでは、通信が完了した結果を&lt;code&gt;serializer&lt;/code&gt;によってシリアライズし、その結果を&lt;code&gt;response&lt;/code&gt;メソッドに渡した&lt;code&gt;completionHandler&lt;/code&gt;というクロージャに渡して今度はメインキューに追加する。メインキューに追加されたタスクはメインスレッドで実行される。&lt;/li&gt;
&lt;li&gt;キューにタスクを追加したら即時に自分自身を返している。こうすることで&lt;code&gt;response&lt;/code&gt;メソッド（とそれに準ずるメソッド）をメソッドチェーンでつなげていくことができる。その場合、メソッドチェーンによって追加されていくタスクは各タスクのSerial Dispatch Queueによって追加された順番に実行されていく。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;次に、通信が完了したあとdelegateがどのように呼ばれていくか調べる。まず、delegateオブジェクトは何か調べるため、&lt;code&gt;NSURLSession&lt;/code&gt;オブジェクトが初期化されている部分を読む。&lt;/p&gt;
&lt;h2&gt;L:197&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;class Manager {
    // ...

    required init(configuration: NSURLSessionConfiguration! = nil) {
        self.delegate = SessionDelegate()
        self.session = NSURLSession(configuration: configuration, delegate: self.delegate, delegateQueue: self.operationQueue)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;まず&lt;code&gt;NSURLSession&lt;/code&gt;オブジェクトはManagerオブジェクトのプロパティである。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;NSURLSession&lt;/code&gt;オブジェクトのdelegateは&lt;code&gt;SessionDelegate&lt;/code&gt;オブジェクトとなっている。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;L:229&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;class SessionDelegate: NSObject, NSURLSessionDelegate, NSURLSessionTaskDelegate, NSURLSessionDataDelegate, NSURLSessionDownloadDelegate {
    // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;確かにdelegateオブジェクトに必要なprotocolに準拠している。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;NSURLSessionDataDelegate&lt;/code&gt;のメソッドの実装を見てみる。&lt;/p&gt;
&lt;h2&gt;L:336&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;func URLSession(session: NSURLSession!, dataTask: NSURLSessionDataTask!, didReceiveData data:NSData!) {
    if let delegate = self[dataTask] as? Request.DataTaskDelegate {
        delegate.URLSession(session, dataTask: dataTask, didReceiveData: data)
    }

    self.dataTaskDidReceiveData?(session, dataTask, data)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;上述の通り、&lt;code&gt;SessionDelegate&lt;/code&gt;オブジェクトは&lt;code&gt;subdelegates&lt;/code&gt;というプロパティに実際のdelegateを保持しており、独自のsubscriptからそこにアクセスできる。subdelegatesへのdelegateオブジェクトの追加は&lt;code&gt;request&lt;/code&gt;メソッド内で行われているので、そこで追加されたdelegateオブジェクトが実際に処理を行うことになる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;as?&lt;/code&gt;はダウンキャストを行い失敗した場合はnilを返す。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;self.dataTaskDidReceiveData?&lt;/code&gt;というのはOptional型のクロージャのプロパティ。どこかでセットされていればここで実行するような仕組みになっているのだと思う。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;というわけで、実際にdelegateメソッドを実行しているクラスを読む。&lt;/p&gt;
&lt;h2&gt;L:598&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;func URLSession(session: NSURLSession!, dataTask: NSURLSessionDataTask!, didReceiveData data: NSData!) {
    self.dataTaskDidReceiveData?(session, dataTask)

    self.mutableData.appendData(data)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;ここではあんまり大したことはしていない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;NSURLSession&lt;/code&gt;オブジェクトによる通信が完了したときに呼ばれるdelegateメソッドは&lt;code&gt;NSURLSessionTaskDelegate&lt;/code&gt;プロトコルの&lt;code&gt;URLSession(_:task:didCompleteWithError:)&lt;/code&gt;というメソッドなので、これの実装を読む。&lt;/p&gt;
&lt;h1&gt;L:558&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;func URLSession(session: NSURLSession!, task: NSURLSessionTask!, didCompleteWithError error: NSError!) {
    self.error = error
    dispatch_resume(self.queue)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;このメソッドは先ほどのメソッドが実装されていた&lt;code&gt;DataTaskDelegate&lt;/code&gt;クラスのスーパークラスである&lt;code&gt;TaskDelegate&lt;/code&gt;に定義されている。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;dispatch_resume&lt;/code&gt;で停止状態になっていたキューを再開し、追加されていたタスクを実行する。上述の通り、この&lt;code&gt;self.queue&lt;/code&gt;はタスクごとに作られたSerial Dispatch Queueであり作成直後に停止状態にしておいたもので、&lt;code&gt;response&lt;/code&gt;メソッド（およびそれに似たメソッド）で追加されたクロージャがここに追加されている。それらのメソッドが通信完了時によばれるdelegateでキューが再開することで順番に実行される、という仕組みになっていることが判明した。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Alamofireを読んだ</title>
    <updated>2014-08-14T22:51:00+00:00</updated>
    <dc:date>2014-08-14T22:51:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/228/</id>
    <link href="https://blog.naoty.dev/228/"/>
    <summary>&lt;h1&gt;PromiseKitとは&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://promisekit.org/&quot;&gt;http://promisekit.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;iOSプログラミングで頻繁に出てくる非同期処理を簡単かつエレガントにするライブラリ。&lt;/li&gt;
&lt;li&gt;JavaScriptとかでおなじみのPromiseパターンの実装と、各種CocoaフレームワークからPromiseを使うための拡張が含まれている。&lt;/li&gt;
&lt;li&gt;Objective-C版とSwift版がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;使い方&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;NSURLConnection.GET(&quot;http://placekitten.com/250/250&quot;).then{ (img:UIImage) in
    // ...
    return CLGeocoder.geocode(addressString:&quot;Mount Rushmore&quot;)
}.then { (placemark:CLPlacemark) in
    // ...
    return MKMapSnapshotter(options:opts).promise()
}.then { (snapshot:MKMapSnapshot) -&amp;gt; Promise&amp;lt;Int&amp;gt; in
    // ...
    let av = UIAlertView()
    // ...
    return av.promise()
}.then {
    self.title = &quot;You tapped button #\($0)&quot;
}.then {
    return CLLocationManager.promise()
}.catch { _ -&amp;gt; CLLocation in
    return CLLocation(latitude: 41.89, longitude: -87.63)
}.then { (ll:CLLocation) -&amp;gt; Promise&amp;lt;NSDictionary&amp;gt; in
    // ...
}.then
// ...
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;then&lt;/code&gt;や&lt;code&gt;catch&lt;/code&gt;にクロージャを渡してメソッドチェーンしていく。これは普通のPromiseパターンと同じ。&lt;/li&gt;
&lt;li&gt;エラーが発生したら最も近い&lt;code&gt;catch&lt;/code&gt;で補足される。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;tl;dr&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;NSURLConnection+PromiseKit.swift&lt;/code&gt;のようなextensionが何種類か用意されている。
&lt;ul&gt;
&lt;li&gt;拡張されたメソッドは非同期処理を開始し、Promiseオブジェクトを初期化してすぐに返す。&lt;/li&gt;
&lt;li&gt;非同期処理が成功すると、&lt;code&gt;fulfiller&lt;/code&gt;メソッドが実行される。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;fulfiller&lt;/code&gt;メソッドは以下を実行する。
&lt;ul&gt;
&lt;li&gt;Promiseオブジェクトの&lt;code&gt;status&lt;/code&gt;を&lt;code&gt;.Fulfilled&lt;/code&gt;に更新する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;handlers&lt;/code&gt;にあるクロージャをすべて実行する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Promiseオブジェクトの&lt;code&gt;then&lt;/code&gt;メソッドを呼ぶと以下のようなクロージャが&lt;code&gt;handlers&lt;/code&gt;に追加され、新しいPromiseオブジェクトを返す。
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;then&lt;/code&gt;メソッドの引数のクロージャを実行する。&lt;/li&gt;
&lt;li&gt;その返り値を&lt;code&gt;fulfiller&lt;/code&gt;に渡して実行する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;NSURLConnection+Promise.swift&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;public class func GET(url:String) -&amp;gt; Promise&amp;lt;NSData&amp;gt; {
    // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;いくつかの拡張を見てみるとすべて&lt;code&gt;Promise&amp;lt;T&amp;gt;&lt;/code&gt;を返すようになってる。&lt;/li&gt;
&lt;li&gt;この返り値に対して&lt;code&gt;then&lt;/code&gt;や&lt;code&gt;catch&lt;/code&gt;を呼んでいるので、これらのメソッドは&lt;code&gt;Promise&lt;/code&gt;クラスのメソッドだと考えられる。&lt;code&gt;Promise&lt;/code&gt;クラスについてはあとで見ていく。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;public class func GET(url:String) -&amp;gt; Promise&amp;lt;UIImage&amp;gt; {
    let rq = NSURLRequest(URL:NSURL(string:url))
    return promise(rq)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;冒頭の使い方のところで出てきた&lt;code&gt;UIImage&lt;/code&gt;を扱うメソッドはこれ。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;NSURLRequest&lt;/code&gt;オブジェクトを作って&lt;code&gt;promise&lt;/code&gt;メソッドというのに渡して呼んでいる。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;public class func promise(rq:NSURLRequest) -&amp;gt; Promise&amp;lt;UIImage&amp;gt; {
    return fetch(rq) { (fulfiller, rejecter, data) in
        // ...
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;引数に渡した&lt;code&gt;NSURLRequest&lt;/code&gt;オブジェクトを&lt;code&gt;fetch&lt;/code&gt;メソッドに渡して呼び出している。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;fetch&lt;/code&gt;メソッドはさらにクロージャを受け取っている。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;func fetch&amp;lt;T&amp;gt;(var request: NSURLRequest, body: ((T) -&amp;gt; Void, (NSError) -&amp;gt; Void, NSData) -&amp;gt; Void) -&amp;gt; Promise&amp;lt;T&amp;gt; {
    // ...

    return Promise&amp;lt;T&amp;gt; { (fulfiller, rejunker) in
        // ...
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;fetch&lt;/code&gt;内では&lt;code&gt;Promise&amp;lt;T&amp;gt;&lt;/code&gt;を初期化して返している。初期化時にまたもクロージャを渡している。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;// Promise.swift

public init(_ body:(fulfiller:(T) -&amp;gt; Void, rejecter:(NSError) -&amp;gt; Void) -&amp;gt; Void) {
    // ...
    body(fulfiller, rejecter)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;上のようなクロージャを受け取る初期化はこれのようだ。&lt;/li&gt;
&lt;li&gt;まず&lt;code&gt;body&lt;/code&gt;という引数を受け取る。&lt;code&gt;body&lt;/code&gt;は&lt;code&gt;fulfiller&lt;/code&gt;と&lt;code&gt;rejecter&lt;/code&gt;の2つのクロージャを受け取って&lt;code&gt;Void&lt;/code&gt;を返すクロージャ（ややこしい…）である。&lt;/li&gt;
&lt;li&gt;この&lt;code&gt;init&lt;/code&gt;では引数として受け取った&lt;code&gt;body&lt;/code&gt;というクロージャを実行している。&lt;code&gt;body&lt;/code&gt;に渡される2つの引数は&lt;code&gt;init&lt;/code&gt;内で定義される内部メソッドである。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;// Promise.swift

public init(_ body:(fulfiller:(T) -&amp;gt; Void, rejecter:(NSError) -&amp;gt; Void) -&amp;gt; Void) {
    func recurse() {
        for handler in handlers { handler() }
        handlers.removeAll(keepCapacity: false)
    }
    func rejecter(err: NSError) {
        if self.pending {
            self.state = .Rejected(err)
            recurse()
        }
    }
    func fulfiller(obj: T) {
        if self.pending {
            self.state = .Fulfilled(obj)
            recurse()
        }
    }

    body(fulfiller, rejecter)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;fulfiller&lt;/code&gt;メソッドは&lt;code&gt;state&lt;/code&gt;を&lt;code&gt;.Fulfilled&lt;/code&gt;に変更し&lt;code&gt;recurse&lt;/code&gt;を呼ぶ。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rejecter&lt;/code&gt;メソッドは&lt;code&gt;state&lt;/code&gt;を&lt;code&gt;.Rejected&lt;/code&gt;に変更し&lt;code&gt;recurse&lt;/code&gt;を呼ぶ。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;recurse&lt;/code&gt;メソッドは、すべての&lt;code&gt;handler&lt;/code&gt;を実行したあと消去している。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;func fetch&amp;lt;T&amp;gt;(var request: NSURLRequest, body: ((T) -&amp;gt; Void, (NSError) -&amp;gt; Void, NSData) -&amp;gt; Void) -&amp;gt; Promise&amp;lt;T&amp;gt; {
    // ...

    return Promise&amp;lt;T&amp;gt; { (fulfiller, rejunker) in
        NSURLConnection.sendAsynchronousRequest(request, queue:PMKOperationQueue) { (rsp, data, err) in
            // ...

            if err {
                rejecter(err)
            } else {
                body(fulfiller, rejecter, data!)
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Promise&amp;lt;T&amp;gt;&lt;/code&gt;の初期化時に引数として渡されたクロージャが実行されるので、このときに非同期通信が実行されるようだ。&lt;/li&gt;
&lt;li&gt;非同期通信が成功した場合、&lt;code&gt;body(fulfiller, rejecter, data!)&lt;/code&gt;が呼ばれる。この&lt;code&gt;body&lt;/code&gt;というクロージャは&lt;code&gt;fetch&lt;/code&gt;メソッドに渡されたもので、その中の&lt;code&gt;fulfiller&lt;/code&gt;と&lt;code&gt;rejecter&lt;/code&gt;の2つのクロージャは&lt;code&gt;Promise&amp;lt;T&amp;gt;&lt;/code&gt;の&lt;code&gt;init&lt;/code&gt;内で定義されたメソッドである。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Promise.swift&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;public func then&amp;lt;U&amp;gt;(onQueue q:dispatch_queue_t = dispatch_get_main_queue(), body:(T) -&amp;gt; U) -&amp;gt; Promise&amp;lt;U&amp;gt; {
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;シグネチャーがジェネリクスまみれで複雑。&lt;code&gt;dispatch_queue_t&lt;/code&gt;型と&lt;code&gt;(T) -&amp;gt; U&lt;/code&gt;型を引数にとり、&lt;code&gt;Promise&amp;lt;U&amp;gt;&lt;/code&gt;型を返すメソッドということになる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;T&lt;/code&gt;はPromiseクラスの型変数（←言い方合ってる？）であり、&lt;code&gt;NSURLConnection+Promise.swift&lt;/code&gt;の例で言うと、この&lt;code&gt;T&lt;/code&gt;には&lt;code&gt;NSData&lt;/code&gt;や&lt;code&gt;NSString&lt;/code&gt;が入ってくる。&lt;/li&gt;
&lt;li&gt;例えば&lt;code&gt;T&lt;/code&gt;が&lt;code&gt;NSData&lt;/code&gt;の場合、第2引数のbodyは「NSDataを引数にとって&lt;code&gt;U&lt;/code&gt;を返すクロージャ」となる。この&lt;code&gt;U&lt;/code&gt;が例えば&lt;code&gt;MKPlacemark&lt;/code&gt;である場合、&lt;code&gt;then&lt;/code&gt;は&lt;code&gt;Promise&amp;lt;MKPlacemark&amp;gt;&lt;/code&gt;を返すことになる。&lt;/li&gt;
&lt;li&gt;この返り値は&lt;code&gt;Promise&amp;lt;T&amp;gt;&lt;/code&gt;であるため再度&lt;code&gt;then&lt;/code&gt;を呼び出すことができメソッドチェーンが成立している。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;public func then&amp;lt;U&amp;gt;(onQueue q:dispatch_queue_t = dispatch_get_main_queue(), body:(T) -&amp;gt; U) -&amp;gt; Promise&amp;lt;U&amp;gt; {
    switch state {
    case .Rejected(let error):
        // ...
    case .Fulfilled(let value):
        // ...
    case .Pending:
        // ...
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;state&lt;/code&gt;は&lt;code&gt;Promise&amp;lt;T&amp;gt;&lt;/code&gt;クラスのプロパティで&lt;code&gt;State&amp;lt;T&amp;gt;&lt;/code&gt;型として定義されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;enum State&amp;lt;T&amp;gt; {
    case Pending
    case Fulfilled(@autoclosure () -&amp;gt; T)
    case Rejected(NSError)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Fulfilled&lt;/code&gt;は引数に&lt;code&gt;() -&amp;gt; T&lt;/code&gt;型のクロージャをとる。&lt;code&gt;@autoclosure&lt;/code&gt;は指定された引数を暗黙的にクロージャとして扱えるようにする。これによって引数を&lt;code&gt;{ ... }&lt;/code&gt;で囲う必要がなくなる。cf) &lt;a href=&quot;https://developer.apple.com/swift/blog/?id=4&quot;&gt;https://developer.apple.com/swift/blog/?id=4&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;public func then&amp;lt;U&amp;gt;(onQueue q:dispatch_queue_t = dispatch_get_main_queue(), body:(T) -&amp;gt; U) -&amp;gt; Promise&amp;lt;U&amp;gt; {
    switch state {
    case .Rejected(let error):
        // ...
    case .Fulfilled(let value):
        // ...
    case .Pending:
        // ...
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;state&lt;/code&gt;はenum型であることが分かったので、&lt;code&gt;then&lt;/code&gt;に戻る。&lt;/li&gt;
&lt;li&gt;このswitch文ではvalue bindingsを行っている。マッチしたcase文で宣言された変数に値が割り当てられる。例えば、.Fulfilledにマッチした場合、stateを初期化する際に.Fulfilledに渡されたクロージャが&lt;code&gt;value&lt;/code&gt;という変数に割り当てられる。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;public func then&amp;lt;U&amp;gt;(onQueue q:dispatch_queue_t = dispatch_get_main_queue(), body:(T) -&amp;gt; U) -&amp;gt; Promise&amp;lt;U&amp;gt; {
    switch state {
    // ...
    case .Pending:
        return Promise&amp;lt;U&amp;gt;{ (fulfiller, rejecter) in
            // ...
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;status&lt;/code&gt;は宣言時に初期値として&lt;code&gt;.Pending&lt;/code&gt;を渡しているため、最初は&lt;code&gt;.Pending&lt;/code&gt;のcase文を通ることになりそう。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;status&lt;/code&gt;が&lt;code&gt;.Pending&lt;/code&gt;である場合、&lt;code&gt;Promise&amp;lt;U&amp;gt;&lt;/code&gt;を初期化して返している。&lt;/li&gt;
&lt;li&gt;初期化の際、引数にクロージャを渡している。上述の通り、渡されたクロージャは初期化処理の最後に実行される。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;public func then&amp;lt;U&amp;gt;(onQueue q:dispatch_queue_t = dispatch_get_main_queue(), body:(T) -&amp;gt; U) -&amp;gt; Promise&amp;lt;U&amp;gt; {
    switch state {
    // ...
    case .Pending:
        return Promise&amp;lt;U&amp;gt;{ (fulfiller, rejecter) in
            self.handlers.append{
                switch self.state {
                case .Fulfilled(let value):
                    fulfiller(value())
                case .Rejected(let error):
                    dispatch_async(onQueue){ fulfiller(body(error)) }
                case .Pending:
                    abort()
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Promise&amp;lt;U&amp;gt;&lt;/code&gt;の初期化の最後で&lt;code&gt;self.handlers&lt;/code&gt;にクロージャが追加されている。上述の通り、&lt;code&gt;handlers&lt;/code&gt;は&lt;code&gt;fulfiller&lt;/code&gt;と&lt;code&gt;rejecter&lt;/code&gt;内で呼ばれる&lt;code&gt;recurse&lt;/code&gt;ですべて実行される。&lt;/li&gt;
&lt;li&gt;つまり、&lt;code&gt;then()&lt;/code&gt;に渡されたクロージャは&lt;code&gt;handlers&lt;/code&gt;に追加され、そのPromiseオブジェクトの非同期処理が完了したときに呼ばれることになる。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>PromiseKit/swiftを読んだ</title>
    <updated>2014-08-13T02:12:00+00:00</updated>
    <dc:date>2014-08-13T02:12:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/227/</id>
    <link href="https://blog.naoty.dev/227/"/>
    <summary>&lt;pre lang=&quot;js&quot; class=&quot;highlight highlight-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dateString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2014-07-23T00:00:00.000+09:00&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrongFormat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%Y-%m-%dT%H:%M:%S.%L%Z&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;wrongFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dateString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; null&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rightFormat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%Y-%m-%dT%H:%M:%S.%L+09:00&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;rightFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dateString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; Date&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;タイムゾーンを表す&lt;code&gt;%Z&lt;/code&gt;は&lt;code&gt;+0900&lt;/code&gt;のようなフォーマットはパースできるけど、&lt;code&gt;:&lt;/code&gt;が含まれるとパースできない。上のようにしたら解決した。&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mbostock/d3/wiki/Time-Formatting&quot;&gt;https://github.com/mbostock/d3/wiki/Time-Formatting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://groups.google.com/forum/#!topic/d3-js/mPiCEO8ZfnU&quot;&gt;https://groups.google.com/forum/#!topic/d3-js/mPiCEO8ZfnU&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>D3.jsで&quot;+09:00&quot;がパースできない件</title>
    <updated>2014-07-24T14:34:00+00:00</updated>
    <dc:date>2014-07-24T14:34:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/226/</id>
    <link href="https://blog.naoty.dev/226/"/>
    <summary>&lt;p&gt;モバイルアプリケーションやJavaScriptアプリケーションのバックエンドとして使うAPIのテンプレートを作り始めた。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/metallic&quot;&gt;https://github.com/naoty/metallic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;まだそんなにできてないけど、連休終わるので進捗を書いておく。まだ公開できるレベルではないので公開はしてない。&lt;/p&gt;
&lt;h1&gt;動機&lt;/h1&gt;
&lt;p&gt;iOSアプリのバックエンドをサクッと作りたい、でも単なるデータストアとしてではなくて少しロジックを実装したい、ってときにMBaaSを使うよりも自分でサーバーサイドを実装したくなる。そのとき、RailsかSinatraかを選ぶことになる。Railsでももちろん問題ないのだけど、必要十分な処理さえしてくれればいいという思いからSinatraを選びたくなる。だけど、Sinatra単独でバックエンドを実装するのにはかなり時間がかかる。例えば、データベースとの接続やマイグレーションの管理、JSONのパースと出力などなど、地味に大変な実装をこなさないといけない。そこで、SinatraベースでバックエンドAPIを実装するためのテンプレートを作ることにした。&lt;/p&gt;
&lt;h1&gt;現時点での機能&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;metallic new APPLICATION_NAME&lt;/code&gt;: テンプレートからプロジェクト作成する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;metallic generate controller RESOURCE_NAME&lt;/code&gt;: テンプレートからコントローラーを作成する。コントローラーはSinatra::Baseを継承したRESTful APIを持つクラス。作成されたコントローラーは自動的にRackミドルウェアとしてuseされる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;metallic generate model RESOURCE_NAME&lt;/code&gt;: テンプレートからモデルとマイグレーションを作成する。今のところORMはActiveRecord固定で、DBもSQLite3固定になってる。ここはRailsみたいにオプションで切り替えられるようにしたい。Rakefileもテンプレートについてくるので、そのまま&lt;code&gt;rake db:migrate&lt;/code&gt;できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;使用例&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ metallic new todo
      create todo/Gemfile
      create todo/Rakefile
      create todo/app/application.rb
      create todo/config.ru
      create todo/config/database.yml
$ cd todo
$ bundle install
$ metallic generate controller tasks
      create app/controllers/tasks_controller.rb
$ metallic generate model Task
      create app/models/task.rb
      create db/migrations/20140721224324_create_tasks.rb
$ rake db:migrate
== 20140721224324 CreateTasks: migrating ======================================
-- create_table(:tasks)
   -&amp;gt; 0.0011s
== 20140721224324 CreateTasks: migrated (0.0012s) =============================
$ rackup
[2014-07-21 22:43:34] INFO WEBrick 1.3.1
[2014-07-21 22:43:34] INFO ruby 2.1.2 (2014-05-08) [x86_64-darwin13.0]
[2014-07-21 22:43:34] INFO WEBrick::HTTPServer#start: pid=20212 port=9292
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ curl http://localhost:9292/tasks
GET /tasks
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;実装予定&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;各種必要なRackミドルウェア: bodyのJSONをパースするヤツ、パラメータをパースしてヘルパーからページ番号やソートにアクセスできるようにするヤツ、例外をキャッチして適切なステータスコードを返すヤツ、整形されたJSONを返すヤツ、などをRackミドルウェアとして実装したい。&lt;/li&gt;
&lt;li&gt;他DB対応: &lt;code&gt;generate&lt;/code&gt;コマンドのオプションでテンプレートを切り替えられるようにしたい。&lt;/li&gt;
&lt;li&gt;あと、方針を決めかねているけど、Railsと組み合わせて使えるようにしたい。というのも、モバイルアプリケーションのバックエンドとしてだけじゃなくてJavaScriptアプリケーションのバックエンドとしても使えるようなものを目指しているので、部分的にmetallicアプリケーションをRailsアプリケーションにマウントさせる、みたいな使い方も考えられそう。なので、そういう場合を想定したテンプレートを考えたい。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>バックエンドAPI用のテンプレートを作り始めた</title>
    <updated>2014-07-21T22:54:00+00:00</updated>
    <dc:date>2014-07-21T22:54:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/225/</id>
    <link href="https://blog.naoty.dev/225/"/>
    <summary>&lt;pre lang=&quot;rb:Gemfile&quot;&gt;&lt;code&gt;gem &quot;rack-contrib&quot;, require: [&quot;rack/contrib/post_body_content_type_parser&quot;], github: &quot;rack/rack-contrib&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;rb:config.ru&quot;&gt;&lt;code&gt;use Rack::PostBodyContentTypeParser
run YourApplication
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これだけ。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;Rack::PostBodyContentTypeParser&lt;/code&gt;はその名の通りContentTypeを見てbodyをパースするmiddlewareで、実装を見ると実体は&lt;code&gt;application/json&lt;/code&gt;のときは&lt;code&gt;JSON.parse(body)&lt;/code&gt;みたいなことをしているだけ。&lt;/p&gt;
&lt;p&gt;現在リリースされているバージョンだと正常に動かないので、開発版をgithubから取得している。&lt;/p&gt;</summary>
    <title>SinatraでJSONを受け取る</title>
    <updated>2014-07-17T09:12:00+00:00</updated>
    <dc:date>2014-07-17T09:12:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/224/</id>
    <link href="https://blog.naoty.dev/224/"/>
    <summary>&lt;p&gt;ステージング環境用にビルドしたくて、&lt;code&gt;Debug&lt;/code&gt;をコピーして&lt;code&gt;Staging&lt;/code&gt;というビルド設定を作成したところ、&lt;code&gt;library not found for -lPods&lt;/code&gt;というエラーが出るようになった。リンク時に失敗しているみたい。&lt;/p&gt;
&lt;p&gt;CocoaPodsの設定を調べてみると、Podfileに以下のような設定を追加しなくてはいけないらしい。&lt;/p&gt;
&lt;pre lang=&quot;rb:Podfile&quot;&gt;&lt;code&gt;xcodeproj &quot;MyProject&quot;, { &quot;Staging&quot; =&amp;gt; :debug }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ビルド設定を作るとき、必ず&lt;code&gt;Debug&lt;/code&gt;か&lt;code&gt;Release&lt;/code&gt;のどちらをコピーするか選択するため、&lt;code&gt;Debug&lt;/code&gt;だったら&lt;code&gt;:debug&lt;/code&gt;、&lt;code&gt;Release&lt;/code&gt;だったら&lt;code&gt;:release&lt;/code&gt;にしてあげればいいようだ。&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.cocoapods.org/syntax/podfile.html#xcodeproj&quot;&gt;http://guides.cocoapods.org/syntax/podfile.html#xcodeproj&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Xcodeでビルド設定を作ったらCocoaPodsのリンクに失敗する件</title>
    <updated>2014-07-16T18:51:00+00:00</updated>
    <dc:date>2014-07-16T18:51:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/223/</id>
    <link href="https://blog.naoty.dev/223/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;http://shields.io&quot;&gt;http://shields.io&lt;/a&gt;というサービスを使うとフラットデザインのバッジをSVG形式で返してくれるので、これを以下のような感じで使うだけです。&lt;/p&gt;
&lt;h2&gt;Travis&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/naoty/NTYCSVTable&quot;&gt;&lt;img src=&quot;https://travis-ci.org/naoty/NTYCSVTable.svg?branch=master&quot; alt=&quot;Build Status&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://travis-ci.org/naoty/NTYCSVTable&quot;&gt;&lt;img src=&quot;http://img.shields.io/travis/naoty/NTYCSVTable/master.svg?style=flat&quot; alt=&quot;Build Status&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt;&lt;span class=&quot;gd&quot;&gt;-[![Build Status](https://travis-ci.org/naoty/NTYCSVTable.svg?branch=master)](https://travis-ci.org/naoty/NTYCSVTable)
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+[![Build Status](http://img.shields.io/travis/naoty/NTYCSVTable/master.svg?style=flat)](https://travis-ci.org/naoty/NTYCSVTable)
&lt;/span&gt;&lt;/pre&gt;
&lt;h2&gt;CocoaPods&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://cocoadocs.org/docsets/NTYCSVTable&quot;&gt;&lt;img src=&quot;http://cocoapod-badges.herokuapp.com/v/NTYCSVTable/badge.png&quot; alt=&quot;Version&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt; -&amp;gt; &lt;a href=&quot;http://cocoadocs.org/docsets/NTYCSVTable&quot;&gt;&lt;img src=&quot;http://img.shields.io/cocoapods/v/NTYCSVTable.svg?style=flat&quot; alt=&quot;Version&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://cocoadocs.org/docsets/NTYCSVTable&quot;&gt;&lt;img src=&quot;http://cocoapod-badges.herokuapp.com/p/NTYCSVTable/badge.png&quot; alt=&quot;Platform&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt; -&amp;gt; &lt;a href=&quot;http://cocoadocs.org/docsets/NTYCSVTable&quot;&gt;&lt;img src=&quot;http://img.shields.io/cocoapods/p/NTYCSVTable.svg?style=flat&quot; alt=&quot;Platform&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre lang=&quot;diff&quot; class=&quot;highlight highlight-diff&quot;&gt;&lt;span class=&quot;gd&quot;&gt;-[![Version](http://cocoapod-badges.herokuapp.com/v/NTYCSVTable/badge.png)](http://cocoadocs.org/docsets/NTYCSVTable)
-[![Platform](http://cocoapod-badges.herokuapp.com/p/NTYCSVTable/badge.png)](http://cocoadocs.org/docsets/NTYCSVTable)
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+[![Version](http://img.shields.io/cocoapods/v/NTYCSVTable.svg?style=flat)](http://cocoadocs.org/docsets/NTYCSVTable)
+[![Platform](http://img.shields.io/cocoapods/p/NTYCSVTable.svg?style=flat)](http://cocoadocs.org/docsets/NTYCSVTable)
&lt;/span&gt;&lt;/pre&gt;
&lt;h2&gt;その他&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://shields.io&quot;&gt;http://shields.io&lt;/a&gt;を見ると、他にもcoverallとかcode climateなどよく使われるバッジが提供されているようです。&lt;/p&gt;</summary>
    <title>shields.ioでバッジをフラットデザインにする</title>
    <updated>2014-07-10T12:51:00+00:00</updated>
    <dc:date>2014-07-10T12:51:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/222/</id>
    <link href="https://blog.naoty.dev/222/"/>
    <summary>&lt;p&gt;Apple Push Notification Service（APNs）は、ソフトウェア開発者（プロバイダ）から受け取ったメッセージを安全な方法でデバイスにプッシュ通知するサービスである。&lt;/p&gt;
&lt;h1&gt;プッシュ通知までの流れ&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;プロバイダはデバイストークンとペイロードから成る通知メッセージを作る。&lt;/li&gt;
&lt;li&gt;プロバイダはその通知メッセージをAPNsに送信する。&lt;/li&gt;
&lt;li&gt;APNsは受け取った通知メッセージのデバイストークンから配信先のデバイスを特定し、通知メッセージを配信する。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;接続を確立するまでの流れ&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;APNsとデバイス間で認証を行う（システムによって行われるため、開発者が実装する必要はない）。&lt;/li&gt;
&lt;li&gt;APNsとプロバイダ間で認証を行う。&lt;/li&gt;
&lt;li&gt;プロバイダがAPNsからサーバ証明書を取得し、検証する。&lt;/li&gt;
&lt;li&gt;プロバイダがプロバイダ証明書をAPNsに送信する。&lt;/li&gt;
&lt;li&gt;デバイストークンを生成しプロバイダと共有する。&lt;/li&gt;
&lt;li&gt;アプリケーションがリモート通知の登録を行う。&lt;/li&gt;
&lt;li&gt;システムがリモート通知の設定を行い、デバイストークンをアプリケーションデリゲートに渡す。&lt;/li&gt;
&lt;li&gt;アプリケーションがデバイストークンをプロバイダに送信する。&lt;/li&gt;
&lt;li&gt;プロバイダからの通信すべてにデバイストークンを添付させる。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;APNs関連ツール群&lt;/h1&gt;
&lt;p&gt;AFNetworkingでおなじみのmatttさんが様々な関連ツールを開発している。それぞれのツールが上で説明した全体像の中でどのような位置づけなのか整理した。&lt;/p&gt;
&lt;h2&gt;houston&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nomad/houston&quot;&gt;https://github.com/nomad/houston&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;プロバイダからAPNsに向けて通知メッセージを送るためのクライアント。Ruby製。上記の通り、プロバイダがAPNsにメッセージを送るには、(1)APNsとの間で認証を行う、(2)配信先のデバイストークンを取得する必要がある。なので、houstonでもメッセージを送る際にAPNsのサーバー証明書と配信先のデバイストークンを設定する必要がある。&lt;/p&gt;
&lt;h2&gt;rack-push-notification&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mattt/rack-push-notification&quot;&gt;https://github.com/mattt/rack-push-notification&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;iOSアプリからデバイストークンを受け取りDBに保存するRackアプリケーション（Sinatraベース）。上述の通り、iOSアプリはAPNsからデバイストークンを取得したあと、プロバイダと共有する必要がある。rack-push-notificationはそのデバイストークンを受け取るためのAPIを用意する。&lt;/p&gt;
&lt;h2&gt;Orbiter&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mattt/Orbiter&quot;&gt;https://github.com/mattt/Orbiter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;iOSアプリからデバイストークンを送信するためのクライアント。今までの2つのツールはプロバイダ側のツールだったが、OrbiterはiOSアプリ側のツールである。取得したデバイストークンをプロバイダに送信する処理を簡略化できるようだ。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;これらの関連ツールを使ったプッシュ通知のフローは以下のようになる。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;iOSアプリはリモート通知の登録を行い、APNsからデバイストークンを取得する。&lt;/li&gt;
&lt;li&gt;iOSアプリは &lt;strong&gt;Orbiter&lt;/strong&gt; を使ってデバイストークンをプロバイダに送信する。&lt;/li&gt;
&lt;li&gt;プロバイダは &lt;strong&gt;rack-push-notification&lt;/strong&gt; を使って用意したAPIからデバイストークンを受け取りDBに保存する。&lt;/li&gt;
&lt;li&gt;プロバイダは &lt;strong&gt;houston&lt;/strong&gt; を使ってプッシュ通知をAPNsに送信する。&lt;/li&gt;
&lt;li&gt;APNsはプロバイダ証明書とデバイストークンからプッシュ通知を転送するデバイスを特定しプッシュ通知を送る。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://developer.apple.com/jp/devcenter/ios/library/documentation/RemoteNotificationsPG.pdf&quot;&gt;LocalおよびPush Notificationプログラミングガイド&lt;/a&gt;(PDF)&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>APNsの概要と関連ツール群</title>
    <updated>2014-07-07T01:46:00+00:00</updated>
    <dc:date>2014-07-07T01:46:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/221/</id>
    <link href="https://blog.naoty.dev/221/"/>
    <summary>&lt;p&gt;かなり前に&lt;a href=&quot;http://cui-about.me&quot;&gt;cui-about.me&lt;/a&gt;というサービスを作ったんだけど、&lt;a href=&quot;http://peco.github.io/&quot;&gt;peco&lt;/a&gt;と相性がいいことに気づいたので組み合わせてみた。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20140704/20140704175901.gif&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20140704/20140704175901.gif&quot; alt=&quot;f:id:naoty_k:20140704175901g:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20140704175901g:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;about() {
    if [$# -eq 0]; then
        local name=$(curl -s cui-about.me/users | peco)
    else
        local name=$1
    fi
    curl cui-about.me/$name
}
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>pecoでハッカーを検索</title>
    <updated>2014-07-04T18:00:00+00:00</updated>
    <dc:date>2014-07-04T18:00:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/220/</id>
    <link href="https://blog.naoty.dev/220/"/>
    <summary>&lt;p&gt;今後ちゃんと学んだことをメモに残しておこうと思い直し、メモを管理する仕組みを整理した。&lt;/p&gt;
&lt;h1&gt;保存場所&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Dropbox/Documents/notes/&lt;/code&gt;以下。複数のPC間で簡単に共有したいのでDropboxで管理する。&lt;/p&gt;
&lt;h1&gt;メモを書く&lt;/h1&gt;
&lt;p&gt;まず以下のような関数を用意した。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;note() {
    local note_path=$HOME/Dropbox/Documents/notes/$1
    if [! -e $note_path]; then
        touch $note_path
    fi
    open $note_path
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;note &amp;lt;ファイル名&amp;gt;&lt;/code&gt;でメモを書き始めることができる。&lt;/p&gt;
&lt;p&gt;メモはすべてmarkdown形式で、エディタはvimを使うことにした。&lt;a href=&quot;https://github.com/thinca/vim-template&quot;&gt;vim-template&lt;/a&gt;というプラグインを使うことで、notes/*.mdにマッチするファイルを以下のようなテンプレートで開くようにした。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: expand('%:t:r') %&amp;gt;
date: strftime('%Y-%m-%d') %&amp;gt;
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;%=&lt;/code&gt;と&lt;code&gt;%&amp;gt;&lt;/code&gt;で囲われたコードはVim Scriptとして評価されて展開され、&lt;code&gt;&amp;lt;+CURSOR+&amp;gt;&lt;/code&gt;の位置をカーソルの初期位置としてファイルが開く。このような設定はvim-templateのヘルプにあるのでそちらを参照してほしい。&lt;/p&gt;
&lt;h1&gt;メモの検索&lt;/h1&gt;
&lt;p&gt;agとpecoを使う。agは高速なgrepということで、任意の文字列を含むファイルを検索する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;onote() {
    echo $(ag -l $1 $HOME/Dropbox/Documents/notes/) | peco | xargs open
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;template内で日付を必ず入れるようにしているので、日付で検索することもできるようになった。&lt;/p&gt;</summary>
    <title>技術メモの管理</title>
    <updated>2014-06-30T23:55:00+00:00</updated>
    <dc:date>2014-06-30T23:55:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/219/</id>
    <link href="https://blog.naoty.dev/219/"/>
    <summary>&lt;p&gt;Rakeタスクを先頭から入力するのがダルいのでpecoを組み合わせてみた。&lt;/p&gt;
&lt;pre lang=&quot;zsh:.zshrc&quot;&gt;&lt;code&gt;pecorake() { local task=$(rake -W | peco | cut -d &quot; &quot; -f 2); rake $task }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Escでキャンセルしたときを考慮してないけど、これだけの設定でかなり捗るようになった。peco便利。&lt;/p&gt;</summary>
    <title>PecoからRakeタスクを実行する</title>
    <updated>2014-06-23T19:11:00+00:00</updated>
    <dc:date>2014-06-23T19:11:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/218/</id>
    <link href="https://blog.naoty.dev/218/"/>
    <summary>&lt;p&gt;Swiftでは数値リテラルがオブジェクトとして扱えるので、Rubyっぽく数値にいろんなメソッドを定義することができる。そこで、簡単な&lt;code&gt;#times&lt;/code&gt;をSwiftで実装してみた。&lt;/p&gt;
&lt;pre lang=&quot;swift&quot; class=&quot;highlight highlight-swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nf&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;naoty &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; naoty 0&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; naoty 1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; naoty 2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; naoty 3&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; naoty 4&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;きっと誰かがActiveSupportのような&lt;code&gt;1.minutes&lt;/code&gt;みたいなExtensionを書くのでしょう（予言）。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;せっかくなので、Swiftのクロージャの文法について軽く補足してみる。&lt;/p&gt;
&lt;p&gt;まず、&lt;code&gt;#times&lt;/code&gt;メソッドは&lt;code&gt;(Int) -&amp;gt; ()&lt;/code&gt;型の関数を引数にとる。このとき、以下のように書くことができる。&lt;/p&gt;
&lt;pre lang=&quot;swift&quot; class=&quot;highlight highlight-swift&quot;&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;naoty &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;in&lt;/code&gt;以下が十分に短い場合は一行に続けることもできる。&lt;/p&gt;
&lt;pre lang=&quot;swift&quot; class=&quot;highlight highlight-swift&quot;&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;naoty &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ところで、&lt;code&gt;#times&lt;/code&gt;の定義で引数の関数の型は&lt;code&gt;(Int) -&amp;gt; ()&lt;/code&gt;であると明示的に宣言しているので、型推論を利用できる。実際に引数に関数を渡すとき、その関数の型をわざわざ宣言する必要がない。そのため、以下のように書き直せる。&lt;/p&gt;
&lt;pre lang=&quot;swift&quot; class=&quot;highlight highlight-swift&quot;&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;naoty &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;もし、あるクロージャを関数の最後の引数として渡す場合、クロージャを&lt;code&gt;()&lt;/code&gt;の外に追い出すことができる。なので、さらに以下のように書き直せる。&lt;/p&gt;
&lt;pre lang=&quot;swift&quot; class=&quot;highlight highlight-swift&quot;&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;naoty &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;hr&gt;
&lt;h3&gt;追記&lt;/h3&gt;
&lt;p&gt;さらに、クロージャが関数の唯一の引数である場合は&lt;code&gt;()&lt;/code&gt;を省略できるので、以下のように書き直せる。&lt;/p&gt;
&lt;pre lang=&quot;swift&quot; class=&quot;highlight highlight-swift&quot;&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;naoty &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ここまで来るとほとんどRubyと同じように書ける。&lt;/p&gt;</summary>
    <title>SwiftでRubyのInteger#timesを実装してみた</title>
    <updated>2014-06-13T00:09:00+00:00</updated>
    <dc:date>2014-06-13T00:09:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/217/</id>
    <link href="https://blog.naoty.dev/217/"/>
    <summary>&lt;p&gt;APIから受け取ったデータを表示するカスタムディレクティブを作る場合、&lt;code&gt;$watch&lt;/code&gt;でscopeのプロパティを監視し再描画を行うといった実装が必要になる。&lt;/p&gt;
&lt;pre lang=&quot;html:index.html&quot;&gt;&lt;code&gt;&amp;lt;div ng-controller=&quot;MyController&quot;&amp;gt;
  &amp;lt;my-directive data=&quot;users&quot;&amp;gt;&amp;lt;/my-directive&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;my-directive&lt;/code&gt;というディレクティブを作る。表示したいデータを参照するscopeのプロパティを&lt;code&gt;data&lt;/code&gt;属性に指定する。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;coffeescript:my_controller.coffee&quot;&gt;&lt;code&gt;window.ngApp.controller &quot;MyController&quot; [&quot;$scope&quot;, &quot;User&quot;, ($scope, User) -&amp;gt;
  $scope.users = User.query()
]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;APIから受け取ったデータを&lt;code&gt;users&lt;/code&gt;というプロパティで参照する。このとき、APIからデータを受け取るのを待たずに空の参照が渡される。非同期に返ってきたデータはこの参照に追加される。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;coffeescript:my_directive.coffee&quot;&gt;&lt;code&gt;window.ngApp.directive &quot;myDirective&quot;, -&amp;gt;
  restrict: &quot;E&quot;
  link: (scope, elements, attrs) -&amp;gt;
    render = (data) -&amp;gt;
      # 描画処理
    scope.$watch(attrs.data, ((newData, oldData) -&amp;gt; render(newData)), true)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;scope.$watch&lt;/code&gt;でscopeのプロパティや、scopeのコンテキストで評価した式の結果を監視する。
&lt;ul&gt;
&lt;li&gt;第1引数に監視対象を指定する。&lt;code&gt;attrs.data&lt;/code&gt;にはDOMで指定した&lt;code&gt;data&lt;/code&gt;属性の値が入るので、今回は&lt;code&gt;&quot;users&quot;&lt;/code&gt;となる。&lt;/li&gt;
&lt;li&gt;第2引数に監視対象が変更されたときに実行する処理を渡す。今回は描画処理を渡す。&lt;/li&gt;
&lt;li&gt;第3引数にtrueを指定すると、監視対象の値が更新されたときに処理が実行されるようになる。監視対象である&lt;code&gt;users&lt;/code&gt;はまず空の参照が渡されその後APIから受け取ったデータをそこに追加する（参照は変更されない）ので、ここでtrueを指定する必要がある。ここを省略すると参照が更新されたときのみ処理が行われる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>カスタムディレクティブでAPIから受け取ったデータを表示する</title>
    <updated>2014-06-12T13:29:00+00:00</updated>
    <dc:date>2014-06-12T13:29:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/216/</id>
    <link href="https://blog.naoty.dev/216/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/NTYCSVTable&quot;&gt;NTYCSVTable&lt;/a&gt;というライブラリを使うと簡単にパースできる。名前の通りCSVをテーブル構造のオブジェクトにパースしてくれるので直感的に扱いやすい。Rubyの&lt;code&gt;CSV::Table&lt;/code&gt;クラスを参考に開発されている。&lt;/p&gt;
&lt;h2&gt;インストール&lt;/h2&gt;
&lt;p&gt;CocoaPodsに公開されているのでPodfileにこのように書いて&lt;code&gt;pod install&lt;/code&gt;すればインストールできる。&lt;/p&gt;
&lt;pre lang=&quot;ruby:Podfile&quot;&gt;&lt;code&gt;pod &quot;NTYCSVTable&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;使い方&lt;/h2&gt;
&lt;p&gt;このようなCSVのパースを想定する。&lt;/p&gt;
&lt;pre lang=&quot;csv:users.csv&quot;&gt;&lt;code&gt;id,name,age
1,Alice,18
2,Bob,19
3,Charlie,20
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これをパースするにはこうすればいい。&lt;/p&gt;
&lt;pre lang=&quot;objective-c&quot;&gt;&lt;code&gt;NSURL *csvURL = [NSURL URLWithString:@&quot;users.csv&quot;];
NTYCSVTable *table = [[NTYCSVTable alloc] initWithContentsOfURL:csvURL];

// Rows
NSArray *rows = table.rows;
NSArray *headers = table.headers;    //=&amp;gt; @[@&quot;id&quot;, @&quot;name&quot;, @&quot;age&quot;]
NSDictionary *alice = table.rows[0]; //=&amp;gt; @{@&quot;id&quot;: @1, @&quot;name&quot;: @&quot;Alice&quot;, @&quot;age&quot;: @18}
NSDictionary *bob = table.rows[1];   //=&amp;gt; @{@&quot;id&quot;: @2, @&quot;name&quot;: @&quot;Bob&quot;, @&quot;age&quot;: @19}

// Columns
NSDictionary *columns = table.columns;
NSArray *names = table.columns[@&quot;name&quot;]; //=&amp;gt; @[@&quot;Alice&quot;, @&quot;Bob&quot;, @&quot;Charlie&quot;]
NSArray *ages = table.columns[@&quot;age&quot;];   //=&amp;gt; @[@18, @19, @20]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また、あるヘッダーに特定の値を持つ列を検索するためにこのようなメソッドも用意されている。&lt;/p&gt;
&lt;pre lang=&quot;objective-c&quot;&gt;&lt;code&gt;[table rowsOfValue:@1 forHeader:@&quot;id&quot;];  //=&amp;gt; @[@{@&quot;id&quot;: @1, @&quot;name&quot;: @&quot;Alice&quot;, @&quot;age&quot;: @18}]
[table rowsOfValue:@20 forHeader:@&quot;age&quot;] //=&amp;gt; @[@{@&quot;id&quot;: @3, @&quot;name&quot;: @&quot;Charlie&quot;, @&quot;age&quot;: @20}]
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;以上、ステマでした。&lt;/p&gt;</summary>
    <title>Objective-CでCSVをパースする</title>
    <updated>2014-04-24T11:12:00+00:00</updated>
    <dc:date>2014-04-24T11:12:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/215/</id>
    <link href="https://blog.naoty.dev/215/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/NTYPopulator&quot;&gt;NTYPopulator&lt;/a&gt;というライブラリで簡単に初期データを追加できる。CocoaPodsからインストールできる。&lt;/p&gt;
&lt;pre lang=&quot;rb:Podfile&quot;&gt;&lt;code&gt;pod &quot;NTYPopulator&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pod &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;使い方は&lt;code&gt;AppDelegate.m&lt;/code&gt;に一行加えるだけ。&lt;/p&gt;
&lt;pre lang=&quot;objective-c:AppDelegate.m&quot;&gt;&lt;code&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
	[[NTYPopulator new] run];
	return YES;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;リソースバンドル内にある&lt;code&gt;seeds/*.csv&lt;/code&gt;を探しだして、ファイル名と同名のEntityにデータを追加する。例えば、&lt;code&gt;seeds/user.csv&lt;/code&gt;のデータは&lt;code&gt;User&lt;/code&gt;というEntityに追加される。&lt;/p&gt;
&lt;p&gt;デフォルトではモデルファイルとして&lt;code&gt;Model.momd&lt;/code&gt;が参照され、SQLiteファイルとして&lt;code&gt;$(CFBundleName).sqlite&lt;/code&gt;が参照される。これを変更することも可能。&lt;/p&gt;
&lt;pre lang=&quot;objective-c:AppDelegate.m&quot;&gt;&lt;code&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    NSURL *modelURL = [[NSBundle mainBundle] URLForResource:@&quot;MyModel&quot; withExtension:@&quot;momd&quot;];
    NSURL *documentDirectoryURL = [[[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask] lastObject];
    NSURL *sqliteURL = [documentDirectoryURL URLByAppendingPathComponent:@&quot;MySQLite.sqlite&quot;];
    
    NTYPopulator *populator = [[NTYPopulator alloc] initWithModelURL:modelURL sqliteURL:sqliteURL];
    [populator run];
    
    return YES;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;以上、ステマでした。&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;追記&lt;/h3&gt;
&lt;p&gt;NTYPopulatorで想定していたユースケースは開発時に初期データをさくっと入れたいというものなので、リリース時には作成済みのSQLiteファイルを使った方がいいと思う。&lt;/p&gt;</summary>
    <title>CoreDataに簡単に初期データを追加する</title>
    <updated>2014-04-20T13:12:00+00:00</updated>
    <dc:date>2014-04-20T13:12:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/214/</id>
    <link href="https://blog.naoty.dev/214/"/>
    <summary>&lt;p&gt;XcodeでCommand Line Toolを作るときビルドした実行ファイルは、デフォルトでは&lt;code&gt;$HOME/Library/Developer/Xcode/DerivedData/&amp;lt;アプリケーション固有ID&amp;gt;/Build/Products/&amp;lt;Build Configuration&amp;gt;/&lt;/code&gt;以下に保存されます。実行ファイルをGitで管理したい場合など何らかの理由でプロジェクト内に置きたいとき、Build Phasesに設定を追加することで実行ファイルをプロジェクトにコピーする作業を自動化できます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://qiita-image-store.s3.amazonaws.com/0/1044/f6e02520-a8b0-295a-bc78-07666f6d79a0.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/1044/f6e02520-a8b0-295a-bc78-07666f6d79a0.png&quot; alt=&quot;スクリーンショット 2014-04-14 0.59.33.png&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;プロジェクトの設定画面からスクリーンショットのようにBuild PhasesにRun Scriptを追加して以下のようなシェルスクリプトを入力します。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$BUILT_PRODUCTS_DIR&lt;/span&gt;/your_executable &lt;span class=&quot;nv&quot;&gt;$SRCROOT&lt;/span&gt;/bin/your_executable
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;$BUILT_PRODUCTS_DIR&lt;/code&gt;という環境変数は上の&lt;code&gt;$HOME/Library/Developer/Xcode/DerivedData/&amp;lt;アプリケーション固有ID&amp;gt;/Build/Products/&amp;lt;Build Configuration&amp;gt;/&lt;/code&gt;を指し、&lt;code&gt;$SRCROOT&lt;/code&gt;はプロジェクトルートを指します。これでビルドする毎にプロジェクト内に実行ファイルがコピーされます。&lt;/p&gt;</summary>
    <title>Xcodeでビルドした実行ファイルを自動的にプロジェクトにコピーする</title>
    <updated>2014-04-14T01:07:00+00:00</updated>
    <dc:date>2014-04-14T01:07:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/213/</id>
    <link href="https://blog.naoty.dev/213/"/>
    <summary>&lt;p&gt;tmuxを1.9aにアップデートしたら、ウィンドウを作成したり分割したときにパスを引き継がなくなってしまった。&lt;a href=&quot;http://sourceforge.net/p/tmux/tmux-code/ci/master/tree/CHANGES&quot;&gt;ChangeLog&lt;/a&gt;を見てみると、default pathというものを廃止したとのことだった。元の挙動に戻すための設定も書いてあったので、&lt;code&gt;.tmux.conf&lt;/code&gt;を以下のように修正した。&lt;/p&gt;
&lt;pre lang=&quot;conf:.tmux.conf&quot;&gt;&lt;code&gt;bind-key    c     new-window -c &quot;#{pane_current_path}&quot;
bind-key    v     split-window -h -c &quot;#{pane_current_path}&quot;
bind-key    C-v   split-window -h -c &quot;#{pane_current_path}&quot;
bind-key    s     split-window -v -c &quot;#{pane_current_path}&quot;
bind-key    C-s   split-window -v -c &quot;#{pane_current_path}&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;new-window&lt;/code&gt;や&lt;code&gt;split-window&lt;/code&gt;のオプションに&lt;code&gt;-c &quot;#{pane_current_path}&quot;&lt;/code&gt;を付けてあげるとパスを引き継ぐようになった。&lt;/p&gt;</summary>
    <title>tmux 1.9でもウィンドウ作成時にパスを引き継ぐ</title>
    <updated>2014-03-17T13:02:00+00:00</updated>
    <dc:date>2014-03-17T13:02:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/212/</id>
    <link href="https://blog.naoty.dev/212/"/>
    <summary>&lt;pre lang=&quot;yaml:locales/ja.yml&quot;&gt;&lt;code&gt;ja:
  footer: &quot;&amp;amp;copy; naoty All Rights Reserved.&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;などと&lt;code&gt;&amp;amp;copy;&lt;/code&gt;のような特殊文字をロケールファイルで指定するとうまく表示されない。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; I18n.t(&quot;footer&quot;)
=&amp;gt; &quot;&amp;amp;copy; naoty All Rights Reserved.&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こういうときは特殊文字の16進数表記を使うとうまく表示される。&lt;/p&gt;
&lt;pre lang=&quot;yaml:locales/ja.yml&quot;&gt;&lt;code&gt;ja:
  footer: &quot;\xA9 naoty All Rights Reserved.&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; I18n.t(&quot;footer&quot;)
=&amp;gt; &quot;© naoty All Rights Reserved.&quot;
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>Railsのロケールで特殊文字が表示されない問題</title>
    <updated>2014-03-12T13:33:00+00:00</updated>
    <dc:date>2014-03-12T13:33:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/211/</id>
    <link href="https://blog.naoty.dev/211/"/>
    <summary>&lt;p&gt;本文をサニタイズしつつ、オートリンクを有効化したいので以下のように設定した。オートリンクは&lt;code&gt;rails_autolink&lt;/code&gt;というgemが必要。&lt;/p&gt;
&lt;pre lang=&quot;rb:application.rb&quot;&gt;&lt;code&gt;config.after_initialize do
  ActionView::Base.sanitized_allowed_tags.clear
  ActionView::Base.sanitized_allowed_tags = [&quot;a&quot;]
  ActionView::Base.sanitized_allowed_attributes = [&quot;rel&quot;, &quot;target&quot;]
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;許可するtagをクリアしたあとにホワイトリスト方式で許可するタグを指定した。あと、デフォルトでは&lt;code&gt;rel=&quot;nofollow&quot;&lt;/code&gt;とか&lt;code&gt;target=&quot;_blank&quot;&lt;/code&gt;がサニタイズされてしまうので、許可したい属性を追加した。&lt;/p&gt;</summary>
    <title>Railsでオートリンクを有効にしつつサニタイズ</title>
    <updated>2014-03-07T18:21:00+00:00</updated>
    <dc:date>2014-03-07T18:21:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/210/</id>
    <link href="https://blog.naoty.dev/210/"/>
    <summary>&lt;p&gt;rmで大事なファイルを消さないようにゴミ箱フォルダに移動させる設定です。&lt;/p&gt;
&lt;pre lang=&quot;zsh&quot; class=&quot;highlight highlight-zsh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;trash
&lt;/pre&gt;
&lt;pre lang=&quot;zsh:.zshrc&quot;&gt;&lt;code&gt;alias rm=&quot;trash&quot;
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>安全なrmコマンド</title>
    <updated>2014-03-03T15:06:00+00:00</updated>
    <dc:date>2014-03-03T15:06:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/209/</id>
    <link href="https://blog.naoty.dev/209/"/>
    <summary>&lt;pre&gt;&lt;code&gt;You are trying to install in deployment mode after changing
your Gemfile. Run `bundle install` elsewhere and add the
updated Gemfile.lock to version control.

You have deleted from the Gemfile:
* growl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;みたいなメッセージがでてきてデプロイ大失敗した。&lt;/p&gt;
&lt;p&gt;原因はGemfileに&lt;code&gt;RUBY_PLATFORM&lt;/code&gt;を使ったことだった。&lt;/p&gt;
&lt;pre lang=&quot;rb:Gemfile&quot;&gt;&lt;code&gt;group :test do
  gem &quot;growl&quot; if RUBY_PLATFORM =~ /darwin/
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上のメッセージはGemfileとGemfile.lockに不整合があるときに表示される。このようなGemfileの書き方だと、デプロイ先で実行したとき、&lt;code&gt;gem &quot;growl&quot;&lt;/code&gt;が存在しないことになりGemfile.lockとの不整合が生まれると考えられる。&lt;/p&gt;
&lt;p&gt;そこで、Gemfileをこう書き替えた。&lt;/p&gt;
&lt;pre lang=&quot;rb:Gemfile&quot;&gt;&lt;code&gt;group :test do
  gem &quot;growl&quot;, group: :darwin
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;で、capistranoにこのグループをインストールしないように設定する。&lt;/p&gt;
&lt;pre lang=&quot;rb:deploy.rb&quot;&gt;&lt;code&gt;# Ignore platform-specific gems
set :bundle_without, %w(development test darwin).join(&quot; &quot;)
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>プラットフォーム依存のgemのせいでデプロイがこける件</title>
    <updated>2014-02-05T19:13:00+00:00</updated>
    <dc:date>2014-02-05T19:13:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/208/</id>
    <link href="https://blog.naoty.dev/208/"/>
    <summary>&lt;p&gt;モジュールをテストするとき、適当なクラスを作ってそこにincludeした状態をletで使い回したい。というのをこんな感じで書いています。何か他にいい方法があれば教えてください。&lt;/p&gt;
&lt;pre lang=&quot;rb&quot; class=&quot;highlight highlight-rb&quot;&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HogeModule&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HogeModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Class.new&lt;/code&gt;を使うのはこれが初めてかもしれない。&lt;/p&gt;</summary>
    <title>RSpecでmoduleをテストする</title>
    <updated>2014-01-28T13:18:00+00:00</updated>
    <dc:date>2014-01-28T13:18:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/207/</id>
    <link href="https://blog.naoty.dev/207/"/>
    <summary>&lt;p&gt;はてなブログからTumblrに移転しました。理由はHTMLをカスタマイズできる点、無料でも広告がつかない点の2点です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://naoty.tumblr.com/&quot;&gt;http://naoty.tumblr.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ご査収の程、宜しくお願い致します。&lt;/p&gt;</summary>
    <title>ブログ移転しました</title>
    <updated>2014-01-21T11:48:00+00:00</updated>
    <dc:date>2014-01-21T11:48:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/206/</id>
    <link href="https://blog.naoty.dev/206/"/>
    <summary>&lt;p&gt;アイコンをプログラムによって生成して、デフォルトの真っ白なアイコンと差し替えた話です。&lt;/p&gt;
&lt;h2&gt;問題意識&lt;/h2&gt;
&lt;p&gt;開発中のiOSアプリはデフォルトで真っ白な（iOS7から幾何学模様）アイコンですが、開発中のアプリをいくつかインストールすると、ホーム画面に真っ白なアイコンがズラズラと並びます。iOSアプリを開発したことのある方であれば、見慣れた光景かと思います。こういう画面だと、一目でどのアイコンがどのアプリか判断つかないし、なによりiOSらしからぬダサいホーム画面になってしまいます。&lt;/p&gt;
&lt;p&gt;一目でどれがどのアプリか分かって、かつ開発中のアプリで覆い尽くされてもホーム画面が華やかに見える状態を目指して、今回のソリューションを考案しました。&lt;/p&gt;
&lt;h2&gt;picon&lt;/h2&gt;
&lt;p&gt;以上のような問題を解決するため、&lt;a href=&quot;https://github.com/naoty/picon&quot;&gt;picon&lt;/a&gt;というrubygemを作りました。Xcode 5.0以降が必須です。使い方は簡単で以下のとおりです。&lt;/p&gt;
&lt;pre lang=&quot;zsh&quot; class=&quot;highlight highlight-zsh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;picon
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;path/to/project
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;picon generate
&lt;/pre&gt;
&lt;p&gt;これでこんな感じになります。&lt;/p&gt;
&lt;h3&gt;Before&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;https://qiita-image-store.s3.amazonaws.com/0/1044/bd35114d-5177-835d-bf5d-77a68f3d410a.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/1044/bd35114d-5177-835d-bf5d-77a68f3d410a.png&quot; alt=&quot;picon_before_s.png&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;picon_before_s.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3&gt;After&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;https://qiita-image-store.s3.amazonaws.com/0/1044/f117fb38-7db7-d1f2-e558-af2c3437d344.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/1044/f117fb38-7db7-d1f2-e558-af2c3437d344.png&quot; alt=&quot;picon_after_s.png&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;picon_after_s.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;piconはアプリのbundle identifier（com.example.SampleApp的なアレ）のハッシュ値に基づいた&lt;a href=&quot;http://en.wikipedia.org/wiki/Identicon&quot;&gt;identicon&lt;/a&gt;を生成し、デフォルトのアイコンと差し替えます。bundle identifierに基づいているので、アプリ毎にユニークなアイコンが生成されます。もちろんiPadやiOS 7など各解像度に合わせて生成して差し替えてくれます。実装の中身としては、Xcode 5.0から追加されたAsset Catalogという機能を使っています。新しいAsset Catalogを作成し、そこに生成したidenticonを追加して、最後にデフォルトのアイコンのAsset Catalogと入れ替えています。ちょっと強引なやり方をしていますが。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;デフォルトのアイコンに見飽きたという方は、ぜひお使いください。また、まだまだ完成度は高くないのでpull reqやissueもお待ちしております。&lt;/p&gt;</summary>
    <title>アプリのアイコンを自動生成する</title>
    <updated>2013-12-15T16:54:00+00:00</updated>
    <dc:date>2013-12-15T16:54:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/205/</id>
    <link href="https://blog.naoty.dev/205/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://github.com/websocket-rails/websocket-rails&quot;&gt;websocket-rails&lt;/a&gt;を使ってRailsでWebSocketによるPush通知を実装する話をします。&lt;/p&gt;
&lt;p&gt;websocket-railsを使って簡単な&lt;a href=&quot;http://naoty-timeline.herokuapp.com/&quot;&gt;デモ&lt;/a&gt;を作ってHerokuにアップしました。Twitter Streaming APIで受け取ったデータをWebSocketでリアルタイムにクライアントへ送るものです。ソースコードも&lt;a href=&quot;https://github.com/naoty/twitter_streaming_sample&quot;&gt;github&lt;/a&gt;にありますので参考にどうぞ。&lt;/p&gt;
&lt;h2&gt;セットアップ&lt;/h2&gt;
&lt;pre lang=&quot;rb:Gemfile&quot;&gt;&lt;code&gt;gem &quot;websocket-rails&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rails g websocket_rails:install
&lt;/pre&gt;
&lt;p&gt;最後のコマンドで設定ファイルを追加し、&lt;code&gt;application.js&lt;/code&gt;をクライアント側のライブラリを&lt;code&gt;require&lt;/code&gt;するように変更します。&lt;/p&gt;
&lt;p&gt;開発環境ではRack::Lockを無効にしないとエラーになるので以下のようにしておきます。&lt;/p&gt;
&lt;pre lang=&quot;rb:config/environments/development.rb&quot;&gt;&lt;code&gt;TwitterStreamingSample::Application.configure do
  config.middleware.delete Rack::Lock
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;実装&lt;/h2&gt;
&lt;p&gt;WebSocket接続したクライアントに対して任意のタイミングでメッセージを送りたい場合、channelというものを使うと簡単に実装できます。&lt;/p&gt;
&lt;pre lang=&quot;ruby:streamings_controller.rb&quot;&gt;&lt;code&gt;def create
  # ...
  WebsocketRails[:streaming].trigger &quot;create&quot;, tweet
  head :ok
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで、&quot;streaming&quot;というチャネルに&quot;create&quot;というメッセージをtweetのデータとともに送信します。&lt;code&gt;WebSocketRails&lt;/code&gt;という定数はどこからでもアクセス可能なので、任意のタイミングでチャネルにメッセージを送ることが可能です。&lt;/p&gt;
&lt;pre lang=&quot;coffee:streamings.js.coffee&quot;&gt;&lt;code&gt;dispatcher = new WebSocketRails(&quot;ws://#{localhost.host}/websocket&quot;)
channel = dispatcher.subscribe(&quot;streaming&quot;)
channel.bind &quot;create&quot;, (tweet) -&amp;gt;
  # something
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次にクライアント側では、まずWebSocket接続を行います。WebSocket接続はwebsocket-railsが追加する&lt;code&gt;/websocket&lt;/code&gt;というパスに対してリクエストを送ります。&lt;/p&gt;
&lt;p&gt;接続が成功するとdispatcherと呼ばれるオブジェクトを返します。このオブジェクトはWebSocketサーバーとやり取りをする中心的なオブジェクトです。&lt;code&gt;dispatcher#subscribe(チャネル名)&lt;/code&gt;で特定のチャネルを購読するオブジェクトを取得できるので、あとはメッセージを受け取ったときのコールバックを設定するだけです。&lt;/p&gt;
&lt;h3&gt;これだけ&lt;/h3&gt;
&lt;p&gt;これだけでdispatcherでsubscribeしたクライアントすべてに対してRailsからPush通知ができます。&lt;/p&gt;
&lt;h2&gt;nginx&lt;/h2&gt;
&lt;p&gt;本番環境でnginxとともに運用する場合、nginx側の設定も必要です。nginxでWebSocketのプロキシを行うには1.3.13以降であることが必要です。&lt;/p&gt;
&lt;pre lang=&quot;nginx:nginx.conf&quot;&gt;&lt;code&gt;location /websocket {
	proxy_pass http://backend;
	proxy_http_version 1.1;
	proxy_set_header Upgrade $http_upgrade;
	proxy_set_header Connection &quot;Upgrade&quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&quot;Upgrade&quot;というヘッダーはプロトコルをHTTPからWebSocketに変更するために必要な情報で、&lt;a href=&quot;http://tools.ietf.org/html/rfc6455#section-1.3&quot;&gt;RFC&lt;/a&gt;で定められています。&lt;/p&gt;
&lt;h2&gt;Heroku&lt;/h2&gt;
&lt;p&gt;最近、HerokuがWebSocketのサポートを開始しました。ただし、まだβ版での開始なので、デフォルトのままではWebSocketを利用できません。以下のコマンドを実行するとWebSocketの機能がオンになります。&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; class=&quot;highlight highlight-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;heroku labs:enable websockets
&lt;/pre&gt;
&lt;hr&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/websocket-rails/websocket-rails&quot;&gt;websocket-rails/websocket-rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nginx.org/en/docs/http/websocket.html&quot;&gt;WebSocket proxying&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devcenter.heroku.com/articles/ruby-websockets&quot;&gt;Using WebSockets on Heroku with Ruby | Heroku Dev Center&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>websocket-railsで簡単なPush通知を実装する</title>
    <updated>2013-12-03T00:58:00+00:00</updated>
    <dc:date>2013-12-03T00:58:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/204/</id>
    <link href="https://blog.naoty.dev/204/"/>
    <summary>&lt;p&gt;むかし&lt;a href=&quot;http://qiita.com/naoty_k/items/0fce93c683fcb476b2f3&quot;&gt;Kobitoのスタイルをハックするtips&lt;/a&gt;を書いたのですが、先ほどのアップデートでついにカスタムCSSに対応したとのことで、むかし書いたカスタムCSSを若干修正したヤツを共有しておきます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://qiita-image-store.s3.amazonaws.com/0/1044/bb0317de-75a9-45b2-baf6-6f66f237c988.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/1044/bb0317de-75a9-45b2-baf6-6f66f237c988.png&quot; alt=&quot;スクリーンショット 2013-11-07 19.30.19.png&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre lang=&quot;css&quot; class=&quot;highlight highlight-css&quot;&gt;&lt;span class=&quot;c&quot;&gt;/* See Kobito.app/Contents/Resources/markdown.css for predefined style. */&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*
Copyright (c) 2011, Yahoo! Inc. All rights reserved.
Code licensed under the BSD License:
http://developer.yahoo.com/yui/license.html
version: 2.9.0
*/&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#FFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;dd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;ol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;fieldset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;textarea&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;blockquote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;border-collapse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;collapse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;border-spacing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;fieldset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;caption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;cite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;dfn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;optgroup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;textarea&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;inherit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;del&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;ins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;text-decoration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;list-style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;caption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;abbr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;acronym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;font-variant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;vertical-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;baseline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;vertical-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;baseline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/* ------------------------------
 * HTML element
 * ------------------------------ */&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#FFFFFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;14px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#FFFFFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Helvetica Neue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Helvetica&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;h3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#404040&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#AAAAAA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;24px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:first-of-type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;18px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;em&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;italic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;list-style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;disc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#EEEEEE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#AAAAAA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Courier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;monospace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;blockquote&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/* ------------------------------
 * syntax hightlight for Kobito
 * inspired by https://github.com/mojombo/tpw/blob/master/css/syntax.css
 * ------------------------------ */&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ffffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#999988&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;italic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Comment */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.err&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#a61717&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#e3d2d2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Error */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.k&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Keyword */&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/* .highlight .o { font-weight: bold } */&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;/* Operator */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.cm&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#999988&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;italic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Comment.Multiline */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.cp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#999999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Comment.Preproc */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.c1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#999988&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;italic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Comment.Single */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.cs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#999999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;italic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Comment.Special */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.gd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ffdddd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Generic.Deleted */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.gd&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ffaaaa&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Generic.Deleted.Specific */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ge&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;italic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Generic.Emph */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.gr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#aa0000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Generic.Error */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.gh&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#999999&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Generic.Heading */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.gi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ddffdd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Generic.Inserted */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.gi&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#aaffaa&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Generic.Inserted.Specific */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.go&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#888888&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Generic.Output */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.gp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#555555&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Generic.Prompt */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.gs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Generic.Strong */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.gu&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#aaaaaa&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Generic.Subheading */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.gt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#aa0000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Generic.Traceback */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.kc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Keyword.Constant */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.kd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Keyword.Declaration */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.kp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Keyword.Pseudo */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.kr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Keyword.Reserved */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.kt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#445588&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Keyword.Type */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#009999&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Literal.Number */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#d14&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Literal.String */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.na&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#008080&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Name.Attribute */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.nb&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#0086B3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Name.Builtin */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.nc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#445588&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Name.Class */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.no&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#008080&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Name.Constant */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ni&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#800080&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Name.Entity */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ne&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#990000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Name.Exception */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.nf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#990000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Name.Function */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.nn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#555555&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Name.Namespace */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.nt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#000080&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Name.Tag */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.nv&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#008080&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Name.Variable */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Operator.Word */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.w&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#bbbbbb&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Text.Whitespace */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.mf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#009999&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Literal.Number.Float */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.mh&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#009999&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Literal.Number.Hex */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.mi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#009999&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Literal.Number.Integer */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.mo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#009999&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Literal.Number.Oct */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.sb&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#d14&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Literal.String.Backtick */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.sc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#d14&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Literal.String.Char */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.sd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#d14&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Literal.String.Doc */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.s2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#d14&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Literal.String.Double */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.se&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#d14&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Literal.String.Escape */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.sh&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#d14&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Literal.String.Heredoc */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.si&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#d14&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Literal.String.Interpol */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.sx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#d14&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Literal.String.Other */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.sr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#009926&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Literal.String.Regex */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.s1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#d14&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Literal.String.Single */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ss&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#990073&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Literal.String.Symbol */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.bp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#999999&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Name.Builtin.Pseudo */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.vc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#008080&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Name.Variable.Class */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.vg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#008080&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Name.Variable.Global */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.vi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#008080&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Name.Variable.Instance */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.highlight&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.il&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#009999&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Literal.Number.Integer.Long */&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>Kobito用カスタムCSSつくってみた</title>
    <updated>2013-11-07T19:31:00+00:00</updated>
    <dc:date>2013-11-07T19:31:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/203/</id>
    <link href="https://blog.naoty.dev/203/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;http://instagram.com/p/er08ccqmqe/&quot;&gt;&lt;img src=&quot;http://instagram.com/p/er08ccqmqe/media/?size=l&quot; alt=&quot;&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;仕事で複数台のRaspberry Piをセットアップすることになったので、Chefを使ってセットアップを自動化することにした。Chef、Vagrant、Serverspecなどいろいろな周辺ツールの全体像を整理したり、それらを使ったワークフローを体験できてよかったので、ブログとして残しておく。&lt;/p&gt;
&lt;p&gt;また、セットアップに使ったChefのレポジトリはgithubにホストしてあるので参考にどうぞ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/chef-repo&quot;&gt;https://github.com/naoty/chef-repo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今回、Chefで自動化したのは以下の通り。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;apt-getの更新&lt;/li&gt;
&lt;li&gt;gitのインストール&lt;/li&gt;
&lt;li&gt;rbenvを使ってRuby 2.0.0-p247をインストール&lt;/li&gt;
&lt;li&gt;nodebrewを使って最新安定版のnode.jsをインストール&lt;/li&gt;
&lt;li&gt;Wiringpi（GPIOを簡単に操作するためのライブラリ）のインストール&lt;/li&gt;
&lt;li&gt;mjpg-streamer（Webカメラを使ったストリーミングのためのライブラリ）のインストール&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;1. Vagrantで仮想環境を用意する&lt;/h2&gt;
&lt;p&gt;いきなりRaspberry PiにChefを使って環境構築を行うのは失敗したときにやり直すのが大変。なので、Raspberry Piに近い仮想環境を用意して、そこでChefを使ったセットアップを試行錯誤したい。そういうときに便利なのがVagrant。Vagrantを使えば簡単に仮想環境を作ったり壊したりできるので、失敗してもすぐにやり直せる。&lt;/p&gt;
&lt;p&gt;今回、重要だったのがRaspberry Piに近い仮想環境を用意することだった。Vagrantにはboxという仕組みがあって、CentOSとかUbuntuとかいろんなOS、CPUに合わせたひな形がたくさん用意されている。通常は&lt;a href=&quot;http://www.vagrantbox.es/&quot;&gt;ここ&lt;/a&gt;にあるboxを使えばいいんだろうけど、Raspberry Piに近いboxがなかった。Raspberry Piに近いboxを探したところ、&lt;a href=&quot;https://github.com/nickhutchinson/raspberry-devbox&quot;&gt;これ&lt;/a&gt;がよさそうだったので使うことにした。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/nickhutchinson/raspberry-devbox raspberry_pi
$ cd rasbperry_pi
$ vagrant up
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上、これだけでRaspberry Piに近い仮想環境を用意することができた。&lt;/p&gt;
&lt;h2&gt;2. Chefのセットアップ&lt;/h2&gt;
&lt;p&gt;ここはいろんなところで解説されてる通りに行っただけ。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vagrant ssh-config --host vm-raspberry_pi &amp;gt;&amp;gt; ~/.ssh/config
$ knife solo init chef-repo
$ knife solo prepare vm-raspberry_pi
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;3. クックブックの作成とテスト&lt;/h2&gt;
&lt;p&gt;ここから環境構築の手順をコードとして記述していく。クックブックの書き方については「入門ChefSolo」やOpscodeの&lt;a href=&quot;http://docs.opscode.com/chef/resources.html&quot;&gt;公式ドキュメント&lt;/a&gt;を参考にした。このときの注意点としては、Raspberry PiはRubyやnode.jsのインストールに非常に時間がかかるため、timeoutをとても長くする必要がある。数時間はかかると考えた方がいい。&lt;/p&gt;
&lt;p&gt;書いたクックブックを実行する前にVagrantをサンドボックスモードにしておく。こうすると、失敗したときに実行した部分だけやり直すこと（ロールバック）ができる。サンドボックスモードにするためにはsaharaというVagrantのプラグインが必要なのでインストールしておく。&lt;/p&gt;
&lt;p&gt;サンドボックスモードをオンにしてクックブックを実行したあと、本当に期待した通りに環境構築できたかどうかをServerspecを使ってテストする。Serverspecにはいくつかテストを実行する方法があるようだけど、今回はSSHでログインしてテストを実行する形式を採った。テストを通らなかった場合は、saharaを使ってロールバックしてやり直す。テストが通った場合は、saharaを使って変更を確定させる（コミット）。&lt;/p&gt;
&lt;p&gt;これをサイクルさせながら、どんどんクックブックを追加していく。以上をコマンドで表すとこんな感じ。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ knife cookbook create ruby -o site-cookbooks
$ vi site-cookbooks/ruby/recipes/default.rb
$ vi nodes/vm-raspberry_pi.json
$ vi spec/vm-raspberry_pi/ruby_spec.rb
$ vagrant sandbox on
$ knife solo cook vm-raspberry_pi
$ rspec
$ vagrant sandbox commit
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;4. Raspberry PiをChefで環境構築する&lt;/h2&gt;
&lt;p&gt;仮想環境での環境構築が完了したら、いよいよ本物のRaspberry Piにクックブックを適用する。そのためにはnodes以下に本物用の設定を追加するだけでいい。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vi nodes/raspberry_pi.json
$ knife solo cook raspberry_pi
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>ChefでRaspberry Piをセットアップする</title>
    <updated>2013-10-20T17:16:00+00:00</updated>
    <dc:date>2013-10-20T17:16:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/202/</id>
    <link href="https://blog.naoty.dev/202/"/>
    <summary>&lt;p&gt;最近、「&lt;a href=&quot;http://www.jstorimer.com/products/working-with-tcp-sockets&quot;&gt;Working with TCP Sockets&lt;/a&gt;」って本を読んだ。Rubyでソケットと戯れつつ、7つくらいのWebサーバーのアーキテクチャを概観できるいい本だった。で、その中にイベント駆動モデルの実装とかノンブロッキングIOの実装について紹介されてて面白かったので、練習がてらWebSocketサーバーを作ることにした。&lt;/p&gt;
&lt;h2&gt;PingPong&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20131011/20131011013521.gif&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20131011/20131011013521.gif&quot; alt=&quot;f:id:naoty_k:20131011013521g:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20131011013521g:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/pingpong&quot;&gt;https://github.com/naoty/pingpong&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;卓球ハウスっぽい名前にした。数日で作ったので、他のクライアントへpush通知を行うことしかできない。たぶん大きいデータも送れない気がする。&lt;/p&gt;
&lt;h2&gt;WebSocketサーバーの実装とは&lt;/h2&gt;
&lt;p&gt;まずは&lt;a href=&quot;http://tools.ietf.org/html/rfc6455&quot;&gt;RFC 6455&lt;/a&gt;のサーバーに関する部分を読んだ。最低限必要な部分をRubyで実装していった。例えば、以下のコードはHandshake（websocket接続の確立）の際にサーバーがクライアントに返すレスポンスヘッダーを作っている。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def response_headers
  [
    [&quot;Upgrade&quot;, &quot;websocket&quot;],
    [&quot;Connection&quot;, &quot;Upgrade&quot;],
    [&quot;Sec-WebSocket-Accept&quot;, signature]
  ]
end

def signature
  value = @header[&quot;Sec-WebSocket-Key&quot;] + &quot;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&quot;
  hash = Digest::SHA1.digest(value)
  Base64.strict_encode64(hash)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ご覧のとおりハードコーディングがたくさん出てくる。RFCを読むと、このヘッダーにはこの値を入れなさいって書いてあることが多い。なので、それぞれの値の意味はわからないけどとりあえずRFCに従ってハードコーディングしている。&lt;code&gt;signature&lt;/code&gt;というメソッドはあるヘッダーの値をRFCで以下のように定められた形式で生成している。（余談だけど、ここで&lt;code&gt;Base64.encode64&lt;/code&gt;を使って小1時間ハマった。これは改行コードを入れるためここでは使えない。）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A |Sec-WebSocket-Accept| header field. The value of this header field is constructed by concatenating /key/, defined above in step 4 in Section 4.2.2, with the string &quot;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&quot;, taking the SHA-1 hash of this concatenated value to obtain a 20-byte value and base64-encoding (see Section 4 of [RFC4648]) this 20-byte hash.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;イベント駆動モデルとノンブロッキングIO&lt;/h2&gt;
&lt;p&gt;push通知はイベント駆動モデルというアーキテクチャを使って実装した。イベント駆動モデルはマルチプロセスやマルチスレッドとは違ってシングルスレッドで多数のリクエストを並行処理する。具体的には、websocket接続の確立に成功したソケットを配列に入れておき、ループ内でそれらのソケットにread/writeしていく。このとき、read/writeがブロッキングしてしまうとすべての処理がそこで止まってしまうので、read/writeの前に&lt;code&gt;select(2)&lt;/code&gt;等を使ってread/write可能なソケットだけ選択してread/writeを行う。これがノンブロッキングIOだと思う（だよね…？）。&lt;/p&gt;
&lt;p&gt;実際のコードは以下の通り。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def start
  @sockets = {}
  @message_queue = []

  loop do
    to_read = @sockets.values &amp;lt;&amp;lt; @server
    to_write = @sockets.values
    readables, writables, _ = IO.select(to_read, to_write)

    readables.each do |socket|
      if socket == @server
        establish_connection
      else
        begin
          request = socket.read_nonblock(CHUNK_SIZE)
          message = Frame::Request.new(request).message
          # the message may be passed to a web application.
          @message_queue &amp;lt;&amp;lt; Message.new(socket.fileno, message)
        rescue EOFError
          @sockets.delete(socket.fileno)
        end
      end
    end

    message = @message_queue.shift
    next if message.nil? || message.empty?

    writables.each do |socket|
      if socket.fileno != message.from
        data = Frame::Response.new(message.body).data
        socket.write_nonblock(data)
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;感想&lt;/h2&gt;
&lt;p&gt;WebSocket、イベント駆動モデル、ノンブロッキングIO…という言葉はよく耳にしてきたけど理解したとは言えなかった。実際にWebSocketサーバーを書いてみると、コードに基づいて何が行われているのか正確に理解することができた。push通知も何やら凄そうな響きがするけど、実際に実装してみると特に難しいことはしていなかった。また、websocketの弱点と言われている、CPUヘビーな処理がなぜ弱点なのかも合点がいった。シングルスレッドで処理しているので、例えばレンダリングのような重い処理がひとつでも走ると、全体に悪影響が出るということだと理解した。&lt;/p&gt;</summary>
    <title>RubyのWebSocketサーバー「pingpong」を作った</title>
    <updated>2013-10-11T02:25:00+00:00</updated>
    <dc:date>2013-10-11T02:25:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/201/</id>
    <link href="https://blog.naoty.dev/201/"/>
    <summary>&lt;p&gt;Unite.vimでfile_recとかgrepとかでvendor/bundle以下のgemとかが出てきてウザいときがある。そこで&lt;code&gt;.gitignore&lt;/code&gt;で無視したファイルを候補から除外するように設定した。&lt;/p&gt;
&lt;pre lang=&quot;vim:.vimrc&quot;&gt;&lt;code&gt;&quot; .gitignoreで指定したファイルと.git/以下のファイルを候補から除外する
function! s:unite_gitignore_source()
  let sources = []
  if filereadable('./.gitignore')
    for file in readfile('./.gitignore')
      &quot; コメント行と空行は追加しない
      if file !~ &quot;^#\\|^\s\*$&quot;
        call add(sources, file)
      endif
    endfor
  endif
  if isdirectory('./.git')
    call add(sources, '.git')
  endif
  let pattern = escape(join(sources, '|'), './|')
  call unite#custom#source('file_rec', 'ignore_pattern', pattern)
  call unite#custom#source('grep', 'ignore_pattern', pattern)
endfunction
call s:unite_gitignore_source()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vim Scriptはほとんど書いたことがないのでアレかもしれない。ただ&lt;code&gt;.gitignore&lt;/code&gt;を一行ずつロードしてリストに追加してjoinしてエスケープしてUnite.vimの設定に追加してるだけ。ついでに&lt;code&gt;.git&lt;/code&gt;以下も除外するようにした。&lt;/p&gt;</summary>
    <title>Unite.vimで.gitignoreで無視したファイルを候補から除外する</title>
    <updated>2013-08-22T17:34:00+00:00</updated>
    <dc:date>2013-08-22T17:34:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/200/</id>
    <link href="https://blog.naoty.dev/200/"/>
    <summary>&lt;pre lang=&quot;vim&quot; class=&quot;highlight highlight-vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:quickrun_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cpp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;   &lt;span class=&quot;s1&quot;&gt;'command'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'g++'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;   &lt;span class=&quot;s1&quot;&gt;'cmdopt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-std=c++11'&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Mac OS X 10.8&lt;/li&gt;
&lt;li&gt;gcc 4.9（Homebrewで最新版をインストールした）&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>quickrun.vimでC++11をコンパイルする</title>
    <updated>2013-08-21T11:36:00+00:00</updated>
    <dc:date>2013-08-21T11:36:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/199/</id>
    <link href="https://blog.naoty.dev/199/"/>
    <summary>&lt;p&gt;vimでmarkdown書ける前提で、以下のような設定を書くと&lt;code&gt;- [ ]&lt;/code&gt;のようなtodoリスト記法をラクに書いたり、Leader（デフォルトだと&lt;code&gt;\&lt;/code&gt;）でオン・オフを切り替えられるようになる。&lt;/p&gt;
&lt;pre lang=&quot;vim:.vim/ftplugin/markdown.vim&quot;&gt;&lt;code&gt;&quot; todoリストを簡単に入力する
abbreviate tl - [ ]

&quot; 入れ子のリストを折りたたむ
setlocal foldmethod=indent

&quot; todoリストのon/offを切り替える
nnoremap &amp;lt;buffer&amp;gt; &amp;lt;Leader&amp;gt;&amp;lt;Leader&amp;gt; :call ToggleCheckbox()&amp;lt;CR&amp;gt;
vnoremap &amp;lt;buffer&amp;gt; &amp;lt;Leader&amp;gt;&amp;lt;Leader&amp;gt; :call ToggleCheckbox()&amp;lt;CR&amp;gt;

&quot; 選択行のチェックボックスを切り替える
function! ToggleCheckbox()
  let l:line = getline('.')
  if l:line =~ '\-\s\[\s\]'
    let l:result = substitute(l:line, '-\s\[\s\]', '- [x]', '')
    call setline('.', l:result)
  elseif l:line =~ '\-\s\[x\]'
    let l:result = substitute(l:line, '-\s\[x\]', '- [ ]', '')
    call setline('.', l:result)
  end
endfunction
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>vimでtodoリストを書くためのtips</title>
    <updated>2013-08-14T00:18:00+00:00</updated>
    <dc:date>2013-08-14T00:18:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/198/</id>
    <link href="https://blog.naoty.dev/198/"/>
    <summary>&lt;p&gt;iOS 6以降&lt;code&gt;AVAudioSession&lt;/code&gt;の&lt;code&gt;delegate&lt;/code&gt;プロパティがdeprecatedになったんだけど、その代わりにどうやって設定するのかあんまり情報がなかった。&quot;notification送る&quot;とは書いてあったんだけど、サンプルコードがなかったので、動作確認したコードを載せておく。&lt;/p&gt;
&lt;p&gt;各イベントに対応する通知名があるので、それを&lt;code&gt;NSNotificationCenter&lt;/code&gt;に登録しておけばいい。&lt;/p&gt;
&lt;pre lang=&quot;objc:AppDelegate.m&quot;&gt;&lt;code&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)options
{
    AVAudioSession *session = [AVAudioSession sharedInstance];

    NSNotificationCenter *center = [NSNotificationCenter defaultCenter];
    [center addObserver:self selector:@selector(sessionDidInterrupt:) name:AVAudioSessionInterruptionNotification object:nil];
    [center addObserver:self selector:@selector(sessionRouteDidChange:) name:AVAudioSessionRouteChangeNotification object:nil];
}

- (void)sessionDidInterrupt:(NSNotification *)notification
{
    switch ([notification.userInfo[AVAudioSessionInterruptionTypeKey] intValue]) {
        case AVAudioSessionInterruptionTypeBegan:
            NSLog(@&quot;Interruption began&quot;);
            break;
        case AVAudioSessionInterruptionTypeEnded:
        default:
            NSLog(@&quot;Interruption ended&quot;);
            break;
    }
}

- (void)sessionRouteDidChange
{
    NSLog(@&quot;%s&quot;, __PRETTY_FUNCTION__);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVAudioSession_ClassReference/Reference/Reference.html&quot;&gt;AVAudioSession Class Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>iOS6以降のAVAudioSessionのdelegate設定方法</title>
    <updated>2013-08-09T18:12:00+00:00</updated>
    <dc:date>2013-08-09T18:12:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/197/</id>
    <link href="https://blog.naoty.dev/197/"/>
    <summary>&lt;p&gt;卓球ハウスに来てから楽しすぎてコード書いてないことに気づいたので、なんか書こうと思った。最近はセンサーのデータをどうにかiOSに転送したくていろいろ試しているのだけど、送られたデータを表示するときに何かとグラフを描画したくなる。&lt;/p&gt;
&lt;p&gt;iOSでグラフを描画したいとき、まず&lt;a href=&quot;http://code.google.com/p/core-plot/&quot;&gt;CorePlot&lt;/a&gt;を試してみる。だけど、ドキュメントがあんまりないし、見た目がダサい。githubじゃないのもなんかなぁと思ってすぐにやめてしまう。で、CorePlotはやめてwebviewでJSのグラフ描画ライブラリを使うことにする。&lt;a href=&quot;http://www.highcharts.com/&quot;&gt;highcharts&lt;/a&gt;が便利なのでよく使う。でも、やっぱりいちいちHTMLとJSのファイルを用意しなくちゃいけないのがダルいとは思っていた。&lt;/p&gt;
&lt;p&gt;そこでせっかくだしグラフ描画ライブラリをObj-Cで実装してみることにした。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/NTChartView&quot;&gt;naoty/NTChartView&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20130806/20130806230903.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20130806/20130806230903.png&quot; alt=&quot;f:id:naoty_k:20130806230903p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20130806230903p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;まだぜんぜんできてない。かろうじて上のような折れ線グラフを表示できるレベル。負値すらうまく表示できない。もちろんテストもない。地味に頭を使う実装が多い気がする。&lt;/p&gt;
&lt;p&gt;将来的には折れ線グラフだけじゃなくて円グラフと棒グラフも実装したい。けっこう時間かかりそうなので、ヒマなときにゆっくり実装したい。&lt;/p&gt;</summary>
    <title>iOS用グラフ描画ライブラリを書き始めた</title>
    <updated>2013-08-06T23:10:00+00:00</updated>
    <dc:date>2013-08-06T23:10:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/196/</id>
    <link href="https://blog.naoty.dev/196/"/>
    <summary>&lt;p&gt;今更ながらAsset Pipelineでコントローラー・アクションごとにassetを管理する方法を調べた。&lt;/p&gt;
&lt;p&gt;Assets PrecompileはすべてのJSやCSSがひとつのファイルにまとめてくれるので、通信量が減ったりキャッシュが効きやすくなったりメリットはあるけど、適切に管理しないと思わぬところに影響が出てしまうことがある。&lt;/p&gt;
&lt;p&gt;いろいろ方法はありそうだけど、調べたなかでは以下のやり方がよさそうでした。他にいい方法があればコメントください。&lt;/p&gt;
&lt;h1&gt;JavaScript&lt;/h1&gt;
&lt;p&gt;下記のとおり実装すると、おおまかに次のような流れで各コントローラー・アクション用のJSが実行されるはず。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;bodyタグのdata属性にコントローラー名とアクション名が入る&lt;/li&gt;
&lt;li&gt;グローバルオブジェクトに名前空間が用意される&lt;/li&gt;
&lt;li&gt;各コントローラーごとのオブジェクトが名前空間に用意される&lt;/li&gt;
&lt;li&gt;JSがbodyタグのdata属性からコントローラー名とアクション名を取得する&lt;/li&gt;
&lt;li&gt;名前空間からコントローラー名に対応するJSオブジェクトを取得する&lt;/li&gt;
&lt;li&gt;そのオブジェクトに定義された、アクション名に対応するメソッドを実行する&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;1. bodyタグのdata属性にコントローラー名とアクション名を挿入する&lt;/h2&gt;
&lt;p&gt;あとでJS側からコントローラー名とアクション名を取得するため、bodyタグのdata属性に入れておく。&lt;code&gt;controller_path&lt;/code&gt;を使うと名前空間も含んだコントローラー名になる。&lt;/p&gt;
&lt;pre lang=&quot;rb:application.html.haml&quot;&gt;&lt;code&gt;
%body{data: { controller: controller.controller_path, action: controller.action_name } }
  = yield
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;2. グローバルオブジェクトに名前空間を用意する&lt;/h2&gt;
&lt;p&gt;各コントローラー用のオブジェクトを管理するための名前空間をグローバルオブジェクトに用意しておく。&lt;code&gt;?=&lt;/code&gt;は&lt;code&gt;null&lt;/code&gt;または&lt;code&gt;undefined&lt;/code&gt;であれば代入する意味。&lt;/p&gt;
&lt;pre lang=&quot;coffeescript:app/assets/javascripts/my_application.js.coffee&quot;&gt;&lt;code&gt;
this.MyApplication ?= {}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;3. 各コントローラー用のオブジェクトを用意する&lt;/h2&gt;
&lt;p&gt;各コントローラー用のオブジェクトを各JSファイルに定義して、先ほど用意した名前空間に登録しておく。オブジェクト内では下のようにアクション名に対応した関数を用意しておく。&lt;/p&gt;
&lt;pre lang=&quot;coffeescript:users.js.coffee&quot;&gt;&lt;code&gt;
class UsersController
  index: -&amp;gt;
    console.log(&quot;UsersController#index&quot;)

  show: -&amp;gt;
    console.log(&quot;UsersController#show&quot;)

this.MyApplication.users = new UsersController
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;4. コントローラー名からオブジェクトを取得してフックを実行する&lt;/h2&gt;
&lt;p&gt;さっき作ったファイルを&lt;code&gt;application.js&lt;/code&gt;で&lt;code&gt;require&lt;/code&gt;したあとで、下のようなコードを書く。1.でbodyタグのdata属性に挿入しておいたコントローラー名とアクション名を取得する。で、そのコントローラー名に対応するJSのオブジェクトを名前空間から探し、見つかったらアクション名に対応するJSの関数を実行する。&lt;/p&gt;
&lt;pre lang=&quot;js:application.js&quot;&gt;&lt;code&gt;
//= ...
//= require my_application
//= require_tree .

$(function () {
    var $body = $(&quot;body&quot;);
    var controller = $body.data(&quot;controller&quot;).replace(/\//, &quot;_&quot;);
    var action = $body.data(&quot;action&quot;);

    var activeController = MyApplication[controller];

    if (activeController !== undefined) {
        if ($.isFunction(activeController[action])) {
            activeController[action]();
        }
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;CSS&lt;/h1&gt;
&lt;h2&gt;1. bodyタグのクラスにコントローラー名とアクション名を使って名前空間を用意する&lt;/h2&gt;
&lt;p&gt;JSのときと同様に名前空間を含めたいので&lt;code&gt;controller_path&lt;/code&gt;を使う。&lt;/p&gt;
&lt;pre lang=&quot;rb:application.html.haml&quot;&gt;&lt;code&gt;
%body{class: css_namespace}
  = yield
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;rb:application_helper.rb&quot;&gt;&lt;code&gt;
def css_namespace
  controller_namespace = controller.controller_path.gsub(/\//) { &quot;_&quot; }
  &quot;#{controller_namespace} #{controller.action_name}&quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;2. 名前空間ごとにCSSを定義する&lt;/h2&gt;
&lt;p&gt;sassやscssを使えば簡単に定義できる。&lt;/p&gt;
&lt;pre lang=&quot;sass:users.css.sass&quot;&gt;&lt;code&gt;
.users
  // コントローラー全体のCSS

  &amp;amp;.index
    // 各アクションのCSS

  &amp;amp;.show
  &amp;amp;.new
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jerodsanto.net/2012/02/a-simple-pattern-to-namespace-and-selectively-execute-certain-bits-of-javascript-depending-on-which-rails-controller-and-action-are-active/&quot;&gt;A Simple Pattern to Namespace and Selectively Execute Certain Bits of JavaScript Depending on Which Rails Controller and Action are Active - Jerod Santo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/6102158/how-to-manage-css-stylesheet-assets-in-rails-3-1&quot;&gt;sass - How to manage CSS Stylesheet Assets in Rails 3.1? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Asset Pipelineでコントローラー・アクションごとにassetを管理する</title>
    <updated>2013-07-18T13:46:00+00:00</updated>
    <dc:date>2013-07-18T13:46:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/195/</id>
    <link href="https://blog.naoty.dev/195/"/>
    <summary>&lt;p&gt;2013年もあっという間に半年が経ちました。上半期の半分はiOSアプリやAndroidアプリを書いたり、プライベートでgemを書いたりしてました。上半期のもう半分は新しい会社でハードウェアの企画・開発に携わりました。この期間は自分のなかで失敗の連続で落ち込む日が多かったように思います。そしてけっこう太りました。技術面のみならずいろんなところで自分の至らなさを突きつけられました。プライベートでの時間の使い方が散漫だったのが最大の反省点です。もっとハードウェアという未知の領域の理解に時間をかけるべきでした。まだまだwebへの未練が捨てられず、ついついハードウェアよりweb的なものやアプリを作ったりvimいじりをしてしまうのがよくなかったです。ただ、&lt;a href=&quot;http://naoty.hatenablog.com/entry/2012/12/31/021602&quot;&gt;昨年の大晦日&lt;/a&gt;にたてた目標、「ハードウェアを開発すること」は少しずつ実現していっているように思います。&lt;/p&gt;
&lt;p&gt;そして、おととい引っ越しました。シェアハウスです。数年前に一度トライして失敗に終わりましたが、念願かなって実現できました。自分史上最高にいい家です。足が伸ばせるお風呂は初めてでした。住民は同年代のプログラマーで、僕よりはるかに優秀な人たちです。あと、彼らと親交のあるインターネッツ勢が来客されるので、僕は末席でじーっとしてます。&lt;/p&gt;
&lt;p&gt;半年経った反省を基に、新たな環境で、なんとか2013年の目標を達成できるよう努力したいです。あと、かなりの出費で瀕死の状態がしばらく続きそうなので、アプリで一発あてたいです。よろしくお願いいたします。&lt;/p&gt;</summary>
    <title>半年経ちました・引っ越しました</title>
    <updated>2013-07-01T02:37:00+00:00</updated>
    <dc:date>2013-07-01T02:37:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/194/</id>
    <link href="https://blog.naoty.dev/194/"/>
    <summary>&lt;p&gt;ついにRails 4がリリースされたので軽く触ってみたら、3.xから変わったところを見つけたので共有。まだ日本語の情報は見当たらなかった。&lt;/p&gt;
&lt;p&gt;APIを試しに作ってみようと思い&lt;code&gt;curl&lt;/code&gt;でPOSTリクエストを送ろうとしたら以下のようなエラーが。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -X POST -d &quot;name='hoge'&quot; http://localhost:3000/bikes
Can't verify CSRF token authenticity
Completed 422 Unprocessable Entity in 1ms

ActionController::InvalidAuthenticityToken (ActionController::InvalidAuthenticityToken):
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rails 3.xのときはWarningは出たものの、エラーにはならなかったような…。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;application_controller.rb&lt;/code&gt;を見てみると、以下のようなコメントがありました。&lt;/p&gt;
&lt;pre lang=&quot;rb:application_controller.rb&quot;&gt;&lt;code&gt;class ApplicationController &amp;lt; ActionController::Base
  # Prevent CSRF attacks by raising an exception.
  # For APIs, you may want to use :null_session instead.
  protect_from_forgery with: :exception
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;どうやらAPIを作りたい場合は、&lt;code&gt;:exception&lt;/code&gt;ではなく&lt;code&gt;:null_session&lt;/code&gt;を使うといいようです。&lt;/p&gt;
&lt;p&gt;気になってactionpackのソースコードを読んでみました。Rails 3.xのときにソースコードを読んだときの記事を最後に載せたので参考にしてみてください。&lt;/p&gt;
&lt;pre lang=&quot;rb:actionpack-4.0.0/lib/action_controller/metal/request_forgery_protection.rb&quot;&gt;&lt;code&gt;def protect_from_forgery(options = {})
  self.forgery_protection_strategy = protection_method_class(options[:with] || :null_session)
  self.request_forgery_protection_token ||= :authenticity_token
  prepend_before_action :verify_authenticity_token, options
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.xのときと比べると32行目の&lt;code&gt;forgery_protection_strategy&lt;/code&gt;というのが新しく追加されたようです。&lt;code&gt;with&lt;/code&gt;オプションで指定したクラスをセットしているようなので詳しく見てみます。&lt;/p&gt;
&lt;pre lang=&quot;rb:actionpack-4.0.0/lib/action_controller/metal/request_forgery_protection.rb&quot;&gt;&lt;code&gt;def protection_method_class(name)
  ActionController::RequestForgeryProtection::ProtectionMethods.const_get(name.to_s.classify)
rescue NameError
  raise ArgumentError, 'Invalid request forgery protection method, use :null_session, :exception, or :reset_session'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;デフォルトのように&lt;code&gt;:exception&lt;/code&gt;が指定されてる場合は&lt;code&gt;Exception&lt;/code&gt;クラスが、今回のようにAPI用に使う&lt;code&gt;:null_session&lt;/code&gt;が指定された場合は&lt;code&gt;NullSession&lt;/code&gt;クラスがどこかに定義されているようです。&lt;/p&gt;
&lt;pre lang=&quot;rb:actionpack-4.0.0/lib/action_controller/metal/request_forgery_protection.rb&quot;&gt;&lt;code&gt;class Exception
  def initialize(controller)
    @controller = controller
  end

  def handle_unverified_request
    raise ActionController::InvalidAuthenticityToken
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;あったあった。どこかのタイミングで&lt;code&gt;handle_unverified_request&lt;/code&gt;が呼ばれて、冒頭のように例外が発生するわけですね。&lt;/p&gt;
&lt;pre lang=&quot;rb:actionpack-4.0.0/lib/action_controller/metal/request_forgery_protection.rb&quot;&gt;&lt;code&gt;class ResetSession
  def initialize(controller)
    @controller = controller
  end

  def handle_unverified_request
    @controller.reset_session
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;さらに&lt;code&gt;ResetSession&lt;/code&gt;というクラスも見つかりました。これは例外を発生させる代わりにセッションをリセットするみたいです。これはRails 3.xのときと同じ挙動だったと思います。&lt;/p&gt;
&lt;pre lang=&quot;rb:actionpack-4.0.0/lib/action_controller/metal/request_forgery_protection.rb&quot;&gt;&lt;code&gt;class NullSession
  # ...

  # This is the method that defines the application behavior when a request is found to be unverified.
  def handle_unverified_request
    request = @controller.request
    request.session = NullSessionHash.new(request.env)
    request.env['action_dispatch.request.flash_hash'] = nil
    request.env['rack.session.options'] = { skip: true }
    request.env['action_dispatch.cookies'] = NullCookieJar.build(request)
  end

  # ...
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;で、&lt;code&gt;NullSession&lt;/code&gt;クラスを見てみると、&lt;code&gt;NullSessionHash&lt;/code&gt;オブジェクトと&lt;code&gt;NullCookieJar&lt;/code&gt;オブジェクトというのが出てきますが、こいつらはどうやら中身が空っぽのモックオブジェクトっぽいです。&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;p&gt;Rails 3.xのときに&lt;code&gt;protect_from_forgery&lt;/code&gt;の中身を追いかけた記録です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://qiita.com/naoty_k/items/ce037ea79bb5893f2b89&quot;&gt;CSRFトークンの検証プロセス&lt;/a&gt;&lt;/p&gt;</summary>
    <title>Rails 4.0だとCSRFトークンでエラーになる</title>
    <updated>2013-06-28T23:41:00+00:00</updated>
    <dc:date>2013-06-28T23:41:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/193/</id>
    <link href="https://blog.naoty.dev/193/"/>
    <summary>&lt;pre lang=&quot;vim:.vim/after/ftplugin/php.vim&quot;&gt;&lt;code&gt;nmap &amp;lt;F4&amp;gt; :execute 'Ref phpmanual ' . expand('&amp;lt;cword&amp;gt;') &amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;vim:.vim/ftplugin/ruby.vim&quot;&gt;&lt;code&gt;nnoremap &amp;lt;F4&amp;gt; :execute 'Ref refe ' . expand('&amp;lt;cword&amp;gt;') &amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;expand('&amp;lt;cword&amp;gt;')&lt;/code&gt;でカーソル上の単語が取れる。この関数をマッピングで使ううまいやり方わからなかったけど、これでとりあえずいけた。&lt;/p&gt;</summary>
    <title>カーソル上の単語でvim-refを検索する</title>
    <updated>2013-06-26T00:42:00+00:00</updated>
    <dc:date>2013-06-26T00:42:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/192/</id>
    <link href="https://blog.naoty.dev/192/"/>
    <summary>&lt;p&gt;6/1と昨日6/22の2日間、konashi make-a-thonに参加してきた。&lt;a href=&quot;http://konashi.ux-xu.com/&quot;&gt;konashi&lt;/a&gt;を使ってiOSと連携するハードウェアをmakeするイベントだった。数人のチームに分かれてアイデアのブレーンストーミングから実際の開発まで行った。&lt;/p&gt;
&lt;p&gt;一日目はワークショップ形式でたくさんのアイデアを出しまくった。その中から実装するアイデアを決めた。二日目までの3週間、僕はiOSアプリ担当ということで90%くらい完成させた。で、二日目にはハードウェアと筐体とkonashiを結合して、アプリから操作するところまでを確認し、微調整をした。で、できたのがこれ。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20130622/20130622160819.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20130622/20130622160819.jpg&quot; alt=&quot;f:id:naoty_k:20130622160819j:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20130622160819j:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;なにこの完成度ww&lt;/p&gt;
&lt;p&gt;このコースターはグラスのビールが空になるとiOSにバイブで通知する。コースターには感圧センサーが入っていて、重さをkonashiを使ってbluetoothでiOSアプリに送信する。で、アプリ側で重さが一定値を超えるとバイブするようになっている。上司のグラスが空になったらアプリが教えてくれるので、飲み会の席でうまく立ち回れる。アプリのソースコードはGithubで公開しているので、konashiのサンプルコードとして参考にしてもらえるとうれしい。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/Konastar&quot;&gt;Github - naoty/Konastar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;感想としては、自分では思いもよらない面白いアイデアがどんどん出てきて面白かった。もっとこういう話をいろんな人としてみたいと思った。makeのための環境や技術はどんどん進歩していく一方で、相対的にmakeするもののアイデアが不足しているように感じていたところ、こういう機会に参加できたことはいい刺激になった。&lt;/p&gt;
&lt;p&gt;あと、不特定多数が利用するデバイスを利用者それぞれにパーソナライズして利用できるようにするための手段としてスマホを捉えるのは、すごく興味深い応用範囲のひろい考え方だと思った。スマホには利用履歴や設定が保存されており、それを共用デバイスと通信することで共用デバイスをパーソナライズすることが可能、というのは考えたことなかった。コンビニで買い物するときいちいち「TSUTAYAカード持ってません」って言うの誰の得にもなってない気がする。&lt;code&gt;TSUTAYA_CARD = false&lt;/code&gt;みたいな設定をスマホに保存し、なんらかの形でコンビニと通信することでこの問題を解決したい。&lt;/p&gt;
&lt;p&gt;ちょっと話が脱線したけど、どのチームも完成度が高くて面白かった。イベント終了後の懇親会では、言い知れぬ充実感とものづくりの喜びと今後のmakerムーブメントへの期待とでいい気分になった。よかった。&lt;/p&gt;</summary>
    <title>konashi make-a-thonに参加してきた</title>
    <updated>2013-06-23T01:16:00+00:00</updated>
    <dc:date>2013-06-23T01:16:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/191/</id>
    <link href="https://blog.naoty.dev/191/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;http://naoty.hatenablog.com/entry/2013/05/27/003308&quot;&gt;LTのスライドつくるのだるい - naoty.to_s&lt;/a&gt;の続き。&lt;/p&gt;
&lt;p&gt;&quot;slide_template&quot;という名前はあまりに味気なかったので&quot;glide&quot;という名前をつけた。&quot;slide&quot;に近い単語で、スムーズにスライドを作成できるイメージから名付けてみた。あと、ギタフリで好きな曲の名前でもある。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/glide&quot;&gt;naoty/glide · GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;slide_template改めglideの今後の方向性と課題について考えてみた。glideが目指している方向性を端的に言うと「slide版のtwitter bootstrap」だと思う。すごく凝ったスライドをつくる人には向いてないけど、時間をかけずにそれなりにいい感じのスライドを作りたい人に向けたプロダクトにしていきたい。プログラマーがプログラミング以外のところで時間を奪われるのは社会的な損失だと思う。一方で、プログラマーによる勉強会は増えてる気がする。いちおう僕もEbisu.rbを月1で開催してたりする。勉強会が増えるとスライドを作成する時間も増える。勉強会自体はいいことだと思うけど、スライド作成に時間が奪われるのはよくないことだと思う。そこで、スライドを簡単に作成するフレームワークが必要だと思った。ここらへんがglideをつくるきっかけとなってる。&lt;/p&gt;
&lt;p&gt;で、この方向性に沿って今後やっていくことは、以下のように考えてる。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;デフォルトのテーマを豊富にそろえる。今のところほとんどCSSがない状態なので、bootstrapみたいな感じでクラスを指定するだけでかっこいい感じのスライドになるようにしたい。&lt;/li&gt;
&lt;li&gt;スライドをPDF形式で出力できるようにする。htmlをアップするサーバーを持たない人はspeakerdeckとか使うと思うので、PDF化が必要。&lt;/li&gt;
&lt;li&gt;bowerに依存せずにセットアップできるようにする。デザイナーさんなどに協力をお願いするにあたって一番のネックは環境構築だと思う。今のところJSとCSSのセットアップにbowerを使っているけど、bowerはnodeとnpmが必要なので慣れてないときついかもしれない。なので、bower以外のセットアップ方法も用意する必要がある。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;とりあえず3.を片付けてデザイナーさんと協力できる体制を整えて1.に取り掛かりたいと思ってる。2.についてはPDF用のCSSが必要っぽくて未知の領域なので、ここもやはりデザイナーさんに教えてもらいたいところ。&lt;/p&gt;
&lt;p&gt;一人でできるレベルを超えてきた感じがしてきたので、まずはこうやってブログを書いてみることが大事だと思った。&lt;/p&gt;</summary>
    <title>slide_template改めglideの今後について</title>
    <updated>2013-06-05T00:43:00+00:00</updated>
    <dc:date>2013-06-05T00:43:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/190/</id>
    <link href="https://blog.naoty.dev/190/"/>
    <summary>&lt;p&gt;Keynoteの使い方よくわからないし、なんでこんなものに数千円はらったのか意味がわからない。だいたい、マスタという概念はwebでいうCSSなんだからテキストファイルとして定義できるようにすればいいのに。そうすれば、githubとかで共有できるから、かっこいいスライドのマスタを再利用することができる。そういうところでLTのスライドつくるのがだるくなる。明らかな非効率性を目の前にするとまったく手が進まなくなる。&lt;/p&gt;
&lt;p&gt;だるいことは自動化するのがプログラマの美徳なので、土日で自動化を試みた。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/slide_template&quot;&gt;naoty/slide_template · GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;cloneして、&lt;code&gt;content.md&lt;/code&gt;というファイルにスライドの内容をmarkdownで書いて、&lt;code&gt;rake&lt;/code&gt;すればHTMLのスライドができる。cssでスライドを自由にデザインできる。面倒なGUIの操作をいちいち覚える必要はなくなった。cssということはそれを共有することで、感じのいいスライドを再利用できる。あの人のスライドで使ってるフォントをいちいち調べる必要もない。&lt;/p&gt;
&lt;p&gt;こういうフレームワーク的なものは既にいくつかあって、最初は&lt;a href=&quot;https://github.com/hakimel/reveal.js&quot;&gt;reveal.js&lt;/a&gt;を使おうと思った。ただ、実際に使ってみると確かにかっこいいアニメーションがついていい感じなんだけど、いくつか不満な点があった。まず、海外で作られたデザインなので、日本語を使うと文字サイズや余白のバランスに違和感を感じる。で、カスタマイズしてみようと思ったんだけど、どこをいじっていいのかわからなかった。いや、これは僕のスキルに問題があるだけかもしれない。実際、sassを使ったりmixinを使ったり工夫がこらしてあった。でも、正直、ここまで複雑で凝ったものはいらなかった。なんでもそうだと思うけど、長く使っていくツールに必要なのは&quot;カスタマイズしやすさ&quot;だと思う。違和感を感じたときにすぐに修正できないとストレスがたまっていって、ずっと使っていくことができなくなる。カスタマイズしやすいツールに必要なのは、疎結合な設計だと思う。設定の変更が及ぼす影響をなるべく小さくしないと、恐ろしくてカスタマイズできない。&lt;/p&gt;
&lt;p&gt;というわけでreveal.jsもよかったけど、もっと小さいライブラリを自作することにした。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/haas.js&quot;&gt;naoty/haas.js · GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上のテンプレではこのライブラリを使ってHTMLをスライドっぽくしている。これまでJSのライブラリ（というには小さくておこがましいけど）を作ったことがなかったので、yak-shavingをすることになった。まず生JSはイヤだったのでcoffeescriptで書くことにして、coffeescriptをJSにコンパイルするためにgruntを使った。コンパイルされたJSは自動的にminifyするようにした。ここらへんの環境構築については以下のエントリが参考になった。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/naoya/20130504/1367640512&quot;&gt;昨今のWebアプリケーションのひな形その2 - Grunt - naoyaのはてなダイアリー&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;で、このライブラリをテンプレで使うためにbowerのレポジトリに登録することにした。これが思ったより簡単で&lt;code&gt;bower.json&lt;/code&gt;を決められたフォーマットで記述して&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ bower register haas.js git://github.com/naoty/haas.js.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;を実行するだけだった。&lt;/p&gt;
&lt;p&gt;テンプレの話に戻ると、rakeタスク内でRedcarpetとTiltを使ってmarkdownやhamlをHTML化している。で、そのHTMLを上のhaas.jsでスライドっぽくすることで、なんとかスライドの体裁を整えることはできた。あとは、肝心のデザインをなんとかしなくちゃいけない。デザインについてはCSS難しいしできればどなたかにお願いしたいところではある。というか、それがこのテンプレをgithubで公開する目的なんだけど。&lt;/p&gt;
&lt;p&gt;以上のような話を今度のebisu.rbで話すので、参加者の方はあんまり見ないようにお願いします（もう遅い&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;追記&lt;/p&gt;
&lt;p&gt;ebisu.rbで話したので、上のテンプレで作ったスライドを公開します。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://naoty.info/slides/darui/index.html#1&quot;&gt;http://naoty.info/slides/darui/index.html#1&lt;/a&gt;&lt;/p&gt;</summary>
    <title>LTのスライドつくるのだるい</title>
    <updated>2013-05-27T00:33:00+00:00</updated>
    <dc:date>2013-05-27T00:33:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/189/</id>
    <link href="https://blog.naoty.dev/189/"/>
    <summary>&lt;p&gt;.vimrcが400行近くになり見づらくなってきたので見やすくしてみた。markerは使ってる人おおい感じがするけど、modelineと組み合わせたらかなり見やすくなったのでメモ。&lt;/p&gt;
&lt;h2&gt;1. 各種設定をmarkerで囲む&lt;/h2&gt;
&lt;p&gt;markerで囲まれた部分は折りたためるので見やすくなる。基本的な設定やマッピングの設定、プラグインを入れてる人はプラグインの設定、あとカラースキームの設定など、おおざっぱに設定をまとめてmarkerで囲む。&lt;/p&gt;
&lt;pre lang=&quot;vim:.vimrc&quot;&gt;&lt;code&gt;&quot; 基本設定 {{{1

set nocompatible
set number

&quot; マッピング {{{1

nnoremap H b
nnoremap J }
nnoremap K {
nnoremap L w

&quot; カラースキーム {{{1

syntax on
colorscheme hybrid

&quot; プラグイン {{{1

&quot; neobundle {{{2

...

&quot; unite.vim {{{2

...

&quot; neocomplcache {{{2

...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;プラグインの設定のなかでプラグイン毎の設定もまとめたいので、折り畳みレベルを設定する。こうすると、折り畳みが入れ子になる。&lt;/p&gt;
&lt;h2&gt;2. modelineを有効にする&lt;/h2&gt;
&lt;p&gt;.vimrcのための設定を書きたいのでmodelineを有効にする。modelineの詳細は&lt;code&gt;:h modeline&lt;/code&gt;を参照。&lt;/p&gt;
&lt;pre lang=&quot;vim:.vimrc&quot;&gt;&lt;code&gt;&quot; モードラインを有効にする
set modeline

&quot; 3行目までをモードラインとして検索する
set modelines=3
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;3. modelineで.vimrc用の設定をする&lt;/h2&gt;
&lt;p&gt;ファイルの最後（最初でもいいけど）に以下を追加する。&lt;/p&gt;
&lt;pre lang=&quot;vim:.vimrc&quot;&gt;&lt;code&gt;&quot; vim: foldmethod=marker
&quot; vim: foldcolumn=3
&quot; vim: foldlevel=0
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;markerで折りたたむようにする。&lt;/li&gt;
&lt;li&gt;行番号の左に折りたたまれてる箇所が表示されてわかりやすくなる。&lt;/li&gt;
&lt;li&gt;デフォルトで折りたたんで表示する。（&lt;code&gt;foldlevel&lt;/code&gt;より&lt;code&gt;foldlevelstart&lt;/code&gt;の方が適切だと思ったけど、なんかうまくいかないのでとりあえず&lt;code&gt;foldlevel&lt;/code&gt;を使ってます）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;スクリーンショット&lt;/h2&gt;
&lt;p&gt;以上の設定をすると、.vimrcはこんな感じで表示されるようになるはず。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://qiita-image-store.s3.amazonaws.com/0/1044/80b00f4c-6c5f-5dc2-912c-4fcc212c5f90.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/1044/80b00f4c-6c5f-5dc2-912c-4fcc212c5f90.png&quot; alt=&quot;fold.png&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;参考までに拙者の.vimrcのリンクも載せておく。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/dotfiles/blob/master/.vimrc&quot;&gt;dotfiles/.vimrc at master · naoty/dotfiles · GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;これと同じことを.zshrcでもやってるので、.vimrcにかぎらず設定ファイル全般で使えるテクニックだと思う。&lt;/p&gt;</summary>
    <title>.vimrc整理術</title>
    <updated>2013-05-22T11:46:00+00:00</updated>
    <dc:date>2013-05-22T11:46:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/188/</id>
    <link href="https://blog.naoty.dev/188/"/>
    <summary>&lt;p&gt;下を.vimrcに書くと、&lt;code&gt;H&lt;/code&gt;, &lt;code&gt;J&lt;/code&gt;, &lt;code&gt;K&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;で高速移動できる。&lt;/p&gt;
&lt;pre lang=&quot;vim:.vimrc&quot;&gt;&lt;code&gt;noremap H b
noremap J }
noremap K {
noremap L w
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>vim高速移動</title>
    <updated>2013-05-22T00:13:00+00:00</updated>
    <dc:date>2013-05-22T00:13:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/187/</id>
    <link href="https://blog.naoty.dev/187/"/>
    <summary>&lt;p&gt;自分が開発したいこと、勉強したいことをwebに公開した。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://naoty.info/todo.html&quot;&gt;naoty.info/todo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以前に書いた&lt;a href=&quot;http://naoty.hatenablog.com/entry/2013/04/28/002926&quot;&gt;記事&lt;/a&gt;の通り、ここ数週間vimでtodoリストを書くようになった。これがなかなかよくて、.vimrcをいじってtodoリストを書きやすいようにvimをカスタマイズした。GUIアプリだと自由にカスタマイズできなくて、痒いところに手が届かずに使わなくなってしまうケースがあったけど、vimだと自由にいじれるからそういうこともなく長続きしているのだと思う。&lt;/p&gt;
&lt;p&gt;そうこうしてるうちに、vimで書いたtodoリストはどんどん増えていった。その中には誰かがやってくれればいいものもあったので、公開していいかと思った。あと、todoリストを買い物リストのように使うことがあって、そういうときに外出先でiPhoneからチェックしたいと思ったのでwebで公開した。viewportを設定してモバイル端末からも見やすいようにした。&lt;/p&gt;
&lt;p&gt;公開の仕組みは単純で、todo.mdというファイルをguardで監視して保存されたら自動的にあるスクリプト（下記リンク）とscpが実行されるようにした。このスクリプトはtodo.mdをパースし用意しておいたテンプレートとくっつけてHTML化する。そして、そのHTMLがscpでサーバーにアップロードされる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/md2html&quot;&gt;naoty/md2html · GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;あとRedcarpetをちょっと拡張して&lt;code&gt;- []&lt;/code&gt;, &lt;code&gt;- [x]&lt;/code&gt;をチェックボックスに変換するようにした。これはGithub Flavored Markdownで実装されているTask Listの形式を&lt;a href=&quot;https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments&quot;&gt;参考&lt;/a&gt;にした。&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;余談&lt;/h3&gt;
&lt;p&gt;最初はこの仕組みをSinatra、Heroku、Dropbox APIで作ろうとしたのだけど、いろいろ問題があって今の仕組みにいたった。結局「markdownの変換」「scpによるアップロード」の2つを自動化しただけのシンプルな形になった。最近これ以外にも、仕組みを選択する段階で失敗する経験があった。単純な仕組みであるほど問題は少ないし、起きたときに解決しやすいと思った。&lt;/p&gt;
&lt;p&gt;「todoリストをテキストファイルとして扱う」というアイデアは、vimを十二分にカスタマイズ可能なtodoアプリとして扱えるようになっただけでなく、今回のようにtodoリストをwebに公開するというところまで行き着いた。なんかで読んだけど、データをテキストとして保存した方が扱いやすいというのが身にしみて理解できたのでよかった。&lt;/p&gt;</summary>
    <title>todoリストをwebに公開した話</title>
    <updated>2013-05-19T20:52:00+00:00</updated>
    <dc:date>2013-05-19T20:52:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/186/</id>
    <link href="https://blog.naoty.dev/186/"/>
    <summary>&lt;p&gt;自分のために作ったアプリを公開したい場合にiOSはとてもハードルが高い。 仕事でやるなら別にいいんだけど、自分で使うのが主のモチベーションで 「他の人もこれ使ったら便利だと思う」程度のモチベで公開しようとするとそのハードルの高さに愕然とする。 審査が入るから、かなり完成度を高めないと落とされる。 完成度を高めていく作業はけっこう根気がいる。&lt;/p&gt;
&lt;p&gt;iOSは審査プロセスもビルドプロセスも複雑で、開発以外の部分で時間をとられるのがむかつく。 なぜかよくわからないけど、Androidはantとかmavenでビルドを自動化するノウハウがたくさんあるのに、 iOSはビルドの自動化に関して情報が少ない気がする。 とりあえずrakeでビルドとTestFlightへのアップロードを自動化したけど、けっこう時間がかかった。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/naoty/5559946&quot;&gt;Rakefile for building and uploading to testflight&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;iOSはAndroidとくらべてUIがキレイというのはある。 だけど、Android2.3なんかと比べるとそうだと思うけど、4以降になるとそんなに気にする程でもなくなったと思う。&lt;/p&gt;
&lt;p&gt;今のところiPhone5を使っているけど、片手で使えるNexusシリーズが出たらAndroidに乗り換えると思う。 Android端末はデカすぎる。日本のメーカーはあれだけ小型化・薄型化が好きだったのに、 なんでスマホになると大型化するのか意味がわからない。&lt;/p&gt;</summary>
    <title>Androidに乗り換えるかも</title>
    <updated>2013-05-12T00:29:00+00:00</updated>
    <dc:date>2013-05-12T00:29:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/185/</id>
    <link href="https://blog.naoty.dev/185/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;http://naoty.hatenablog.com/entry/2013/05/03/231346&quot;&gt;昨日&lt;/a&gt;の続き。&lt;/p&gt;
&lt;p&gt;mrubyのソースコードを読むと、&lt;code&gt;mrb_value&lt;/code&gt;という構造体がよく出てくるのでソースコードを追いかけて使い方を調べてみた。参照しているコミット番号は昨日と同じく「9663a7」です。&lt;/p&gt;
&lt;h2&gt;mrb_valueの定義&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;// include/mruby/value.h:40

typdef struct mrb_value {
  union {
    mrb_float f;
    void *p;
    mrb_int i;
    mrb_sym sym;
  } value;
  enum mrb_vtype tt;
} mrb_value;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;mrb_value&lt;/code&gt;構造体は値とその値のデータ型をもつ。&lt;code&gt;enum mrb_vtype&lt;/code&gt;には&lt;code&gt;MRB_TT_FIXNUM&lt;/code&gt;とか&lt;code&gt;MRB_TT_STRING&lt;/code&gt;などが入る。&lt;code&gt;value&lt;/code&gt;と&lt;code&gt;tt&lt;/code&gt;は適切な組み合わせにする必要があるはず。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mrb_value&lt;/code&gt;は&lt;code&gt;MRB_NAN_BOXING&lt;/code&gt;が定義されているかどうかでその定義が変わるんだけど、&lt;code&gt;MRB_NAN_BOXING&lt;/code&gt;はmrbconf.hでコメントアウトされていたので、&lt;code&gt;mrb_value&lt;/code&gt;のデフォルトの定義は上のようになる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// include/mrbconf.h:23

/* represent mrb_value in boxed double; conflict with MRB_USE_FLOAT */
//#define MRB_NAN_BOXING
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;どういうときにこれを使うのかはまだよくわかってない。&lt;/p&gt;
&lt;h2&gt;mrb_valueとデータ型の変換&lt;/h2&gt;
&lt;p&gt;int型、char型などと&lt;code&gt;mrb_value&lt;/code&gt;を変換する方法も調べた。まず、変換する関数によく使われている&lt;code&gt;mrb_value&lt;/code&gt;構造体に値をセットするマクロがある。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// include/mruby/value.h:53

#define MRB_SET_VALUE(o, ttt, attr, v) do {\
  (o).tt = ttt;\
  (o).attr = v;\
} while (0)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これを使って変換する関数が実装されているっぽい。とりあえず見つけたのは以下の通り。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;int&lt;/code&gt; -&amp;gt; &lt;code&gt;mrb_value&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// include/mruby/value.h:205

static inline mrb_value
mrb_fixnum_value(mrb_int i)
{
  mrb_value v;

  MRB_SET_VALUE(v, MRB_TT_FIXNUM, value.i, i);
  return v;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;mrb_value&lt;/code&gt; -&amp;gt; &lt;code&gt;int&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// include/mruby/value.h:145

#define mrb_fixnum(o) (o).value.i
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;float&lt;/code&gt; -&amp;gt; &lt;code&gt;mrb_value&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// include/mruby/value.h:58

static inline mrb_value
mrb_float_value(mrb_float f)
{
  mrb_value v;

  MRB_SET_VALUE(v, MRB_TT_FLOAT, value.f, f);
  return v;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;mrb_value&lt;/code&gt; -&amp;gt; &lt;code&gt;float&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// include/mruby/value.h:51

#define mrb_float(o) (o).value.f
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;char[]&lt;/code&gt; -&amp;gt; &lt;code&gt;mrb_value&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// src/string.c:670

char *
mrb_string_value_ptr(mrb_state *mrb, mrb_value ptr)
{
  mrb_value str = mrb_str_to_str(mrb, ptr);
  return RSTRING_PTR(str);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;char[]&lt;/code&gt; -&amp;gt; &lt;code&gt;mrb_value&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// src/string.c:232

mrb_value
mrb_str_new(mrb_state *mrb, const char *p, size_t len)
{
  struct RString *s;

  s = str_new(mrb, p, len);
  return mrb_obj_value(s);
}
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>mrb_valueについて調べてみた</title>
    <updated>2013-05-04T20:49:00+00:00</updated>
    <dc:date>2013-05-04T20:49:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/184/</id>
    <link href="https://blog.naoty.dev/184/"/>
    <summary>&lt;p&gt;mrubyで書いた方がいいところはmrubyで書いてそうじゃないところはCで書く、という開発をするには、Cで定義した関数をRubyから実行させたり、逆にRubyで定義したクラスやメソッドをCから呼び出せるようにする必要があると思った。前者のような実装はmrbgemsを読めばたくさんある一方で、後者の実装は調べたけどあんまりなかった。そこで、先日「Head First C」でCの初歩を学んだことだし、mrubyのソースコードを読みながら後者の「mrubyで定義したクラスとメソッドをCから呼び出す」実装を試行錯誤してみた。&lt;/p&gt;
&lt;p&gt;試行錯誤してみてとりあえず動いたというだけで、正しいやり方じゃないかもしれないので、コメントか&lt;a href=&quot;https://twitter.com/naoty_k&quot;&gt;@naoty_k&lt;/a&gt;宛にメッセージをいただけるとありがたいです。また、参照しているmrubyのコミット番号は「9663a7」です。&lt;/p&gt;
&lt;h2&gt;Rubyのクラスとメソッドを用意&lt;/h2&gt;
&lt;p&gt;適当にPersonクラスとメソッド2つを用意する。あとでこれらをCから呼び出す。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// person.rb

class Person
  attr_accessor :name, :age

  def initialize(name, age)
    @name = name
    @age = age
  end

  def greeting
    &quot;Hello, my name is #{name}, #{age} years old.&quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;mrbcでコンパイル&lt;/h2&gt;
&lt;p&gt;RubyのファイルをCからロードするにはいくつか方法があるようだけど、今回はmrbcで*.mrb形式にコンパイルしてCからロードするようにする。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls
person.rb
$ mrbc person.rb
$ ls
person.mrb person.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Cから定義したクラスとメソッドを呼び出す&lt;/h2&gt;
&lt;p&gt;CからRubyで定義した&lt;code&gt;Person&lt;/code&gt;インスタンスを生成して&lt;code&gt;greeting&lt;/code&gt;メソッドの結果を標準出力に表示してみる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// greeting.c

#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;mruby.h&amp;gt;
#include &amp;lt;mruby/string.h&amp;gt;

int main()
{
    mrb_state* mrb = mrb_open();

    // mrubyファイルをロードする
    FILE *fd = fopen(&quot;person.mrb&quot;, &quot;r&quot;);
    mrb_load_irep_file(mrb, fd);

    // クラスオブジェクトを取得する
    struct RClass *person = mrb_class_obj_get(mrb, &quot;Person&quot;);

    // 引数をmrb_valueに変換する
    mrb_value person_value = mrb_obj_value(person);
    mrb_value name_value = mrb_str_new(mrb, &quot;naoty&quot;, 5);
    mrb_value age_value = mrb_fixnum_value(25);

    // Person#newを呼び出す
    mrb_value naoty = mrb_funcall(mrb, person_value, &quot;new&quot;, 2, name_value, age_value);

    // Person#greetingを呼び出す
    mrb_value greeting_value = mrb_funcall(mrb, naoty, &quot;greeting&quot;, 0);

    // 返り値をchar*に変換して出力する
    char *greeting = mrb_string_value_ptr(mrb, greeting_value);
    printf(&quot;%s\n&quot;, greeting);

    mrb_close(mrb);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;*.mrb形式のファイルをロードするには&lt;code&gt;mrb_load_irep_file()&lt;/code&gt;を実行する。&lt;/li&gt;
&lt;li&gt;次にクラスを取得するには&lt;code&gt;mrb_class_obj_get()&lt;/code&gt;を実行し、メソッドを呼び出すには&lt;code&gt;mrb_funcall()&lt;/code&gt;を実行する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mrb_funcall()&lt;/code&gt;には、第2引数にメソッドのレシーバ、第3引数にメソッド名、第4引数にメソッドの引数の数、第5引数以降にはメソッドの引数を渡す。第2引数と第5引数以降は&lt;code&gt;int&lt;/code&gt;や&lt;code&gt;char*&lt;/code&gt;などをそのまま渡すことはできなくて、&lt;code&gt;mrb_value&lt;/code&gt;という構造体に変換する必要がある。変換するための関数については長くなりそうなので、別の記事にしようと思う。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mrb_funcall()&lt;/code&gt;の返り値も&lt;code&gt;mrb_value&lt;/code&gt;構造体なので、標準出力をするために&lt;code&gt;char*&lt;/code&gt;に変換する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Cをコンパイルして実行&lt;/h2&gt;
&lt;p&gt;Cのソースコードをmrubyのヘッダーファイルやスタティックライブラリと一緒にコンパイルする。僕の環境だと以下のコマンドでコンパイルできた。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gcc -I ~/mruby/include greeting.c ~/mruby/build/host/lib/libmruby.a -lm -o greeting
$ ./greeting
Hello, my name is naoty, 25 years old.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;greeting.cはperson.mrbに依存し、person.mrbはperson.rbに依存しているので、一連のビルドはMakefileかRakefileで自動化したほうがいいと思う。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Rakefile

require &quot;rake/clean&quot;

CC = &quot;gcc&quot;
MRBC = &quot;mrbc&quot;

CLEAN.include(&quot;person.mrb&quot;)
CLOBBER.include(&quot;greeting&quot;)

task default: &quot;greeting&quot;

file &quot;greeting&quot; =&amp;gt; [&quot;greeting.c&quot;, &quot;person.mrb&quot;] do |t|
  sh &quot;#{CC} -I ~/mruby/include #{t.prerequisites[0]} ~/mruby/build/host/lib/libmruby.a -lm -o #{t.name}&quot;
end

file &quot;person.mrb&quot; =&amp;gt; [&quot;person.rb&quot;] do |t|
  sh &quot;#{MRBC} #{t.prerequisites[0]}&quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ rake
$ ./greeting
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.kumikomi.net/archives/2012/12/ep17mrb3.php&quot;&gt;組み込みC言語プログラマのためのmruby入門（後編）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;@&lt;a href=&quot;https://twitter.com/naoty_k&quot;&gt;naoty_k&lt;/a&gt; クラスの取り出しはmrb_class_obj_get()、メソッドの呼び出しはmrb_funcall()を使ってください。funcallには派生形あり。&lt;/p&gt;
&lt;p&gt;— Yukihiro Matsumotoさん (@yukihiro_matz) &lt;a href=&quot;https://twitter.com/yukihiro_matz/status/329229906561077248&quot;&gt;2013年4月30日&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;</summary>
    <title>mrubyで定義したクラスとメソッドをCから呼び出す</title>
    <updated>2013-05-03T23:13:00+00:00</updated>
    <dc:date>2013-05-03T23:13:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/183/</id>
    <link href="https://blog.naoty.dev/183/"/>
    <summary>&lt;p&gt;以前参加したmrubyの勉強会でC言語でコードを書く機会があってよくわからなかったので、オススメされた「Head First C」を読んでみた。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4873116090/hatena-blog-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51x05Kg9MFL._SL160_.jpg&quot; alt=&quot;Head First C ―頭とからだで覚えるCの基本&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;Head First C ―頭とからだで覚えるCの基本&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4873116090/hatena-blog-22/&quot;&gt;Head First C ―頭とからだで覚えるCの基本&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: David Griffiths,Dawn Griffiths,中田秀基(監訳),木下哲也&lt;/li&gt;
&lt;li&gt;出版社/メーカー: オライリージャパン&lt;/li&gt;
&lt;li&gt;発売日: 2013/04/03&lt;/li&gt;
&lt;li&gt;メディア: 大型本&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4873116090/hatena-blog-22&quot;&gt;この商品を含むブログを見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;500ページ超あるんだけどすごくわかりやすくて10日間で読み終わった。Head FirstシリーズはRailsなどいろいろあるのは知ってたけど読んだことなかった。どうやらこのシリーズは科学的なアプローチで分かりやすく書いているみたいで、確かにわかりやすかった。C言語の入門書というとすごい古い本や固っくるしい本が多いような印象があるけど、この本は今月発売されたばかりでかつカジュアルだったので、とっかかりやすかった。&lt;/p&gt;
&lt;p&gt;内容は&lt;code&gt;main()&lt;/code&gt;とかポインタから始まって、最後はマルチプロセスのwebサーバーを作ったりマルチスレッドプログラミングを扱うところまでカバーしてる。やっぱりポインタが鬼門で、何度も読み返したけど80%くらいの理解。文字列ポインタとか配列変数とかで？？？ってなった。それ以外は本当にわかりやすくてよかった。特にメモリ管理のところはわかりやすかった。普段Rubyとか書いてるとあまりメモリのことは考えないけど、スタックとヒープの区別がついたり、valgrindを使ってメモリリークを調べたりすることでだいぶメモリに対する意識が高まった。また、gccでコンパイルしたりリンクをひとつひとつ丁寧にやることでmakeの有難みを感じた。iOSアプリを開発するとたまに出てくるスタティックリンクライブラリ（lib*.aみたいなの）の正体もわかってよかったし、今後iOSアプリのビルドに失敗しても怯えなくて済みそう。あと、途中のコラムでOpenCVについて簡単な説明があってちょっと興味がわいてきた。Raspberry Piとウェブカメラを買ってOpenCVで遊んでみたいと思った。&lt;/p&gt;</summary>
    <title>Head First Cの感想</title>
    <updated>2013-04-29T14:18:00+00:00</updated>
    <dc:date>2013-04-29T14:18:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/182/</id>
    <link href="https://blog.naoty.dev/182/"/>
    <summary>&lt;p&gt;今までいろんなTodo管理アプリを試してきたけど、「GUIアプリほど高機能はいらない」「ターミナル上でtodoを確認したい」という理由でvimでTodoリストを書くようになった。&lt;a href=&quot;https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments&quot;&gt;これ&lt;/a&gt;によるとGithubがGithub Flavored MarkdownにTodoリスト記法を実装したようなので、これに倣ってmarkdownでTodoリストを書くことにした。&lt;/p&gt;
&lt;h2&gt;todoコマンド&lt;/h2&gt;
&lt;p&gt;まず、Todoリストを開くコマンドをaliasで定義してみた。これで&lt;code&gt;todo&lt;/code&gt;でTodoリストを確認できる。さらに、Dropbox上にファイルを置けば複数PCで共有できるので、オフィスのPCとプライベートPCでTodoリストを共用できる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# .zshrc

if [-e &quot;$HOME/Dropbox&quot;]; then
  alias todo=&quot;$EDITOR $HOME/Dropbox/.todo.md&quot;
else
  alias todo=&quot;$EDITOR $HOME/.todo.md&quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;vimでmarkdownを書く準備&lt;/h2&gt;
&lt;p&gt;次に、vimでmarkdownを書く準備をする。普通に*.mdを開くとmodula2というfiletypeで認識されてしまい、markdownファイルとして見なされないので、便利プラグインをインストールする。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&quot; .vimrc

NeoBundle 'tpope/vim-markdown'
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;折り返しを有効にする&lt;/h2&gt;
&lt;p&gt;これだけでも十分なんだけど、より使いやすくするための設定を自分なりに考えてみた。まず、一行が長くなるとリストとしては見づらいので、普段は折り返さないけどmarkdownのときだけ折り返すようにしてみた。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&quot; .vim/ftplugin/markdown.vim

&quot; 折り返しを有効にする
set wrap

&quot; 80文字で折り返す
set textwidth=80

&quot; マルチバイト文字の場合も折り返しを有効にする
set formatoptions+=m
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Todoリストを簡単に書く&lt;/h2&gt;
&lt;p&gt;上でふれたGithubが実装したTodoリスト記法&lt;code&gt;- []&lt;/code&gt;, &lt;code&gt;- [x]&lt;/code&gt;を簡単に入力するための設定も書いた。abbreviateを使うと略記を登録することができる。下の設定では&lt;code&gt;tl&amp;lt;space&amp;gt;&lt;/code&gt;と入力すると&lt;code&gt;- []&lt;/code&gt;と自動的に変換される。さらに、Todoリストのある行の上で&lt;code&gt;&amp;lt;Leader&amp;gt;&lt;/code&gt;を2回おすと（僕は&lt;code&gt;&amp;lt;Leader&amp;gt;&lt;/code&gt;を&lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt;にしてる）、チェックをon/off切り替えられる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&quot; .vim/ftplugin/markdown.vim

&quot; todoリストを簡単に入力する
abbreviate tl - []

&quot; todoリストのon/offを切り替える
nnoremap &amp;lt;buffer&amp;gt; &amp;lt;Leader&amp;gt;&amp;lt;Leader&amp;gt; :call ToggleCheckbox()&amp;lt;CR&amp;gt;

function! ToggleCheckbox()
  let l:line = getline('.')
  if l:line =~ '^\-\s\[\s\]'
    let l:result = substitute(l:line, '^-\s\[\s\]', '- [x]', '')
    call setline('.', l:result)
  elseif l:line =~ '^\-\s\[x\]'
    let l:result = substitute(l:line, '^-\s\[x\]', '- []', '')
    call setline('.', l:result)
  end
endfunction
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;スクリーンショット&lt;/h2&gt;
&lt;p&gt;普段は下のようにtmuxで画面を分割して小さいウィンドウ（右上）にTodoリストを表示しながら開発している。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20130428/20130428002301.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20130428/20130428002301.png&quot; alt=&quot;f:id:naoty_k:20130428002301p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20130428002301p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;</summary>
    <title>vimでTodoリスト</title>
    <updated>2013-04-28T00:29:00+00:00</updated>
    <dc:date>2013-04-28T00:29:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/181/</id>
    <link href="https://blog.naoty.dev/181/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/vim-folcom&quot;&gt;naoty/vim-folcom · GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;このプラグインをNeoBundle等でインストールすると、下のスクリーンショットのようにコメントを折りたたんで非表示にできます。&lt;code&gt;zm&lt;/code&gt;, &lt;code&gt;zr&lt;/code&gt;, &lt;code&gt;za&lt;/code&gt;などで表示／非表示を切り替えられます。&lt;/p&gt;
&lt;pre lang=&quot;vim&quot; class=&quot;highlight highlight-vim&quot;&gt;NeoBundle &lt;span class=&quot;s1&quot;&gt;'naoty/vim-folcom'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;コメントアウトしたソースコードを非表示にするのに役に立ちます。あとは、設定ファイルやライブラリを読むときにも読みやすくなります。&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;C&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://dl.dropboxusercontent.com/u/1235413/images/qiita/vim-folcom1.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/1235413/images/qiita/vim-folcom1.png&quot; alt=&quot;sample1&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dl.dropboxusercontent.com/u/1235413/images/qiita/vim-folcom2.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/1235413/images/qiita/vim-folcom2.png&quot; alt=&quot;sample2&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Ruby&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://dl.dropboxusercontent.com/u/1235413/images/qiita/vim-folcom3.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/1235413/images/qiita/vim-folcom3.png&quot; alt=&quot;sample3&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dl.dropboxusercontent.com/u/1235413/images/qiita/vim-folcom4.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/1235413/images/qiita/vim-folcom4.png&quot; alt=&quot;sample4&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;JavaScript&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://dl.dropboxusercontent.com/u/1235413/images/qiita/vim-folcom5.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/1235413/images/qiita/vim-folcom5.png&quot; alt=&quot;sample5&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dl.dropboxusercontent.com/u/1235413/images/qiita/vim-folcom6.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/1235413/images/qiita/vim-folcom6.png&quot; alt=&quot;sample6&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以上、自分で作ったプラグインのステマでした。初めて作ったプラグインです。斧まってま〜す。&lt;/p&gt;</summary>
    <title>vimでコメントを非表示にする</title>
    <updated>2013-04-23T01:08:00+00:00</updated>
    <dc:date>2013-04-23T01:08:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/180/</id>
    <link href="https://blog.naoty.dev/180/"/>
    <summary>&lt;p&gt;はじめてvimプラグインというものを作ってみた。コメントを折りたためるようにするだけ。&lt;code&gt;zm&lt;/code&gt;, &lt;code&gt;zr&lt;/code&gt;などで表示／非表示を切り替えられる。NeoBundleでインストールすればそのまま使える。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/vim-folcom&quot;&gt;naoty/vim-folcom · GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;金曜日にmrubyの勉強会にいって、build_config.rbの大量のコメント（デフォルト値のコメントアウト）を見てウッとなって、コメントだけ非表示にできないか調べてみたら意外に簡単にできた &amp;amp; 手頃なプラグインがなかったので作ってみた。&lt;/p&gt;
&lt;p&gt;コメントって読む人が初心者の場合はとても助かるけど、分かってる人にとっては邪魔なだけだから、コメントを読む人が表示／非表示を切り替えられた方がいいと思った。分かってる人には邪魔だろうなと思ってコメント書かないと初心者は困ってしまうので、読む側がコメントを見るかどうかを判断すればいいと思う。そしたら、コメント書く側は初心者のことを考えてコメントを書くようになるんじゃないかと思う。&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/osyo-manga/20121201/1354288903&quot;&gt;【Vim Advent Calendar 2012】Vim プラグインを github で公開するまで【1日目】 - C++でゲームプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vim-users.jp/2010/12/hack186/&quot;&gt;Vim-users.jp - Hack #186: テキストを折り畳む – 自作編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>vimプラグインを作ってみた</title>
    <updated>2013-04-21T01:30:00+00:00</updated>
    <dc:date>2013-04-21T01:30:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/179/</id>
    <link href="https://blog.naoty.dev/179/"/>
    <summary>&lt;p&gt;引数が長くなったときに構造体使いたくなったんだけど、公式リファレンスがわかりづらかった &amp;amp;&amp;amp; 公式以外にちゃんとした情報がなかったので、がんばった記録を投稿しておく。&lt;/p&gt;
&lt;pre lang=&quot;c:struct_sample.ino&quot;&gt;&lt;code&gt;#include &quot;types.h&quot;

void setup() {
  Serial.begin(9600);
  RGB color = getBlue();
  Serial.println(color.b);
}

void loop() {
}

RGB getBlue() {
  RGB color = { 0, 0, 255 };
  return color;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;c:types.h&quot;&gt;&lt;code&gt;#include &amp;lt;Arduino.h&amp;gt;

struct RGB {
  byte r;
  byte g;
  byte b;
};

RGB getBlue();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;IDEの新しいタブから適当な名前のヘッダーファイルを作成して、そこに構造体の定義と構造体を返り値または引数のデータ型に持つ関数の宣言をする。&lt;/p&gt;
&lt;p&gt;関数で構造体を使わないのであれば、こうする必要はなかったはず。&lt;/p&gt;
&lt;p&gt;なぜこうするのかはまだよくわかっていない。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://playground.arduino.cc/Code/Struct&quot;&gt;Arduino Playground - Struct Resource&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Arduinoで構造体をつかう</title>
    <updated>2013-04-18T23:35:00+00:00</updated>
    <dc:date>2013-04-18T23:35:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/178/</id>
    <link href="https://blog.naoty.dev/178/"/>
    <summary>&lt;h2&gt;入力補完&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;インサートモードで&lt;code&gt;&amp;lt;C-n&amp;gt;&lt;/code&gt;または&lt;code&gt;&amp;lt;C-p&amp;gt;&lt;/code&gt;と打つと、補完候補が出てきます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;バッファ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新しいファイルを開くと、バッファという領域にその中身が読み込まれます。過去に開いたファイルをまた開くときに便利です。&lt;/li&gt;
&lt;li&gt;直前に開いたファイルに戻りたい場合によく使います。&lt;/li&gt;
&lt;li&gt;個人的には、前後のバッファに移動したりバッファから履歴を削除するために以下のようなマッピングを設定しています。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;nnoremap &amp;lt;Tab&amp;gt; :bnext&amp;lt;CR&amp;gt;
nnoremap &amp;lt;S-Tab&amp;gt; :bprevious&amp;lt;CR&amp;gt;
nnoremap &amp;lt;Leader&amp;gt;d :bdelete&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;これでTabやShift+Tabで前後のバッファに移動できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;タブ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;vimにもブラウザのようなタブがあります。同時に多くのファイルを開きたいときによく使います。&lt;/li&gt;
&lt;li&gt;デスクトップPCであまり画面が大きくない場合、分割して複数のファイルを開くよりタブの方が出番が多いような気がします。&lt;/li&gt;
&lt;li&gt;個人的には、前後のタブに移動したり新しいタブを開くために以下のようなマッピングを設定しています。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;nnoremap &amp;lt;Leader&amp;gt;t :tabnew&amp;lt;CR&amp;gt;
nnoremap &amp;lt;Leader&amp;gt;n :tabnext&amp;lt;CR&amp;gt;
nnoremap &amp;lt;Leader&amp;gt;p :tabprev&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;コマンド定義&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文字コードを変換したりインデント量を変更する操作はけっこうやるので、自分でコマンドを定義して一発で操作できるようにするとラクですね。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;command! Indent2 :setlocal tabstop=2 shiftwidth=2
command! Indent4 :setlocal tabstop=4 shiftwidth=4
command! ToSjis :e ++enc=sjis&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;これで普通に&lt;code&gt;:Intent2&lt;/code&gt;と打てばインデント量が2になります。&lt;/li&gt;
&lt;li&gt;基本は&lt;code&gt;command! &amp;lt;Command name&amp;gt; &amp;lt;command&amp;gt;&lt;/code&gt;です。コマンド名は大文字から始めなくちゃいけないようです。あとはいろいろオプションがあるので、詳しくは&lt;code&gt;:help command-nargs&lt;/code&gt;を見てください。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;abbreviate&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;abbreviateは長くてめんどくさい表記に略を設定できる機能です。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;abbreviate #i #include
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;例えば上のように設定すると、&quot;#i[space]&quot;と入力すると勝手に&quot;#import[space]&quot;と変換してくれます。あとはコメントブロックを入力するのによく使われるみたいです。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;abbreviate #b / ****************************
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;abbreviateは応用としてtypoを修正するのにも便利です。&quot;abbreviate&quot;っていう単語がもうtypoしそうですね。あと、個人的に&quot;receive&quot;を&quot;recieve&quot;と書いてしまうことが多いので以下のように設定します。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&quot; abbreviate &amp;lt;誤&amp;gt; &amp;lt;正&amp;gt;
abbreviate abbriviate abbreviate
abbreviate recieve receive
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;abbreviateの設定をそのまま.vimrcに書くと、ハードコーディング感があって個人的に気持ち悪いので、.vim/abbreviate.vimという別ファイルに分けて書いてます。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&quot; .vim/abbreviate.vim
abbreviate abbriviate abbreviate
abbreviate recieve receive

&quot; .vimrc
source ~/.vim/abbreviate.vim
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;filetype毎の設定ファイル&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;言語によってインデント量を変えたいってケースはほとんどのvimmerにあると思うんですが、そういうときに僕はfiletype毎の設定ファイルを用意しています。&lt;/li&gt;
&lt;li&gt;インデント量だけなら&lt;code&gt;autocmd&lt;/code&gt;を使うのもアリだと思うのですが、上のabbreviateで設定したコメントブロックのように言語によって細かく設定を変えたいケースが地味にあるので、設定ファイルを用意する方法を採っています。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;.vim
|- ftdetect
    |- filetype.vim
|- ftplugin
    |- javascript.vim
    |- make.vim
    |- ruby.vim
.vimrc
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;上のようなディレクトリ構造にしておくと、各filetypeごとに設定ファイルが読み込まれるようになります。詳しくは&lt;code&gt;:help filetype-plugin&lt;/code&gt;らへんを見てください。&lt;/li&gt;
&lt;li&gt;例えばMakefileを書く場合、インデントはspaceではなくtabしか使えないので、expandtabを無効にしたいところです。そこで、以下のようなファイルを用意します。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&quot; .vim/ftplugin/make.vim
setlocal noexpandtab
setlocal tabstop=8
setlocal shiftwidth=8
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;filetypeの指定&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Gemfileなど拡張子では判別できないファイルのfiletypeを指定したい場合、ftdetectが便利です。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;.vim
|- ftdetect
    |- filetype.vim
.vimrc
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&quot; .vim/ftdetect/filetype.vim

autocmd BufRead,BufNewFile Gemfile setfiletype ruby
autocmd BufRead,BufNewFile Guardfile setfiletype ruby
autocmd BufRead,BufNewFile *.rabl setfiletype ruby
autocmd BufRead,BufNewFile *.jbuilder setfiletype ruby
autocmd BufRead,BufNewFile *.ru setfiletype ruby
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;上のように設定ファイルを用意すると、指定したファイルを自動的にrubyをfiletypeとして開いてくれます。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;以上の設定はすべて僕の&lt;a href=&quot;https://github.com/naoty/dotfiles&quot;&gt;dotfiles&lt;/a&gt;に書いてあるので参考にしてみてください。&lt;/p&gt;
&lt;p&gt;読み返してみると、その筋の方に怒られそうな気がしてきた…(´･ω･`)&lt;/p&gt;</summary>
    <title>vimの便利機能</title>
    <updated>2013-04-10T00:46:00+00:00</updated>
    <dc:date>2013-04-10T00:46:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/177/</id>
    <link href="https://blog.naoty.dev/177/"/>
    <summary>&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; .rbenv/plugins
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; .rbenv/plugins
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git://github.com/ianheggie/rbenv-binstubs.git
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;rbenvにはpluginsという仕組みがあってrbenvに機能を追加できる。ruby-buildもその一つ。「ひとつのことをうまくやる」思想っぽい。&lt;/li&gt;
&lt;li&gt;そのpluginのひとつにbundlerとの連携をうまくやってくれる&lt;a href=&quot;https://github.com/carsomyr/rbenv-bundler&quot;&gt;rbenv-bundler&lt;/a&gt;というのがあるんだけど、rbenvはこれを&lt;a href=&quot;https://github.com/sstephenson/rbenv/wiki/Plugins#bundler-integration&quot;&gt;非推奨&lt;/a&gt;といってる。パフォーマンスが悪くなったり、バグが多いみたい。&lt;/li&gt;
&lt;li&gt;同じようなpluginを探したところ、&lt;a href=&quot;https://github.com/ianheggie/rbenv-binstubs&quot;&gt;rbenv-binstubs&lt;/a&gt;というものを見つけた。&lt;a href=&quot;http://robots.thoughtbot.com/post/47273164981/using-rbenv-to-manage-rubies-and-gems&quot;&gt;thoughtbotのブログ&lt;/a&gt;で紹介されていた。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rails 3&lt;/h3&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;path/to/project
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--binstubs&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv rehash
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rails s
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;--path=vendor/bundle&lt;/code&gt;を指定するとうまくいかなかった。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rails 4&lt;/h3&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;path/to/project
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--binstubs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;bundle_bin
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv rehash
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rails s
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Rails 4からはbinディレクトリの扱いが若干変わるので要注意。詳しくは&lt;a href=&quot;http://qiita.com/items/01c41578e611b038da6e&quot;&gt;こちら&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;binstubsが実行ファイルを生成するディレクトリを指定する。指定してもちゃんと動く。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>bundle execを使わずに済む方法（rbenv編）</title>
    <updated>2013-04-07T17:59:00+00:00</updated>
    <dc:date>2013-04-07T17:59:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/176/</id>
    <link href="https://blog.naoty.dev/176/"/>
    <summary>&lt;p&gt;3月末をもって、アルバイトの頃から約2年ほど勤めていた会社を退職することになりました。アルバイトの頃はRailsでサーバーサイドの開発を担当し、大学卒業後は正社員としてAndroidアプリとiOSアプリの開発を担当しました。未経験の自分にアプリ開発を任せていただけて、いろいろな面で勉強させていただきました。&lt;/p&gt;
&lt;p&gt;4月からは、これまでとは違うフィールドで働く予定です。偶然に偶然が重なって（このブログもきっかけの一つ）、以前から興味のあった領域に携われることになり、この度転職を決意しました。これまた未経験の領域に飛び込むことになるので、これから必死に勉強する必要がありそうです。ですが、この約2年間でずいぶんと未知の領域にチャレンジしてきたので、その経験と身につけた自信でこれからも頑張っていけそうです。&lt;/p&gt;
&lt;p&gt;これまでお世話になった皆様、有難うございました。今後とも宜しくお願い致します。&lt;/p&gt;</summary>
    <title>退職のお知らせ</title>
    <updated>2013-03-29T22:14:00+00:00</updated>
    <dc:date>2013-03-29T22:14:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/175/</id>
    <link href="https://blog.naoty.dev/175/"/>
    <summary>&lt;p&gt;複数の設定があり、それらの組み合わせによって挙動が変わるアプリを書いていると、だんだんそれぞれの組み合わせについて頭がこんがらがってくる。コードを修正するたびにそれぞれの組み合わせについて、どのように影響が出るか考えなければならなくて、つらくなってくる。つらいだけでなく、確実にミスが生まれる。&lt;/p&gt;
&lt;p&gt;こういう状況が続くと、人間の脳みその処理能力について限界を感じてくる。人間はこういうことに向いていないと思うようになる。人力によるチェックにも自信が持てなくなる（そして、それでいいのだと思うようになる）。人間の脳みそに限界を感じるようになると、ツールに頼りたくなってくる。限界を感じることで自分自身に対して謙虚になり、ツールの使い所を実感するんだと思う。&lt;/p&gt;
&lt;p&gt;例えば、脳内で多数の組み合わせをシミュレーションするのをやめてプログラムにテストさせるとか、手でひとつひとつ丁寧にメソッド名を置換するのをやめて、Eclipseに任せるとか。何度も同じコマンドを手打ちするのをやめてシェルの補完を使うとか。あと、publicなメソッド・プロパティを必要最小限にすれば、そのクラスを使う人は考えることが減るんだから、public/privateという概念も脳みその負荷を減らす工夫なのかもしれない。&lt;/p&gt;
&lt;p&gt;とにかく、脳に強いストレスを感じたら、たぶんその作業は人間には向いていないと思うので、ツールに任せられないか一回検討した方がいいと思う。もっと自分の脳みその能力を疑った方がいいと思う。&lt;/p&gt;</summary>
    <title>人間の脳みその限界とツールについて</title>
    <updated>2013-03-13T01:02:00+00:00</updated>
    <dc:date>2013-03-13T01:02:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/174/</id>
    <link href="https://blog.naoty.dev/174/"/>
    <summary>&lt;p&gt;秋葉原の秋月電子に行って、慣れない雰囲気の中、なんとか&lt;a href=&quot;http://akizukidenshi.com/catalog/g/gP-04002/&quot;&gt;この感圧センサー&lt;/a&gt;をゲットしました。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;オライリーの&lt;a href=&quot;http://www.oreilly.co.jp/books/9784873114538/&quot;&gt;Prototyping Lab&lt;/a&gt;という本を見ながら回路を接続して、上のようなプログラムを実行するとこんな感じになりました。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20130123/20130123235951.gif&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20130123/20130123235951.gif&quot; alt=&quot;f:id:naoty_k:20130123235951g:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20130123235951g:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;センサーに加わった圧力を0番のアナログピンから受け取り、シリアル通信でそのままモニタに出力しています。&lt;/p&gt;
&lt;p&gt;この圧力をサーバーに送信するために、以下のものを買いました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/B007YJA4WE/hatena-blog-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51U3f1gyqVL._SL160_.jpg&quot; alt=&quot;イーサネットシールド for Arduino (micro SD, Wiznet W5100)&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;イーサネットシールド for Arduino (micro SD, Wiznet W5100)&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/B007YJA4WE/hatena-blog-22/&quot;&gt;イーサネットシールド for Arduino (micro SD, Wiznet W5100)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出版社/メーカー: OEM&lt;/li&gt;
&lt;li&gt;メディア: エレクトロニクス&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/B007YJA4WE/hatena-blog-22&quot;&gt;この商品を含むブログを見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ArduinoにぶっさすEthernetシールド。ここにLANケーブルをさしてインターネットに接続できます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/B003STEHMW/hatena-blog-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/316uVztilYL._SL160_.jpg&quot; alt=&quot;PLANEX 300Mbps 超小型ハイパワー無線LANマルチファンクションルータ/アクセスポイント/コンバータ MZK-MF300N&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;PLANEX 300Mbps 超小型ハイパワー無線LANマルチファンクションルータ/アクセスポイント/コンバータ MZK-MF300N&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/B003STEHMW/hatena-blog-22/&quot;&gt;PLANEX 300Mbps 超小型ハイパワー無線LANマルチファンクションルータ/アクセスポイント/コンバータ MZK-MF300N&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出版社/メーカー: プラネックス&lt;/li&gt;
&lt;li&gt;発売日: 2010/07/16&lt;/li&gt;
&lt;li&gt;メディア: Personal Computers&lt;/li&gt;
&lt;li&gt;購入: 11人 クリック: 216回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/B003STEHMW/hatena-blog-22&quot;&gt;この商品を含むブログ (14件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;うちがE-mobileのpocket wifiを使っててLANケーブルをさすところがなかったので、有線を無線で使えるようにするコンバータも買いました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/B0040ZO6H4/hatena-blog-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/41D0lVfgD%2BL._SL160_.jpg&quot; alt=&quot;PLANEX 無線LANルータ/アクセスポイント/コンバータ「MZK-MF300N」「FFP-PKR01」専用 USB給電ケーブル SSOP-USB02&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;PLANEX 無線LANルータ/アクセスポイント/コンバータ「MZK-MF300N」「FFP-PKR01」専用 USB給電ケーブル SSOP-USB02&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/B0040ZO6H4/hatena-blog-22/&quot;&gt;PLANEX 無線LANルータ/アクセスポイント/コンバータ「MZK-MF300N」「FFP-PKR01」専用 USB給電ケーブル SSOP-USB02&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出版社/メーカー: プラネックス&lt;/li&gt;
&lt;li&gt;発売日: 2010/09/10&lt;/li&gt;
&lt;li&gt;メディア: Personal Computers&lt;/li&gt;
&lt;li&gt;購入: 8人 クリック: 40回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/B0040ZO6H4/hatena-blog-22&quot;&gt;この商品を含むブログ (5件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;USBから給電するためのケーブル。&lt;/p&gt;
&lt;p&gt;これらをつないでHerokuのサーバーにPOSTリクエストを送ると、node.jsがwebsocketを使ってグラフを更新するようにしました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;arduinoからリクエストを受けてwebsocketでグラフを更新 &lt;a href=&quot;http://t.co/cXHadMjR&quot; title=&quot;http://vine.co/v/bJ0j6W3gvz1&quot;&gt;vine.co/v/bJ0j6W3gvz1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— なおてぃー (@naoty_k) &lt;a href=&quot;https://twitter.com/naoty_k/status/296625898378125312&quot;&gt;January 30, 2013&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;コードはこんなかんじ。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;上2つのコードを組み合わせると、圧力をPOSTでサーバーに送信できます。で、node.jsで書いたサーバーに送ると以下のような感じになりました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Demo &lt;a href=&quot;http://t.co/l0bNyY8a&quot; title=&quot;http://vine.co/v/bnn5muaq7T5&quot;&gt;vine.co/v/bnn5muaq7T5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— なおてぃーさん (@naoty_k) &lt;a href=&quot;https://twitter.com/naoty_k/status/299175115747381248&quot;&gt;2013年2月6日&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;arduinoのコードとサーバーのコードはともにgithubで公開しています。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/makura-arduino&quot;&gt;https://github.com/naoty/makura-arduino&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/makura-web&quot;&gt;https://github.com/naoty/makura-web&lt;/a&gt;&lt;/p&gt;</summary>
    <title>Arduinoと感圧センサーで圧力をサーバーに送信する</title>
    <updated>2013-03-11T22:51:00+00:00</updated>
    <dc:date>2013-03-11T22:51:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/173/</id>
    <link href="https://blog.naoty.dev/173/"/>
    <summary>&lt;p&gt;UIViewの位置を操作するとき&lt;/p&gt;
&lt;pre lang=&quot;objc&quot; class=&quot;highlight highlight-objc&quot;&gt;&lt;span class=&quot;n&quot;&gt;CGRect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;みたいにすると思うのですが、いちいちめんどくさいので、カテゴリーにしてみました。&lt;/p&gt;
&lt;pre lang=&quot;objc:UIView+Origin.h&quot;&gt;&lt;code&gt;@interface UIView (Origin)

@property (nonatomic) CGFloat top;
@property (nonatomic) CGFloat right;
@property (nonatomic) CGFloat bottom;
@property (nonatomic) CGFloat left;

@end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;objc:UIView+Origin.m&quot;&gt;&lt;code&gt;@implementation UIView (Origin)

- (CGFloat)top
{
    return self.frame.origin.y;
}

- (void)setTop:(CGFloat)y
{
    CGRect frame = self.frame;
    frame.origin.y = y;
    self.frame = frame;
}

- (CGFloat)right
{
    return self.frame.origin.x + self.frame.size.width;
}

- (void)setRight:(CGFloat)right
{
    CGRect frame = self.frame;
    frame.origin.x = right - self.frame.size.width;
    self.frame = frame;
}

- (CGFloat)bottom
{
    return self.frame.origin.y + self.frame.size.height;
}

- (void)setBottom:(CGFloat)bottom
{
    CGRect frame = self.frame;
    frame.origin.y = bottom - self.frame.size.height;
    self.frame = frame;
}

- (CGFloat)left
{
    return self.frame.origin.x;
}

- (void)setLeft:(CGFloat)x
{
    CGRect frame = self.frame;
    frame.origin.x = x;
    self.frame = frame;
}

@end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これを使うと、例えば縦にならぶviewの位置を操作するとき、&lt;/p&gt;
&lt;pre lang=&quot;objc&quot; class=&quot;highlight highlight-objc&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#import &quot;UIView+Origin.h&quot;
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;viewA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;viewB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bottom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;viewC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bottom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;なんて書けます。このカテゴリーを使わないとかなりめんどくさいです。&lt;/p&gt;</summary>
    <title>UIViewの位置取得・操作のための便利カテゴリー</title>
    <updated>2013-02-26T13:45:00+00:00</updated>
    <dc:date>2013-02-26T13:45:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/172/</id>
    <link href="https://blog.naoty.dev/172/"/>
    <summary>&lt;p&gt;疲れたので手短に。&lt;/p&gt;
&lt;p&gt;土日2日間ぶっ通しのハッカソンでnode.jsを使ったgithub連携アプリを作った。仕事はRailsで、まともなアプリをnode.jsで書いたことなかったし、せっかくだからnode.js使ってみた（っていうか、勝ちに行っても勝つ見込みないから、楽しむことに専念した）。&lt;/p&gt;
&lt;p&gt;ソースコードはこちら。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/arounds&quot;&gt;https://github.com/naoty/arounds&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Express 3.x, MongoDBでHerokuにデプロイしてます。&lt;/p&gt;
&lt;h2&gt;github認証&lt;/h2&gt;
&lt;p&gt;認証ライブラリはいろいろあるようだけど、&lt;a href=&quot;http://passportjs.org/&quot;&gt;Passport&lt;/a&gt;を使ってみた。github認証したい場合は&lt;a href=&quot;https://github.com/jaredhanson/passport-github&quot;&gt;passport-github&lt;/a&gt;というものがあるので、それを併用する。使い方は載ってるので割愛。&lt;/p&gt;
&lt;p&gt;まだnode.jsでのセッションの取り扱いとかちゃんと理解してないから、&lt;code&gt;passport.serializeUser&lt;/code&gt;らへんがよくわかってない。&lt;/p&gt;
&lt;h2&gt;mongoose, MongoLAB&lt;/h2&gt;
&lt;p&gt;MongoDBのORMとして&lt;a href=&quot;http://mongoosejs.com/&quot;&gt;mongoose&lt;/a&gt;を使った。Heroku上のMongoDBにはMongoLABを使った。ブラウザからコレクションの中身とか見れるのでよかった。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ heroku addons:add mongolab:starter
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;環境ごとの設定&lt;/h2&gt;
&lt;p&gt;github APIのclient IDやDBのホストのために環境ごとに設定ファイルを用意した。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// app.js

require config = process.env.NODE_ENV == 'production' ? require('./config/production') : require('./config/development');
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;// configs/production.js

module.exports = {
    github: {
        clientID: process.env.GITHUB_CLIENT_ID,
        clientSecret: process.env.GITHUB_CLIENT_SECRET,
        callbackURL: process.env.GITHUB_CALLBACK_URL
    },
    mongodb: {
        path: process.env.MONGODB_URI || process.env.MONGOLAB_URI
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;本番環境ではAPIキーをHerokuの環境変数を経由して参照する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// configs/development.js

module.exports = {
    github: {
        clientID: 'GITHUB CLIENT ID',
        clientSecret: 'GITHUB CLIENT SECRET',
        callbackURL: 'http://127.0.0.1:3000/auth/github/callback'
    },
    mongodb: {
        path: 'mongodb://localhost/arounds'
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ソースコードを公開する場合は、APIキーを隠すためにconfig/development.jsを.gitignoreに追加しておく。&lt;/p&gt;
&lt;h2&gt;まだよくわかってないこと&lt;/h2&gt;
&lt;p&gt;とりあえずnode.jsでアプリを作ってみてわかんなかったところをメモ。&lt;/p&gt;
&lt;h3&gt;MVCな書き方&lt;/h3&gt;
&lt;p&gt;Expressは放っておくと、ルーティングやルーティングに対するアクション、モデルの定義などいろんなものをapp.jsに書くことができてしまう。viewは分かれてるけど。Rubyで言うと、RailsよりはSinatraが近い。簡単なアプリケーションなら1ファイルにまとめてしまった方がラクかもしれないけど、すぐにMVCが崩壊してしまう。&lt;/p&gt;
&lt;p&gt;また、socket.ioを使ったコードを書くとき、view側のjavascriptにも複雑なロジックを書くことになる。&lt;/p&gt;
&lt;h3&gt;コールバック地獄&lt;/h3&gt;
&lt;p&gt;上のにも関連するけど、あっという間にコールバック内にコールバックを書いて、その中にコールバックを書くケースが出てくる。deferというものを教えてもらったので、それ使ってみたい。&lt;/p&gt;
&lt;h3&gt;ミドルウェア&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;app.use()&lt;/code&gt;みたいなのがたくさんあるけど、あれらが何をやってるのかまだよくわかってない。&lt;code&gt;express new&lt;/code&gt;すると勝手にできてしまうから、あんまり意味を考えなくても動く。&lt;code&gt;express new&lt;/code&gt;に頼らずに書いて覚える。&lt;/p&gt;</summary>
    <title>ハッカソンでgithub連携のnode.jsアプリ作った話</title>
    <updated>2013-02-03T23:52:00+00:00</updated>
    <dc:date>2013-02-03T23:52:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/171/</id>
    <link href="https://blog.naoty.dev/171/"/>
    <summary>&lt;p&gt;Rails4を試そうと思って、いつもどおり&lt;code&gt;bundle install --binstubs&lt;/code&gt;したら&lt;code&gt;rails s&lt;/code&gt;が&lt;code&gt;rails new&lt;/code&gt;扱いされてうまくいかなかった。&lt;/p&gt;
&lt;h2&gt;原因&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rails/rails/commit/009873aec89a4b843b41accf616b42b7a9917ba8&quot;&gt;ここ&lt;/a&gt;によると、以前の&lt;code&gt;scripts/rails&lt;/code&gt;が&lt;code&gt;bin/rails&lt;/code&gt;に移動したみたいです。&lt;/p&gt;
&lt;p&gt;新&lt;code&gt;bin/rails&lt;/code&gt;で&lt;code&gt;rails s&lt;/code&gt;とか&lt;code&gt;rails c&lt;/code&gt;とかのコマンドができるようになったため、いつものノリで&lt;code&gt;--binstubs&lt;/code&gt;すると新&lt;code&gt;bin/rails&lt;/code&gt;が上書きされてしまい、&lt;code&gt;rails s&lt;/code&gt;などがうまくいかなくなるようです。&lt;/p&gt;
&lt;h2&gt;対策&lt;/h2&gt;
&lt;p&gt;とはいえ、&lt;code&gt;bundle exec rails s&lt;/code&gt;と打つのがめんどくさいので、RVMの&lt;code&gt;after_cd_bundler&lt;/code&gt;フックを活用できるように&lt;code&gt;.bundle/config&lt;/code&gt;に以下の設定を追加します。&lt;/p&gt;
&lt;pre lang=&quot;sh:.bundle/config&quot;&gt;&lt;code&gt;BUNDLE_BIN: bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これ&lt;code&gt;bin/&lt;/code&gt;以下に自動でパスが通るようになりますので、&lt;code&gt;rails s&lt;/code&gt;でちゃんとうごくようになります。&lt;/p&gt;
&lt;p&gt;RVMの&lt;code&gt;after_cd_bundler&lt;/code&gt;については&lt;a href=&quot;http://qiita.com/items/a1fbac19686a8fcd2e34&quot;&gt;昔の投稿&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;Rails以外のgemについては最新のBundlerを使うことで&lt;code&gt;bin/&lt;/code&gt;以下に実行スクリプトを生成できるようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gem install bundler --pre
$ bundle --version
Bundler version 1.3.0.pre.7
$ bundle binstubs puma
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;bundle binstubs puma&lt;/code&gt;で&lt;code&gt;bin/puma&lt;/code&gt;が生成されます。&lt;/p&gt;</summary>
    <title>Rails4から--binstubsが使えなくなる件</title>
    <updated>2013-01-26T16:33:00+00:00</updated>
    <dc:date>2013-01-26T16:33:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/170/</id>
    <link href="https://blog.naoty.dev/170/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/params_inquirer&quot;&gt;params_inquirer&lt;/a&gt;というgemを作りました。何ができるかと言うと、文で説明するのがなかなか難しいので、下のコードを見てください。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# users_controller.rb

def index
  if params[:status].accepted? # params[:status] == 'accepted' と同じ
    @users = User.accepted
  elsif params[:status].rejected? # params[:status] == 'rejected' と同じ
    @users = User.rejected
  else
    @users = User.all
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;params_inquirerを使うと上の&lt;code&gt;accepted?&lt;/code&gt;のようなメソッドが&lt;code&gt;params&lt;/code&gt;に対して呼べるようになります。すでにrubygemsで公開してるので、ちょっと試してみたい場合は、irbで試してもらうこともできます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gem install params_inquirer
$ irb
irb &amp;gt; require 'params_inquirer'
irb &amp;gt; params = ParamsInquirer::Parameters.new({ name: 'naoty' })
irb &amp;gt; params[:name].naoty?
 =&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;params&lt;/code&gt;の中身を文字列で比較するのがなんとなくダサいと感じていたので、作ってみました。あとは、Railsの中身について勉強してみたかったというのもあります。&lt;/p&gt;
&lt;p&gt;Railsに組み込みgemを作るにあたって知っておいた方がいいポイントについてまとめてみます。&lt;/p&gt;
&lt;h2&gt;Bundlerでgemのひな形を作る&lt;/h2&gt;
&lt;p&gt;gemを作るとき、まず最初にBundlerを使ってgemのひな形を作ります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gem install bundler
$ bundle gem params_inquirer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでgemのひな形ができます。作ったgemをローカル環境にインストールしたりrubygems.orgにリリースするためのRaketaskもここに含まれるので、かなり便利です。&lt;/p&gt;
&lt;p&gt;Bundlerを使ったgemの開発については&lt;a href=&quot;http://ja.asciicasts.com/episodes/245-new-gem-with-bundler&quot;&gt;この記事&lt;/a&gt;を参考にしました。&lt;/p&gt;
&lt;h2&gt;Railtie&lt;/h2&gt;
&lt;p&gt;Railtieは、Railsを起動するときにgemのコードを&lt;code&gt;ActionController::Base&lt;/code&gt;に&lt;code&gt;include&lt;/code&gt;させるために使いました。これによって、自分のgemをRailsアプリケーションに組み込むことができます。&lt;/p&gt;
&lt;p&gt;下のコードでは、Railsプロセスが起動するときに&lt;code&gt;initializer&lt;/code&gt;ブロック内の処理が実行されて、自分で作った&lt;code&gt;ParamsInquirer::ActionController::Base&lt;/code&gt;が&lt;code&gt;ActionController::Base&lt;/code&gt;に&lt;code&gt;include&lt;/code&gt;されるようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/params_inquirer/railtie.rb

require 'params_inquirer/action_controller/base'

module ParamsInquier
  class Railtie &amp;lt; ::Rails::Railtie
    initializer 'Initialize params_inquirer' do
      ::ActionController::Base.send :include, ParamsInquirer::ActionController::Base
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ただ、このファイルがRails起動時に&lt;code&gt;require&lt;/code&gt;されている必要があります。&lt;/p&gt;
&lt;p&gt;インストールされたgemを&lt;code&gt;require&lt;/code&gt;するとき&lt;code&gt;lib/&amp;lt;gem_name&amp;gt;.rb&lt;/code&gt;が&lt;code&gt;require&lt;/code&gt;されます。このgemであれば&lt;code&gt;lib/params_inquirer.rb&lt;/code&gt;です。なので、ここでrailtieを&lt;code&gt;require&lt;/code&gt;しておく必要があります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/params_inquirer.rb

if defined?(Rails)
  require 'lib/params_inquirer/railtie'
else
  require 'lib/params_inquirer/parameters'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;require 'params_inquirer'&lt;/code&gt;が実行されるとこのファイルが実行されます。もしRailsアプリケーション内であればrailtieを&lt;code&gt;require&lt;/code&gt;し、最初に見せたirbのような場合は必要なファイルだけ&lt;code&gt;require&lt;/code&gt;するようにしています。&lt;/p&gt;
&lt;p&gt;以上のようすることで、Rails起動時にrailtieを&lt;code&gt;require&lt;/code&gt;しrailtieから自分で作ったコードをRailsアプリケーション内に&lt;code&gt;include&lt;/code&gt;させることができました。&lt;/p&gt;
&lt;h2&gt;ActiveSupport::Concern&lt;/h2&gt;
&lt;p&gt;ここからは実際に使ったというよりは、actionpackやactivesupportなどのgemを読んでいくときに必要になったtipsです。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;include&lt;/code&gt;したモジュールを使ってクラスメソッドをmixinしたい場合、下のように&lt;code&gt;Module#.included&lt;/code&gt;をオーバーライドしその中で内部モジュールを&lt;code&gt;extend&lt;/code&gt;するテクニックが定石みたいです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module M
  def self.included(base)
    # extendによってクラスメソッドとしてmixinされる
    base.extend ClassMethods
    scope :disabled, where(disabled: true)
  end

  # クラスメソッドを定義する内部モジュール
  module ClassMethods
    ...
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上のようなコードは&lt;code&gt;ActiveSupport::Concern&lt;/code&gt;を使うと下のように書けます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module M
  extend ActiveSupport::Concern

  included do
    scope :disabled, where(disabled: true)
  end

  module ClassMethods
    ...
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一見すると、&lt;code&gt;ClassMethods&lt;/code&gt;モジュールが&lt;code&gt;extend&lt;/code&gt;されていないように見えますが、内部的に&lt;code&gt;ClassMethods&lt;/code&gt;という名前のモジュールが&lt;code&gt;extend&lt;/code&gt;されます。「設定より規約」に従ってるんだと思います。&lt;/p&gt;
&lt;p&gt;これを知らないと、クラスメソッドが&lt;code&gt;extend&lt;/code&gt;されていることに気づきにくいかもしれないです。また、&lt;code&gt;ActiveSupport::Concern&lt;/code&gt;はいろんなところに頻出するので、知っておいた方がいいと思いました。&lt;/p&gt;
&lt;h2&gt;ActiveSupport::Autoload&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ActiveSupport::Autoload#autoload&lt;/code&gt;は&lt;code&gt;Module#autoload&lt;/code&gt;の拡張で、&lt;code&gt;Module#autoload&lt;/code&gt;は必要なファイルを必要なタイミングで&lt;code&gt;require&lt;/code&gt;するメソッドです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;autoload(:Hoge, 'hoge') # 'hoge.rb'はこの時点ではrequireされていない
p Hoge # ここで'hoge.rb'がrequireされる
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ActiveSupport::Autoload#autoload&lt;/code&gt;は、「&lt;code&gt;Hoge&lt;/code&gt;はhoge.rbにあるはず」という「設定より規約」に従って、&lt;code&gt;Module#autoload&lt;/code&gt;の第2引数を省略できるメソッドなので、上のコードは下のように書けます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;extend ActiveSupport::Autoload
autoload :Hoge
p Hoge # ここで'hoge.rb'がrequireされる
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これもファイル名が省略されているということを知らないと、どのファイルを&lt;code&gt;require&lt;/code&gt;しているか見えづらいと思います。&lt;/p&gt;
&lt;h2&gt;最後に&lt;/h2&gt;
&lt;p&gt;あまりまとまらなくてすごい量になってしまいました。簡単なgemを作るのに知っておくべきことがいろいろあって大変でした。間違っていることがあれば修正しますので、コメントいただけると助かります。また、params_inquirerもまだ未完成なので、pull requestも待ってます。&lt;/p&gt;</summary>
    <title>Railsに組み込むgemを作るためのTips</title>
    <updated>2013-01-20T12:27:00+00:00</updated>
    <dc:date>2013-01-20T12:27:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/169/</id>
    <link href="https://blog.naoty.dev/169/"/>
    <summary>&lt;p&gt;むかしに比べると、かなりテストが書けるようになってきたし、TDDもだんだん慣れてきた。最近テスト書いてて便利だと思ったことについてメモっておく。&lt;/p&gt;
&lt;h2&gt;スタブを使ってbefore_filterをスキップする&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;describe 'GET index' do
  context 'ログインしている場合' do
    before(:each) do
      controller.any_instances.stub(:authenticate_user).and_return(true)
    end

    it 'hogehogeなfugafugaを取得する' do
      get index, params
      assigns[:fugafuga].should be_hogehoge
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ログイン判定のような、リクエストをはじく処理を&lt;code&gt;before_filter&lt;/code&gt;で実装することがよくあるけど、そういうコントローラーをテストする場合、スタブが便利だということにようやく気づいた。スタブによって、メソッドの中身をごまかして好きな値を返すようにできる。だから、&lt;code&gt;before_filter&lt;/code&gt;をスキップしたい場合は、とにかくスタブして&lt;code&gt;true&lt;/code&gt;を返すようにしとけばいい。&lt;code&gt;skip_before_filter&lt;/code&gt;でもスキップすることはできるけど、僕はスタブを使う方が好み。&lt;/p&gt;
&lt;h2&gt;FactoryGirlを使いこなす&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;FactoryGirl.define do
  factory :user do
    # 連番を使えばuniquenessのバリデーションにかからなくなる
    sequence(:name) {|n| &quot;user #{n}&quot; }
    sequence(:email) {|n| &quot;user#{n}@example.com&quot; }
    age { rand(18..30) }

    after(:build) do |user|
      # 余計なデータを作るコールバックがあればスキップできる
      User.skip_callback(:after, :create, :create_data)
    end

    # ネストしたfactoryで上書きできる
    factory :naoty do
      name 'naoty'
      email 'naoty@example.com'
      age 18
    end

    # traitで属性のグループに名前をつけられる
    trait :resigned do
      resigned_at { Time.now }
    end
  end
end

user = FactoryGirl.create(:user)
p user.name #=&amp;gt; &quot;user 1&quot;

naoty = FactoryGirl.create(:naoty)
p naoty.name #=&amp;gt; &quot;naoty&quot;

resigned_user = FactoryGirl.create(:user, :resigned)
p resigned_user.name #=&amp;gt; &quot;user 2&quot;
p resigned_user.resigned_at #=&amp;gt; &quot;2013-01-19 00:43:59 +0900&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;factory_girl&lt;/code&gt;はテスト用のデータを簡単につくるためのgem。似たようなgemは他にもあるけど、こういうgemを使うと、テストデータを作るロジックとテストコードを分離できる。なので、いろんなテストで使われるテストデータを重複なく簡単に作ることができる。&lt;/p&gt;
&lt;p&gt;FactoryGirlでテストデータを作成するときに、よくひっかかるのがバリデーションや&lt;code&gt;after_save&lt;/code&gt;などのコールバック内の余計な処理だと思う。こういう鬱陶しい処理は、FactoryGirlのコールバックを使ってスキップしてる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;trait&lt;/code&gt;は特殊なデータを作る場合にすごく役に立つ。上記の例のような「退会ユーザー」をテストに使いたいときなど、特殊なデータの属性をひとまとめにして&lt;code&gt;FactoryGirl.create(:user, :resigned)&lt;/code&gt;のように簡単に作成できる。&lt;/p&gt;
&lt;h2&gt;changeマッチャが便利&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;describe '#resign' do
  let(:user) { FactoryGirl.create(:user) }

  it 'resigned_atを更新する' do
    lambda {
      user.resign
    }.should change(user, :resigned?).from(false).to(true)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;モデルの更新系のメソッドをテストするとき、&lt;code&gt;change&lt;/code&gt;マッチャが非常に便利。上の例で言うと、&lt;code&gt;user.resigned?&lt;/code&gt;の結果がlambda内の処理を実行した前後で&lt;code&gt;false&lt;/code&gt;から&lt;code&gt;true&lt;/code&gt;に変わることをテストしている。&lt;/p&gt;</summary>
    <title>最近のテスト事情</title>
    <updated>2013-01-19T01:14:00+00:00</updated>
    <dc:date>2013-01-19T01:14:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/168/</id>
    <link href="https://blog.naoty.dev/168/"/>
    <summary>&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;DAYS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'日'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'月'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'火'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'水'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'木'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'金'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'土'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;DAYS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'日'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DAYS&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [&quot;日&quot;, &quot;月&quot;, &quot;火&quot;, &quot;水&quot;, &quot;木&quot;, &quot;金&quot;, &quot;土&quot;, &quot;日&quot;]&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;定数のArrayやHashでも中身を簡単に書きかえられてしまう。ゆるふわな感じがする。&lt;/li&gt;
&lt;li&gt;こんな定数はイヤだ。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;DAYS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'日'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'月'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'火'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'水'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'木'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'金'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'土'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;DAYS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'日'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DAYS&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; /Users/naoty/workspace/misc/freeze_sample.rb:3:in `&amp;lt;main&amp;gt;': can't modify frozen Array (RuntimeError)&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Object#freeze&lt;/code&gt;を使うと、オブジェクトの中身を変更できなくなる（ただし、オブジェクトそのものを再代入することは可能）。&lt;/li&gt;
&lt;li&gt;こっちの方が定数っぽい感じがする。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Object#freezeについて</title>
    <updated>2013-01-17T18:29:00+00:00</updated>
    <dc:date>2013-01-17T18:29:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/167/</id>
    <link href="https://blog.naoty.dev/167/"/>
    <summary>&lt;p&gt;1/13, 1/14に千葉で行われた&quot;東京&quot;Ruby会議10にいってきた。&lt;/p&gt;
&lt;p&gt;受付でまず渡されたのが、砂浜でMacを開く謎のバッヂ×4（後にささたつバッヂであると知らされる）。幸運にも、受付から3時間程度でバッヂをコンプし、レアバッヂをゲットできた。最初はよくわからなかったけど、楽しかった。スタッフの皆さんが楽しんでるのが伝わってきてよかった。&lt;/p&gt;
&lt;p&gt;内容はというと、個人的にはmrubyの話がよかった。ルーターのこととかはよくわからなかったけど、組み込み機器の世界はまだまだレガシーらしく、mrubyにかかる期待は大きいみたい。&quot;Internet of Things&quot;的なことに興味があるので、CとかC++とかやる必要あるのかなと思ってたけど、mrubyでできるならmruby身につけたい。mrubyでつくられたスマートなルーターは実用性がありそうなデバイスでよかった。僕もmruby覚えて、一発ネタじゃない実用的なデバイスつくってみたい。mruby興味あるけど、どこから始めていいかよくわかってないので、なんとかしたい。&lt;/p&gt;
&lt;p&gt;あとは、これまでTwitterでのみ知ってた方と初顔合わせできたのがよかった。#p4dをはじめ、コミュニティの楽しさも再確認できた。ひきつづき何かしらのコミュニティに参加したい。&lt;/p&gt;
&lt;p&gt;2日目は大雪で途中で中断してしまったけど、スタッフの皆さんの英断のおかげで何事もなく帰宅できました。有難うございました。&lt;/p&gt;</summary>
    <title>東京Ruby会議10にいってきた</title>
    <updated>2013-01-16T13:45:00+00:00</updated>
    <dc:date>2013-01-16T13:45:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/166/</id>
    <link href="https://blog.naoty.dev/166/"/>
    <summary>&lt;p&gt;昨年末から社内にIRCが導入されてから、クライアントツールにLimechatを使ってる。とりあえずデフォルトの&lt;code&gt;Limelight&lt;/code&gt;というテーマを使ってたけど、ビミョーに違和感があったので、自分でテーマを作ってみた。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20130113/20130113000307.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20130113/20130113000307.png&quot; alt=&quot;f:id:naoty_k:20130113000307p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20130113000307p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/Nakameguro&quot;&gt;https://github.com/naoty/Nakameguro&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1時間くらいであっさりできてしまったので、そのコツをメモしておく。&lt;/p&gt;
&lt;h3&gt;cssとyamlを使う&lt;/h3&gt;
&lt;p&gt;Limechatのテーマはcssとyamlの2つで定義していく。cssはチャットのログが表示される部分（上下）のスタイルを定義するのに使い、yamlはユーザー一覧・サーバー一覧・入力部分のスタイルを定義するのに使う。これらを&lt;code&gt;~/Library/Application Support/Limechat/Themes/&lt;/code&gt;以下におけば、LimechatのPreferencesからテーマを設定できるようになる。&lt;/p&gt;
&lt;h3&gt;サンプルを参考にする&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;~/Library/Application Support/Limechat/Themes/&lt;/code&gt;に&lt;code&gt;Sample.css&lt;/code&gt;と&lt;code&gt;Sample.yaml&lt;/code&gt;がある。これを参考に、どのクラスがどの部分にあたるのかだいたい把握できる。例えば、時間のテキストは&lt;code&gt;.time&lt;/code&gt;というクラスがついてるし、&lt;code&gt;.sender[type=myself]&lt;/code&gt;というクラスは自分のニックネームにあたる。&lt;/p&gt;
&lt;h3&gt;sassが便利&lt;/h3&gt;
&lt;p&gt;今回はcssは直接書かずにsassで書いてみた。色を多用するから、それぞれの色に変数名をつけたかった。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gem install sass
$ sass --watch Nakameguro.sass:Nakameguro.css
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;とすると、&lt;code&gt;Nakameguro.sass&lt;/code&gt;を保存するたびにcssに変換されるため、すぐに変更を確認できる。便利。&lt;/p&gt;
&lt;h3&gt;小言&lt;/h3&gt;
&lt;p&gt;毎日使うツールは自由にカスタマイズできた方がいい。自分に合うようにカスタマイズすることで快適に開発できる。今はGUIなLimechatを使ってるけど、より柔軟にカスタマイズしたくなったらWeechatに移行するかも。&lt;/p&gt;</summary>
    <title>Limechatのテーマつくった</title>
    <updated>2013-01-13T00:26:00+00:00</updated>
    <dc:date>2013-01-13T00:26:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/165/</id>
    <link href="https://blog.naoty.dev/165/"/>
    <summary>&lt;p&gt;Androidアプリ開発しててEclipseが重くてつらかったので、IntelliJ IDEAなるものを試してる。見た目がかっこいいからこっち使ってみようと思い、vimっぽく使えるか試してみた。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IntelliJ IDEA 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テーマを黒にする&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;こっちの方がイケてる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Preferences &amp;gt; Appearance &amp;gt; Theme&lt;/code&gt;をDarculaに変更する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20130104/20130104233050.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20130104/20130104233050.png&quot; alt=&quot;f:id:naoty_k:20130104233050p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20130104233050p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2&gt;IdeaVimを追加&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;キーマップをvim化する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Preferences &amp;gt; Plugins &amp;gt; Browse repositories &amp;gt; IdeaVim&lt;/code&gt;でダブルクリックするとインストールできる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20130104/20130104233555.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20130104/20130104233555.png&quot; alt=&quot;f:id:naoty_k:20130104233555p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20130104233555p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2&gt;カーソルがどこまでも右にいける設定をオフにする&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Preferences &amp;gt; Editor &amp;gt; Allow placement of caret after end of line&lt;/code&gt;をオフにする。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20130104/20130104233620.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20130104/20130104233620.png&quot; alt=&quot;f:id:naoty_k:20130104233620p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20130104233620p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2&gt;行番号を表示する&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Preferences &amp;gt; Editor &amp;gt; Appearance &amp;gt; Show line numbers&lt;/code&gt;をオンにする。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20130104/20130104233646.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20130104/20130104233646.png&quot; alt=&quot;f:id:naoty_k:20130104233646p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20130104233646p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2&gt;キーマッピングをカスタマイズする&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Preferences &amp;gt; Keymap&lt;/code&gt;からいろいろ変更できる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Second Stroke&lt;/code&gt;を指定することでPrefixみたいなキーマッピングも設定できる。&lt;/li&gt;
&lt;li&gt;変更したのは以下のとおり。これでだいたいvimと同じ動きになる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Run&lt;/code&gt;：実行&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Select Next Tab&lt;/code&gt;, &lt;code&gt;Select Previous Tab&lt;/code&gt;：タブを前後に移動&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Recent Files&lt;/code&gt;：最近開いたファイルのファイラーを起動（unite.vimっぽく使える）&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Split Horizontally&lt;/code&gt;, &lt;code&gt;Split Vertically&lt;/code&gt;：エディタを水平分割、垂直分割&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Goto Next Splitter&lt;/code&gt;, &lt;code&gt;Goto Previous Splitter&lt;/code&gt;：分割したエディタを前後に移動&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Close&lt;/code&gt;：エディタを閉じる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20130104/20130104233706.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20130104/20130104233706.png&quot; alt=&quot;f:id:naoty_k:20130104233706p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20130104233706p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Eclipseだとタブの移動とか画面分割をショートカットからできなかった気がするので、これだけでもインテリJ氏に替える価値があると思う。作業効率がだいぶ上がる。&lt;/p&gt;</summary>
    <title>IntelliJ IDEAをvimっぽくする</title>
    <updated>2013-01-04T23:41:00+00:00</updated>
    <dc:date>2013-01-04T23:41:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/164/</id>
    <link href="https://blog.naoty.dev/164/"/>
    <summary>&lt;p&gt;KDDIの障害が復旧するのを見守るハメになったので、それまで2012年の振り返りをしようと思う。&lt;/p&gt;
&lt;p&gt;2012年の技術面での目標は「iPhoneアプリをリリースすること」だったような気がする。これは無事に達成できた。おまけにAndroidアプリもリリースできた。あと、いくつかRailsでサービスをつくった。特に&lt;a href=&quot;http://cui-about.me&quot;&gt;cui-about.me&lt;/a&gt;はなかなか好評で、海外の方にも使っていただいた。使ってもらえるサービスを作ったということも大きい成果だったと思う。覚え始めてもう2年くらいになるRailsでは、特にRSpecを書けるようになったことが一番の進歩だったと思う。まあ大半がAndroidかiOSを書いていたので、そこまで大きい進歩はなかったんだけど。最近はnode.jsをちょっとやり始めて、だんだんとわかってきたところ。Arduinoも買ってみて、ハードウェアに強い興味がでてきた。&lt;/p&gt;
&lt;p&gt;総括すると、未知の領域にどんどんチャレンジできた年だった。&lt;/p&gt;
&lt;p&gt;2013年の目標は「ハードウェアを開発すること」にしようと思ってる。ハードウェアといってもいろいろあるけど、とりあえず製品として売れるものを開発したい。いま一番興味があるのはハードウェアで、特にモノとモノとがインターネットにつながった未来に興味がある。Webサービスやアプリの開発自体もすごく楽しいんだけど、これまでの路線から想像がついてしまう未来ではなく、一歩先の未来を実現できるエンジニアになりたいと思う。そのために、これまでとはまったく異なる領域にチャレンジしたい気持ちが強い。2013年は2012年よりもっと大きくステップアップしたい。&lt;/p&gt;
&lt;p&gt;HTMLも分からないまったくのド素人だった2年半前からここまで来れたという事実は今ではすごく自信になっていて、新しくチャレンジすることにポジティブになれる。今年だって、iPhoneアプリだけじゃなくAndroidアプリも作ることができて、さらに自信につながった。だから、来年もまた大きなチャレンジをしたいと思う。毎年そうやってチャレンジを繰り返して成功体験を重ねていけたら幸せだなぁと、年の瀬にしみじみ思いました。&lt;/p&gt;
&lt;p&gt;今年お世話になった皆様、ありがとうございました。来年も宜しくお願い致します。よいお年をお迎えください。&lt;/p&gt;</summary>
    <title>2012年の振り返り・2013年の目標</title>
    <updated>2012-12-31T02:16:00+00:00</updated>
    <dc:date>2012-12-31T02:16:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/163/</id>
    <link href="https://blog.naoty.dev/163/"/>
    <summary>&lt;p&gt;最近、会社でIRCブームが来てるので、僕もhubotを使ってなにかbotを作ってみることにした。&lt;a href=&quot;http://hubot.github.com/&quot;&gt;hubot&lt;/a&gt;はGithubが作ったbotフレームワークで、TwitterのbotとかIRCのbotを簡単に作ることができる。&lt;/p&gt;
&lt;p&gt;で、できたのがこれ。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20121230/20121230030802.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20121230/20121230030802.png&quot; alt=&quot;f:id:naoty_k:20121230030802p:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20121230030802p:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/naoty/diobot&quot;&gt;https://github.com/naoty/diobot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ディオ（DIO）様の名言をランダムに返してくれる、最高に「ハイ！」なbotが出来上がりました。&lt;/p&gt;
&lt;p&gt;Herokuでhubotをデプロイするときにhubotのwiki&lt;a href=&quot;#f1&quot; title=&quot;https://github.com/github/hubot/wiki/Deploying-Hubot-onto-Heroku&quot;&gt;*1&lt;/a&gt;を参考にしてみたんだけど、Herokuにpushすると、下のようなエラーが出てぜんぜんうまくいかなかった。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Starting process with command `bin/hubot -a irc -n Hubot`
Stopping all processes with SIGTERM
bin/hubot: 3: npm: not found
Process exited with status 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;結局、このwikiは参考にせずに自力でなんとかしたので、その記録をちゃんとメモに残しておこうと思う。&lt;/p&gt;
&lt;h2&gt;package.json&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir diobot
$ cd diobot
$ vi package.json
{
  &quot;name&quot;: &quot;diobot&quot;,
  &quot;version&quot;: &quot;0.0.1&quot;,
  &quot;author&quot;: &quot;naoty&quot;,
  &quot;description&quot;: &quot;DIO sama at irc&quot;,
  &quot;license&quot;: &quot;MIT&quot;,

  &quot;dependencies&quot;: {
    &quot;hubot&quot;: &quot;*&quot;,
    &quot;hubot-scripts&quot;: &quot;*&quot;,
    &quot;optparse&quot;: &quot;*&quot;,
    &quot;hubot-irc&quot;: &quot;*&quot;,
    &quot;coffee-script&quot;: &quot;*&quot;,
    &quot;underscore&quot;: &quot;*&quot;
  },

  &quot;engines&quot;: {
    &quot;node&quot;: &quot;0.8.x&quot;,
    &quot;npm&quot;: &quot;1.1.x&quot;
  }
}
$ npm install
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;dependencies&lt;/code&gt;にあるパッケージは、先述のwikiに従ってたときに使ってたpackage.jsonに書いてあったのでそのまま使った。&lt;/li&gt;
&lt;li&gt;あと、&lt;code&gt;coffee-script&lt;/code&gt;はデプロイ時にエラーになったので追加した。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;underscore&lt;/code&gt;は便利なので、とりあえず追加した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Procfile&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ vi Procfile
bot: hubot -a irc -n DIO
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Herokuによると&lt;a href=&quot;#f2&quot; title=&quot;https://devcenter.heroku.com/articles/nodejs-support&quot;&gt;*2&lt;/a&gt;、Heroku側で&lt;code&gt;bin:node_modules/.bin:/usr/local/bin:/usr/bin:/bin&lt;/code&gt;にPATHを通してくれるので、Procfileでは&lt;code&gt;hubot&lt;/code&gt;とすればいい。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-a &amp;lt;Adapter名&amp;gt; -n &amp;lt;IRCのニックネーム&amp;gt;&lt;/code&gt;をオプションにつける。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Herokuにデプロイ&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ git push heroku master
...
$ heroku ps:scale bot=1
$ git config:add HUBOT_IRC_SERVER='irc.example.com' HUBOT_IRC_ROOMS='#hoge' HUBOT_IRC_NICK='DIO' HUBOT_IRC_PORT='6667' HUBOT_IRC_PASSWORD='hogehoge'
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;IRCサーバーやチャンネルへの接続のための情報を環境変数として渡す。&lt;/li&gt;
&lt;li&gt;必要な情報はこちら&lt;a href=&quot;#f3&quot; title=&quot;https://github.com/github/hubot/wiki/Adapter:-IRC&quot;&gt;*3&lt;/a&gt;に載ってる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;スクリプトを追加&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir scripts
$ vi scripts/ping.coffee
module.exports = (robot) -&amp;gt;
  robot.respond /PING$/i, (msg) -&amp;gt;
    msg.send 'PONG'
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;scripts/&lt;/code&gt;以下にあるスクリプトは自動で読み込まれて有効になる。&lt;/li&gt;
&lt;li&gt;これをデプロイして&lt;code&gt;dio ping&lt;/code&gt;って送ったら&lt;code&gt;PONG&lt;/code&gt;とDIOが返したら成功。&lt;/li&gt;
&lt;li&gt;あとは、工夫して面白いbotを作るだけ。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#fn1&quot;&gt;*1&lt;/a&gt;:&lt;a href=&quot;https://github.com/github/hubot/wiki/Deploying-Hubot-onto-Heroku&quot;&gt;https://github.com/github/hubot/wiki/Deploying-Hubot-onto-Heroku&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#fn2&quot;&gt;*2&lt;/a&gt;:&lt;a href=&quot;https://devcenter.heroku.com/articles/nodejs-support&quot;&gt;https://devcenter.heroku.com/articles/nodejs-support&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#fn3&quot;&gt;*3&lt;/a&gt;:&lt;a href=&quot;https://github.com/github/hubot/wiki/Adapter:-IRC&quot;&gt;https://github.com/github/hubot/wiki/Adapter:-IRC&lt;/a&gt;&lt;/p&gt;</summary>
    <title>Herokuでhubotを使ったIRC botを動かす</title>
    <updated>2012-12-30T03:41:00+00:00</updated>
    <dc:date>2012-12-30T03:41:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/162/</id>
    <link href="https://blog.naoty.dev/162/"/>
    <summary>&lt;p&gt;&lt;code&gt;DefaultHttpClient&lt;/code&gt;を使うとUserAgentが&lt;code&gt;Apache-HttpClient/...&lt;/code&gt;みたいな感じになる。サーバー側でUserAgentを使って制限したりする場合には、以下のようにすれば自由にUserAgentを指定できる。&lt;/p&gt;
&lt;pre lang=&quot;java&quot; class=&quot;highlight highlight-java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;DefaultHttpClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DefaultHttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;HttpParams&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CoreProtocolPNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;USER_AGENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ユーザーエージェント&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>AndroidでUserAgentを指定する</title>
    <updated>2012-12-27T11:48:00+00:00</updated>
    <dc:date>2012-12-27T11:48:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/161/</id>
    <link href="https://blog.naoty.dev/161/"/>
    <summary>&lt;p&gt;websocketを使ったリアルタイムなアプリケーションを作りたくなったので、node.jsを始めようと思った。とりあえず、いろいろ必要なものをインストールしたので、それをメモに残しておく。&lt;/p&gt;
&lt;h2&gt;nodebrew&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ curl https://raw.github.com/hokaccha/nodebrew/master/nodebrew | perl - setup
$ vi .zprofile
export PATH=$HOME/.nodebrew/current/bin:$PATH
$ source .zprofile
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;node.jsはバージョンがどんどん更新されるようなので、Homebrewではなくパッケージマネージャーでインストールする。&lt;/li&gt;
&lt;li&gt;他にもnvmやnaveというものがあるらしいが、zshとの相性がよくないという話なので、&lt;a href=&quot;https://github.com/hokaccha/nodebrew&quot;&gt;nodebrew&lt;/a&gt;を選択した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;node.js &amp;amp; npm&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ nodebrew install stable
$ nodebrew use stable
$ node -v
v0.8.16
$ npm -v
1.1.69
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;nodebrewを使ってnode.jsとnpmをインストールする。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;bower&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ npm install bower -g
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;http://twitter.github.com/bower/&quot;&gt;bower&lt;/a&gt;はTwitter謹製のクライアントサイドのライブラリに特化したパッケージマネージャー。&lt;/li&gt;
&lt;li&gt;jQuery, underscore.js, bootstrapなどのリソースをpackage.jsonと同じようにプロジェクト毎にインストールできるのが便利。&lt;/li&gt;
&lt;li&gt;Railsだとjquery-railsなどgemのなかにそれらのリソースが含まれることもあるけど、node.jsはそういうのなさそうなので、重宝しそう。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;例&lt;/h3&gt;
&lt;p&gt;例として、いま見てた本のサンプルプロジェクトで扱うリソースをbowerで管理してみる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// component.json

{
  &quot;name&quot;: &quot;fileupload&quot;,
  &quot;version&quot;: &quot;0.0.1&quot;,
  &quot;main&quot;: &quot;./public/stylesheets/style.css&quot;,
  &quot;dependencies&quot;: {
    &quot;jquery&quot;: &quot;*&quot;,
    &quot;jquery-ui&quot;: &quot;*&quot;,
    &quot;jquery-file-upload&quot;: &quot;*&quot;,
    &quot;jquery-masonry&quot;: &quot;*&quot;,
    &quot;fancybox&quot;: &quot;*&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで&lt;code&gt;bower install&lt;/code&gt;とすればインストール完了。&lt;/p&gt;
&lt;h2&gt;NoSQL&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ brew install couchdb
$ mkdir -p ~/Library/LaunchAgents
$ cp /usr/local/Cellar/couchdb/1.2.0/Library/LaunchDaemons/org.apache.couchdb.plist ~/Library/LaunchAgents/
$ launchctl load -w ~/Library/LaunchAgents/org.apache.couchdb.plist
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;MongoDB, Redis, CouchDBなどのNoSQLはbrewでインストールするだけ。&lt;/li&gt;
&lt;li&gt;インストール後に表示されるメッセージに従って、自動起動ファイルをロードしておくことも忘れずに。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;追記（2012/12/22）&lt;/h3&gt;
&lt;h3&gt;node.jsでbowerを使うには&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ tree -I node_modules
.
├── app.js
├── package.json
├── public
│ ├── component.json // &amp;lt;- ここに配置
│ ├── components // &amp;lt;- ここにインストールされる
│   ├── images
│   ├── javascripts
│   └── stylesheets
│   └── style.css
├── routes
│   └── index.js
└── views
    ├── layout.jade
    └── index.jade
$ cd public
$ bower install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;bower install&lt;/code&gt;でインストールされるライブラリは同じディレクトリ内のcomponentsというディレクトリに入る。なので、public内にcomponent.jsonを配置して&lt;code&gt;bower install&lt;/code&gt;すればよさげ。&lt;/p&gt;
&lt;h3&gt;node-dev&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ npm install node-dev -g
$ node-dev app.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;node app.js&lt;/code&gt;で起動すると、ファイルを変更するたびに再起動する必要がありめんどくさい。node-devを使うとその必要がなくなるので、とても便利。インストール必須だと思う。&lt;/p&gt;</summary>
    <title>node.js環境構築</title>
    <updated>2012-12-16T23:33:00+00:00</updated>
    <dc:date>2012-12-16T23:33:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/160/</id>
    <link href="https://blog.naoty.dev/160/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;http://qiitahackathon02.peatix.com/&quot;&gt;Qiita Hackathon&lt;/a&gt;に参加してきました。&lt;/p&gt;
&lt;p&gt;「&lt;a href=&quot;http://quiita-hackson-heartbeat.herokuapp.com&quot;&gt;HeartBeat&lt;/a&gt;」というアプリを7時間あまりで作りました。Androidの加速度センサーとnode.jsを使ったアプリで、スマホの振動を定期的にサーバーに送信することで、その人の活動状況（生きてんのか、死んでんのか）をリアルタイムに把握できます。毒のあるデザインが味わい深さを際立たせています。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20121208/20121208234807.gif&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20121208/20121208234807.gif&quot; alt=&quot;f:id:naoty_k:20121208234807g:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20121208234807g:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;↑スマホの振動によって生死を彷徨う様子がリアルタイムで更新される図&lt;/p&gt;
&lt;p&gt;結果的には入賞を逃しましたが、得ることが多かったのでメモを残しておこうと思います。&lt;/p&gt;
&lt;h2&gt;技術的なアレコレ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;時間節約のために使ったLoginActivityのテンプレートが便利だった。ログイン画面が一瞬でできあがった。バリデーションや非同期処理も完璧に書いてあって、UIもキレイな優れもの。これはいい教材になりそう。&lt;/li&gt;
&lt;li&gt;加速度センサーをネイティブで実装したけど、他のチームがHTML5+JSで実装していた。HTML5でできることを知っていれば、Javaはいっさい書かずにこのアプリできた気がする。日頃ネイティブで開発しているせいか、HTML5についてまったくといっていいほど関心がなかった。反省。&lt;/li&gt;
&lt;li&gt;僕たちのチーム以外にも「加速度センサー＋リアルタイム」なアプリがいくつかあった。やはり、node.jsのようなリアルタイムウェブの技術があると、実現できるアイデアの幅が広がると改めて感じた。やりたいとは前々から思ってたけど、その優先度を上げようと思う。&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://deploygate.com&quot;&gt;DeployGate&lt;/a&gt;マジ便利。TestFlightもかなり便利だったけど、それ以上に使いやすかった（iOSはAndroidより配信までのプロセスが多いことが主因だけど）。デプロイまでのプロセスがとても短い。よく考えられてると感じた。ただ、うちの会社で使うかはちょっと微妙かもしれない。配信だけならJenkinsを使って簡易な仕組みはできそう。たくさんの端末で検証する場合であれば、各機種の詳細なログがほしいのでDeployGate使うと思う。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ハッカソンについて&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ハッカソンではWebViewを使うのが簡単で速いと思った。&lt;/li&gt;
&lt;li&gt;ハッカソンでよくやるミスとしては、ログイン／サインインの実装に時間をとられること。本来作りたい機能以外で時間をとられて悲しくなる。やめよう。ユーザーはHTMLでいるっぽい感じにしちゃえ。作りたい機能に集中した方がいい。&lt;/li&gt;
&lt;li&gt;ハッカソンのいいところは、いろんなアプリの実装方法をその場で知ることができる点にあると思う。同じようなアプリでもネイティブで作るチームとHTML+JSで作るチームがある。出来上がりを見ても、そこに大差はない。いろんな実装方法を知ることで、選択肢が広がり、目的に対してより適切な選択ができるようになると思う。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Qiita Hackathon参加してきました</title>
    <updated>2012-12-09T00:21:00+00:00</updated>
    <dc:date>2012-12-09T00:21:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/159/</id>
    <link href="https://blog.naoty.dev/159/"/>
    <summary>&lt;p&gt;Makers Faire行こうと思ってたけど、寒すぎる&amp;amp;人多いっぽい&amp;amp;ネットつながらないっぽいので、行くのやめてAmazonで注文してた「Arduinoをはじめようキット」を「Arduinoをはじめよう」を読みながらいじってた。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/B0025Y6C5G/hatena-blog-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/510LjrBl68L._SL160_.jpg&quot; alt=&quot;Arduinoをはじめようキット&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;Arduinoをはじめようキット&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/B0025Y6C5G/hatena-blog-22/&quot;&gt;Arduinoをはじめようキット&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出版社/メーカー: スイッチサイエンス&lt;/li&gt;
&lt;li&gt;メディア: エレクトロニクス&lt;/li&gt;
&lt;li&gt;購入: 57人 クリック: 998回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/B0025Y6C5G/hatena-blog-22&quot;&gt;この商品を含むブログ (49件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/487311537X/hatena-blog-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51zFePM-naL._SL160_.jpg&quot; alt=&quot;Arduinoをはじめよう 第2版 (Make:PROJECTS)&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;Arduinoをはじめよう 第2版 (Make:PROJECTS)&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/487311537X/hatena-blog-22/&quot;&gt;Arduinoをはじめよう 第2版 (Make:PROJECTS)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: Massimo Banzi,船田巧&lt;/li&gt;
&lt;li&gt;出版社/メーカー: オライリージャパン&lt;/li&gt;
&lt;li&gt;発売日: 2012/03/16&lt;/li&gt;
&lt;li&gt;メディア: 単行本（ソフトカバー）&lt;/li&gt;
&lt;li&gt;購入: 5人 クリック: 17回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/487311537X/hatena-blog-22&quot;&gt;この商品を含むブログ (5件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;キットとは別にUSBケーブルが必要だと気づいてビックカメラで買ったんだけど、なんか規格が違かったらしく結局もう一回AmazonでUSBケーブルを注文した。日曜日の半分くらい無駄にした。↓これでちゃんとささった。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/B0036SGFB6/hatena-blog-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/318cBMUMARL._SL160_.jpg&quot; alt=&quot;ELECOM USB2.0ケーブル A-Bタイプ 2m ブラック U2C-B20BK&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;ELECOM USB2.0ケーブル A-Bタイプ 2m ブラック U2C-B20BK&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/B0036SGFB6/hatena-blog-22/&quot;&gt;ELECOM USB2.0ケーブル A-Bタイプ 2m ブラック U2C-B20BK&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出版社/メーカー: エレコム&lt;/li&gt;
&lt;li&gt;発売日: 2010/02/15&lt;/li&gt;
&lt;li&gt;メディア: Personal Computers&lt;/li&gt;
&lt;li&gt;購入: 15人 クリック: 48回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/B0036SGFB6/hatena-blog-22&quot;&gt;この商品を含むブログ (1件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「Arduinoをはじめよう」って本どおりにいかない部分がさっそくあった。&lt;/p&gt;
&lt;p&gt;僕のMacだと、&lt;code&gt;/dev/cu.usbserial-&lt;/code&gt;なんていうシリアルポートなかった。代わりに&lt;code&gt;/dev/tty.usbmodemXXXXX&lt;/code&gt;みたいなのを選択したらうまくいった。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20121202/20121202223645.gif&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20121202/20121202223645.gif&quot; alt=&quot;f:id:naoty_k:20121202223645g:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20121202223645g:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;LEDピカピカ。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20121202/20121202223817.gif&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20121202/20121202223817.gif&quot; alt=&quot;f:id:naoty_k:20121202223817g:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20121202223817g:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;工作の授業っぽい。&lt;/p&gt;</summary>
    <title>Hello, Arduino!</title>
    <updated>2012-12-02T22:50:00+00:00</updated>
    <dc:date>2012-12-02T22:50:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/158/</id>
    <link href="https://blog.naoty.dev/158/"/>
    <summary>&lt;p&gt;ここ最近、プログラマーになろうと思ってた当時の「一通りものづくりができるプログラマーになりたい」という目標がおおよそ達成してしまったと思うようになった。Railsも2年くらいやってて簡単なWebサービスなら土日で作れるようになった。AndroidアプリもiOSアプリもそれぞれ一通り経験して、まだまだな部分もあるけど達成感がある。&lt;/p&gt;
&lt;p&gt;そしていま、モチベーションの行き場を失ってなんだかモヤモヤしている。&lt;/p&gt;
&lt;p&gt;ある程度作りたいものを作れるようになった。じゃあ、これからどうしようか。これからの方向性についてあれこれ考えるうちに、3つの方向性があると考えるようになった。&lt;/p&gt;
&lt;p&gt;1つは、ものづくりの経験を重ねてものづくりのスキルを高めていく方向性。目標を達成したとはいえ、まだまだ未熟な部分もたくさんあると感じている。アプリだってひとりですべて作り上げたわけじゃないし、Railsも4.0が出たりRubyが2.0になったりと技術はどんどんアップデートされるから、最新のトレンドをキャッチアップしたい気持ちもある。そして、作ったものが多くの人に長く使ってもらえるようにするには、開発初期で必要とされるスキルとはまた異なるスキルが要求されるように思う。&quot;キレイな&quot;コードを書く技術やテストコードを書く技術なんかがそうだし、サーバーの運用技術もまだまだ自分には不足してると思う（っていうか、ないと思う）。なにより、僕にはオープンソースに貢献した経験がない。優秀なプログラマーはすべからくオープンソースに貢献しているものだし、いずれ僕もそうしたいと思っている。&lt;/p&gt;
&lt;p&gt;2つ目は、ものづくりの幅を広げていく方向性。現時点では、Webサービス、Androidアプリ、iOSアプリを作った。だけど、もっといろんな領域にも手を広げていきたい気持ちがある。例えば、Mac OSXアプリだったり、Arduinoを使ったインタラクティブなデバイスも作ってみたい。特にハードウェアはすごく興味があって、先日「Arduinoをはじめようキット」を購入していじりはじめたばかりだ。ハードウェアまで扱えるようになると、プログラマーがハックできる領域がぐっと広がってくると思う。いままで扱ってきたデータは主にPCから入力されたデータにすぎなかったけど、ハードウェアのさまざまなセンサ（例えば、温度センサー、赤外線センサー、圧力センサーなど）を使えば、現実世界のいろんな情報をデジタルのデータとして扱えるようになる。ここに大きな可能性を感じている。&lt;/p&gt;
&lt;p&gt;最後が、技術そのものを深く探求していく方向性。新しいものをつくりだすのではなくて、すでにある古くから築かれてきた技術をもっと知りたいという気持ち、知的好奇心がある。普段の開発はいろんなブラックボックスの上で成り立っていると思う。OSの仕組みやRubyの実装なんて知らなくても、Webサービスを開発することはできる。でも、開発していくにつれてブラックボックスの中身を見てみたいという好奇心が湧いてくることがあって、今まではその気持ちを抑えてものづくりを優先させてきた。だから、今度はものづくりの方をちょっと抑えて、腰を据えてブラックボックスの中身を暴いてやりたいと思う。2週間くらい前から「30日でできるOS自作入門」という本を読みながら、ゆっくりOSを開発している。実際にコードを書いてみることでOSの中身を理解しようとしている。いままで見えなかったいろんなことがわかりかけてきてて、とても面白い。OSの次はコンパイラとかHTTPサーバーとかデータベースとか検索エンジンとか、いろんなブラックボックスを暴いてやりたい。&lt;/p&gt;
&lt;p&gt;これらの方向性はもちろんどれか1つを選ぶ必要はなくて、仕事とプライベートで切り替えながらうまく両立していけると思う。その先にどういうビジョンがあるのかまだまだハッキリしてなくてモヤモヤは晴れないけど、好奇心というリソースは貴重だからそれを抑えつけずに、好奇心のまま自由に開発していきたいと思う。&lt;/p&gt;</summary>
    <title>近況・これからの方向性についての話</title>
    <updated>2012-12-02T02:00:00+00:00</updated>
    <dc:date>2012-12-02T02:00:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/157/</id>
    <link href="https://blog.naoty.dev/157/"/>
    <summary>&lt;blockquote&gt;
&lt;p&gt;シンプルなBGMアプリほしい&lt;/p&gt;
&lt;p&gt;— なおてぃーさん (@naoty_k) &lt;a href=&quot;https://twitter.com/naoty_k/status/271989557321420800&quot;&gt;11月 23, 2012&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;blockquote&gt;
&lt;p&gt;好きな曲のyoutubeのリンクをHerokuとかにアップしておいて、iPadでそれらをリストを取得してエンドレスで聞けるようにしたい&lt;/p&gt;
&lt;p&gt;— なおてぃーさん (@naoty_k) &lt;a href=&quot;https://twitter.com/naoty_k/status/271989962881265664&quot;&gt;11月 23, 2012&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;↑というのを思いつき、2日間でプロトタイプを作ってみた。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://distilleryimage9.s3.amazonaws.com/25d59dd6361c11e2b3e122000a1f9a4f_7.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://distilleryimage9.s3.amazonaws.com/25d59dd6361c11e2b3e122000a1f9a4f_7.jpg&quot; alt=&quot;http://distilleryimage9.s3.amazonaws.com/25d59dd6361c11e2b3e122000a1f9a4f_7.jpg&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ジョジョOPでテンション上げながら。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://distilleryimage10.s3.amazonaws.com/5837a310363e11e28ed022000a1fbc58_7.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://distilleryimage10.s3.amazonaws.com/5837a310363e11e28ed022000a1fbc58_7.jpg&quot; alt=&quot;http://distilleryimage10.s3.amazonaws.com/5837a310363e11e28ed022000a1fbc58_7.jpg&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;サーバー側をRails on Herokuで作って、そっからデータを取得までできた。&lt;/p&gt;
&lt;p&gt;アプリとサーバーのコードはこちらで公開してます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/naoty/RemoteTrack&quot;&gt;https://github.com/naoty/RemoteTrack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/naoty/RemoteTrack-server&quot;&gt;https://github.com/naoty/RemoteTrack-server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;YouTube再生プレイヤー&lt;/h2&gt;
&lt;p&gt;YouTubeの再生プレイヤーは&lt;code&gt;UIWebView&lt;/code&gt;にiframeを埋め込んで実装した。&lt;code&gt;MPMoviePlayerController&lt;/code&gt;というのでもできそうな感じがするけど、時間かかりそうなので、とりあえず&lt;code&gt;UIWebView&lt;/code&gt;を選択。&lt;/p&gt;
&lt;p&gt;iframeはYoutubeの動画の下のところから取ってこれるものを使う。↓こんなの。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/UqFvrjhbO8c?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;あとは、&lt;code&gt;UITableView&lt;/code&gt;で選択した動画のIDを&lt;code&gt;UIWebView&lt;/code&gt;に渡してリロードすることで、動画を切り替える。&lt;/p&gt;
&lt;h2&gt;サーバーとの通信&lt;/h2&gt;
&lt;p&gt;サーバーとの通信は&lt;code&gt;AFNetworking&lt;/code&gt;という便利ライブラリを使って実装した。外部ライブラリのインストールには&lt;code&gt;CocoaPods&lt;/code&gt;を初めて使ってみた。RailsのBundlerに慣れると、iOSの外部ライブラリの管理がしんどく感じるけど、これでだいぶ楽になれる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;platform :ios, '6.0'
pod 'AFNetworking'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;↑のようなファイルを&lt;code&gt;Podfile&lt;/code&gt;という名前でプロジェクトのルートディレクトリに置いて（&lt;code&gt;Gemfile&lt;/code&gt;っぽい）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pod install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;して、できた&lt;code&gt;*.xcworkspace&lt;/code&gt;を方を使うと簡単に外部ライブラリを使えるようになる。&lt;/p&gt;
&lt;h2&gt;自動再生&lt;/h2&gt;
&lt;p&gt;ここまではそんなに時間がかからなかったけど、ここから&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTMLがロードされたら自動で動画を再生する&lt;/li&gt;
&lt;li&gt;動画が終了したら自動で次の曲に移る&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の2つを実装するのに、相当手こずってる（現在進行形）。&lt;/p&gt;
&lt;p&gt;YouTubeのiFrameプレイヤーをJavaScriptで制御する&lt;a href=&quot;https://developers.google.com/youtube/iframe_api_reference?hl=ja&quot;&gt;YouTube Player API&lt;/a&gt;というものがあるので、これを使ってプレイヤーのロード時、動画再生終了時のイベントを受け取る。詳しい実装方法はリンク先のとおりだけど、ポイントは以下のところ。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function onPlayerStateChange(event) {
    if (event.data == YT.PlayerState.ENDED) {
        document.location = &quot;api://didEndedMovie&quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで再生終了時のイベントを受け取って、&lt;code&gt;api://didEndedMovie&lt;/code&gt;をロードすることができる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UIWebView&lt;/code&gt;でのロードは&lt;code&gt;UIWebViewDelegate&lt;/code&gt;でキャッチすることができるので、これをうまく使うことでJSからアプリ側への通知を実装する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType
{
    NSString *requestString = [[request URL] absoluteString];

    if ([requestString isEqualToString:@&quot;api:didEndedMovie&quot;]) {
        // 再生終了時の処理をここに実装する

        return NO;
    }

    return YES;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このデリゲートメソッドの返り値を&lt;code&gt;YES&lt;/code&gt;にすると&lt;code&gt;UIWebView&lt;/code&gt;はページ遷移するが、&lt;code&gt;NO&lt;/code&gt;にするとページ遷移しない。リクエスト先を見て&lt;code&gt;api://didEndedMovie&lt;/code&gt;であれば、再生終了時の処理を実行し&lt;code&gt;NO&lt;/code&gt;を返す。&lt;/p&gt;
&lt;p&gt;これで再生終了時に次の動画に自動的に移すことが可能&lt;/p&gt;
&lt;p&gt;…かと思いきや、なぜかうまくいかないorz&lt;/p&gt;
&lt;p&gt;デバッグをしてみると、どうやらJSの&lt;code&gt;onPlayerStateChange&lt;/code&gt;が呼ばれていないっぽい。ブラウザではうまくいっていたので、&lt;code&gt;UIWebView&lt;/code&gt;のみで起きる現象のようだけど、原因がよくわからない…。というところで、今週の土日が終わりました。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以下のページを参考にさせていただきました。ありがとうございました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://qiita.com/items/66457a0d5fe55877dea1&quot;&gt;http://qiita.com/items/66457a0d5fe55877dea1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/ntaku/20111103/1320288456&quot;&gt;http://d.hatena.ne.jp/ntaku/20111103/1320288456&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/youtube/iframe_api_reference?hl=ja&quot;&gt;https://developers.google.com/youtube/iframe_api_reference?hl=ja&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>ちょっとしたiPadアプリを作った話</title>
    <updated>2012-11-26T00:08:00+00:00</updated>
    <dc:date>2012-11-26T00:08:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/156/</id>
    <link href="https://blog.naoty.dev/156/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4797328355/hatena-blog-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/41KHt9YEIyL._SL160_.jpg&quot; alt=&quot;ふつうのLinuxプログラミング Linuxの仕組みから学べるgccプログラミングの王道&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;ふつうのLinuxプログラミング Linuxの仕組みから学べるgccプログラミングの王道&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4797328355/hatena-blog-22/&quot;&gt;ふつうのLinuxプログラミング Linuxの仕組みから学べるgccプログラミングの王道&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: 青木峰郎&lt;/li&gt;
&lt;li&gt;出版社/メーカー: ソフトバンククリエイティブ&lt;/li&gt;
&lt;li&gt;発売日: 2005/07/27&lt;/li&gt;
&lt;li&gt;メディア: 単行本&lt;/li&gt;
&lt;li&gt;購入: 32人 クリック: 378回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4797328355/hatena-blog-22&quot;&gt;この商品を含むブログ (138件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OSの仕組みをちゃんと理解しておこうと思って買ってみた。&lt;/p&gt;
&lt;p&gt;以前、「&lt;a href=&quot;http://workingwithunixprocesses.com/&quot;&gt;Working With UNIX Processes&lt;/a&gt;」という本を読んで、プロセスの仕組みがだんだんわかってきたので、OSの他の部分も知りたいということで次に読んだのがこれ。&lt;/p&gt;
&lt;h2&gt;読む前のレベル&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メインで使うのはRuby。最近、Objective-Cも書き始めた。つまり、ゆとりプログラマー。&lt;/li&gt;
&lt;li&gt;C言語はWebの入門記事をちょろっとやった程度。ポインタとか構造体とかよくわからない…&lt;/li&gt;
&lt;li&gt;実務ではサーバーがLinux(Ubuntu)で、基本的な作業はひととおりできる。&lt;/li&gt;
&lt;li&gt;「&lt;a href=&quot;http://workingwithunixprocesses.com/&quot;&gt;Working With UNIX Processes&lt;/a&gt;」を読んだので、多少プロセスについては前提知識がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;もうちょっとC言語を勉強すべきだった&lt;/h2&gt;
&lt;p&gt;内容としては、OSの基本的な概念を紹介し、それらを操作するためのC言語の関数とコード例が出てくる。対象読者のところで、C言語の基本的な理解を前提としているのは、本当そのとおりだった。構造体がバンバン出てくる。あと拙者には&lt;code&gt;fputc&lt;/code&gt;,&lt;code&gt;putc&lt;/code&gt;,&lt;code&gt;fputs&lt;/code&gt;,&lt;code&gt;puts&lt;/code&gt;の区別がつかなかった。&lt;/p&gt;
&lt;p&gt;出直してきます…orz&lt;/p&gt;
&lt;h2&gt;HTTPサーバーをなんとなく理解&lt;/h2&gt;
&lt;p&gt;とはいえ、最後の方に出てくるHTTPサーバーのコード例はとても勉強になった。&lt;/p&gt;
&lt;p&gt;ソケットAPIの説明が簡略だったため、詳しく理解することはできなかったものの、なんとなくHTTPサーバーが何をしているのかがわかった。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;getaddrinfo(3)&lt;/code&gt;で自分（つまりサーバー）の情報（ホスト、プロトコルなど）を取得する。&lt;/li&gt;
&lt;li&gt;取得した情報を使って&lt;code&gt;socket(2)&lt;/code&gt;でソケットを作る。ソケットはファイルディスクリプタ（ただの通し番号）として参照される。&lt;/li&gt;
&lt;li&gt;そのソケットに対して&lt;code&gt;bind(2)&lt;/code&gt;して&lt;code&gt;listen(2)&lt;/code&gt;する。（詳しい説明がなかったので、ここらへんよくわからない…）&lt;/li&gt;
&lt;li&gt;そのソケットに対して&lt;code&gt;accept(2)&lt;/code&gt;する。これをすると、サーバーはクライアントからの接続を待つ。接続に成功したら、接続したソケットを返す。&lt;/li&gt;
&lt;li&gt;接続したソケットはファイルディスクリプタなので、&lt;code&gt;fdopen(3)&lt;/code&gt;を使って読み書きできる。リクエストを読んで、レスポンスを返す処理はここで行う。（接続したソケットへの書き込みはそのままクライアントに返されるのだろうか…？ここらへんもよくわかってない…）&lt;/li&gt;
&lt;li&gt;複数のリクエストをさばくには、5.の処理を並列化する必要があるので、&lt;code&gt;fork(2)&lt;/code&gt;を使って子プロセスにこの処理を任せる。親プロセスはすぐにもう一度&lt;code&gt;accept(2)&lt;/code&gt;してリクエストを待つ。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;おおざっぱな流れはこんな感じで理解した。&lt;/p&gt;
&lt;p&gt;リクエストを読んでレスポンスを返す処理は、とても地味な処理だった。TCP/IPに従ってリクエストをパースして、その結果にもとづいてレスポンスを決めるような処理だったと記憶してる。&lt;/p&gt;
&lt;p&gt;並列化はコード例ではマルチプロセスでの実装だったけど、他の実装も知りたい。&lt;/p&gt;
&lt;h2&gt;残る疑問&lt;/h2&gt;
&lt;p&gt;入門書ということもあり、途中はしょった部分があったので、いくつか疑問が残った。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ソケットAPIがやってることが謎。&lt;code&gt;bind(2)&lt;/code&gt;して&lt;code&gt;listen(2)&lt;/code&gt;する部分が何をやってるか不明。&lt;/li&gt;
&lt;li&gt;接続したソケットへの出力はそのまま接続先のクライアントに出力されるんだろうか？この背後でまだいろいろやってそうな気配を感じる。&lt;/li&gt;
&lt;li&gt;処理が終わった子プロセスはゾンビ化すると思うんだけど、どうやって&lt;code&gt;wait(2)&lt;/code&gt;して終了させるんだろう？&lt;/li&gt;
&lt;li&gt;マルチプロセス以外の並列化の実装も知りたい。C10K問題というキーワードも関連してくる気がするし、node.jsもここらへんに関する技術な気がする。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本書では、次に読むべき本としていくつか紹介されているので、それらを読めば疑問が解決しそう。とてもありがたい。ネットワークに関する本であればこれとか。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4894712059/hatena-blog-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/213B9PVJD1L._SL160_.jpg&quot; alt=&quot;UNIXネットワークプログラミング〈Vol.1〉ネットワークAPI:ソケットとXTI&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;UNIXネットワークプログラミング〈Vol.1〉ネットワークAPI:ソケットとXTI&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4894712059/hatena-blog-22/&quot;&gt;UNIXネットワークプログラミング〈Vol.1〉ネットワークAPI:ソケットとXTI&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: W.リチャードスティーヴンス,W.Richard Stevens,篠田陽一&lt;/li&gt;
&lt;li&gt;出版社/メーカー: ピアソンエデュケーション&lt;/li&gt;
&lt;li&gt;発売日: 1999/07&lt;/li&gt;
&lt;li&gt;メディア: 単行本&lt;/li&gt;
&lt;li&gt;購入: 7人 クリック: 122回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4894712059/hatena-blog-22&quot;&gt;この商品を含むブログ (35件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;↑高いw&lt;/p&gt;</summary>
    <title>書評：ふつうのLinuxプログラミング、あるいはHTTPサーバーについておおざっぱに</title>
    <updated>2012-11-11T01:06:00+00:00</updated>
    <dc:date>2012-11-11T01:06:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/155/</id>
    <link href="https://blog.naoty.dev/155/"/>
    <summary>&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Mountain Lion&lt;/li&gt;
&lt;li&gt;rvm&lt;/li&gt;
&lt;li&gt;Homebrew&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;作業メモ&lt;/h2&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm get stable
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;RVMをアップデートしておく。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ruby-2.0.0-preview1
No binary rubies available &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;: osx/10.8/x86_64/ruby-2.0.0-preview1.
Continuing with compilation. Please &lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rvm mount'&lt;/span&gt; to get more information on binary rubies.
Building &lt;span class=&quot;s1&quot;&gt;'ruby-2.0.0-preview1'&lt;/span&gt; using clang - but it&lt;span class=&quot;s1&quot;&gt;'s not (fully) supported, expect errors.
Installing Ruby from source to: /Users/naoty/.rvm/rubies/ruby-2.0.0-preview1, this may take a while depending on your cpu(s)...
ruby-2.0.0-preview1 - #downloading ruby-2.0.0-preview1, this may take a while depending on your connection...
ruby-2.0.0-preview1 - #extracting ruby-2.0.0-preview1 to /Users/naoty/.rvm/src/ruby-2.0.0-preview1
ruby-2.0.0-preview1 - #extracted to /Users/naoty/.rvm/src/ruby-2.0.0-preview1
ruby-2.0.0-preview1 - #configuring
ruby-2.0.0-preview1 - #compiling
ruby-2.0.0-preview1 - #installing 
Removing old Rubygems files...
Installing rubygems-1.8.24 for ruby-2.0.0-preview1 ...
Error running '&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;env &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GEM_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/Users/naoty/.rvm/gems/ruby-2.0.0-preview1:/Users/naoty/.rvm/gems/ruby-2.0.0-preview1@global:/Users/naoty/.rvm/gems/ruby-2.0.0-preview1:/Users/naoty/.rvm/gems/ruby-2.0.0-preview1@global &lt;span class=&quot;nv&quot;&gt;GEM_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/Users/naoty/.rvm/gems/ruby-2.0.0-preview1 /Users/naoty/.rvm/rubies/ruby-2.0.0-preview1/bin/ruby /Users/naoty/.rvm/src/rubygems-1.8.24/setup.rb&lt;span class=&quot;s1&quot;&gt;', please read /Users/naoty/.rvm/log/ruby-2.0.0-preview1/rubygems.install.log
Installation of rubygems did not complete successfully.
Ruby '&lt;/span&gt;ruby-2.0.0-preview1&lt;span class=&quot;s1&quot;&gt;' was built using clang - but it'&lt;/span&gt;s not &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;fully&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; supported, expect errors.
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ruby-2.0.0-preview1&lt;/code&gt;とちゃんと入れないとダメだった。&lt;/li&gt;
&lt;li&gt;なんかエラーが出たので、&lt;code&gt;~/.rvm/log/ruby-2.0.0=preview1/rubygems.install.log&lt;/code&gt;を読む。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;less .rvm/log/ruby-2.0.0-preview1/rubygems.install.log
…
It seems your ruby installation is missing psych &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;YAML output&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
To eliminate this warning, please &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libyaml and reinstall your ruby.
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;libyaml&lt;/code&gt;というものを入れる必要があるっぽい。&lt;/li&gt;
&lt;li&gt;Homebrewで見つけたので入れる。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libyaml
&lt;/pre&gt;
&lt;p&gt;リトライ！&lt;/p&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm reinstall ruby-2.0.0-preview1
Removing /Users/naoty/.rvm/src/ruby-2.0.0-preview1...
Removing /Users/naoty/.rvm/rubies/ruby-2.0.0-preview1...
No binary rubies available &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;: osx/10.8/x86_64/ruby-2.0.0-preview1.
Continuing with compilation. Please &lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rvm mount'&lt;/span&gt; to get more information on binary rubies.
Building &lt;span class=&quot;s1&quot;&gt;'ruby-2.0.0-preview1'&lt;/span&gt; using clang - but it&lt;span class=&quot;s1&quot;&gt;'s not (fully) supported, expect errors.
Installing Ruby from source to: /Users/naoty/.rvm/rubies/ruby-2.0.0-preview1, this may take a while depending on your cpu(s)...
ruby-2.0.0-preview1 - #downloading ruby-2.0.0-preview1, this may take a while depending on your connection...
ruby-2.0.0-preview1 - #extracting ruby-2.0.0-preview1 to /Users/naoty/.rvm/src/ruby-2.0.0-preview1
ruby-2.0.0-preview1 - #extracted to /Users/naoty/.rvm/src/ruby-2.0.0-preview1
ruby-2.0.0-preview1 - #configuring
ruby-2.0.0-preview1 - #compiling
ruby-2.0.0-preview1 - #installing 
Removing old Rubygems files...
Installing rubygems-1.8.24 for ruby-2.0.0-preview1 ...
Installation of rubygems completed successfully.
Saving wrappers to '&lt;/span&gt;/Users/naoty/.rvm/bin&lt;span class=&quot;s1&quot;&gt;'.
ruby-2.0.0-preview1 - #adjusting #shebangs for (gem irb erb ri rdoc testrb rake).
ruby-2.0.0-preview1 - #importing default gemsets (/Users/naoty/.rvm/gemsets/)
Install of ruby-2.0.0-preview1 - #complete 
Ruby '&lt;/span&gt;ruby-2.0.0-preview1&lt;span class=&quot;s1&quot;&gt;' was built using clang - but it'&lt;/span&gt;s not &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;fully&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; supported, expect errors.
Making gemset ruby-2.0.0-preview1 pristine.
Making gemset ruby-2.0.0-preview1@global pristine.
% rvm list
rvm rubies

&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; ruby-1.9.3-p194 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; x86_64 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
   ruby-2.0.0-preview1 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; x86_64 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# =&amp;gt; - current&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =* - current &amp;amp;&amp;amp; default&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  * - default&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;警告出てるけど、一応インストールできた〜&lt;/li&gt;
&lt;li&gt;当面は&lt;code&gt;.rvmrc&lt;/code&gt;を使って、特定のプロジェクトだけ2.0で開発してみようと思います。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>ruby-2.0.0-preview1をインストールしてみた</title>
    <updated>2012-11-09T00:05:00+00:00</updated>
    <dc:date>2012-11-09T00:05:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/154/</id>
    <link href="https://blog.naoty.dev/154/"/>
    <summary>&lt;p&gt;　最近、C言語を勉強しはじめました。&lt;/p&gt;
&lt;p&gt;　今までは、Rails→Android→iOSと、とにかく「ものを作る」ための技術を身につけようとしてきた。なにか作りたいアプリやWebサ〜ビスのアイデアがあって、それをカタチにするために必要な技術を学んできたという感じ。プログラミングを始めて2年間くらいはそんな感じでプログラミングを身につけてた。&lt;/p&gt;
&lt;p&gt;　「何かを実現するために必要なことを必要なだけ学んでいく」という方法は非常に効率がいいように思えるけど、最近はこのやり方に限界を感じるようになってきた。iPhoneアプリを作りたい→じゃあまずはObjective-Cを勉強しよう、という程度であれば、ちょっとググれば目的に対してどんな技術が必要かすぐにわかると思う。&lt;/p&gt;
&lt;p&gt;　だけど、もっと高度なトピック、例えばレスポンスタイムをもっと短くしたいとか、安全なアプリケーションを作りたいとか、メンテナンスを簡単にしたいとか、そういう目的に対してどんな技術が必要なのか具体的にイメージすることが僕にはできない。「目的に対して必要な技術を学ぼう」という方針だと、その必要性をイメージできない技術は習得しないことになるし、イメージできる範囲での技術では必ずしも目的を達成できないと思う。&lt;/p&gt;
&lt;p&gt;　その目的を達成するために何が必要かちゃんとイメージできるようになるには、大まかな全体像を理解する必要があると思ってる。例えば、OSの仕組みとか、ネットワークの仕組みとか。そういうのが理解できてないと、イメージできる範囲での局所的な解しか思い浮かばなくなると思う。&lt;/p&gt;
&lt;p&gt;　ここでようやく冒頭に戻れるんだけど、そういうことをぼんやり思うようになり、最近、C言語を勉強しはじめました。LinuxもC言語で開発されていると聞くし、RubyだってC言語で開発されていると聞く。apacheとかそういう普段お世話になってるソフトウェアも（たぶん）C言語で開発されてるんだろう。OSとかネットワークとか、そういう基本的な部分って概念的な説明ばかりでなかなか理解できない。実際にC言語で開発されているのであれば、C言語を勉強することでコードによってより具体的に理解することができるんじゃないかと思った。C言語を勉強しはじめた理由はそこらへんにあって、要するに基本的な概念を概念としてではなく具体的なコードとして理解するためにある。&lt;/p&gt;
&lt;p&gt;　最近はこの本を読んで、C言語を勉強しつつ、HTTPサーバーを作ったりしてる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4797328355/hatena-hamazou-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/41KHt9YEIyL._SL160_.jpg&quot; alt=&quot;ふつうのLinuxプログラミング Linuxの仕組みから学べるgccプログラミングの王道&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;ふつうのLinuxプログラミング Linuxの仕組みから学べるgccプログラミングの王道&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4797328355/hatena-hamazou-22/&quot;&gt;ふつうのLinuxプログラミング Linuxの仕組みから学べるgccプログラミングの王道&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: 青木峰郎&lt;/li&gt;
&lt;li&gt;出版社/メーカー: ソフトバンククリエイティブ&lt;/li&gt;
&lt;li&gt;発売日: 2005/07/27&lt;/li&gt;
&lt;li&gt;メディア: 単行本&lt;/li&gt;
&lt;li&gt;購入: 32人 クリック: 375回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4797328355&quot;&gt;この商品を含むブログ (138件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　抽象的な概念が実はただの整数にすぎなかったり、単純な仕組みだったということがなんとなく分かってきた。とてもおもしろい。これが終わったら、OSをもっと理解するためにこの本を読んでOS作ってみたいとか思ってる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4839919844/hatena-hamazou-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/41Q4Q20S5PL._SL160_.jpg&quot; alt=&quot;30日でできる! OS自作入門&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;30日でできる! OS自作入門&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4839919844/hatena-hamazou-22/&quot;&gt;30日でできる! OS自作入門&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: 川合秀実&lt;/li&gt;
&lt;li&gt;出版社/メーカー: 毎日コミュニケーションズ&lt;/li&gt;
&lt;li&gt;発売日: 2006/03/01&lt;/li&gt;
&lt;li&gt;メディア: 単行本&lt;/li&gt;
&lt;li&gt;購入: 35人 クリック: 677回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4839919844&quot;&gt;この商品を含むブログ (302件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　帰宅後に2時間くらい勉強する時間を作って、継続的にコツコツと基本を理解するようにしたい。&lt;/p&gt;</summary>
    <title>Cはじめました</title>
    <updated>2012-11-05T23:45:00+00:00</updated>
    <dc:date>2012-11-05T23:45:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/153/</id>
    <link href="https://blog.naoty.dev/153/"/>
    <summary>&lt;h2&gt;versions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Xcode (4.5.1)&lt;/li&gt;
&lt;li&gt;Facebook SDK for iOS (3.1)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;SDKインストール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://developers.facebook.com/ios/&quot;&gt;ここ&lt;/a&gt;からインストーラをダウンロードしてインストール。&lt;code&gt;~/Documents&lt;/code&gt;にSDKが入る。&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://developers.facebook.com/docs/getting-started/getting-started-with-the-ios-sdk/jp/&quot;&gt;チュートリアル&lt;/a&gt;に沿って進める。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;チュートリアル通りにやったのにエラる&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Undefined symbols for architecture armv7:
  &quot;_OBJC_CLASS_$_ACAccountStore&quot;, referenced from:
      objc-class-ref in FacebookSDK(FBSession.o)
  &quot;_ACFacebookAudienceFriends&quot;, referenced from:
      -[FBSession authorizeUsingSystemAccountStore:accountType:permissions:defaultAudience:isReauthorize:] in FacebookSDK(FBSession.o)
  &quot;_ACFacebookAppIdKey&quot;, referenced from:
      -[FBSession authorizeUsingSystemAccountStore:accountType:permissions:defaultAudience:isReauthorize:] in FacebookSDK(FBSession.o)
  &quot;_ACAccountTypeIdentifierFacebook&quot;, referenced from:
      +[FBSession renewSystemAuthorization] in FacebookSDK(FBSession.o)
  &quot;_ACFacebookAudienceKey&quot;, referenced from:
      -[FBSession authorizeUsingSystemAccountStore:accountType:permissions:defaultAudience:isReauthorize:] in FacebookSDK(FBSession.o)
  &quot;_ACFacebookAudienceOnlyMe&quot;, referenced from:
      -[FBSession authorizeUsingSystemAccountStore:accountType:permissions:defaultAudience:isReauthorize:] in FacebookSDK(FBSession.o)
  &quot;_ACFacebookPermissionsKey&quot;, referenced from:
      -[FBSession authorizeUsingSystemAccountStore:accountType:permissions:defaultAudience:isReauthorize:] in FacebookSDK(FBSession.o)
  &quot;_OBJC_CLASS_$_ASIdentifierManager&quot;, referenced from:
      objc-class-ref in FacebookSDK(FBSettings.o)
  &quot;_ACFacebookAudienceEveryone&quot;, referenced from:
      -[FBSession authorizeUsingSystemAccountStore:accountType:permissions:defaultAudience:isReauthorize:] in FacebookSDK(FBSession.o)
ld: symbol(s) not found for architecture armv7
clang: error: linker command failed with exit code 1 (use -v to see invocation)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;などとエラーが出てくる。&lt;/p&gt;
&lt;h2&gt;解決策&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Accounts.framework&lt;/code&gt;と&lt;code&gt;AdSupport.framework&lt;/code&gt;を追加する。これでiOS 6は動くのだけど、iOS 5では…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dyld: Library not loaded: /System/Library/Frameworks/AdSupport.framework/AdSupport
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;や&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dyld: Symbol not found: _ACFacebookAppIdKey
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;のようなエラーがおきる。&lt;/p&gt;
&lt;p&gt;なので、&lt;code&gt;Accounts.framework&lt;/code&gt;と&lt;code&gt;AdSupport.framework&lt;/code&gt;を&lt;code&gt;optional&lt;/code&gt;で追加する。&lt;/p&gt;
&lt;p&gt;これでうまくいった。&lt;/p&gt;</summary>
    <title>iOS 6とiOS 5でFacebook SDK使おうとしたらハマった</title>
    <updated>2012-11-05T17:34:00+00:00</updated>
    <dc:date>2012-11-05T17:34:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/152/</id>
    <link href="https://blog.naoty.dev/152/"/>
    <summary>&lt;ul&gt;
&lt;li&gt;フリックで左右にスクロールできるだけでなく、ナビゲーションバーにあるボタンからも左右にスクロールできるUIを想定。（標準のメールアプリみたいなイメージ）&lt;/li&gt;
&lt;li&gt;ボタンからスクロールした場合も、フリックしたときと同様に、スクロール前後のイベントを受け取ってあれこれやりたい。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;obj-c:MainViewController.m&quot;&gt;&lt;code&gt;- (void)viewDidLoad {
	[super viewDidLoad];

	self.scrollContainer.animationDelegate = self;
}

- (void)scrollViewWillBeginDragging:(ScrollContainer *)scrollContainer {
	NSLog(@&quot;offset: %d&quot;, self.scrollContainer.contentOffset.x);
}

- (void)scrollViewDidEndDecelerating:(ScrollContainer *)scrollContainer {
	NSLog(@&quot;offset: %d&quot;, self.scrollContainer.contentOffset.x);
}

- (void)segmentDidChange:(id)sender {
	if (![sender isKindOfClass:[UISegmentControl class]]) {
		return;
	}
	UISegmentControl *segmentControl = sender;

	if (segmentControl.selectedSegmentIndex == 0) {
		[self.scrollContainer moveToPreviousContent];
	} else if (segmentControl.selectedSegmentIndex == 1) {
		[self.scrollContainer moveToNextContent];
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;UISegmentControl&lt;/code&gt;で作ったボタンが押されると、&lt;code&gt;ScrollContainer&lt;/code&gt;クラスのメソッドを呼び出して、左右どちらかにスクロールされる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ScrollContainer&lt;/code&gt;は以下のような&lt;code&gt;UIScrollView&lt;/code&gt;のサブクラス。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;obj-c:ScrollContainer.m&quot;&gt;&lt;code&gt;static CGFloat kContentWidth = 320.0f;

- (void)moveToNextContent {
	[UIView beginAnimation:nil context:NULL];
	[UIView setAnimationDuration:0.3f];
	[UIView setAnimationDelegate:self.animationDelegate];
	[UIView setAnimationWillStartSelector:@selector(scrollViewWillBeginDragging:)];
	[UIView setAnimationDidStopSelector:@selector(scrollViewDidEndDecelerating:)];

	CGPoint nextContentOffset = CGPointMake(self.contentOffset.x + kContentWidth, 0);
	self.contentOffset = nextContentOffset;

	[UIView commitAnimations];
}

- (void)moveToPreviousContent {
	[UIView beginAnimation:nil context:NULL];
	[UIView setAnimationDuration:0.3f];
	[UIView setAnimationDelegate:self.animationDelegate];
	[UIView setAnimationWillStartSelector:@selector(scrollViewWillBeginDragging:)];
	[UIView setAnimationDidStopSelector:@selector(scrollViewDidEndDecelerating:)];

	CGPoint previousContentOffset = CGPointMake(self.contentOffset.x - kContentWidth, 0);
	self.contentOffset = previousContentOffset;

	[UIView commitAnimations];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;setContentOffset:animated:&lt;/code&gt;メソッドでもプログラムによるフリックを実現できるんだけど、スクロール前後のイベントを受け取ってあれこれすることはできないっぽい。&lt;/li&gt;
&lt;li&gt;そこで、&lt;code&gt;UIView&lt;/code&gt;クラスのアニメーションを使って、アニメーション前後のイベントを利用する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;setAnimationWillStartSelector:&lt;/code&gt;や&lt;code&gt;setAnimationDidStopSelector:&lt;/code&gt;に直接&lt;code&gt;scrollViewDidEndDecelerating:&lt;/code&gt;などを指定することで、プログラムによるフリックの場合でもイベントを受け取ることができる。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>プログラムにフリックさせてイベントを受け取る</title>
    <updated>2012-10-26T14:33:00+00:00</updated>
    <dc:date>2012-10-26T14:33:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/151/</id>
    <link href="https://blog.naoty.dev/151/"/>
    <summary>&lt;h2&gt;RABLとは…&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nesquena/rabl&quot;&gt;https://github.com/nesquena/rabl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;jsonでのレスポンスを簡単に書くためのテンプレートエンジンみたいです。&lt;/li&gt;
&lt;li&gt;ちょっとしたAPIサーバーをSinatraで作るときにRABLを併用することはありそう。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;インストール&lt;/h2&gt;
&lt;pre lang=&quot;ruby:Gemfile&quot;&gt;&lt;code&gt;source :rubygems

gem 'sinatra'
gem 'rabl'
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/pre&gt;
&lt;h2&gt;基本&lt;/h2&gt;
&lt;pre lang=&quot;ruby:my_app.rb&quot;&gt;&lt;code&gt;class MyApp &amp;lt; Sinatra::Base
  Rabl.register!

  set :rabl, :format =&amp;gt; :json

  get '/' do
    get :rabl, :home
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;views/home.rabl&quot;&gt;&lt;code&gt;node(:greeting) do
  'Hello, Sinatra with RABL!'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://myapp.dev
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;greeting&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;Hello, Sinatra with RABL!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;h2&gt;レイアウト&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;APIのレスポンスとしては、ステータスコードなどのメタ情報をすべてのレスポンスに共通して含めたい。&lt;/li&gt;
&lt;li&gt;なので、Sinatraのテンプレートを使ってみる。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;ruby:views/layout.erb&quot;&gt;&lt;code&gt;{
  &quot;status&quot;: &amp;lt;%= response.status %&amp;gt;,
  &quot;result&quot;: &amp;lt;%= yield %&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;ruby:my_app.rb&quot;&gt;&lt;code&gt;get '/' do
  render :rabl, :home, :layout_engine =&amp;gt; :erb
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://myapp.dev
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;status&quot;&lt;/span&gt;: 200,
  &lt;span class=&quot;s2&quot;&gt;&quot;result&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;greeting&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;Hello, Sinatra with RABL!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;RABLの&lt;a href=&quot;https://github.com/nesquena/rabl/wiki/Using-Layouts&quot;&gt;wiki&lt;/a&gt;にあるように、ruby 1.9.xではRABLでレイアウトを書けないので、erbを使う。&lt;/li&gt;
&lt;li&gt;レスポンス本体とレイアウトのエンジンが異なる場合は、&lt;code&gt;:layout_engine =&amp;gt; :erb&lt;/code&gt;と指定する必要があるっぽい。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>SinatraでのRABLの使い方</title>
    <updated>2012-10-26T00:03:00+00:00</updated>
    <dc:date>2012-10-26T00:03:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/150/</id>
    <link href="https://blog.naoty.dev/150/"/>
    <summary>&lt;p&gt;Instagram連携のテストも兼ねて。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://distilleryimage5.s3.amazonaws.com/e3f921e209ea11e29e5e22000a1fc323_7.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://distilleryimage5.s3.amazonaws.com/e3f921e209ea11e29e5e22000a1fc323_7.jpg&quot; alt=&quot;http://distilleryimage5.s3.amazonaws.com/e3f921e209ea11e29e5e22000a1fc323_7.jpg&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;俺流熟成塩ラーメン＠俺流塩ラーメン中目黒店&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://distilleryimage9.s3.amazonaws.com/061ea72a111a11e2bcc122000a9f0a0f_7.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://distilleryimage9.s3.amazonaws.com/061ea72a111a11e2bcc122000a9f0a0f_7.jpg&quot; alt=&quot;http://distilleryimage9.s3.amazonaws.com/061ea72a111a11e2bcc122000a9f0a0f_7.jpg&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;俺流特製つけ麺＠俺流塩ラーメン中目黒店&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://distilleryimage2.s3.amazonaws.com/05f874660abb11e2a95722000a1cf772_7.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://distilleryimage2.s3.amazonaws.com/05f874660abb11e2a95722000a1cf772_7.jpg&quot; alt=&quot;http://distilleryimage2.s3.amazonaws.com/05f874660abb11e2a95722000a1cf772_7.jpg&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;海老塩＠AFURI中目黒店&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://distilleryimage4.s3.amazonaws.com/e3b6242004a211e2aaa822000a1de2ba_7.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://distilleryimage4.s3.amazonaws.com/e3b6242004a211e2aaa822000a1de2ba_7.jpg&quot; alt=&quot;http://distilleryimage4.s3.amazonaws.com/e3b6242004a211e2aaa822000a1de2ba_7.jpg&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;マルゲリータ＠Kitchen Troquet&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://distilleryimage3.s3.amazonaws.com/2487c964151e11e2a4d022000a1cdead_7.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://distilleryimage3.s3.amazonaws.com/2487c964151e11e2a4d022000a1cdead_7.jpg&quot; alt=&quot;http://distilleryimage3.s3.amazonaws.com/2487c964151e11e2a4d022000a1cdead_7.jpg&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TOMITAスペシャル＠Kitchen Troquet&lt;/p&gt;</summary>
    <title>ラーメン戦記（中目黒・恵比寿エリア）</title>
    <updated>2012-10-18T13:08:00+00:00</updated>
    <dc:date>2012-10-18T13:08:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/149/</id>
    <link href="https://blog.naoty.dev/149/"/>
    <summary>&lt;p&gt;とあるイベントに参加して、他社の新卒の方々のお話を聞いてきた。各社、特色が出てて面白かった。各社とも、新卒を教育について同じような問題を持ってるっぽかった。ただ、その問題への対処は各社違かったのが面白かった。がっつり研修プログラム（bootcamp）を組む会社もあれば、最初から優秀な人を採用してしまう会社もあった。前者の会社のプレゼンはとてもビジネス〜な感じだった。後者はよく見るLT風だった。&lt;/p&gt;
&lt;p&gt;いちおう新卒である拙者はアルバイトからそのまま入社したから、新人研修なんて今更感がある。登壇した企業みたいに何十人もいる会社じゃないし、そこにコストは割けられない。必要なことはすべて自分でなんとかする、というのが基本スタンスな気がする。特に拙者の場合は入社以来、社内で唯一AndroidアプリやiOSアプリの開発を担当してるので、一人でなんとかしなくちゃいけない。そこに「新人だから」なんて甘えはない。今年の5月は「セルフ新人研修」と題して、Javaの基礎やらAndroidの基礎やらをとにかく詰め込もうとしたり、いろんな社外のイベントに参加して刺激を受けに行った。意識を高めて、洋書の技術書を読んだり、意識本棚を平積みしたりした。&lt;/p&gt;
&lt;p&gt;と、こういう状況からすると、登壇された新人さんたちの環境はとても羨ましいと思った。ただ、こっちはこっちで自分でなんとかしなきゃいけない分、濃密でハードな半年間を送っているような気がする。こっちだって「東大に2度合格するより難しい」レベルで厳しいかもしれない。どっかの新人さんが仰ってたように他人や環境のせいにすると、自分のためにはならないと思うので、環境をよくしていきたい。具体的には、早急にgithubを導入して斧コミュニケーションができるようにしたい。&lt;/p&gt;</summary>
    <title>セルフ新人研修の話</title>
    <updated>2012-10-14T01:32:00+00:00</updated>
    <dc:date>2012-10-14T01:32:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/148/</id>
    <link href="https://blog.naoty.dev/148/"/>
    <summary>&lt;p&gt;いまさらSinatraを始めてみた。&lt;/p&gt;
&lt;h2&gt;モチベ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;個人で新しい何かを作り始めた。個人でやるからには、仕事じゃ使えないけど気になってる技術を使った方がいいので、RailsじゃなくてSinatraを使ってみることにした。&lt;/li&gt;
&lt;li&gt;Railsやってると、あんまりRackとか下のレイヤーを意識しないので、そこらへんに前から興味があった。&lt;/li&gt;
&lt;li&gt;Sinatraがダメだったら、Padrinoやるかも。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;versions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2012年10月7日時点で最新のもの&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;sinatra install&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# Gemfile

source :rubygems

gem 'sinatra'
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ bundle install --path vendor/bundle --binstubs
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;とりあえずRailsのときと同様に&lt;code&gt;vendor/bundle&lt;/code&gt;以下に入れる。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# app.rb

require 'bundler'
Bundler.require

get '/' do
  'Hello, Sinatra!'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ ruby -rubygems app.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;http://localhost:4567&quot;&gt;http://localhost:4567&lt;/a&gt; で起動を確認。&lt;/li&gt;
&lt;li&gt;スモールスタートがいい。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;rabl&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# Gemfile

source :rubygems

gem 'sinatra'
gem 'rabl'
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ bundle
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;JSONのレスポンスをテンプレートで記述したかったので&lt;code&gt;rabl&lt;/code&gt;をインストール&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# app.rb

require 'bundler'
Bundler.require

Rabl.register!

get '/' do
  render :rabl, :home, :format =&amp;gt; :json
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# views/home.rabl

node(:greeting) do
  'Hello, Sinatra with rabl!'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;最近、rabl開発メンバーがsinatraに公式サポートのpull requestを送って、sinatraでrablが公式にサポートされるようになったっぽい。&lt;/li&gt;
&lt;li&gt;そのせいか、公式ドキュメント通りではうまくいかず結構時間かかった。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;config.ru&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# config.ru

require 'bundler'
Bundler.require

require './app'
run App
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# app.rb

require 'sinatra/base'

class App &amp;lt; Sinatra::Base
  Rabl.register!

  get '/' do
    render :rabl, :home, :format =&amp;gt; :json
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Herokuやpowで起動する際config.ruが必要っぽい。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;run [app name]&lt;/code&gt;は必須。これがないと動かない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;pow&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# Gemfile

group :development do
  gem 'powder'
  gem 'guard-pow'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ bundle
$ powder link
$ guard pow init
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;sinatraでは、ファイルを変更するたびにサーバーを再起動する必要があってめんどくさい。&lt;/li&gt;
&lt;li&gt;そこで、guard-powを使うことでその作業を自動化する。&lt;/li&gt;
&lt;li&gt;Guardfileはこんな感じにしてみた。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# Guardfile

guard 'pow' do
  watch('Gemfile')
  watch('Gemfile.lock')
  watch('app.rb')
  watch('config.ru')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;heroku &amp;amp; thin&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# Gemfile

group :production do
  gem 'thin'
end

group :development do
  gem 'heroku'
  gem 'powder'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# Procfile

web: thin start -p $PORT -e $RACK_ENV
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;herokuはすんなりデプロイできた。&lt;/li&gt;
&lt;li&gt;developmentはpowサーバを使うのでproductionのみthinをインストール。&lt;/li&gt;
&lt;li&gt;Procfileにwebを書いておくと、Herokuのデフォルトのアプリケーションサーバを変更できる。デフォルトはWEBRickなのでthinに変える。thinの方がパフォーマンスがいいらしい。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;activerecord&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# Gemfile

gem 'sinatra-activerecord'
gem 'rake'

group :production do
  gem 'pg'
end

group :development, :test do
  gem 'sqlite3'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ bundle
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;sinatraで使えるactiverecordと各環境用のアダプターをインストール。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# Rakefile

require 'bundler'
Bundler.require

require 'sinatra/activerecord/rake'
require './app'
require './config/environment'
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ rake -T
rake db:create_migration
rake db:migrate
rake db:rollback
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# config/environment.rb

require 'uri'

configure :development do
  set :database, 'sqlite:///db/development.db'
end

configure :test do
  set :database, 'sqlite:///db/test.db'
end

configure :production do
  db = URI.parse(ENV['DATABASE_URL'] || 'postgres://localhost/mydb')

  ActiveRecord::Base.establish_connection(
    :adapter =&amp;gt; db.scheme == 'postgres' ? 'postgresql' : db.scheme,
    :host =&amp;gt; db.host,
    :port =&amp;gt; db.port,
    :username =&amp;gt; db.user,
    :password =&amp;gt; db.password,
    :databasee =&amp;gt; db.path[1..-1],
    :encoding =&amp;gt; 'utf8'
  )
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;githubの&lt;a href=&quot;https://github.com/janko-m/sinatra-activerecord&quot;&gt;README&lt;/a&gt;にしたがってRakefileで必要なものを&lt;code&gt;require&lt;/code&gt;すると、マイグレーションができるようになる。&lt;/li&gt;
&lt;li&gt;sqliteのパスは&lt;code&gt;///&lt;/code&gt;とスラッシュ3つなのが注意。&lt;/li&gt;
&lt;li&gt;heroku用の設定はherokuのdevcenter（&lt;a href=&quot;https://devcenter.heroku.com/articles/rack&quot;&gt;ここ&lt;/a&gt;）で紹介されたものをコピペした。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ rake db:create_migration
$ rake db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;ちなみにテストなど環境を指定する場合は&lt;code&gt;RAILS_ENV&lt;/code&gt;の代わりに&lt;code&gt;RACK_ENV&lt;/code&gt;を使う。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ rake db:migrate RACK_ENV=test
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ git push heroku master
$ heroku run rake db:migrate
Running `rake --trace db:migrate RACK_ENV=production` attached to terminal... up, run.1
** Invoke db:migrate (first_time)
** Execute db:migrate
rake aborted!
could not connect to server: Connection refused
        Is the server running on host &quot;localhost&quot; and accepting
        TCP/IP connections on port 5432?
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;DBに接続できない。。。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;連休やったのはここまで。 時間があれば(2)もやる予定。&lt;/p&gt;</summary>
    <title>Hello, Sinatra! (1)</title>
    <updated>2012-10-08T23:11:00+00:00</updated>
    <dc:date>2012-10-08T23:11:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/147/</id>
    <link href="https://blog.naoty.dev/147/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/1934356948/hatena-hamazou-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/41hTzxPy7kL._SL160_.jpg&quot; alt=&quot;iOS SDK Development&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;iOS SDK Development&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/1934356948/hatena-hamazou-22/&quot;&gt;iOS SDK Development&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: Chris Adamson,Bill Dudney&lt;/li&gt;
&lt;li&gt;出版社/メーカー: Pragmatic Bookshelf&lt;/li&gt;
&lt;li&gt;発売日: 2012/10/22&lt;/li&gt;
&lt;li&gt;メディア: ペーパーバック&lt;/li&gt;
&lt;li&gt;クリック: 3回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/1934356948&quot;&gt;この商品を含むブログを見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;iPhoneアプリの開発を担当しそうな気配を感じ取ったので、8月後半からぼちぼち読み始めていた。実際に10月から担当することが確定してからは2週間くらいちゃんと読み始めて、いまようやく6章／10章が終わったところ。もう10月になっちゃうので、いったんここまで読んだ感想をまとめておきます。&lt;/p&gt;
&lt;h2&gt;おおまかな内容（6章までだけど）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;まずツイートアプリを作る。途中、iOS6から導入されたSocialフレームワークやAuto layoutの説明が入る。i18nについてもふれる。&lt;/li&gt;
&lt;li&gt;ツイートアプリを改修しながら、Obj-Cについて学ぶ。GCDも出てくる。本書はARCを使うためメモリ管理についてはそんなに詳しくなさげ。&lt;/li&gt;
&lt;li&gt;レシピアプリをStoryboardsなしで作る。Interface Builderの使い方を学ぶ。&lt;/li&gt;
&lt;li&gt;レシピアプリをStoryboardsを使って作りなおす。ナビゲーションも出てくる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;※7章以降はiCloudとかアニメーションとかテストの話が出てくるらしい&lt;/p&gt;
&lt;h2&gt;iOS6, iPhone5に対応済み&lt;/h2&gt;
&lt;p&gt;本書を読んでる最中にiOS6、iPhone5がリリースされた。僕の場合は、AmazonではなくPragmatic Bookshelf（&lt;a href=&quot;http://pragprog.com/book/adios/ios-sdk-development&quot;&gt;ここ&lt;/a&gt;）で買ったんだけど、iPhone5が発売されてからたった数日で本書のアップデートが行われた。6章までだけど、たしか以下のポイントについて変更されていたような気がする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;サンプルコードをTwitterフレームワークからSocialフレームワークに書き換え&lt;/li&gt;
&lt;li&gt;Auto layoutに関する記述が数ページ追加&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@synthesize&lt;/code&gt;を省略するようになった&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@1&lt;/code&gt;や&lt;code&gt;@[]&lt;/code&gt;や&lt;code&gt;@{}&lt;/code&gt;といったリテラルを使うようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;iPhoneアプリの開発環境は目まぐるしく変化するから、自動アップデートがない紙の書籍はすぐに使えなくなってしまう。初心者であるほど、古い環境と新しい環境をアタマの中で置換しながら本を読んでいくのは難しい。なるべく電子書籍を買って、最新の情報にもとづいて勉強した方がいいと思う。&lt;/p&gt;
&lt;h2&gt;テンプレートに頼っていない&lt;/h2&gt;
&lt;p&gt;これがとてもいいと思った。初心者向けの参考書にありがちなXcodeのテンプレート頼りなサンプルコードは一切ない。すべてのプロジェクトはまず「Single View Application」で作成する。その後、Storyboardsを使ってナビゲーションを追加する（残念ながら今のところタブは出てきてない）。テンプレート頼りなサンプルコードを見て勉強したところで、いざ実践に入ったときにすぐに限界が来るのではないかと思った。Rails初心者がScaffoldから始めたせいで、脱Scaffoldが最初の関門になる感じに似ている。&lt;/p&gt;
&lt;p&gt;本書にしたがって実際にプロジェクトを進めていけば、View Controllerを追加し部品をその上に乗っけてSegueでつなげてナビゲーションにはめ込むような作業がおのずと身につく。とても実践的な知識が身についてよかった。&lt;/p&gt;
&lt;h2&gt;英文を読むだけの価値は十分にある&lt;/h2&gt;
&lt;p&gt;本書は英語で、しかも中身が詰まっていて、読み進めるのがしんどい。でも、この本には「最新」かつ「実践的」な情報が詰まっているので、本屋に並んでいるような初心者向けの本よりはるかに役に立った。英語というハードルを考えても、これは読む価値のある本だと思った。&lt;/p&gt;</summary>
    <title>書評：iOS SDK Development</title>
    <updated>2012-09-30T19:19:00+00:00</updated>
    <dc:date>2012-09-30T19:19:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/146/</id>
    <link href="https://blog.naoty.dev/146/"/>
    <summary>&lt;h2&gt;テストのモチベ＝怖いからやる&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;正直に白状すると、「これまでテスト書いたことない &amp;amp;&amp;amp; 会社にテストの文化がない &amp;amp;&amp;amp; テスト書いてる時間ない」っていう状況で、時間を割いてでもテストを書こうっていうモチベがなかなか湧かなかった。&lt;/li&gt;
&lt;li&gt;そんななか、唯一、ハッキリとしたわかりやすいモチベは「デグレが怖い」という恐怖心から解放されることだった。&lt;/li&gt;
&lt;li&gt;プロジェクトが大きくなるほど、自分が書いたコードがどこまで影響するか把握できなくなってくる。だからといって、変更のたびにブラウザでポチポチ一個ずつ確認する作業はだるい。&lt;/li&gt;
&lt;li&gt;テストが通ってるという事実が抜群の安心感をもたらすことがわかってきて、ちゃんとテストを書くようになったというお話です。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;500返ってないか怖い&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一番わかりやすいテスト項目として「ユーザーにエラー画面を表示していないか」というのがまずアタマに浮かんだ。&lt;/li&gt;
&lt;li&gt;モデルとか変更すると、影響範囲よくわからないし、怖い。&lt;/li&gt;
&lt;li&gt;手っ取り早く全部のアクションで500返ってないかテストする方法を考えてみた。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;response.should be_success&lt;/code&gt;的なレスポンスをチェックするテストにタグをつけて、全コントローラーをまたいでレスポンスをチェックするテストだけを実行するってやり方を考えてみた。全コントローラーのテストは時間かかって、たぶん手元では試さなくなりそうだから。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# spec/spec_helper.rb

RSpec.configure do |config|
  config.treat_symbols_as_metadata_keys_with_true_values = true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;RSpec 2.xだとこの設定が必要らしい。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;it 'hogehoge', status: true&lt;/code&gt;みたいなのを&lt;code&gt;it 'hogehoge', :status&lt;/code&gt;で書けるようになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# lib/tasks/spec/status.rake

require 'rspec/core/rake_task'

namespace :spec do
  namespace :controller do
    RSpec::Core::RakeTask.new(:status) do |spec|
      spec.pattern = 'spec/controllers/**/*_spec.rb'
      spec.rspec_opts = '--tag status'
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;自分で&lt;code&gt;rake spec:controllers&lt;/code&gt;的なテストのraketaskを定義したいときは&lt;code&gt;RSpec::Core::RakeTask.new(:hoge)&lt;/code&gt;使えばいいっぽい。&lt;/li&gt;
&lt;li&gt;全コントローラーのテストで、&lt;code&gt;status&lt;/code&gt;ってタグがついてるものだけ実行したいので、こんな感じ。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;it 'returns successfully', :status do
  get :index
  response.should be_success
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ rake spec:controllers:status
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;これでコントローラーをまたいで&lt;code&gt;status&lt;/code&gt;タグのついたテストだけ実行できる。&lt;/li&gt;
&lt;li&gt;全コントローラーのテストは重すぎるので、これでかなり気軽にチェックできるようになると思う。&lt;/li&gt;
&lt;li&gt;とりあえずステータスコードをチェックするようなテストに&lt;code&gt;status&lt;/code&gt;タグをつけておく、っていうルールを共有する必要はある。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;スクリプトでDBを更新するの怖い&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ちょっと前に顧客のデータぜんぶ消しちゃった事件があったような気がする。&lt;/li&gt;
&lt;li&gt;ああいうのあるし、DBを更新する系のスクリプトはちゃんとテストしたい。&lt;/li&gt;
&lt;li&gt;仕事では&lt;code&gt;rails r&lt;/code&gt;でスクリプトを実行するんだけど、こういうのはどうやってテストすればいいのかわからなかったので調べたり試行錯誤した。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# config/environments/test.rb

NaotySample::Application.configure do
  $LOAD_PATH.unshift &quot;#{Rails.root}/script&quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;script/&lt;/code&gt;以下を&lt;code&gt;require&lt;/code&gt;するためにパスに追加しておく&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# spec/scripts/create_naoty_spec.rb

require 'spec_helper'
require 'create_naoty'

describe CreateNaoty do
  it 'creates naoty' do
    CreateNaoty.run
    User.where(name: 'naoty').first.should be_present
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;スクリプトを読み込んでテスト内で実行する。&lt;/li&gt;
&lt;li&gt;モジュールのテストとたぶん同じやり方だと思う。やったことないけど。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# script/create_naoty.rb

module CreateNaoty
  def self.run
    User.create(name: 'naoty')
  end
end

CreateNaoty.run if __FILE__ == $0
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;処理の中身をモジュールにまとめておいて、テスト内で実行しやすくしておく。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;if __FILE__ == $0&lt;/code&gt;で&lt;code&gt;require&lt;/code&gt;されたときにスクリプトが実行されるのを回避してる。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# Guardfile

guard 'rspec' do
  watch(%r{^script/(.+)\.rb$}) {|m| &quot;spec/scripts/${m[1]}_spec.rb&quot; }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Guardを使って自動テストをやってるので、スクリプトテスト用の設定を追加しておく。&lt;/li&gt;
&lt;li&gt;これでスクリプトを変更したときに、それのテストを自動で実行するようになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;「怖いからテストする」というモチベはわかりやすい。&lt;/li&gt;
&lt;li&gt;「怖いところをテストする」という方針であれば、「何をテストすべきか」を自ずと意識するようになる。&lt;/li&gt;
&lt;li&gt;rspec-railsで対応できなければ、rspecの便利機能を駆使して試行錯誤する。RSpec bookにお世話になってる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4798121932/hatena-blog-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51-3T735zLL._SL160_.jpg&quot; alt=&quot;The RSpec Book (Professional Ruby Series)&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;The RSpec Book (Professional Ruby Series)&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4798121932/hatena-blog-22/&quot;&gt;The RSpec Book (Professional Ruby Series)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;作者: David Chelimsky,Dave Astels,Zach Dennis,角谷　信太郎,豊田　祐司,株式会社クイープ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;出版社/メーカー: 翔泳社&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発売日: 2012/02/22&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;メディア: 大型本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;購入: 5人 クリック: 112回&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4798121932/hatena-blog-22&quot;&gt;この商品を含むブログ (12件) を見る&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.davidchelimsky.net/2011/11/06/rspec-280rc1-is-released/&quot;&gt;http://blog.davidchelimsky.net/2011/11/06/rspec-280rc1-is-released/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>ちゃんとテスト書き始めた話</title>
    <updated>2012-09-27T02:47:00+00:00</updated>
    <dc:date>2012-09-27T02:47:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/145/</id>
    <link href="https://blog.naoty.dev/145/"/>
    <summary>&lt;p&gt;Homebrewでインストールしたあと、自動起動させる設定を&lt;code&gt;launchctl&lt;/code&gt;でロードしようとすると、tmuxではこんなエラーが出てくる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist
Bug: launchctl.c:2425 (25957):13: (dbfd = open(g_job_overrides_db_path, O_RDONLY | O_EXLOCK | O_CREAT, S_IRUSR | S_IWUSR)) != -1
launch_msg(): Socket is not connected
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この問題、&lt;code&gt;pbcopy&lt;/code&gt;のときと同じ手法で解決できた。&lt;/p&gt;
&lt;pre lang=&quot;sh:.zshrc&quot;&gt;&lt;code&gt;if [[ &quot;$TMUX&quot; != &quot;&quot; ]]; then
  alias pbcopy=&quot;ssh 127.0.0.1 pbcopy&quot;
  alias launchctl=&quot;ssh 127.0.0.1 launchctl&quot;
fi
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>tmuxのlaunchctlエラー対策</title>
    <updated>2012-09-25T11:51:00+00:00</updated>
    <dc:date>2012-09-25T11:51:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/144/</id>
    <link href="https://blog.naoty.dev/144/"/>
    <summary>&lt;p&gt;ググればいろんなところで解説されているけど、実際にコード書いて確かめてみた。&lt;/p&gt;
&lt;pre lang=&quot;ruby:filename.rb&quot;&gt;&lt;code&gt;puts &quot;__FILE__: #{__FILE__}&quot;
puts &quot;$0: #{$0}&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;ruby:require_filename.rb&quot;&gt;&lt;code&gt;require_relative filename
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;shell&quot; class=&quot;highlight highlight-shell&quot;&gt;% ruby filename.rb
__FILE__: filename.rb
&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;: filename.rb
% ruby require_filename.rb
__FILE__: /Users/naoty/workspace/ruby/filename.rb
&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;: require_filename.rb
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;__FILE__&lt;/code&gt;は実行中のプログラムのファイル名（&lt;a href=&quot;http://miyamae.github.com/rubydoc-ja/1.9.3/#!/doc/spec=2fvariables.html?pseudo&quot;&gt;リファレンス&lt;/a&gt;によると、フルパスとは限らないみたい）&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$0&lt;/code&gt;は実行時に指定されたファイル名（相対パス）&lt;/li&gt;
&lt;li&gt;以下のようなコードを見かけるのだけど、相対パスと絶対パスで一致しない場合は考慮されていないような気がする。。。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;__FILE__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$0&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# hogehoge&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>__FILE__と$0の違い</title>
    <updated>2012-09-18T16:20:00+00:00</updated>
    <dc:date>2012-09-18T16:20:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/143/</id>
    <link href="https://blog.naoty.dev/143/"/>
    <summary>&lt;p&gt;「AまたはB」のような正規表現を簡単に作ろうと思って以下のようにしてみたら、うまくいかなかった。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;mo&quot;&gt;001&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/qiita/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/kobito/&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;NoMethodError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`+' for /qiita/:Regexp
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;意外にも&lt;code&gt;Regexp#+&lt;/code&gt;が定義されてなかったので、以下のようにクラスを拡張してみた。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Regexp&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Regexp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'|'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Regexp#source&lt;/code&gt;はその正規表現の文字列を返すメソッド。で、期待通りにうまくいった。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;mo&quot;&gt;002&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/qiita/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/kobito/&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/qiita|kobito/&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>Regexp#+を定義して「または」を簡単に作る</title>
    <updated>2012-09-06T18:22:00+00:00</updated>
    <dc:date>2012-09-06T18:22:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/142/</id>
    <link href="https://blog.naoty.dev/142/"/>
    <summary>&lt;p&gt;Firefoxの右上の検索ボックスでQiita内の検索を行うためのプラグインを作ってみた。vimperatorであれば&lt;code&gt;qiita [keyword]&lt;/code&gt;で検索できるようになった。&lt;/p&gt;
&lt;pre lang=&quot;xml:qiita.xml&quot;&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;
&amp;lt;SearchPlugin xmlns=&quot;http://www.mozilla.org/2006/browser/search/&quot;&amp;gt;
    &amp;lt;ShortName&amp;gt;Qiita&amp;lt;/ShortName&amp;gt;
    &amp;lt;Description&amp;gt;Search by Qiita&amp;lt;/Description&amp;gt;
    &amp;lt;InputEncoding&amp;gt;utf-8&amp;lt;/InputEncoding&amp;gt;
    &amp;lt;Image width=&quot;16&quot; height=&quot;16&quot;&amp;gt;http://qiita.com/favicon.ico?v=3&amp;lt;/Image&amp;gt;
    &amp;lt;Url type=&quot;text/html&quot; method=&quot;GET&quot; template=&quot;http://qiita.com/search&quot;&amp;gt;
        &amp;lt;Param name=&quot;q&quot; value=&quot;{searchTerms}&quot; /&amp;gt;
    &amp;lt;/Url&amp;gt;
&amp;lt;/SearchPlugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;macの場合は&lt;code&gt;~/Library/Application Support/Firefox/Profiles/xxxxxxxx.default/searchplugins/&lt;/code&gt;以下に上のファイルを保存し、firefoxを再起動。（xxxxxxxxの部分はランダム）&lt;/li&gt;
&lt;li&gt;githubみたいにQiitaもプラグインをブラウザに認識させるとcoolだと思う。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://dl.dropbox.com/u/1235413/add-github-plugin.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://dl.dropbox.com/u/1235413/add-github-plugin.png&quot; alt=&quot;github-plugin&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;これは以下のような感じでできるらしい（未確認）。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;html&quot; class=&quot;highlight highlight-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;search&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application/opensearchdescription+xml&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Qiita検索プラグインを追加&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://qiita.com/searchplugins/qiita.xml&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;h3&gt;追記（9/5）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;githubのソースを確認したら上のような箇所があった。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;html&quot; class=&quot;highlight highlight-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;search&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application/opensearchdescription+xml&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/opensearch.xml&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GitHub&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;xmlも上で紹介した形式とほぼ同じだった。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;xml:opensearch.xml&quot;&gt;&lt;code&gt;&amp;lt;OpenSearchDescription xmlns=&quot;http://a9.com/-/spec/opensearch/1.1/&quot;
                       xmlns:moz=&quot;http://www.mozilla.org/2006/browser/search/&quot;&amp;gt;
  &amp;lt;ShortName&amp;gt;GitHub&amp;lt;/ShortName&amp;gt;
  &amp;lt;Description&amp;gt;Search GitHub&amp;lt;/Description&amp;gt;
  &amp;lt;InputEncoding&amp;gt;UTF-8&amp;lt;/InputEncoding&amp;gt;
  &amp;lt;Image width=&quot;16&quot; height=&quot;16&quot;&amp;gt;data:image/x-icon;base64,
  iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJ
  bWFnZVJlYWR5ccllPAAAAVpJREFUeNqM0s0rRGEUx/F7x0RKxob4A6bZKBYWFkLZqIkkC7FUsrCw
  oCxsZcN/IFmIP4E9ZWnyurBR3krZeH8b1/dMv5vTpDue+szzzL33nJ5znieIoihIGCGmMIt0+ctS
  bIUETbhHEbm/EqSD5PGOC2TwgHo04xaPv9tIHhbUoPUMXjAcx4aln9BKDcYxgRR20IJNDKEO69hC
  Fie2JnYx3sGYJcQ5jrU2PTjEDbpwpeeXWPZN3NOLnLb8hm1UoaBAG3P6btR26pt4rblDDarRs6KO
  Mh7fmr/idZxgAW3Y0H/r/IqCfYKU5o/yB1b7kY5tGp04Uwmh++5Vcx59PoGNWtV3pznQXK2SbLf7
  6s8kVv09yLpGRro0SwoawIgrt1fNzPtT2FVd/WjVCdiL9qQb5k8ho3Ia8eTKea50TeMd2LZOXQmf
  mP9PrL/K3RjURTrAmk4lMcGPAAMAEvmJGW+ZZPAAAAAASUVORK5CYII=&amp;lt;/Image&amp;gt;
  &amp;lt;Url type=&quot;text/html&quot; method=&quot;get&quot; template=&quot;https://github.com/search&quot;&amp;gt;
    &amp;lt;Param name=&quot;q&quot; value=&quot;{searchTerms}&quot;/&amp;gt;
  &amp;lt;/Url&amp;gt;
  &amp;lt;moz:SearchForm&amp;gt;https://github.com/search&amp;lt;/moz:SearchForm&amp;gt;
&amp;lt;/OpenSearchDescription&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3&gt;環境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;osx mountain lion&lt;/li&gt;
&lt;li&gt;firefox 14&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://webos-goodies.jp/archives/50835795.html&quot;&gt;http://webos-goodies.jp/archives/50835795.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Firefox用Qiita検索プラグイン</title>
    <updated>2012-09-05T02:10:00+00:00</updated>
    <dc:date>2012-09-05T02:10:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/141/</id>
    <link href="https://blog.naoty.dev/141/"/>
    <summary>&lt;p&gt;FactoryGirlでテストデータを作るとき、&lt;code&gt;before_create&lt;/code&gt;などのコールバックも実行されて、いろいろめんどくさいときがある。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;FactoryGirl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'naoty'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;skip_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hoge_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:fuga_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;skip_callback&lt;/code&gt;はメソッドごとにスキップするか設定できる。&lt;/li&gt;
&lt;li&gt;似たようなものに&lt;code&gt;reset_callbacks&lt;/code&gt;があるけど、これはイベントに設定されてるコールバックメソッドの&lt;strong&gt;すべて&lt;/strong&gt;をスキップする。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;after(:build)&lt;/code&gt;のところはスキップしたいコールバックのタイミングによって、調整する必要あると思う。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;バージョン&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;factory_girl (3.3.0)&lt;/li&gt;
&lt;li&gt;factory_girl_rails (3.3.0)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://apidock.com/rails/ActiveSupport/Callbacks/ClassMethods/skip_callback&quot;&gt;skip_callback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://apidock.com/rails/v3.2.8/ActiveSupport/Callbacks/ClassMethods/reset_callbacks&quot;&gt;reset_callbacks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>FactoryGirlでコールバックをスキップする</title>
    <updated>2012-09-04T11:53:00+00:00</updated>
    <dc:date>2012-09-04T11:53:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/140/</id>
    <link href="https://blog.naoty.dev/140/"/>
    <summary>&lt;p&gt;便利な設定があるわけじゃなさそうなので、こんなコマンドを自分で定義してみた。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://gyazo.com/d96e474ae19d51408d908c7ddc569171.png?1344926946&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://gyazo.com/d96e474ae19d51408d908c7ddc569171.png?1344926946&quot; alt=&quot;command&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre lang=&quot;vim:.vimrc&quot;&gt;&lt;code&gt;commands! -nargs=1 -complete=help Vh :vertical belowright help &amp;lt;args&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;commands!&lt;/code&gt;でコマンドを指定。同名のコマンドがあれば上書きする。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-nargs=&lt;/code&gt;で引数の数を指定&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-complete=&lt;/code&gt;で補完のタイプを指定。他にもファイルとかディレクトリとかあるらしい。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;vertical belowright [cmd]&lt;/code&gt;で縦分割して右ウィンドウにコマンドの結果を表示する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;args&amp;gt;&lt;/code&gt;は引数&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>vimで右にhelpを表示する</title>
    <updated>2012-08-14T15:58:00+00:00</updated>
    <dc:date>2012-08-14T15:58:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/139/</id>
    <link href="https://blog.naoty.dev/139/"/>
    <summary>&lt;p&gt;xip.ioを使うときにいちいち&lt;code&gt;ifconfig&lt;/code&gt;打つのが面倒くさくなってきたので表示してみました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://gyazo.com/0508093e26dcd9bc69ed2721f179b0ce.png?1344392749&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://gyazo.com/0508093e26dcd9bc69ed2721f179b0ce.png?1344392749&quot; alt=&quot;tmux_statusline&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre lang=&quot;sh:localip&quot;&gt;&lt;code&gt;#!/bin/sh

ifconfig en0 inet | sed -e '1d' -e 's/^.*inet //' -e 's/ netmask.*$//'
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;sh:.tmux.conf&quot;&gt;&lt;code&gt;set-option -g status-right '[#(loadavg)][#(localip)][%Y/%m/%d %H:%M]'
set-option -g status-right-length 60
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>ローカルIPアドレスをtmuxのステータスラインに表示する</title>
    <updated>2012-08-08T11:42:00+00:00</updated>
    <dc:date>2012-08-08T11:42:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/138/</id>
    <link href="https://blog.naoty.dev/138/"/>
    <summary>&lt;p&gt;5月に「&lt;a href=&quot;http://naoty.hatenablog.com/entry/2012/05/20/032251&quot;&gt;Rails開発環境 2012初夏&lt;/a&gt;」という記事を公開してそこそこ好評だったので、最近導入してLife-Changingだったツールを「2012夏」バージョンとして紹介しようと思います。今回紹介するのは以下の3つです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pow + xip.io&lt;/li&gt;
&lt;li&gt;tmuxinator&lt;/li&gt;
&lt;li&gt;ctrlp.vim&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1. pow + xip.io&lt;/h3&gt;
&lt;p&gt;pow + xip.ioによって同じネットワーク内にある、iPhoneやiPadのような他のデバイスからローカルサーバーに接続できるようになりました。これは、スマホ用サイトやアプリで使うAPIの開発で非常に重宝します。特に、実機でないと確認できないような場面では、pow + xip.ioがないと、ステージング環境にデプロイする必要が出てきて、非常に面倒です。&lt;/p&gt;
&lt;p&gt;インストールは、&lt;a href=&quot;http://pow.cx/&quot;&gt;公式ページ&lt;/a&gt;にあるように以下のコマンドを入力するだけです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl get.pow.cx | sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使い方としては、まず、Railsのプロジェクトルートへのシンボリックリンクを.powディレクトリに作ります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd ~/.pow
$ ln -s ~/workspace/rails/cui-aboutme
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;すると、これだけでローカルサーバーが起動して、&lt;a href=&quot;http://cui-aboutme.dev&quot;&gt;http://cui-aboutme.dev&lt;/a&gt;でアクセスできます。簡単ですねー。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ open http://cui-aboutme.dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同じLANにあるデバイスからは、プライベートIPアドレスを使ってアクセスすることができます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ifconfig
...
        inet 192.168.1.4
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ifconfig等で調べた結果、上のようになった場合、&lt;a href=&quot;http://cui-aboutme.192.168.1.4.xip.io&quot;&gt;http://cui-aboutme.192.168.1.4.xip.io&lt;/a&gt;で他のデバイスからもアクセスできます。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20120808/20120808013751.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20120808/20120808013751.jpg&quot; alt=&quot;f:id:naoty_k:20120808013751j:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20120808013751j:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意点としては、Lionでは「システム環境設定」→「共有」→「Web共有」を有効にしておく必要があります。これがオフになっててハマりました…＞＜ちなみに、Mountain Lionでは「Web共有」の項目がなくなっていますが、手元では無事に成功しています。&lt;/p&gt;
&lt;p&gt;実際にプロジェクトで使っていく中でのTipsをいくつかご紹介します。&lt;/p&gt;
&lt;h4&gt;powder&lt;/h4&gt;
&lt;p&gt;powderはpowの操作をカンタンに行うためのコマンドラインツールです。Gemfileからインストールします。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Gemfile

group :development do
  gem 'powder'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;シンボリックリンクを.powに作る操作や、サーバーを再起動する操作などをカンタンなコマンドで実行できます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ powder link
$ powder restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;詳細は&lt;a href=&quot;https://github.com/rodreegez/powder&quot;&gt;公式ページ&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;h4&gt;pry-remote&lt;/h4&gt;
&lt;p&gt;pryを使っている方は多いと思いますが、powのサーバーはrails sで起動するわけではないので、普通のやり方ではpryを使うことができません。そこで活躍するのが、pry-remoteです。これもGemfileからインストールします。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Gemfile

group :development, :test do
  gem 'pry-rails'
  gem 'pry-remote'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使い方は、いつものbinding.pryの代わりにbinding.pry_remoteとコードに追加して、実行すると処理が止まります（見た目には分かりにくいけど…）。そこで、&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pry-remote
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;と打つと、いつものpryコンソールに入れます。&lt;/p&gt;
&lt;p&gt;ちょっと分かりにくいかもしれませんが、&lt;a href=&quot;https://github.com/Mon-Ouie/pry-remote&quot;&gt;公式ページ&lt;/a&gt;も見てもらって実際に使うと雰囲気がわかるとおもいます。&lt;/p&gt;
&lt;h3&gt;2. tmuxinator&lt;/h3&gt;
&lt;p&gt;tmuxinatorは、tmuxで起動するセッションをあらかじめ定義しておいて、コマンド一発で開発環境を起動することができるツールです。gemで配布されているので、bundlerでインストールします。&lt;a href=&quot;https://github.com/aziz/tmuxinator/&quot;&gt;公式ページ&lt;/a&gt;にしたがって準備します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gem install tmuxinator
$ echo &quot;[[-s $HOME/.tmuxinator/scripts/tmuxinator]] &amp;amp;&amp;amp; source $HOME/.tmuxinator/scripts/tmuxinator&quot; &amp;gt;&amp;gt; .zshrc
$ source .zshrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使い方としては、mux new [project name]でテンプレートを作って、起動するセッションを定義していきます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mux new cui-aboutme
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# .tmuxinator/cui-aboutme.yml

project_name: cui-aboutme
project_root: ~/workspace/rails/cui-aboutme
tabs:
  - main:
      layout: tiled
      panes:
        - git fetch --prune &amp;amp;&amp;amp; git status --short --branch
        - curl http://cui-about.me/users
        - tig
  - vim: vi
  - app:
      layout: even-horizontal
      panes:
        - rails c
        - tail -f log/development.log
  - test: guard
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;各項目で、起動時に実行するコマンドを定義しています。&lt;/li&gt;
&lt;li&gt;tabsで起動するタブ毎の設定を定義します。上の設定例だと、「main」「vim」「app」「test」の4つのタブを起動します。&lt;/li&gt;
&lt;li&gt;panesでタブ内で分割するペインを定義し、layoutでペインの配置を定義します。上の設定例だと、「main」タブに「git fetch等gitの操作」「curl等シェルの操作」「tigでコミットログのビューワー」の3つのペインを起動します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その他、いろいろな設定ができるようなので詳しくは&lt;a href=&quot;https://github.com/aziz/tmuxinator/&quot;&gt;公式ページ&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;h3&gt;3. ctrlp.vim&lt;/h3&gt;
&lt;p&gt;ctrlp.vimは、Ctrl-pで起動するファイラーです。unite.vimと近いのかもしれませんが、僕はこっちの方がサクサクしてて操作もわかりやすくて好きです。下はスクリーンショットです。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20120808/20120808095402.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20120808/20120808095402.jpg&quot; alt=&quot;f:id:naoty_k:20120808095402j:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20120808095402j:plain&lt;/figcaption&gt;&lt;/figure&gt; &lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20120808/20120808100021.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20120808/20120808100021.jpg&quot; alt=&quot;f:id:naoty_k:20120808100021j:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20120808100021j:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;.vimrcで以下のように設定しました。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&quot; .vimrc

Bundle 'kien/ctrlp.vim'

let g:ctrlp_cmd = 'CtrlPMixed'
let g:working_path_mode = 'rc'
let g:custom_ignore = {
  ¥ 'dir': '¥.git¥|vendor/bundle¥|tmp',
  ¥ 'file': '¥.jpg$¥|¥.jpeg$¥|¥.png$¥|¥.gif$¥|¥.log'
  ¥ }
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Ctrl-pで起動するモードを file + mru + bufferを同時に検索するMixedにしています。これで「現在のディレクトリ以下」「よく使うファイル」「バッファ」の中から検索します。&lt;/li&gt;
&lt;li&gt;'rc'モードにすることで、.gitがあるディレクトリを優先するみたいです。&lt;/li&gt;
&lt;li&gt;vendor/bundleやtmpといったディレクトリや*.logのような大きいファイルを無視することで、起動をスムーズにしています。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その他いろいろ設定があるようなので、ヘルプや&lt;a href=&quot;https://github.com/kien/ctrlp.vim/&quot;&gt;公式ページ&lt;/a&gt;をご覧ください。&lt;/p&gt;</summary>
    <title>Rails開発環境 2012夏</title>
    <updated>2012-08-08T10:14:00+00:00</updated>
    <dc:date>2012-08-08T10:14:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/137/</id>
    <link href="https://blog.naoty.dev/137/"/>
    <summary>&lt;p&gt;以下のような機能を実装したい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;カメラを自作するのではなく、標準のカメラアプリで画像を撮影する。&lt;/li&gt;
&lt;li&gt;撮影した画像はSDカードに保存する。&lt;/li&gt;
&lt;li&gt;他の文字列などのデータとともに撮影した画像をPOSTでサーバーに送信する。&lt;/li&gt;
&lt;li&gt;サーバー側の負荷やパフォーマンスを考慮し、画像を縮小して送信する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;0. 前提&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ターゲット：2.2以上&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1. SDカードが挿入されているか確認する&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;// PictureUtil.java

public static boolean isSdCardWritable {
    String state = Environment.getExternalStorageState();
    return state.equals(Environment.MEDIA_MOUNTED);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;SDカードに保存したいため、外部ストレージの状態を確認するメソッドをユーティリティクラスに定義する。&lt;/li&gt;
&lt;li&gt;以下でも、画像に関わるメソッドをPictureUtilクラスに定義していく。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. 標準カメラアプリを起動する&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;private static final int CAMERA_ACTIVITY_REQUEST_CODE = 100;
private Uri pictureUri;

public void onClick(View v) {
    if (!PictureUtil.isSdCardWritable()) {
        return; // (1)
    }

    ContentValues values = new ContentValues();
    values.put(MediaStore.Images.Media.TITLE, System.currentTimeMillis() + &quot;.jpg&quot;);
    values.put(MediaStore.Images.Media.MIME_TYPE, &quot;image/jpeg&quot;);
    pictureUri = getContentResolver().insert(MediaStore.Images.Media.EXTRA_CONTENT_URI, values); // (2)

    Intent intent = new Intent();
    intent.setAction(&quot;android.media.action.IMAGE_CAPTURE&quot;);
    intent.putExtra(MediaStore.EXTRA_OUTPUT, pictureUri); // (3)
    startActivityForResult(intent, CAMERA_ACTIVITY_REQUEST_CODE);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;さきほど定義したメソッドを使ってSDカードが挿入されているか確認し、挿入されていなければ処理を中止する。実際のアプリでは、(1)に警告ダイアログを表示する処理を入れることになると思う。&lt;/li&gt;
&lt;li&gt;(2)：SDカード内の領域（MediaStore.Images.Media.EXTRA_CONTENT_URI）に画像データを挿入し、空の画像URIを取得する。&lt;/li&gt;
&lt;li&gt;(3)：そのURIをEXTRA_OUTPUTにセットすることで、撮影した画像のURIをそのURIに書き込むことができる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3. 撮った画像を取得する&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;private Bitmap picture;
private final int TARGET_WIDTH = 300;
private final int TARGET_HEIGHT = 300;

public void onActivityResult(int requestCode, int resultCode, Intent data) {
    if (requestCode != CAMERA_ACTIVITY_REQUEST_CODE || resultCode != RESULT_OK) {
        return;
    }

    if (pictureUri == null) {
        return; // (1)
    }

    try {
        InputStream is = getContentResolver().openInputStream(pictureUri);
        picture = BitmapFactory.decodeStream(is);
        picture = PictureUtil.resize(picture, TARGET_WIDTH, TARGET_HEIGHT); // (2)
        picture.recycle(); // (3)
    } catch (IOException e) {
        return;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;(1)：特定の端末では、EXTRA_OUTPUTに撮影した画像のURIが書き込まれないケースがある。その場合は、処理を中止する。実際のアプリでは、エラーダイアログを表示する処理を入れると思う。&lt;/li&gt;
&lt;li&gt;(2)：サーバー側の負荷やパフォーマンスを考慮し、撮影した画像を指定したサイズに縮小する。縮小する処理はユーティリティクラスに定義する。&lt;/li&gt;
&lt;li&gt;(3)：画像はメモリを大量に消費するため、OutOfMemoryエラーを起こしやすい。recycleメソッドを実行すると、メモリが不足した際に自動的に解放するようになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4. 画像を縮小する&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;// PictureUtil.java

private static Bitmap resize(Bitmap picture, int targetWidth, int targetHeight) {
    if (picture == null || height &amp;lt; 0 || width &amp;lt; 0) {
        return null;
    }

    int pictureWidth = picture.getWidth();
    int pictureHeight = picture.getHeight();
    float scale = Math.min((float) targetWidth / pictureWidth, (float) targetHeight / pictureHeight); // (1)

    Matrix matrix = new Matrix();
    matrix.postScale(scale, scale);
    
    return Bitmap.createBitmap(picture, 0, 0, pictureWidth, pictureHeight, matrix, true);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;(1)：縮小前の画像サイズと縮小したいサイズから縮小比率を計算する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;5. エンティティに画像データを追加してPOSTリクエストを送信する&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;public void onClick(View v) {
    if (picture.isRecycle()) { // (1)
        try {
            InputStream is = getContentResolver().openInputStream(pictureUri);
            picture = BitmapFactory.decodeStream(is);
            picture = PictureUtil.resize(picture, TARGET_WIDTH, TARGET_HEIGHT);
            picture.recycle();
        } catch (IOException e) {
            return;
        }
    }

    ByteArrayBody bab = PictureUtil.toByteArrayBody(picture); // (2)
    MultipartEntity requestEntity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
    requestEntity.addPart(&quot;picture&quot;, bab); // (3)
    requestEntity.addPart(&quot;string&quot;, new StringEntity(&quot;文字列&quot;));
    // その他、送信したいデータを追加

    HttpClient client = new DefaultHttpClient();
    HttpPost request = new HttpPost(&quot;http://example.com&quot;);
    request.setEntity(requestEntity);

    // 以下、POSTリクエスト送信処理
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;(1)：recycleメソッドを呼び出した画像を再利用する際、すでに画像がメモリから解放されている可能性がある。isRecycleメソッドによって解放されているか判定し、解放されていれば再度画像をURIから作成し縮小する。&lt;/li&gt;
&lt;li&gt;(2)：画像を送信する場合、ByteArrayBodyという型にする必要があるため、ユーティリティクラスに定義したメソッドを使って変換する。&lt;/li&gt;
&lt;li&gt;(3)：変換した画像データは、文字列データなどと同様にエンティティに追加できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;// PictureUtil.java

private final int QUALITY = 100;

public static ByteArrayBody toByteArrayBody(Bitmap picture) {
    if (picture == null) {
        return null;
    }

    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    picture.compress(CompressFormat.JPEG, QUALITY, bos); // (4)
    byte[] data = bos.toByteArray();
    return new ByteArrayBody(data, System.currentTimeMillis() + &quot;.jpg&quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;(4)：画像データに変換する際、圧縮比率を0〜100の間で指定できる。0に近いほど高圧縮・低画質、100に近いほど低圧縮・高画質となる。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Androidの標準カメラで撮った画像をPOSTで送信する</title>
    <updated>2012-08-05T05:42:00+00:00</updated>
    <dc:date>2012-08-05T05:42:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/136/</id>
    <link href="https://blog.naoty.dev/136/"/>
    <summary>&lt;p&gt;前回は&lt;a href=&quot;http://qiita.com/users/d6rkaiz&quot;&gt;dr6kaiz&lt;/a&gt;さんの&lt;a href=&quot;http://qiita.com/items/0f0b15b800fcd8a742f9&quot;&gt;pow + rbenvで手軽なRack環境構築&lt;/a&gt;でした。&lt;/p&gt;
&lt;p&gt;今回は&lt;a href=&quot;https://github.com/aziz/tmuxinator/&quot;&gt;tmuxinator&lt;/a&gt;を使って、コマンド一発で開発環境を起動する話をします。&lt;/p&gt;
&lt;h2&gt;tmuxinator とは&lt;/h2&gt;
&lt;p&gt;tmuxinatorとは、tmuxで起動するセッションを予め定義しておき、コマンド一発でそのセッションを起動できるようにしたものです。ちなみに、screenで同じことをする&lt;a href=&quot;https://github.com/jondruse/screeninator&quot;&gt;screeninator&lt;/a&gt;というツールもあります。こちらが先に開発されたようです。&lt;/p&gt;
&lt;h2&gt;インストール&lt;/h2&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tmuxinator
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[[ -s &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.tmuxinator/scripts/tmuxinator ]] &amp;amp;&amp;amp; source &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.tmuxinator/scripts/tmuxinator&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; .zshrc
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; .zshrc
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$EDITOR&lt;/span&gt;
/usr/bin/vi
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$SHELL&lt;/span&gt;
/bin/zsh
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;tmuxinatorはgemで提供されているので、&lt;code&gt;gem install&lt;/code&gt;します。&lt;/li&gt;
&lt;li&gt;その後、補完スクリプトを&lt;code&gt;.zshrc&lt;/code&gt;や&lt;code&gt;.bashrc&lt;/code&gt;に追加して読み込みます。&lt;/li&gt;
&lt;li&gt;tmuxinatorは環境変数&lt;code&gt;$EDITOR&lt;/code&gt;と&lt;code&gt;$SHELL&lt;/code&gt;を使うそうなので、確認しておきます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;設定&lt;/h2&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mux new cui-aboutme
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;tmuxinator&lt;/code&gt;とそのaliasの&lt;code&gt;mux&lt;/code&gt;というコマンドが用意されています。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mux new [project name]&lt;/code&gt;でプロジェクトの設定ファイルを作成します。&lt;/li&gt;
&lt;li&gt;このコマンドを実行すると、&lt;code&gt;$EDITOR&lt;/code&gt;で設定されたエディタで以下のような設定ファイルが開きます。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;yml:~/.tmuxinator/cui-about.yml&quot;&gt;&lt;code&gt;# ~/.tmuxinator/sample.yml
# you can make as many tabs as you wish...

project_name: Tmuxinator
project_root: ~/code/rails_project
socket_name: foo # Not needed.  Remove to use default socket
rvm: 1.9.2@rails_project
pre: sudo /etc/rc.d/mysqld start
tabs:
  - editor:
      layout: main-vertical
      panes:
        - vim
        - #empty, will just run plain bash
        - top
  - shell: git pull
  - database: rails db
  - server: rails s
  - logs: tail -f logs/development.log
  - console: rails c
  - capistrano:
  - server: ssh me@myhost
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;rvm&lt;/code&gt;で利用するrubyのバージョンを指定したり、&lt;code&gt;pre&lt;/code&gt;でセッション起動時に実行するコマンドを指定できたりします。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;tabs&lt;/code&gt;でセッション内で起動するウィンドウを定義します。この初期設定だと、8つウィンドウを起動します。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;tabs&lt;/code&gt;内では、&lt;code&gt;editor&lt;/code&gt;や&lt;code&gt;shell&lt;/code&gt;といったキーがウィンドウ名を表し、値がそのウィンドウが起動したときに実行されるコマンドとなります。この初期設定だと、セッション起動と同時に8つのウィンドウが起動して、自動的に&lt;code&gt;git pull&lt;/code&gt;したり&lt;code&gt;rails s&lt;/code&gt;したり&lt;code&gt;ssh&lt;/code&gt;したりします。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;layout&lt;/code&gt;と&lt;code&gt;panes&lt;/code&gt;で、そのウィンドウ内のペインとその配置を定義します。&lt;code&gt;editor&lt;/code&gt;を例にとると、ウィンドウ内に&lt;code&gt;vim&lt;/code&gt;のペインと何もしないペインと&lt;code&gt;top&lt;/code&gt;のペインが&lt;code&gt;main-vertical&lt;/code&gt;で表示されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;起動&lt;/h2&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mux cui-aboutme
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;このコマンド一発で、上記で設定したセッションを起動します。&lt;/li&gt;
&lt;li&gt;起動と同時に設定されたコマンドも自動で実行されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;カスタマイズ例&lt;/h2&gt;
&lt;pre lang=&quot;yml:~/.tmuxinator/cui-aboutme.yml&quot;&gt;&lt;code&gt;# ~/.tmuxinator/sample.yml
# you can make as many tabs as you wish...

project_name: cui-aboutme
project_root: ~/workspace/rails/cui-aboutme
tabs:
  - main:
      layout: tiled
      panes:
        - git fetch --prune &amp;amp;&amp;amp; git status --short --branch
        - curl http://cui-about.me/users
        - tig
  - vim: vi
  - app:
      layout: even-horizontal
      panes:
        - rails c
        - powder log
  - test: guard
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;僕の場合は「tigを中心としたgitの作業をするウィンドウ」「エディタのウィンドウ」「コンソールやログをみるウィンドウ」「自動テストを行うウィンドウ」の4つを一度に起動できるようにしてます。&lt;/li&gt;
&lt;li&gt;あと、起動時に&lt;code&gt;git fetch&lt;/code&gt;でリポジトリの更新を確認したり、&lt;code&gt;guard&lt;/code&gt;で自動テストを開始したりしてます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;tips&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一度に同時に起動するウィンドウを一度にすべて閉じるための設定&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;.tmux.conf&quot;&gt;&lt;code&gt;bind-keys C-b kill-session
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;複数のプロジェクトに共通する設定は&lt;code&gt;~/.tmuxinator/default.yml&lt;/code&gt;で設定できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;おまけ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;テキストベースの自己紹介サービス&lt;a href=&quot;http://cui-about.me&quot;&gt;cui-about.me&lt;/a&gt;やってます。よかったらどうぞ。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>tmuxinatorで一瞬で開発環境を起動する</title>
    <updated>2012-07-21T16:57:00+00:00</updated>
    <dc:date>2012-07-21T16:57:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/135/</id>
    <link href="https://blog.naoty.dev/135/"/>
    <summary>&lt;h2&gt;注記（7/21追記）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;production環境ではassets precompileによって圧縮されるため、下記の設定は不要です。&lt;/li&gt;
&lt;li&gt;assets pipelineを理解する上での参考程度にしてもらえればと思います。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;pre lang=&quot;js:app/assets/javascripts/application.js&quot;&gt;&lt;code&gt;//= require jquery
//= require jquery_ujs
//= require_tree .
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1] pry&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;main&lt;span class=&quot;o&quot;&gt;)&amp;gt;&lt;/span&gt; puts Rails.application.config.assets.paths
/Users/naoty/workspace/sample/app/assets/images
/Users/naoty/workspace/sample/app/assets/javascripts
/Users/naoty/workspace/sample/app/assets/stylesheets
/Users/naoty/workspace/sample/vendor/assets/javascripts
/Users/naoty/workspace/sample/vendor/assets/stylesheets
/Users/naoty/workspace/sample/vendor/bundle/ruby/1.9.1/gems/jquery-rails-1.0.14/vendor/assets/javascripts
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;rails new&lt;/code&gt;で生成されるapplication.jsでロードするjqueryは、上記のコマンドで確認できる通り、&lt;code&gt;jquery-rails&lt;/code&gt;というgemに同梱されている&lt;code&gt;jquery.js&lt;/code&gt;。ちなみに現時点では最新のv1.7.2。&lt;/li&gt;
&lt;li&gt;なので、圧縮されてないものがデフォルトではロードされてしまう。これは、けっこう気づきにくい罠だと思う。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;bundle show jquery-rails&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tree vendor/
vendor/
└── assets
    └── javascripts
        ├── jquery-ui.js
        ├── jquery-ui.min.js
        ├── jquery.js
        ├── jquery.min.js
        └── jquery_ujs.js
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;jquery-rails&lt;/code&gt;の中を見てみると、&lt;code&gt;jquery.min.js&lt;/code&gt;がある。&lt;/li&gt;
&lt;li&gt;圧縮版あるんだから、こっち使う。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;jquery-ui.min&lt;/code&gt;もあるから、jquery-ui使う場合も同じ。まあ、jquery-uiは必要なコンポーネントだけに絞るべきなので、&lt;code&gt;jquery-rails&lt;/code&gt;内のjquery-uiは使うことないと思う。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;js:app/assets/javascripts/application.js&quot;&gt;&lt;code&gt;//= require jquery.min
//= require jquery_ujs
//= require_tree .
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;これで圧縮版のjqueryをロードする。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Railsデフォルトのjqueryは圧縮されてない</title>
    <updated>2012-07-21T01:14:00+00:00</updated>
    <dc:date>2012-07-21T01:14:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/134/</id>
    <link href="https://blog.naoty.dev/134/"/>
    <summary>&lt;h3&gt;使い方&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ curl http://cui-about.me/naoty
name = naoty
blog = http://naoty.hatenablog.com
email = naoty.k@gmail.com
github = naoty
twitter = naoty_k
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;CUI版のabout meです。&lt;/li&gt;
&lt;li&gt;curlコマンドでユーザーのプロフィール情報をダウンロードできます。&lt;/li&gt;
&lt;li&gt;詳しい使い方は&lt;a href=&quot;https://github.com/naoty/cui-aboutme&quot;&gt;こちら&lt;/a&gt;に載せました。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;作った理由&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Java疲れ&lt;/li&gt;
&lt;li&gt;プログラマーがよく使うabout meみたいな定番サービスがなかったので作った。&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://manualhub.herokuapp.com/manualhub&quot;&gt;manualhub&lt;/a&gt;というサービスを見つけて面白いと思ったものの使いにくかったので、似たようなものを自分なりに作ってみた。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;使った技術要素&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Rails 3.2.6&lt;/li&gt;
&lt;li&gt;MongoDB&lt;/li&gt;
&lt;li&gt;Heroku (addons: MongoHQ, Custom Domain)&lt;/li&gt;
&lt;li&gt;お名前.com&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>cui-about.meをリリースしました</title>
    <updated>2012-07-17T22:15:00+00:00</updated>
    <dc:date>2012-07-17T22:15:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/133/</id>
    <link href="https://blog.naoty.dev/133/"/>
    <summary>&lt;pre lang=&quot;.zshrc&quot;&gt;&lt;code&gt;alias gt=&quot;git for-each-ref --sort=-taggerdate --format='%(taggerdate:short) %(tag) %(taggername) %(subject)' refs/tags&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://gyazo.com/e6fd03bfaea9f3b44f9c60d8b539dd3c.png?1341920431&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://gyazo.com/e6fd03bfaea9f3b44f9c60d8b539dd3c.png?1341920431&quot; alt=&quot;git-tag&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git tag&lt;/code&gt;でタグ名を一覧で表示できる。&lt;code&gt;git tag -n&lt;/code&gt;でコメントもいっしょに表示できる。だけど、タグをつけた日付とかタグをつけた人も表示するには&lt;code&gt;git tag&lt;/code&gt;では無理みたい。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git for-each-ref&lt;/code&gt;はcommitとかtagとかのrefがバーっとみれる（まだよく理解してない）&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;--sort=&lt;/code&gt;で表示されるソート順。&lt;code&gt;-taggerdate&lt;/code&gt;でタグをつけた日付の降順。&lt;code&gt;-&lt;/code&gt;をつけないと昇順。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;--format=&lt;/code&gt;で出力されるフォーマットを指定できる。細かいところはmanをみてください。けっこう細かいので説明するのが大変。。。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;refs/tags&lt;/code&gt;は表示する条件。これでタグだけを表示できる。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>見やすいgit-tag</title>
    <updated>2012-07-10T20:44:00+00:00</updated>
    <dc:date>2012-07-10T20:44:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/132/</id>
    <link href="https://blog.naoty.dev/132/"/>
    <summary>&lt;p&gt;GemfileとかDSLで書かれた設定ファイルがrubyのファイルとして認識されずシンタックスハイライトやインデントが効いてないときがある。そういうときの設定。&lt;/p&gt;
&lt;pre lang=&quot;.vimrc&quot;&gt;&lt;code&gt;autocmd BufNewFile,BufRead Gemfile setlocal filetype=ruby
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Gemfile&lt;/code&gt;のあとにfiletypeを設定したいファイル名やパターンを追加すればおｋ。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;autocmd&lt;/code&gt;は「あるイベント」に対して「あるパターンのファイル」に「あるコマンド」を実行させる設定&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;BufNewFile&lt;/code&gt;は新しいファイルを編集するイベント&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;BufRead&lt;/code&gt;はファイルを読み込んで新しいバッファを開くイベント&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;filetype&lt;/code&gt;の変更はグローバルには影響しないらしいけど、&lt;code&gt;autocmd&lt;/code&gt;で変更する値は無難に&lt;code&gt;setlocal&lt;/code&gt;にしておく&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Railsでよく使うDSLのfiletypeを設定する</title>
    <updated>2012-07-03T08:48:00+00:00</updated>
    <dc:date>2012-07-03T08:48:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/131/</id>
    <link href="https://blog.naoty.dev/131/"/>
    <summary>&lt;pre lang=&quot;.zshrc&quot;&gt;&lt;code&gt;alias gg=&quot;git grep -H --heading --break&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;.gitconfig&quot;&gt;&lt;code&gt;[grep]
  lineNumber = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://gyazo.com/6896ca7dc18ae1ab53e05e6efa3602b9.png?1341209674&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://gyazo.com/6896ca7dc18ae1ab53e05e6efa3602b9.png?1341209674&quot; alt=&quot;git-grep&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-H&lt;/code&gt;でファイル名を相対パスにする&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;--heading&lt;/code&gt;でファイル名をヒットした行の上にまとめて表示する&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;--break&lt;/code&gt;で空行を入れる&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git config --global grep.lineNumber true&lt;/code&gt;と打つと、デフォルトでヒットした行数を表示する&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;訂正&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-H&lt;/code&gt;はフルパスじゃなくて相対パスでした（manの英語がわかりにくい&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>見やすいgit-grep</title>
    <updated>2012-07-02T15:30:00+00:00</updated>
    <dc:date>2012-07-02T15:30:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/130/</id>
    <link href="https://blog.naoty.dev/130/"/>
    <summary>&lt;p&gt;ばいんでぃんぐぷらい便利ですね。&lt;/p&gt;
&lt;p&gt;コミットすると、&lt;code&gt;binding.pry&lt;/code&gt;がコミット予定のファイルに含まれていれば、コミットを中止すフックスクリプトを書きました。&lt;code&gt;.git/hooks/pre-commit&lt;/code&gt;にコピペしてお使いください。ハードコーディングしちゃってるんで、適当に修正するといいですね。&lt;/p&gt;
&lt;p&gt;gistにもあげてるので、forkなんかしてもらえるといいですね。&lt;br&gt;
&lt;a href=&quot;https://gist.github.com/2970881&quot;&gt;https://gist.github.com/2970881&lt;/a&gt;&lt;/p&gt;
&lt;pre lang=&quot;sh:.git/hooks/pre-commit&quot;&gt;&lt;code&gt;#!/usr/bin/env ruby

cached_files = `git diff --cached --name-only`
if cached_files.split($/).any? {|path| File.read(path).include?('binding.pry') }
  puts 'ERROR: binding.pry is found'
  exit 1
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;#!/usr/bin/env ruby&lt;/code&gt;はrvmのrubyを使う場合のshebang&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git diff --cached&lt;/code&gt;でコミット予定のファイルの差分とってこれる&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;--name-only&lt;/code&gt;でファイル名だけとってこれる&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$/&lt;/code&gt;は区切り文字&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>binding.pryがあったらコミットを中止する</title>
    <updated>2012-06-25T16:55:00+00:00</updated>
    <dc:date>2012-06-25T16:55:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/129/</id>
    <link href="https://blog.naoty.dev/129/"/>
    <summary>&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;User id: 1, name: &quot;naoty&quot;, ...&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;naoty&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;_&lt;/code&gt;で直前の結果を参照できるの、最近知った。&lt;/p&gt;</summary>
    <title>コンソールで直前の結果を参照する</title>
    <updated>2012-06-17T11:55:00+00:00</updated>
    <dc:date>2012-06-17T11:55:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/128/</id>
    <link href="https://blog.naoty.dev/128/"/>
    <summary>&lt;p&gt;Gemfileを公開するサイト「&lt;a href=&quot;http://gemfile-freaks.herokuapp.com/&quot;&gt;Gemfile Freaks&lt;/a&gt;」をおととい公開しました。土曜にだいたい作って、日曜にユーザー認証をつけました。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20120611/20120611091354.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20120611/20120611091354.jpg&quot; alt=&quot;f:id:naoty_k:20120611091354j:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20120611091354j:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;前々からほしいと思っていたので、自分で作ることにしました。gemってどれを使っていいのかわかんないし、あの人のGemfileとか、あのサービスのGemfileに興味があったので。&lt;/p&gt;
&lt;p&gt;いまのところの機能はこんなところです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gemfileをシンタックスハイライトする&lt;/li&gt;
&lt;li&gt;Markdownでコメントを残せる&lt;/li&gt;
&lt;li&gt;作者で検索できる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;で、時間があればこんな機能もつけていこうと思ってます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;タグ（Heroku, MongoDB, AWS, etc...）をGemfileにつけられる、タグで検索できる&lt;/li&gt;
&lt;li&gt;レスポンシブ・デザインに対応して、電車とかヒマな時間にスマホで見れるようにする&lt;/li&gt;
&lt;li&gt;Gemfileをこのサイトに簡単にアップロード、ダウンロードできるgem&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他にも要望があれば、&lt;a href=&quot;https://github.com/naoty/GemfileFreaks&quot;&gt;github&lt;/a&gt;でissuesを立ててくれれば答えますし、なんならpull requestしてくれるとうれしいです。&lt;/p&gt;
&lt;p&gt;ということで、Gemfileを公開できるサイト「&lt;a href=&quot;http://gemfile-freaks.herokuapp.com/&quot;&gt;Gemfile Freaks&lt;/a&gt;」をよろしくおねがいします。&lt;/p&gt;</summary>
    <title>Gemfileを公開するサイト「Gemfile Freaks」を公開しました</title>
    <updated>2012-06-11T09:32:00+00:00</updated>
    <dc:date>2012-06-11T09:32:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/127/</id>
    <link href="https://blog.naoty.dev/127/"/>
    <summary>&lt;ul&gt;
&lt;li&gt;Herokuでwebrickじゃなくてthinを使いたい&lt;/li&gt;
&lt;li&gt;開発環境ではforemanでguardを起動したい。.envで必要な環境変数をロードしたいので。&lt;/li&gt;
&lt;li&gt;でもHerokuではguardはいらない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という理由から、production環境用Procfileとdevelopment環境用Procfileを分けたいと思ったので、以下のようにしてみた。&lt;/p&gt;
&lt;pre lang=&quot;ruby:Procfile&quot;&gt;&lt;code&gt;web: rails s thin -p $PORT
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;ruby:Procfile.development&quot;&gt;&lt;code&gt;web: rails s thin
guard: guard
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;ruby:.foreman&quot;&gt;&lt;code&gt;procfile: Procfile.development
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;sh:.gitignore&quot;&gt;&lt;code&gt;.foreman
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;.foremanはforemanコマンドのデフォルトオプションを指定できる。&lt;/li&gt;
&lt;li&gt;procfileオプションで実行するProcfileを指定できる。&lt;/li&gt;
&lt;li&gt;.foremanファイルを.gitignoreに追加してHerokuで実行しないようにする。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>開発環境用Procfile</title>
    <updated>2012-06-09T13:07:00+00:00</updated>
    <dc:date>2012-06-09T13:07:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/126/</id>
    <link href="https://blog.naoty.dev/126/"/>
    <summary>&lt;p&gt;コントローラでJSONレスポンスを定義する場合、&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class EntriesController &amp;lt; ApplicationController
  respond_to :json

  def index
    @entries = Entry.all
    respond_with @entries.to_json(:only =&amp;gt; :title, :body, :include =&amp;gt; {
      :user =&amp;gt; { :only =&amp;gt; :name },
      :comment =&amp;gt; { :only =&amp;gt; :name },
      :image =&amp;gt; { :only =&amp;gt; :file }
    })
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;などと、to_jsonまたはas_jsonで:onlyや:includeオプションを使ってフィールドを指定できます。ただ、これでは冗長だし、より複雑な構造のレスポンスを定義するとなると面倒です。そこで、簡潔に複雑な構造を定義するためにrablというgemを使います。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gem 'rabl'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;rablはjsonやxmlなどのAPIレスポンスを記述するためのDSLです。rablを使ってJSONレスポンスを書き換えます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/entries/index.json.rabl

collection @entries
attributes :title, :body

child(:user) do
  attributes :name
end

child(:comments) do
  attributes :name
end

child(:images) do
  node(:thumb) {|image| image.file.thumb.url }
  node(:main) {|image| image.file.main.url }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;nodeを使うと、to_jsonの:methodオプションと同じことができるので、構造の深い部分にある値を取得したいときに便利です。&lt;br&gt;
rablで定義することによってコントローラもスリムになります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class EntriesController &amp;lt; ApplicationController
  def index
    @entries = Entry.all
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;レスポンスはcurlで確認できます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl http://localhost:3000/entries.json
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;参考&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nesquena/rabl&quot;&gt;nesquena/rabl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://railscasts.com/episodes/322-rabl?language=ja&amp;amp;view=asciicast&quot;&gt;#322 RABL - RailsCasts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>rablを使ってRailsのAPIレスポンスを簡潔に定義する</title>
    <updated>2012-05-27T01:50:00+00:00</updated>
    <dc:date>2012-05-27T01:50:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/125/</id>
    <link href="https://blog.naoty.dev/125/"/>
    <summary>&lt;p&gt;rvmでは以前のでうまくいったけど、rbenvでうまくいかなかったので改良しました。&lt;/p&gt;
&lt;pre lang=&quot;ruby:gem_uninstall_all&quot;&gt;&lt;code&gt;#!/usr/bin/env ruby

gem_list = `gem list --no-version`
gem_list.each_line do |line|
  next if line.empty? || /LOCAL GEMS/ =~ line
  system &quot;gem uninstall -axI #{line}&quot;
end
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>gemをすべてアンインストールするワンライナー</title>
    <updated>2012-05-25T15:16:00+00:00</updated>
    <dc:date>2012-05-25T15:16:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/124/</id>
    <link href="https://blog.naoty.dev/124/"/>
    <summary>&lt;p&gt;&lt;code&gt;bundle show [gem]&lt;/code&gt;で指定したgemの絶対パスを取得できる。ので、以下のようにすれば、一瞬でgemのホームディレクトリに移動できる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ bundle show rails
/Users/naoty/workspace/sampleapp/vendor/bundle/ruby/1.9.1/gems/rails-3.1.0
$ cd `bundle show rails`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ちなみに、&lt;code&gt;bundle open [gem]&lt;/code&gt;で指定したgemのディレクトリをエディタで開ける。こっちの方が使うかもしれない。事前に環境変数&lt;code&gt;EDITOR&lt;/code&gt;を設定しておく必要がある。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo $EDITOR
/usr/bin/vi
$ bundle open rails
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>gemのディレクトリに一瞬で移動する</title>
    <updated>2012-05-23T12:02:00+00:00</updated>
    <dc:date>2012-05-23T12:02:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/123/</id>
    <link href="https://blog.naoty.dev/123/"/>
    <summary>&lt;p&gt;command line toolsのみ入れてXcode入れないとき、&lt;code&gt;brew doctor&lt;/code&gt;すると、以下のような警告が出ます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ brew doctor
Error: Your Xcode is configured with an invalid path.
You should change it to the correct path. Please note that there is no correct
path at this time if you have *only* installed the Command Line Tools for Xcode.
If your Xcode is pre-4.3 or you installed the whole of Xcode 4.3 then one of
these is (probably) what you want:

    sudo xcode-select -switch /Developer
    sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer

DO NOT SET / OR EVERYTHING BREAKS!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これまでdoctorの忠告は無視してたのですが、Homebrewでmacvimを入れようとしたとき、「xcodebuildが見つからない」エラーに直面したので、とりかかることに。&lt;/p&gt;
&lt;p&gt;とりあえずこうしたら、doctorがOK出してくれた。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo xcode-select -switch /
$ brew doctor
Your system is raring to brew.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;「あなたのシステムはbrewしたくてウズウズしている！」だってさ。&lt;br&gt;
でも、これでいいのかちょっと微妙…(´･ω･`)&lt;/p&gt;</summary>
    <title>command line toolsのみインストールしたときのpathの設定</title>
    <updated>2012-05-22T10:13:00+00:00</updated>
    <dc:date>2012-05-22T10:13:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/122/</id>
    <link href="https://blog.naoty.dev/122/"/>
    <summary>&lt;p&gt;はてなブログに移転しました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://naoty.hatenablog.com&quot;&gt;http://naoty.hatenablog.com&lt;/a&gt;&lt;/p&gt;</summary>
    <title>ブログをはてなブログに移転しました。</title>
    <updated>2012-05-20T22:23:00+00:00</updated>
    <dc:date>2012-05-20T22:23:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/121/</id>
    <link href="https://blog.naoty.dev/121/"/>
    <summary>&lt;p&gt;Happy Hacking Keyboard Lite2の英語配列を買いました。Androidの参考書のコードを写経してたらだんだん痛くなってきたので。Macbook Airのキーボードは写経に向かないみたい。(´･ω･`)&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;a href=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20120520/20120520182450.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20120520/20120520182450.jpg&quot; alt=&quot;f:id:naoty_k:20120520182450j:plain&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;f:id:naoty_k:20120520182450j:plain&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Amazonで4000円くらいでした。Macbook Airにつなげて使ってます。Dellの21インチのディスプレイをメインとして使ってます。買ってからまずしたこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;http://www.pfu.fujitsu.com/hhkeyboard/macdownload_lite2.html&quot;&gt;ここ&lt;/a&gt;からOSX用のドライバーをインストール。BackSpaceとDeleteを入れ替える。&lt;/li&gt;
&lt;li&gt;KeyRemap4Macbookで「左右のコマンドキーを「英数／かな」としても使う（コマンドキーの動作を優先モード）」をオン。これで、コマンドキーを「英数／かな」として使えるようになる。&lt;/li&gt;
&lt;li&gt;同じくKeyRemap4Macbookでコロンとセミコロンを入れ替える。コロンの方が多用してる気がするので。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;買って1週間くらい使ってみた感想。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Macbook AirのキーボードからHappy Hacking Keyboard Lite2に移ると、まず音が気になりました。いちおうオフィスの方の了承はもらった方がいいかも。幸い、弊社は打鍵音フェチがいたので助かりました。&lt;/li&gt;
&lt;li&gt;Macbook Airに比べ指の疲れがなくなったような気がします。キーに深さがある分、負担が軽くなったのかも。&lt;/li&gt;
&lt;li&gt;英語配列は慣れると使いやすいです。Macbook Airの英語配列はAの横がCapsLockだったと思いますが、Happy Hacking Keyboard Lite2ではControlなのでそこも安心です。&lt;/li&gt;
&lt;li&gt;いままでサブディスプレイだったDellのディスプレイを正面にして作業できる。Macbook Airのキーボードを使うと、どうしてもMacbook Airを向いて作業せざるを得ませんが、そこから解放されます。まぁこれはHappy Hacking Keyboard Lite2に限った話ではありませんが。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ともかく、この快適さが4000円程度で手に入ったのは、とてもいい買い物でした。みなさんもぜひ！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/B0000U1DJ2/hatena-hamazou-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/41NX93T7DZL._SL160_.jpg&quot; alt=&quot;PFU Happy Hacking Keyboard Lite2 英語配列 USBキーボード ブラック PD-KB200B/U&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;PFU Happy Hacking Keyboard Lite2 英語配列 USBキーボード ブラック PD-KB200B/U&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/B0000U1DJ2/hatena-hamazou-22/&quot;&gt;PFU Happy Hacking Keyboard Lite2 英語配列 USBキーボード ブラック PD-KB200B/U&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出版社/メーカー: PFU&lt;/li&gt;
&lt;li&gt;発売日: 2001/08/01&lt;/li&gt;
&lt;li&gt;メディア: Personal Computers&lt;/li&gt;
&lt;li&gt;購入: 2人 クリック: 104回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/B0000U1DJ2&quot;&gt;この商品を含むブログ (29件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Happy Hacking Keyboard Lite2を買ってみた</title>
    <updated>2012-05-20T18:27:00+00:00</updated>
    <dc:date>2012-05-20T18:27:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/120/</id>
    <link href="https://blog.naoty.dev/120/"/>
    <summary>&lt;p&gt;Herokuに移行したり、便利なツールを見つけて開発環境を修正したところがあるので「2012初夏バージョン」として拙者の開発環境を晒します。最後にGemfileを載せておきますが、変更したポイントは「Herokuへのデプロイ」「ソースコード公開」「ブラウザのリロードの自動化」の3つです。&lt;/p&gt;
&lt;h3&gt;Herokuへのデプロイ&lt;/h3&gt;
&lt;p&gt;VPSでの運用はいい勉強になったものの、以下のような問題がありました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;構築に時間がかかりすぎる。サービス開発への熱が冷めてしまう。プログラムを書くのに専念したい。&lt;/li&gt;
&lt;li&gt;既に動いているシステムに支障が出るのが怖くて、新しいツール（例えばSSLとかログサーバーとか監視サーバーとか）を入れられない。&lt;/li&gt;
&lt;li&gt;セキュリティの問題&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なるべくサービスの開発に時間をかけたいので、こうした運用をHerokuに任せてしまうことにしました。デプロイはcapistranoのように設定ファイルを書く必要すらなく、以下のようにとても簡単です。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ heroku create -s cedar
$ git push heroku master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ステージング環境を使いたい場合もcapistrano-ext入れて云々…みたいなのは必要なく、herokuコマンドで簡単に行えます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ heroku create -s cedar -r staging
$ git push staging master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;として、別アプリケーションを作ることでステージング環境を作ることができます。&lt;/p&gt;
&lt;p&gt;Herokuへの移行に伴って問題となったのが、DBでした。今まではMySQLを使っていたのですが、Herokuでは標準のDBがPostgresqlです。それまでPostgresqlは使ったことがなかったのでHomebrewでインストールしたんですがけっこう苦労しました。Herokuへの移行で環境構築に時間をとられるようではVPSからHerokuに移った意味がなくなってしまうので、ローカルのDBをSQLiteにして本番のみPostgresqlで運用するようにしました。具体的には、database.ymlを以下のように設定しました。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;development:
  adapter: sqlite3
  database: db/development.sqlite3
  pool: 5
  timeout: 5000

test:
  adapter: sqlite3
  database: db/test.sqlite3
  pool: 5
  timeout: 5000

production:
  adapter: postgresql
  encoding: unicode
  database: xxx_production
  username: xxx
  password:
  pool: 5
  timeout: 5000
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;参考&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://devcenter.heroku.com/articles/multiple-environments&quot;&gt;https://devcenter.heroku.com/articles/multiple-environments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ソースコードの公開&lt;/h3&gt;
&lt;p&gt;自分の成果物をちゃんと他人に見える形で残そうと思い、ソースコードをGithubに公開するようにしました。公開にあたって問題となるのは、APIキーやステージング環境の認証パスワードといった機密情報の扱いでした。こうした情報をソースコードにハードコーディングせずにアプリケーションを動かす工夫が必要でした。そこで、僕は環境変数にこれらの情報を保存するようにしました。幸い、Herokuでは環境変数を簡単に設定する方法があります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ heroku config:add USERNAME=admin PASSWORD=xxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そして、ローカルの開発環境でこれらの環境変数をロードするための方法としてforemanというgemを使いました。foremanはappサーバーや後述するguardなど複数のプロセスを同時に起動するのに便利なのですが、多くの環境変数をいっぺんにロードするのにも便利です。プロジェクトのルートディレクトリに.envというファイルを用意し、そこに環境変数をセットします。この.envを.gitignoreでgit管理下から除外しておけば、機密情報を公開せずにソースコードを公開することができます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Basic auth
USERNAME=admin
PASSWORD=xxx

# S3
S3_ACCESS_KEY=xxx
S3_SECRET_ACCESS_KEY=xxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;foremanを使ってappサーバーを起動する場合は以下のようにします。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ foreman run rails s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また、Procfileを用意すればguardなど複数のプロセスを一度に起動できます。詳細は参考として載せたリンクを参照してください。&lt;/p&gt;
&lt;h4&gt;参考&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://devcenter.heroku.com/articles/config-vars&quot;&gt;https://devcenter.heroku.com/articles/config-vars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ddollar/foreman&quot;&gt;https://github.com/ddollar/foreman&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ブラウザのリロードの自動化&lt;/h3&gt;
&lt;p&gt;viewやscssを編集してデザインを細かく調整する際、なんどもブラウザをリロードするのが煩わしかったのですが、最近便利なツールを見つけました。LiveReloadというツールです。chrome, firefox, safariなど各種ブラウザの拡張機能でLiveReloadをインストールし、guard-livereloadというgemを使うことで、viewやscssの変更が保存されると自動的にブラウザをリロードしてくれます。言葉で説明するより、以下の動画を見た方がわかりやすいです。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;感動的ですね！さっそく使いましょう。まずGemfileに追記します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;group :development do
  gem 'guard-livereload'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;インストールしてGuardfileに設定を加えます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ bundle install
$ guard init livereload
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;あとは、以下の参考のリンクで各種ブラウザにLiveReloadをインストールします。&lt;/p&gt;
&lt;h4&gt;参考&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/guard/guard-livereload&quot;&gt;https://github.com/guard/guard-livereload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://addons.mozilla.org/ja/firefox/addon/livereload/&quot;&gt;https://addons.mozilla.org/ja/firefox/addon/livereload/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/jnihajbhpnppcggbcgedagnkighmdlei&quot;&gt;https://chrome.google.com/webstore/detail/jnihajbhpnppcggbcgedagnkighmdlei&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Gemfile&lt;/h3&gt;
&lt;p&gt;最後に僕が使っているGemfileの基本型を載せておきますので参考にどうぞ。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;source :rubygems

gem 'rails'

# 標準のWebrickよりもパフォーマンスがよく、passengerなどよりも導入が簡単なので採用
gem 'thin'

gem 'haml-rails'
gem 'jquery-rails'

group :assets do
  gem 'sass-rails'
  gem 'coffee-rails'
  gem 'uglifier'
end

group :development, :test do
  # HerokuのためにPostgresqlを入れるのは骨が折れるので開発時はSQLiteを採用
  gem 'sqlite3'

  gem 'rspec-rails'

  # 設定をロードしたサーバーによってテストを高速化する
  gem 'spork'

  # ファイルの変更を検知する。OSX用
  gem 'rb-fsevent'

  # テスト結果をGrowlで通知する
  gem 'growl'

  # ファイルの変更を監視してテストを自動的に実行する
  gem 'guard-rspec'

  # 設定ファイルの変更を監視してテストサーバーを再起動する
  gem 'guard-spork'
end

group :development do
  gem 'heroku'

  # 環境変数をロードして複数のプロセスを実行する作業を自動化
  gem 'foreman'

  # viewやcssの変更を監視してブラウザを自動的にリロードする
  gem 'guard-livereload'

  # デバッガー
  gem 'pry-rails'
end

group :production do
  # Herokuの標準DBはPostgresql
  gem 'pg'
end
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>Rails開発環境 2012初夏</title>
    <updated>2012-05-20T03:22:00+00:00</updated>
    <dc:date>2012-05-20T03:22:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/119/</id>
    <link href="https://blog.naoty.dev/119/"/>
    <summary>&lt;p&gt;A→B→C→Dなどと複数のアクティビティを遷移した後、最初のAに戻る実装。&lt;/p&gt;
&lt;pre lang=&quot;java:DActivity.java&quot;&gt;&lt;code&gt;Intent intent = new Intent(DActivity.this, AActivity.class);
intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
startActivity(intent);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;FLAG_ACTIVITY_CLEAR_TOP&lt;/code&gt;は、遷移先のアクティビティが既に動いていればそのアクティビティより上にある（この場合はB, C, D）アクティビティを消す、という挙動を設定する。これによって、A→B→C→D→Aと遷移した後にbackボタンを押してもDに戻ることはなくなる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;FLAG_ACTIVITY_SINGLE_TOP&lt;/code&gt;は、既に動いているアクティビティに遷移するとそのアクティビティを閉じてもう一度作りなおすデフォルトの挙動（multiple mode）から、作りなおさずに再利用する挙動に変更する。これによって、D→Aへの遷移のときのアニメーションが戻る動きになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_CLEAR_TOP&quot;&gt;http://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_CLEAR_TOP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>最初のActivityに戻る</title>
    <updated>2012-05-18T19:56:00+00:00</updated>
    <dc:date>2012-05-18T19:56:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/118/</id>
    <link href="https://blog.naoty.dev/118/"/>
    <summary>&lt;pre lang=&quot;ruby:Procfile&quot;&gt;&lt;code&gt;web: rails s thin -p $PORT -e $RACK_ENV
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こんなProcfileでforemanを起動すると、下記のように&lt;code&gt;Ctrl-c&lt;/code&gt;押すまで何も表示されない。実際には動いてるので問題はないっちゃないけど。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ foreman start
12:06:59 web.1     | started with pid 1683
^CSIGINT received
12:07:23 system    | sending SIGTERM to all processes
12:07:23 system    | sending SIGTERM to pid 1683
12:07:23 web.1     | =&amp;gt; Booting Thin
12:07:23 web.1     | =&amp;gt; Rails 3.2.3 application starting in development on http://0.0.0.0:5000
12:07:23 web.1     | =&amp;gt; Call with -d to detach
12:07:23 web.1     | =&amp;gt; Ctrl-C to shutdown server
12:07:23 web.1     | &amp;gt;&amp;gt; Thin web server (v1.3.1 codename Triple Espresso)
12:07:23 web.1     | &amp;gt;&amp;gt; Maximum connections set to 1024
12:07:23 web.1     | &amp;gt;&amp;gt; Listening on 0.0.0.0:5000, CTRL+C to stop
12:07:23 web.1     | &amp;gt;&amp;gt; Stopping ...
12:07:23 web.1     | &amp;gt;&amp;gt; Stopping ...
12:07:23 web.1     | Exiting
12:07:23 web.1     | process terminated
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ただ、気持ち悪いので修正する方法を探したところ、foremanの開発者がgithubのissuesで答えてたのでメモ。config.ruに追記すればいい。&lt;/p&gt;
&lt;pre lang=&quot;ruby:config.ru&quot;&gt;&lt;code&gt;# This file is used by Rack-based servers to start the application.

require ::File.expand_path('../config/environment',  __FILE__)
run OGiri::Application

# ここ追記
$stdout.sync = true
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ foreman start
12:06:43 web.1     | started with pid 1669
12:06:48 web.1     | =&amp;gt; Booting Thin
12:06:48 web.1     | =&amp;gt; Rails 3.2.3 application starting in development on http://0.0.0.0:5000
12:06:48 web.1     | =&amp;gt; Call with -d to detach
12:06:48 web.1     | =&amp;gt; Ctrl-C to shutdown server
12:06:48 web.1     | &amp;gt;&amp;gt; Thin web server (v1.3.1 codename Triple Espresso)
12:06:48 web.1     | &amp;gt;&amp;gt; Maximum connections set to 1024
12:06:48 web.1     | &amp;gt;&amp;gt; Listening on 0.0.0.0:5000, CTRL+C to stop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;無事解決！&lt;/p&gt;</summary>
    <title>foremanでthinを起動しても何も表示されない件の解決策</title>
    <updated>2012-05-04T12:16:00+00:00</updated>
    <dc:date>2012-05-04T12:16:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/117/</id>
    <link href="https://blog.naoty.dev/117/"/>
    <summary>&lt;h2&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;LiveReloadをguardで起動する。&lt;/li&gt;
&lt;li&gt;すると、guardがHTMLやCSSの変更をキャッチしてLiveReloadでブラウザが自動でリロードされる。&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://youtu.be/EZ8vy_cNMVQ&quot;&gt;これ&lt;/a&gt;を見た方がはやい。&lt;/li&gt;
&lt;li&gt;サブディスプレイに複数のブラウザを立ちあげてLiveReloadをオンにして、ファイルの変更がいっぺんにそれらのブラウザに反映されるのが感動。鳥肌もの。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;手順&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;guard-livereload&lt;/code&gt;をbundleでいれる&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;guard init livereload&lt;/code&gt;で&lt;code&gt;Guardfile&lt;/code&gt;を設定する。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;guard&lt;/code&gt;でファイルの変更のウォッチをスタート。&lt;/li&gt;
&lt;li&gt;ブラウザのアドオンでLiveReloadをオンにする&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Rails&lt;/h2&gt;
&lt;pre lang=&quot;ruby:Gemfile&quot;&gt;&lt;code&gt;group :development, :test do
  gem 'rb-fsevent' if RUBY_PLATFORM =~ /darwin/i
  gem 'guard-livereload'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ bundle install
$ guard init livereload
$ guard
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;アドオンたち&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Firefox：&lt;a href=&quot;https://addons.mozilla.org/ja/firefox/addon/livereload/&quot;&gt;https://addons.mozilla.org/ja/firefox/addon/livereload/&lt;/a&gt;、最新版（v12）ではうまく動かなかったので、これのためだけにv5までダウングレードしてる。&lt;/li&gt;
&lt;li&gt;Chrome：&lt;a href=&quot;https://chrome.google.com/webstore/detail/jnihajbhpnppcggbcgedagnkighmdlei&quot;&gt;https://chrome.google.com/webstore/detail/jnihajbhpnppcggbcgedagnkighmdlei&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Safariもあるらしい。&lt;/li&gt;
&lt;li&gt;IEにもほしいけど、どうなんだろう。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>HTMLやCSSの変更を自動でブラウザに反映させる</title>
    <updated>2012-05-03T21:31:00+00:00</updated>
    <dc:date>2012-05-03T21:31:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/116/</id>
    <link href="https://blog.naoty.dev/116/"/>
    <summary>&lt;p&gt;Railsやるときに「あとでちゃんとCSS作るけど、今はテキトーなスタイルでいいや」っていうときに使ってるCSS。わかる人にはわかる某サイトのデモを意識した。&lt;/p&gt;
&lt;pre lang=&quot;css:application.css.scss&quot;&gt;&lt;code&gt;//= require_self
//= require_tree .

html {
  background-color: #4B7399;
  font-family: Verdana, Helvetica, Arial;
  font-size: 14px;
}

body {
  background-color: #FFFFFF;
  border: 1px solid #000000;
  margin: 50px auto;
  padding: 20px;
  width: 680px;
}

p {
  margin-bottom: 10px;
}

h1, h2 {
  font-weight: bold;
  margin-bottom: 10px;
}

h1 {
  font-size: 34px;
}

h2 {
  font-size: 21px;
}
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>Railsで使ってる間に合わせのCSS</title>
    <updated>2012-04-29T00:00:00+00:00</updated>
    <dc:date>2012-04-29T00:00:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/115/</id>
    <link href="https://blog.naoty.dev/115/"/>
    <summary>&lt;p&gt;MBAが故障して新しいMBAに引っ越しししてるので、Android SDKをインストール中（長い…）ヒマなので作業環境をメモる。&lt;/p&gt;
&lt;h2&gt;各種アプリケーション&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ブラウザ：Firefox（アドオン：vimperator、Firebug、はてブ）&lt;/li&gt;
&lt;li&gt;通知：Growl&lt;/li&gt;
&lt;li&gt;Twitter：Twitter for Mac&lt;/li&gt;
&lt;li&gt;メーラー：sparrow&lt;/li&gt;
&lt;li&gt;チャット：skype&lt;/li&gt;
&lt;li&gt;メモ：&lt;a href=&quot;http://mouapp.com/&quot;&gt;Mou&lt;/a&gt;（マークダウンエディター）&lt;/li&gt;
&lt;li&gt;ウィンドウ最前面化：&lt;a href=&quot;http://infinite-labs.net/afloat/&quot;&gt;afloat&lt;/a&gt;（&lt;code&gt;[Command][Ctrl]a&lt;/code&gt;でウィンドウを最前面）&lt;/li&gt;
&lt;li&gt;ランチャー：&lt;a href=&quot;http://www.shadowlab.org/Software/spark.php&quot;&gt;spark&lt;/a&gt;（&lt;code&gt;C-0&lt;/code&gt;でFirefox、&lt;code&gt;C-9&lt;/code&gt;でiTermを起動/移動などショートカットキーを設定する）&lt;/li&gt;
&lt;li&gt;バックアップ：dropbox&lt;/li&gt;
&lt;li&gt;IME：Google IME&lt;/li&gt;
&lt;li&gt;マシン情報：&lt;a href=&quot;http://www.ragingmenace.com/software/menumeters/index.html&quot;&gt;menu meters&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「キーボードだけで作業の9割をこなせる環境」を目指してる。&lt;/p&gt;
&lt;p&gt;Sparkでアプリケーション間を移動を簡略化し、ブラウザもvimpでキーボードのみで操作してる。twitterやsparrowもhjklで移動できるなど慣れたキーバインドで操作できるから使ってる。また、afloatを使うと、ターミナルを最前面に置きつつブラウザを操作するとかできて便利。&lt;/p&gt;
&lt;p&gt;スタイルを編集できて、dropboxで同期できるようになればMouからKobitoに移行します。&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;追記&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Todoリスト：&lt;a href=&quot;http://fluidapp.com/&quot;&gt;fruid&lt;/a&gt; + Google Tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Todoリストは数多あるけど、一番シンプルかつ使い勝手がいいのがGoogle Tasksだった。ただ、webアプリだと消しちゃうので、fruidでデスクトップアプリにする。fruidはwebアプリをデスクトップアプリにするツール。デスクトップアプリ化したGoogle Tasksはafloatで常にウィンドウの最前面において使ってる。&lt;/p&gt;
&lt;h2&gt;開発環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;iTerm2&lt;/li&gt;
&lt;li&gt;Command Line Tools&lt;/li&gt;
&lt;li&gt;Homebrew&lt;/li&gt;
&lt;li&gt;tmux&lt;/li&gt;
&lt;li&gt;git + tig&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Xcodeはいまのところ使わないしインストールに時間がかかるので、Command Line Toolsだけ使う。tig便利。&lt;br&gt;
vimとかzshは入ってるものをそのまま使う。dotfilesは&lt;a href=&quot;https://github.com/naoty/dotfiles&quot;&gt;github&lt;/a&gt;で管理してるので、それをcloneして使う。&lt;/p&gt;
&lt;h3&gt;Rails開発&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;rvm&lt;/li&gt;
&lt;li&gt;Ruby 1.9.3, 1.9.2&lt;/li&gt;
&lt;li&gt;bundler&lt;/li&gt;
&lt;li&gt;mongodb&lt;/li&gt;
&lt;li&gt;imagemagic&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;gemにはbundlerだけ入れて、プロジェクトに必要なgemsはすべてbundleで管理する系男子。&lt;/p&gt;
&lt;h3&gt;Android開発&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Android SDK 2.3.2, 2.2&lt;/li&gt;
&lt;li&gt;Eclipse（日本語化、vrapper、Eclipse Color Scheme）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;vrapperでEclipseでもvimのキーバインドをある程度使えるようになる。&lt;/p&gt;</summary>
    <title>MBAに入れてるアプリと作業環境</title>
    <updated>2012-04-24T13:52:00+00:00</updated>
    <dc:date>2012-04-24T13:52:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/114/</id>
    <link href="https://blog.naoty.dev/114/"/>
    <summary>&lt;p&gt;※Kobitoの中の人の許可をいただいております。&lt;/p&gt;
&lt;h2&gt;1. もともとのcssを退避しておく&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ cd /Application/Kobito.app/Contents/Resources
$ mv markdown.css markdown.css.orig
$ mv github.min.css github.min.css.orig
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;プレビュー部分のスタイルは&lt;code&gt;github.min.css&lt;/code&gt;と&lt;code&gt;markdown.css&lt;/code&gt;にあるっぽいです。&lt;/li&gt;
&lt;li&gt;もとに戻せるように一旦退避しておきます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2. 使いたいcssのシンボリックリンクをはる&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ ln -s ~/workspace/tmp/kobito.css markdown.css 
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;自分のcssへのシンボリックリンクを&lt;code&gt;markdown.css&lt;/code&gt;として貼っておきます。&lt;/li&gt;
&lt;li&gt;Kobitoのアップデートに伴って自分のスタイルが消えるのを防ぐため、外に実際のスタイルを置いておきます。&lt;/li&gt;
&lt;li&gt;自分が使っているスタイルを最後に載せておきました。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;注意点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アップデートを行うと、シンボリックリンクも消えるため、スタイルがもとに戻ります。&lt;/li&gt;
&lt;li&gt;以上のような作業をもう一度行う必要があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;スクリーンショット&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://cache.gyazo.com/b818fec9dc127ef399d2b7d3715643c5.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://cache.gyazo.com/b818fec9dc127ef399d2b7d3715643c5.png&quot; alt=&quot;screenshot&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;cssサンプル&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;githubで使われているシンタックスハイライトを使ってみましたが効きませんでした。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;css:kobito.css&quot;&gt;&lt;code&gt;/*
Copyright (c) 2011, Yahoo! Inc. All rights reserved.
Code licensed under the BSD License:
http://developer.yahoo.com/yui/license.html
version: 2.9.0
*/
html{color:#000;background:#FFF}body,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,code,form,fieldset,legend,input,button,textarea,select,p,blockquote,th,td{margin:0;padding:0}table{border-collapse:collapse;border-spacing:0}fieldset,img{border:0}address,button,caption,cite,code,dfn,em,input,optgroup,option,select,strong,textarea,th,var{font:inherit}del,ins{text-decoration:none}li{list-style:none}caption,th{text-align:left}h1,h2,h3,h4,h5,h6{font-size:100%;font-weight:normal}q:before,q:after{content:''}abbr,acronym{border:0;font-variant:normal}sup{vertical-align:baseline}sub{vertical-align:baseline}legend{color:#000}

/* ------------------------------
 * HTML element
 * ------------------------------ */

html {
  background-color: #FFFFFF;
  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
  font-size: 14px;  padding: 20px;}

p, h1, h2, h3, ul, pre {
  line-height: 1.6;
  margin-bottom: 20px;
}

h1, h2, h3 {
  color: #404040;
  font-weight: bold;
}

h1 {
  border-bottom: 1px solid #AAAAAA;
  font-size: 24px;
}

h2 {
  font-size: 18px;
}

em {
  font-style: italic;
}

ul {
  margin-left: 30px;
}

li {
  list-style: disc;
  margin-bottom: 10px;
}

code, pre {
  background-color: #EEEEEE;
  border: 1px solid #AAAAAA;
  font-family: Courier, monospace;
}

code {
  margin: 0 5px;
  padding: 0 5px;
}

pre {
  line-height: 1.5;
  overflow: auto;
  padding: 10px;
}

pre code {
  border: none;
  margin: 0;
  padding: 0;
}

/* ------------------------------
 * syntax hightlight for Kobito
 * inspired by https://github.com/mojombo/tpw/blob/master/css/syntax.css
 * ------------------------------ */

.highlight  { background: #ffffff; }
.highlight .c { color: #999988; font-style: italic } /* Comment */
.highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */
.highlight .k { font-weight: bold } /* Keyword */
/* .highlight .o { font-weight: bold } */  /* Operator */
.highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */
.highlight .cp { color: #999999; font-weight: bold } /* Comment.Preproc */
.highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */
.highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */
.highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */
.highlight .gd .x { color: #000000; background-color: #ffaaaa } /* Generic.Deleted.Specific */
.highlight .ge { font-style: italic } /* Generic.Emph */
.highlight .gr { color: #aa0000 } /* Generic.Error */
.highlight .gh { color: #999999 } /* Generic.Heading */
.highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */
.highlight .gi .x { color: #000000; background-color: #aaffaa } /* Generic.Inserted.Specific */
.highlight .go { color: #888888 } /* Generic.Output */
.highlight .gp { color: #555555 } /* Generic.Prompt */
.highlight .gs { font-weight: bold } /* Generic.Strong */
.highlight .gu { color: #aaaaaa } /* Generic.Subheading */
.highlight .gt { color: #aa0000 } /* Generic.Traceback */
.highlight .kc { font-weight: bold } /* Keyword.Constant */
.highlight .kd { font-weight: bold } /* Keyword.Declaration */
.highlight .kp { font-weight: bold } /* Keyword.Pseudo */
.highlight .kr { font-weight: bold } /* Keyword.Reserved */
.highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */
.highlight .m { color: #009999 } /* Literal.Number */
.highlight .s { color: #d14 } /* Literal.String */
.highlight .na { color: #008080 } /* Name.Attribute */
.highlight .nb { color: #0086B3 } /* Name.Builtin */
.highlight .nc { color: #445588; font-weight: bold } /* Name.Class */
.highlight .no { color: #008080 } /* Name.Constant */
.highlight .ni { color: #800080 } /* Name.Entity */
.highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */
.highlight .nf { color: #990000; font-weight: bold } /* Name.Function */
.highlight .nn { color: #555555 } /* Name.Namespace */
.highlight .nt { color: #000080 } /* Name.Tag */
.highlight .nv { color: #008080 } /* Name.Variable */
.highlight .ow { font-weight: bold } /* Operator.Word */
.highlight .w { color: #bbbbbb } /* Text.Whitespace */
.highlight .mf { color: #009999 } /* Literal.Number.Float */
.highlight .mh { color: #009999 } /* Literal.Number.Hex */
.highlight .mi { color: #009999 } /* Literal.Number.Integer */
.highlight .mo { color: #009999 } /* Literal.Number.Oct */
.highlight .sb { color: #d14 } /* Literal.String.Backtick */
.highlight .sc { color: #d14 } /* Literal.String.Char */
.highlight .sd { color: #d14 } /* Literal.String.Doc */
.highlight .s2 { color: #d14 } /* Literal.String.Double */
.highlight .se { color: #d14 } /* Literal.String.Escape */
.highlight .sh { color: #d14 } /* Literal.String.Heredoc */
.highlight .si { color: #d14 } /* Literal.String.Interpol */
.highlight .sx { color: #d14 } /* Literal.String.Other */
.highlight .sr { color: #009926 } /* Literal.String.Regex */
.highlight .s1 { color: #d14 } /* Literal.String.Single */
.highlight .ss { color: #990073 } /* Literal.String.Symbol */
.highlight .bp { color: #999999 } /* Name.Builtin.Pseudo */
.highlight .vc { color: #008080 } /* Name.Variable.Class */
.highlight .vg { color: #008080 } /* Name.Variable.Global */
.highlight .vi { color: #008080 } /* Name.Variable.Instance */
.highlight .il { color: #009999 } /* Literal.Number.Integer.Long */
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>Kobitoのスタイルを変更する</title>
    <updated>2012-04-12T13:07:00+00:00</updated>
    <dc:date>2012-04-12T13:07:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/113/</id>
    <link href="https://blog.naoty.dev/113/"/>
    <summary>&lt;h1&gt;actionpack-3.2.2/lib/action_controller/metal/request_forgery_protection.rb&lt;/h1&gt;
&lt;h2&gt;line:67&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;def protect_from_forgery(options = {})
  self.request_forgery_protection_token ||= :authenticity_token
  prepend_before_filter :verify_authenticity_token, options
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;protect_from_forgery&lt;/code&gt;はデフォルトで&lt;code&gt;ApplicationController&lt;/code&gt;で宣言されている。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;verify_authenticity_token&lt;/code&gt;をすべてのアクションの前に実行するようになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;line:72&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;def verify_authenticity_token
  unless verified_request?
    logger.warn &quot;WARNING: Can't verify CSRF token authenticity&quot; if logger
    handle_unverified_request
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;line:84&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;def handle_unverified_request
  reset_session
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;verified_request?&lt;/code&gt;が&lt;code&gt;false&lt;/code&gt;の場合はセッションがリセットされる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;line:93&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;def verified_request?
  !protect_against_forgery? || request.get? ||
    form_authenticity_token == params[request_forgery_protection_token] ||
    form_authenticity_token == request.headers['X-CSRF-Token']
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;params[request_forgery_protection_token]&lt;/code&gt;は&lt;code&gt;protect_from_forgery&lt;/code&gt;の中で定義されている通り&lt;code&gt;params[:authenticity_token]&lt;/code&gt;になる。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;params[:authenticity_token]&lt;/code&gt;はformヘルパーが自動生成するhiddenフィールドから送信される。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;params[:authenticity_token]&lt;/code&gt;がない場合でも、HTTPヘッダーの&lt;code&gt;X-CSRF-Token&lt;/code&gt;を設定すればいい。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;line:100&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;def form_authenticity_token
  session[:_csrf_token] ||= SecureRandom.base64(32)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;params[:authenticity_token]&lt;/code&gt;または&lt;code&gt;request.headers['X-CSRF-Token']&lt;/code&gt;が&lt;code&gt;session[:_csrf_token]&lt;/code&gt;と一致しているかどうかが、CSRFトークンの検証の本体である。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>CSRFトークンの検証プロセス</title>
    <updated>2012-04-12T11:33:00+00:00</updated>
    <dc:date>2012-04-12T11:33:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/112/</id>
    <link href="https://blog.naoty.dev/112/"/>
    <summary>&lt;h2&gt;vimperatorとは&lt;/h2&gt;
&lt;p&gt;ブラウザをキーボードのみで操作できるようになるFirefoxのアドオン。vimのように操作できる。&lt;/p&gt;
&lt;h2&gt;ダウンロード&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://addons.mozilla.org/ja/firefox/addon/vimperator/&quot;&gt;https://addons.mozilla.org/ja/firefox/addon/vimperator/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;設定&lt;/h2&gt;
&lt;p&gt;以下のテキストをホームディレクトリに&lt;code&gt;.vimperatorrc&lt;/code&gt;として保存。&lt;br&gt;
Firefoxを再起動。&lt;/p&gt;
&lt;pre lang=&quot;vim:.vimperatorrc&quot;&gt;&lt;code&gt;map j 5&amp;lt;C-e&amp;gt;
map k 5&amp;lt;C-y&amp;gt;
map h &amp;lt;C-p&amp;gt;
map l &amp;lt;C-n&amp;gt;
map H &amp;lt;A-Left&amp;gt;
map L &amp;lt;A-Right&amp;gt;

set hintchars=asdfjkl
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;vimperatorの世界にようこそ！&lt;/h2&gt;
&lt;h3&gt;基本的なキーボード操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;o&lt;/code&gt;でurlを入力して&lt;code&gt;Enter&lt;/code&gt;で候補のページを開く。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;t&lt;/code&gt;でurlを入力して&lt;code&gt;Enter&lt;/code&gt;で候補のページを別タブで開く。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;d&lt;/code&gt;でタブを閉じ、&lt;code&gt;u&lt;/code&gt;で閉じたタブを開く&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;j&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt;で上下に移動&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;h&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;でタブを左右に移動&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;H&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;でウィンドウの履歴を前後に移動&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;f&lt;/code&gt;でリンクにキーが表示される。どれかのキーを入力するとリンクを開く。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;F&lt;/code&gt;でリンクにキーが表示される。どれかのキーを入力すると別タブでリンクを開く。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/&lt;/code&gt;でページ内を検索する。&lt;code&gt;n&lt;/code&gt;, &lt;code&gt;N&lt;/code&gt;で検索結果を移動する。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>vimperatorで快適ブラウジング</title>
    <updated>2012-04-09T23:53:00+00:00</updated>
    <dc:date>2012-04-09T23:53:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/111/</id>
    <link href="https://blog.naoty.dev/111/"/>
    <summary>&lt;p&gt;標準のDateライブラリが使いにくいので便利なdate.jsをTitaniumで使う。&lt;br&gt;
date.jsをダウンロードしてResourcesディレクトリ以下に配置して以下のとおり。&lt;/p&gt;
&lt;pre lang=&quot;javascript:app.js&quot;&gt;&lt;code&gt;require('date');
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;javascript&quot; class=&quot;highlight highlight-javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 2012-04-07 15:00:00 +0000&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tomorrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 2012-04-08 15:00:00 +0000&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>Titaniumでdate.jsを使う</title>
    <updated>2012-04-08T21:39:00+00:00</updated>
    <dc:date>2012-04-08T21:39:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/110/</id>
    <link href="https://blog.naoty.dev/110/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;http://gyazo.com/217c20b5050d4976212506dcd3bdad18.png?1333602421&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://gyazo.com/217c20b5050d4976212506dcd3bdad18.png?1333602421&quot; alt=&quot;chuni&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre lang=&quot;zsh:.zshrc&quot;&gt;&lt;code&gt;autoload colors
colors

PROMPT=&quot;%{$fg[yellow]%}⚡%{$reset_color%} &quot;
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>中2っぽいプロンプト</title>
    <updated>2012-04-05T14:20:00+00:00</updated>
    <dc:date>2012-04-05T14:20:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/109/</id>
    <link href="https://blog.naoty.dev/109/"/>
    <summary>&lt;p&gt;unicorn.rb等の設定ファイルやスクリプトでよく使うのでメモ。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;File.expand_path('tmp/sample_data.csv', ENV['RAILS_ROOT'])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;複数の環境で実行されるコードで相対パスを使うとけっこうハマるので、railsのプロジェクトのルートを使って相対パスを絶対パスに変換する。&lt;/p&gt;</summary>
    <title>ファイルのパスを絶対パスに変換</title>
    <updated>2012-04-04T16:12:00+00:00</updated>
    <dc:date>2012-04-04T16:12:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/108/</id>
    <link href="https://blog.naoty.dev/108/"/>
    <summary>&lt;p&gt;以前書いた内容が動かなかったので、再投稿。&lt;/p&gt;
&lt;pre lang=&quot;ruby:Gemfile&quot;&gt;&lt;code&gt;gem 'which_browser'
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;ruby:application_controller.rb&quot;&gt;&lt;code&gt;class ApplicationController &amp;lt; ActionController::Base
  protect_from_forgery

  protected

  # Override
  def verified_request?
    request.mobile? || super
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;protect_from_forgery&lt;/code&gt;内ではCSRF検証を行うアクション&lt;code&gt;verify_authenticity_token&lt;/code&gt;をfilterにはさんでる。&lt;/li&gt;
&lt;li&gt;そのアクションの中で実際にCSRF検証を行う条件として使われているメソッドが&lt;code&gt;verified_request?&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;というわけで、こいつをオーバーライドしてあげればCSRF検証の条件を追加することができる。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;追記&lt;/h3&gt;
&lt;p&gt;which_browserをフォークしてtitaniumのiOSシミュレータからのリクエストにも対応させた。&lt;/p&gt;
&lt;pre lang=&quot;ruby:Gemfile&quot;&gt;&lt;code&gt;gem 'which_browser', :git =&amp;gt; 'git://github.com/naoty/which_browser.git', :branch =&amp;gt; 'titanium_prototype'
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;ruby:application_controller.rb&quot;&gt;&lt;code&gt;class ApplicationController &amp;lt; ActionController::Base
  protect_from_forgery

  protected

  # Override
  def verified_request?
    request.ti_iphone? || super
  end
end
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>モバイルからのリクエストのCSRF検証をスキップする</title>
    <updated>2012-03-29T00:15:00+00:00</updated>
    <dc:date>2012-03-29T00:15:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/107/</id>
    <link href="https://blog.naoty.dev/107/"/>
    <summary>&lt;ul&gt;
&lt;li&gt;vimを使い始めて1年くらい&lt;/li&gt;
&lt;li&gt;Rails開発のときにvimを使う&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;vim:.vimrc&quot;&gt;&lt;code&gt;set nocompatible

&quot; ----------------------------------------
&quot; Colors
&quot; ----------------------------------------
colorscheme railscasts

syntax on

highlight StatusLine   cterm=NONE ctermfg=white ctermbg=233
highlight StatusLineNC cterm=NONE ctermfg=white ctermbg=233
highlight VertSplit    cterm=NONE ctermfg=233   ctermbg=233

&quot; ----------------------------------------
&quot; Display
&quot; ----------------------------------------
set laststatus=2
set number
set ruler
set showcmd
set showmatch
set list
set listchars=tab:-&amp;gt;,trail:-

&quot; ----------------------------------------
&quot; Edit
&quot; ----------------------------------------
set autoindent smartindent
set expandtab
set tabstop=2 softtabstop=0 shiftwidth=2
set wildmenu
set wildmode=list:full

&quot; ----------------------------------------
&quot; Search
&quot; ----------------------------------------
set hlsearch
set incsearch

nnoremap n nzz 
nnoremap N Nzz 
nnoremap &amp;lt;Esc&amp;gt;&amp;lt;Esc&amp;gt; :nohlsearch&amp;lt;CR&amp;gt;

&quot; ----------------------------------------
&quot; Vundle
&quot; ----------------------------------------
filetype off 

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

&quot; manage plugins
Bundle 'gmarik/vundle'

&quot; search files
Bundle 'unite.vim'

&quot; complete keys
Bundle 'Shougo/neocomplcache'

&quot; complete snippets
Bundle 'Shougo/neocomplcache-snippets-complete'

&quot; git command on vim
Bundle 'fugitive.vim'

&quot; format codes
Bundle 'Align'

&quot; toggle comment outs
Bundle 'git://github.com/scrooloose/nerdcommenter.git'

&quot; HTML snippets
Bundle 'ZenCoding.vim'

&quot; tree explorer
Bundle 'git://github.com/scrooloose/nerdtree.git'

&quot; bettar indentation for JavaScript
Bundle 'git://github.com/pangloss/vim-javascript.git'

&quot; syntax and indent for coffee script
Bundle 'kchmck/vim-coffee-script'

&quot; plugins for Titanium Desktop/Mobile
Bundle 'git://github.com/pekepeke/titanium-vim.git'

filetype plugin indent on

&quot; ----------------------------------------
&quot; Unite.vim
&quot; ----------------------------------------
let g:unite_enable_start_insert = 1

&quot; open unite buffer
nnoremap &amp;lt;space&amp;gt;&amp;lt;space&amp;gt; :Unite buffer file_rec&amp;lt;CR&amp;gt;

&quot; ----------------------------------------
&quot; neocomplcache.vim
&quot; ----------------------------------------
let g:neocomplcache_enable_at_startup = 1

highlight Pmenu     ctermbg=8
highlight PmenuSel  ctermbg=1
highlight PmenuSbar ctermbg=0

imap &amp;lt;expr&amp;gt;&amp;lt;Tab&amp;gt; neocomplcache#sources#snippets_complete#expandable() ? &quot;\&amp;lt;Plug&amp;gt;(neocomplcache_snippets_expand)&quot; : pumvisible() ? &quot;\&amp;lt;C-n&amp;gt;&quot; : &quot;\&amp;lt;Tab&amp;gt;&quot;
smap &amp;lt;expr&amp;gt;&amp;lt;Tab&amp;gt; neocomplcache#sources#snippets_complete#expandable() ? &quot;\&amp;lt;Plug&amp;gt;(neocomplcache_snippets_expand)&quot; : pumvisible() ? &quot;\&amp;lt;C-n&amp;gt;&quot; : &quot;\&amp;lt;Tab&amp;gt;&quot;

inoremap &amp;lt;expr&amp;gt;&amp;lt;CR&amp;gt;  neocomplcache#smart_close_popup().&quot;\&amp;lt;CR&amp;gt;&quot;
inoremap &amp;lt;expr&amp;gt;&amp;lt;C-y&amp;gt; neocomplcache#close_popup()
inoremap &amp;lt;expr&amp;gt;&amp;lt;C-e&amp;gt; neocomplcache#cancel_popup()

&quot; ----------------------------------------
&quot; Align.vim
&quot; ----------------------------------------
let g:Align_xstrlen = 3

&quot; ----------------------------------------
&quot; NERD_commenter.vim
&quot; ----------------------------------------
let g:NERDSpaceDelims = 1
let g:NERDShutup = 1

map &amp;lt;Leader&amp;gt;x &amp;lt;Plug&amp;gt;NERDCommenterToggle

&quot; ----------------------------------------
&quot; Other Key Mappings
&quot; ----------------------------------------

&quot; reload .vimrc
nnoremap &amp;lt;space&amp;gt;r :source ~/.vimrc&amp;lt;CR&amp;gt;

&quot; move by one display line
nnoremap j gj
nnoremap k gk

&quot; move to line head/end like mac
nnoremap &amp;lt;C-a&amp;gt; 0
nnoremap &amp;lt;C-e&amp;gt; $

&quot; go to another window
nnoremap &amp;lt;space&amp;gt;h &amp;lt;C-w&amp;gt;h
nnoremap &amp;lt;space&amp;gt;j &amp;lt;C-w&amp;gt;j
nnoremap &amp;lt;space&amp;gt;k &amp;lt;C-w&amp;gt;k
nnoremap &amp;lt;space&amp;gt;l &amp;lt;C-w&amp;gt;l

&quot; move the window to another position
nnoremap &amp;lt;space&amp;gt;H &amp;lt;C-w&amp;gt;H
nnoremap &amp;lt;space&amp;gt;J &amp;lt;C-w&amp;gt;J
nnoremap &amp;lt;space&amp;gt;K &amp;lt;C-w&amp;gt;K
nnoremap &amp;lt;space&amp;gt;L &amp;lt;C-w&amp;gt;L

&quot; adjust the window height/width
nnoremap &amp;lt;space&amp;gt;+ &amp;lt;C-w&amp;gt;5+
nnoremap &amp;lt;space&amp;gt;- &amp;lt;C-w&amp;gt;5-
nnoremap &amp;lt;space&amp;gt;&amp;gt; &amp;lt;C-w&amp;gt;10&amp;gt;
nnoremap &amp;lt;space&amp;gt;&amp;lt; &amp;lt;C-w&amp;gt;10&amp;lt;

&quot; complete surroundings
inoremap ' ''&amp;lt;Left&amp;gt;
inoremap &quot; &quot;&quot;&amp;lt;Left&amp;gt;
inoremap ( ()&amp;lt;Left&amp;gt;
inoremap { {}&amp;lt;Left&amp;gt;
inoremap [ []&amp;lt;Left&amp;gt;
inoremap \| \|\|&amp;lt;Left&amp;gt;

&quot; hjkl move in insert mode
inoremap &amp;lt;C-h&amp;gt; &amp;lt;Left&amp;gt;
inoremap &amp;lt;C-j&amp;gt; &amp;lt;Down&amp;gt;
inoremap &amp;lt;C-k&amp;gt; &amp;lt;Up&amp;gt;
inoremap &amp;lt;C-l&amp;gt; &amp;lt;Right&amp;gt;

&quot; ctags
nnoremap &amp;lt;C-[&amp;gt; :pop&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>vimrc晒し</title>
    <updated>2012-03-27T14:47:00+00:00</updated>
    <dc:date>2012-03-27T14:47:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/106/</id>
    <link href="https://blog.naoty.dev/106/"/>
    <summary>&lt;p&gt;この&lt;a href=&quot;http://blog.kiftwi.net/2012/03/20/summary-of-pry-plugins/&quot;&gt;記事&lt;/a&gt;に感動したので、gemfileにまとめてみました。各gemの使い方はこの記事を参照してください。&lt;/p&gt;
&lt;pre lang=&quot;ruby:Gemfile&quot;&gt;&lt;code&gt;source 'http://rubygems.org'

group :development do
  gem 'pry-rails'
  gem 'pry-debugger'
  gem 'pry-exception_explorer'
  gem 'hirb-unicode'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;ruby:.pryrc&quot;&gt;&lt;code&gt;# https://github.com/pry/pry/wiki/FAQ#wiki-hirb
require 'hirb'

Hirb.enable

old_print = Pry.config.print
Pry.config.print = proc do |output, value|
  Hirb::View.view_or_page_output(value) || old_print.call(output, value)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3&gt;追記：2012/3/20&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;pry-coolline&lt;/code&gt;は日本語を入力すると表示が崩れてしまうのでいったん外しました&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>ハッピーになれるpry拡張詰め合わせGemfile</title>
    <updated>2012-03-20T18:05:00+00:00</updated>
    <dc:date>2012-03-20T18:05:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/105/</id>
    <link href="https://blog.naoty.dev/105/"/>
    <summary>&lt;p&gt;最低限こんなもんでいいんじゃね程度&lt;/p&gt;
&lt;pre lang=&quot;ruby:config/deploy.rb&quot;&gt;&lt;code&gt;namespace :deploy do
  task :start do
    run &quot;bundle exec unicorn_rails -c #{current_path}/config/unicorn.rb -E production -D&quot;
  end

  task :stop do
    run &quot;kill -QUIT `cat #{current_path}/tmp/pids/unicorn.pid`&quot;
  end

  task :restart do
    run &quot;kill -USR2 `cat #{current_path}/tmp/pids/unicorn.pid`&quot;
    run &quot;kill -QUIT `cat #{current_path}/tmp/pids/unicorn.pid.oldbin`&quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;ruby:config/unicorn.rb&quot;&gt;&lt;code&gt;worker_processes 2
listen      File.expand_path('tmp/sockets/unicorn.sock', ENV['RAILS_ROOT'])
pid         File.expand_path('tmp/pids/unicorn.pid',     ENV['RAILS_ROOT'])
stdout_path File.expand_path('log/unicorn.log',          ENV['RAILS_ROOT'])
stderr_path File.expand_path('log/unicorn.log',          ENV['RAILS_ROOT'])
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>capistranoでのunicorn再起動タスク</title>
    <updated>2012-03-12T22:45:00+00:00</updated>
    <dc:date>2012-03-12T22:45:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/104/</id>
    <link href="https://blog.naoty.dev/104/"/>
    <summary>&lt;pre lang=&quot;ruby:Capfile&quot;&gt;&lt;code&gt;load 'deploy'
# Uncomment if you are using Rails' assets pipeline
  # load 'deploy/assets'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このコメントアウトを外すだけ。外すと、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;deploy:update_code&lt;/code&gt;のあとに&lt;code&gt;deploy:assets:precompile&lt;/code&gt;というタスクを実行し、precompileする&lt;/li&gt;
&lt;li&gt;public/assetsへのシンボリックリンクをshared/assetsに作る&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なんでコメントアウトしたし…&lt;/p&gt;
&lt;h2&gt;追記&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;投稿したあとに同じような投稿を見つけてしまった。そちらではバグみたいなことを報告されてた。&lt;/li&gt;
&lt;li&gt;一応、環境も追記しておきます。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;% rails &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
Rails 3.2.2
% cap &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
Capistrano v2.11.2
&lt;/pre&gt;</summary>
    <title>Capistranoでassets:precompileを自動化</title>
    <updated>2012-03-12T22:16:00+00:00</updated>
    <dc:date>2012-03-12T22:16:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/103/</id>
    <link href="https://blog.naoty.dev/103/"/>
    <summary>&lt;p&gt;rbenvの場合は&lt;a href=&quot;http://qiita.com/items/9000280b3c3a0e74a618&quot;&gt;こちら&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;前置き&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;プロジェクトで使うライブラリはできるだけbundlerで管理したい。&lt;/li&gt;
&lt;li&gt;でも、いちいち&lt;code&gt;bundle exec rails s&lt;/code&gt;とかやるのめんどい。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;alias be=&quot;bundle exec&quot;&lt;/code&gt;として&lt;code&gt;be rails s&lt;/code&gt;ってやるのもめんどくさくなってきた。&lt;/li&gt;
&lt;li&gt;なんかいい方法ないの？ってことで調べたら、すぐ見つかったのでご紹介。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;rvmのフックスクリプトに実行権限を与える&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;--binstubs&lt;/code&gt;をつけて&lt;code&gt;bundle install&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;具体例&lt;/h2&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x .rvm/hooks/after_cd_bundler
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;workspaces/sampleapp
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vi Gemfile
&lt;/pre&gt;
&lt;pre lang=&quot;ruby:Gemfile&quot;&gt;&lt;code&gt;source &quot;http://rubygems.org&quot;
gem &quot;heroku&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;sh&quot; class=&quot;highlight highlight-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--path&lt;/span&gt; vendor/bundle &lt;span class=&quot;nt&quot;&gt;--binstubs&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;Gemfile Gemfile.lock bin vendor
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;workspaces/sampleapp
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;heroku &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
heroku-gem/2.20.0
&lt;/pre&gt;
&lt;h2&gt;解説&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.rvm/hooks/after_cd_bundle&lt;/code&gt;は&lt;code&gt;.bundle&lt;/code&gt;ディレクトリが存在するプロジェクトに&lt;code&gt;cd&lt;/code&gt;で移動したとき実行されるスクリプトで、&lt;code&gt;--binstubs&lt;/code&gt;オプションで生成された&lt;code&gt;bin&lt;/code&gt;ディレクトリにパスを渡す。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;--binstubs&lt;/code&gt;オプションは&lt;code&gt;bundle install&lt;/code&gt;でインストールされたライブラリの実行スクリプトを&lt;code&gt;bin&lt;/code&gt;ディレクトリのなかに生成する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://beginrescueend.com/integration/bundler/&quot;&gt;http://beginrescueend.com/integration/bundler/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>bundle execを使わずにすむ方法</title>
    <updated>2012-03-05T16:50:00+00:00</updated>
    <dc:date>2012-03-05T16:50:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/102/</id>
    <link href="https://blog.naoty.dev/102/"/>
    <summary>&lt;pre lang=&quot;ruby:config/initializers/time_formats.rb&quot;&gt;&lt;code&gt;# coding: UTF-8
Time::DATE_FORMATS[:human] = lambda {|date|
  seconds = (Time.now - date).round;
  days    = seconds / (60 * 60 * 24); return &quot;#{date.month}月#{date.day}日&quot; if days &amp;gt; 0;
  hours   = seconds / (60 * 60);      return &quot;#{hours}時間前&quot; if hours &amp;gt; 0;
  minutes = seconds / 60;             return &quot;#{minutes}分前&quot; if minutes &amp;gt; 0;
  return &quot;#{seconds}秒前&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;naotyA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:created_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;naotyB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:created_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;naotyC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:created_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;naotyA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;5分前&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;naotyB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;5時間前&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;naotyC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;2月25日&quot;&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>Railsで時間を「◯分前」「◯時間前」にフォーマットする</title>
    <updated>2012-03-01T19:41:00+00:00</updated>
    <dc:date>2012-03-01T19:41:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/101/</id>
    <link href="https://blog.naoty.dev/101/"/>
    <summary>&lt;p&gt;background-imageで画像を参照したいとき、sass-railsが提供するヘルパーを使うと簡単に書ける。&lt;/p&gt;
&lt;pre lang=&quot;scss:app/assets/stylesheets/application.css.scss&quot;&gt;&lt;code&gt;span.naoty {
  background-image: image-url(&quot;naoty.png&quot;) //=&amp;gt; url(/assets/naoty.png)
  // or backgroud-image: url(image-path(&quot;naoty.png&quot;))
}
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>scss内でimageを参照したいとき</title>
    <updated>2012-03-01T00:46:00+00:00</updated>
    <dc:date>2012-03-01T00:46:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/100/</id>
    <link href="https://blog.naoty.dev/100/"/>
    <summary>&lt;p&gt;nginxについての投稿が少なめなので、投稿してみる。&lt;br&gt;
拙者のブログはJekyllで構築してるのですが、htmlを返すだけなので、locationブロックとかめんどくさい設定はしなくても、こんな感じで動きます。&lt;/p&gt;
&lt;pre lang=&quot;nginx:nginx.conf&quot;&gt;&lt;code&gt;# ...

http {
    # ...
    include sites/*.conf;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;nginx:sites/blog.conf&quot;&gt;&lt;code&gt;server {
    server_name naoty.jp;
    listen 80;
    root /var/www/blog;
}
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>nginx.conf for Jekyll</title>
    <updated>2012-02-21T16:12:00+00:00</updated>
    <dc:date>2012-02-21T16:12:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/99/</id>
    <link href="https://blog.naoty.dev/99/"/>
    <summary>&lt;p&gt;Mongodbに大量のデータをぶち込もうとすると、「Exceded maximum insert size of 16,000,000 bytes」などとエラーを吐くので、入るまで半分にしてねじ込み続ける容赦無いスクリプトを書いた。&lt;/p&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;yousyanai_insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;NaotyModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;half_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yousyanai_insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;half_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>容赦無いCollection Insert</title>
    <updated>2012-02-21T15:59:00+00:00</updated>
    <dc:date>2012-02-21T15:59:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/98/</id>
    <link href="https://blog.naoty.dev/98/"/>
    <summary>&lt;pre lang=&quot;ruby:config/deploy.rb&quot;&gt;&lt;code&gt;namespace :logging do
  task :tail_unicorn do
    run &quot;tail -f #{shared_path}/log/unicorn.log&quot; do |channel, stream, data|
      trap(&quot;INT&quot;) { puts &quot;Interupted!&quot;; exit 0; }
      puts &quot;=== #{channel[:host]} ===&quot;
      puts data
      break if stream == :err
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/5218902/tail-production-log-with-capistrano-how-to-stop-it&quot;&gt;StackOverflowの投稿&lt;/a&gt;のほぼコピペですが、非常に便利なので共有です。&lt;/p&gt;</summary>
    <title>capistranoでtail -f</title>
    <updated>2012-01-17T23:01:00+00:00</updated>
    <dc:date>2012-01-17T23:01:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/97/</id>
    <link href="https://blog.naoty.dev/97/"/>
    <summary>&lt;p&gt;自作のブログを作りましたので、こちらに移行します。&lt;br&gt;
&lt;a href=&quot;http://naoty.jp&quot;&gt;http://naoty.jp&lt;/a&gt;&lt;/p&gt;</summary>
    <title>ブログを移転しました。</title>
    <updated>2012-01-10T22:28:00+00:00</updated>
    <dc:date>2012-01-10T22:28:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/96/</id>
    <link href="https://blog.naoty.dev/96/"/>
    <summary>&lt;p&gt;環境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;さくらVPS 512&lt;/li&gt;
&lt;li&gt;CentOS&lt;/li&gt;
&lt;li&gt;naoty@local：ローカルの作業用ユーザー&lt;/li&gt;
&lt;li&gt;root@sakura：さくらVPSのroot&lt;/li&gt;
&lt;li&gt;naoty@sakura：さくらVPSの作業用ユーザー&lt;/li&gt;
&lt;li&gt;使いまわしてる設定ファイル：&lt;a href=&quot;https://github.com/naoty/dotfiles&quot;&gt;https://github.com/naoty/dotfiles&lt;/a&gt; ブランチはserver&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;sshでrootにログイン&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;naoty@local% ssh-keygen -R xxx.xxx.xxx.xxx
naoty@local% ssh root@xxx.xxx.xxx.xxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作業用ユーザーの作成&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@sakura% useradd naoty
root@sakura% passwd naoty
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;su, sudoをwheelのみに限定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@sakura% usermod -G wheel naoty
root@sakura% visudo
root@sakura% vi /etc/login.defs
root@sakura% exit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;公開鍵でのログインに変更&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;naoty@local% scp .ssh/id_rsa.pub naoty@xxx.xxx.xxx.xxx:~
naoty@local% ssh naoty@xxx.xxx.xxx.xxx
naoty@sakura% mkdir .ssh
naoty@sakura% chmod 700 .ssh
naoty@sakura% mv id_rsa.pub .ssh/authorized_keys
naoty@sakura% chmod 600 .ssh/authorized_keys
naoty@sakura% sudo vi /etc/ssh/sshd_config
naoty@sakura% sudo /etc/init.d/sshd restart
naoty@sakura% exit
naoty@local% ssh sakura
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;yumでgit, zsh, vimをインストール&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;naoty@sakura% sudo yum -y update
naoty@sakura% sudo rpm -ivh http://repo.webtatic.com/yum/centos/5/latest.rpm
naoty@sakura% sudo yum -y --enablerepo=webtatic install git zsh vim-enhanced
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使い回してる設定ファイルを適用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;naoty@sakura% ssh-keygen -t rsa
naoty@sakura% cat .ssh/id_rsa.pub
# githubにsakuraの公開鍵を設定
naoty@sakura% git clone git@github.com:naoty/dotfiles.git
naoty@sakura% cd dotfiles
naoty@sakura% git checkout server
naoty@sakura% cd
naoty@sakura% ln -s dotfiles/.gitconfig ~/.gitconfig
naoty@sakura% ln -s dotfiles/.gitignore_global ~/.gitignore_global
naoty@sakura% ln -s dotfiles/.vimrc ~/.vimrc
naoty@sakura% mkdir -p .vim/colors
naoty@sakura% exit
naoty@local% scp -P sshd .vim/colors/railscasts.vim naoty@xxx.xxx.xxx.xxx:.vim/colors/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;パスを通す&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;naoty@local% ssh sakura
naoty@sakura% vi .bash_profile
naoty@sakura% source .bash_profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;iptablesの設定（とりあえずsshと内部からのコネクションのみ）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;naoty@sakura% sudo iptables -A INPUT -p tcp --dport sshd -j ACCEPT
naoty@sakura% sudo iptables -A INPUT -m state --state ESTABLISHED -j ACCEPT
naoty@sakura% sudo iptables -P INPUT DROP
naoty@sakura% sudo /etc/init.d/iptables save
naoty@sakura% sudo /etc/init.d/iptables restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;rvmのインストール&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;naoty@sakura% cp /etc/pki/tls/certs/ca-bundle.crt .
naoty@sakura% sudo curl http://curl.haxx.se/ca/cacert.pem -o /etc/pki/tls/certs/ca-bundle.crt
naoty@sakura% sudo bash -s stable &amp;lt; curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer )
naoty@sakura% su -
root@sakura% usermod -G wheel,rvm naoty
root@sakura% exit
naoty@sakura% exit
naoty@local% ssh sakura
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;rubyのインストール&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;naoty@sakura% sudo yum install -y gcc-c++ patch readline readline-devel zlib zlib-devel libyaml-devel libffi-devel openssl-devel make bzip2 autoconf automake libtool bison
naoty@sakura% rvm install 1.9.3
naoty@sakura% rvm use 1.9.3 --default
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>さくらVPS作業メモ（rubyインストールまで）</title>
    <updated>2012-01-03T00:14:00+00:00</updated>
    <dc:date>2012-01-03T00:14:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/95/</id>
    <link href="https://blog.naoty.dev/95/"/>
    <summary>&lt;p&gt;例えば、家PCとオフィスPCで.vimrcと.zshrcを共有したいとします。&lt;/p&gt;
&lt;p&gt;（例：家PC）&lt;br&gt;
１．dotfilesというディレクトリを用意&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;naoty@home% cd
naoty@home% mkdir dotfiles
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;２．git init&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;naoty@home% cd dotfiles
naoty@home% git init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;３．.vimrcや.zshrcなどをdotfilesに移動&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;naoty@home% mv ~/.vimrc dotfiles/
naoty@home% mv ~/.zshrc dotfiles/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;４．HOMEにシンボリックリンクを作成する&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;naoty@home% ln -s .vimrc ~/.vimrc
naoty@home% ln -s .zshrc ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;５．addしてcommit&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;naoty@home% git add .
naoty@home% git commit -m '.vimrcと.zshrcを追加'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;６．githubにpush&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;naoty@home% git remote add github git@github.com:naoty:dotfiles.git
naoty@home% git push github master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（例：オフィスPC）&lt;br&gt;
７．githubからdotfilesをcloneしてくる&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;naoty@office% cd
naoty@office% git clone git@github.com:naoty:dotfiles.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;８．HOMEにシンボリックリンクを作成する&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;naoty@office% ln -s dotfiles/.vimrc ~/.vimrc
naoty@office% ln -s dotfiles/.zshrc ~/.zshrc
naoty@office% source .zshrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;９．オフィス用の設定のためにブランチを作成&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;naoty@office% cd dotfiles
naoty@office% git checkout -b office
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;※共通する設定はmasterブランチで管理&lt;/p&gt;</summary>
    <title>dotfilesをgithubで管理する</title>
    <updated>2011-12-29T10:32:00+00:00</updated>
    <dc:date>2011-12-29T10:32:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/94/</id>
    <link href="https://blog.naoty.dev/94/"/>
    <summary>&lt;p&gt;　どうも、naotyです。年末なので、他のエンジニアの方々にならって、僕も一年のまとめをしようと思います。&lt;/p&gt;
&lt;p&gt;　昨年5月に、就活にあきてエンジニアになろうと思ってから1年7ヶ月後、おかげさまで&lt;a href=&quot;http://himazinz.com&quot;&gt;ひとつのwebサービス&lt;/a&gt;を公開できるまでになりました。お世話になった方々への感謝の意味と、あと昔の自分と同じように、これからエンジニアの道を歩み始めようとしているあなたへのエールの意味を込めて、これまで読んできた技術書のなかでオススメのものを10冊まとめてみました。ぜひ参考にしてください。&lt;/p&gt;
&lt;p&gt;HTML/CSS&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4883375412/hatena-hamazou-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51kaSqyqOvL._SL160_.jpg&quot; alt=&quot;HTML/XHTML&amp;amp;スタイルシートレッスンブック―ステップバイステップ形式でマスターできる&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;HTML/XHTML&amp;amp;スタイルシートレッスンブック―ステップバイステップ形式でマスターできる&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4883375412/hatena-hamazou-22/&quot;&gt;HTML/XHTML&amp;amp;スタイルシートレッスンブック―ステップバイステップ形式でマスターできる&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: エビスコム&lt;/li&gt;
&lt;li&gt;出版社/メーカー: ソシム&lt;/li&gt;
&lt;li&gt;発売日: 2007/06/20&lt;/li&gt;
&lt;li&gt;メディア: 単行本&lt;/li&gt;
&lt;li&gt;購入: 29人 クリック: 403回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4883375412&quot;&gt;この商品を含むブログ (39件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　一番はじめに買った本。なにを買っていいのかわからなかったので、とりあえずAmazonのレビューが高いものを買いました。最初なので、別になんでもいいような気もします。&lt;/p&gt;
&lt;p&gt;Ruby&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4797357401/hatena-hamazou-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/41t7GQ3peRL._SL160_.jpg&quot; alt=&quot;たのしいRuby 第3版&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;たのしいRuby 第3版&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4797357401/hatena-hamazou-22/&quot;&gt;たのしいRuby 第3版&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: 高橋征義,後藤裕蔵,まつもとゆきひろ&lt;/li&gt;
&lt;li&gt;出版社/メーカー: ソフトバンククリエイティブ&lt;/li&gt;
&lt;li&gt;発売日: 2010/03/31&lt;/li&gt;
&lt;li&gt;メディア: 単行本&lt;/li&gt;
&lt;li&gt;購入: 11人 クリック: 326回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4797357401&quot;&gt;この商品を含むブログ (63件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　たのしいですよ、Ruby。ただ、最初はRubyの環境を整えるまでで挫折する可能性が高いですね、&quot;Windows&quot;の場合は。ええ。&lt;/p&gt;
&lt;p&gt;Rails&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4774146633/hatena-hamazou-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51%2BUj1CI5tL._SL160_.jpg&quot; alt=&quot;Ruby on Rails 3 アプリケーションプログラミング&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;Ruby on Rails 3 アプリケーションプログラミング&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4774146633/hatena-hamazou-22/&quot;&gt;Ruby on Rails 3 アプリケーションプログラミング&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: 山田祥寛&lt;/li&gt;
&lt;li&gt;出版社/メーカー: 技術評論社&lt;/li&gt;
&lt;li&gt;発売日: 2011/05/12&lt;/li&gt;
&lt;li&gt;メディア: 大型本&lt;/li&gt;
&lt;li&gt;購入: 22人 クリック: 597回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4774146633&quot;&gt;この商品を含むブログ (29件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　僕が最初にRailsと出会った頃は、まだRails2.3.6とかだったと思いますが、Rails3以降では、この本が一番分かりやすいし、初心者でも分かってきた人にも合ってるいい本だと思います。でも、will_paginateを紹介してるところで、「そこはKaminariだろうがぁ！」と言いたいところ。&lt;br&gt;
Railsについては、いろんなサイトやブログで情報が発信されているし、Rails自体もいろんなことを覚えなくてはいけないため、本だけではとても十分とは言えません。ググりましょう。&lt;/p&gt;
&lt;p&gt;JavaScript(jQuery)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4844329618/hatena-hamazou-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51m-3d9s9WL._SL160_.jpg&quot; alt=&quot;jQuery逆引きマニュアル Webデザインの現場で役立つ基本と実践&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;jQuery逆引きマニュアル Webデザインの現場で役立つ基本と実践&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4844329618/hatena-hamazou-22/&quot;&gt;jQuery逆引きマニュアル Webデザインの現場で役立つ基本と実践&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: 西畑一馬,中村享介,徳田和規&lt;/li&gt;
&lt;li&gt;出版社/メーカー: インプレスジャパン&lt;/li&gt;
&lt;li&gt;発売日: 2010/12/17&lt;/li&gt;
&lt;li&gt;メディア: 単行本（ソフトカバー）&lt;/li&gt;
&lt;li&gt;購入: 3人 クリック: 166回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4844329618&quot;&gt;この商品を含むブログ (10件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　個人的な意見では、なまのJavaScriptの参考書（サイ本など）から勉強しようとすると間違いなく挫折すると思ってます。CSSが分かってきたら、たぶんjQueryもなんとか理解できると思ってます。少なくともサイ本よりは。この本を読む前に、すでにサイ本を挫折するなどして、JavaScriptの雰囲気はわかっていたということもあるので、この本だけではJavaScriptの理解は不十分だと思います。特にTitaniumなんかやる場合は、jQueryじゃなくてサイ本的なのが必要かもしれません。&lt;/p&gt;
&lt;p&gt;ネットワーク&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/477414522X/hatena-hamazou-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/41GW48jUPbL._SL160_.jpg&quot; alt=&quot;小悪魔女子大生のサーバエンジニア日記 ――インターネットやサーバのしくみが楽しくわかる&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;小悪魔女子大生のサーバエンジニア日記 ――インターネットやサーバのしくみが楽しくわかる&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/477414522X/hatena-hamazou-22/&quot;&gt;小悪魔女子大生のサーバエンジニア日記 ――インターネットやサーバのしくみが楽しくわかる&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: aico,株式会社ディレクターズ,村井純&lt;/li&gt;
&lt;li&gt;出版社/メーカー: 技術評論社&lt;/li&gt;
&lt;li&gt;発売日: 2011/01/27&lt;/li&gt;
&lt;li&gt;メディア: 単行本（ソフトカバー）&lt;/li&gt;
&lt;li&gt;購入: 10人 クリック: 1,005回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/477414522X&quot;&gt;この商品を含むブログ (50件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　紹介した10冊のなかで一番読みやすいです。インターネットの仕組みの基本的なこと（IPアドレス、MACアドレス、DNSなどなど）をかわいいイラストをふんだんに使って説明している本です。webサービスをリリースするにあたって直接ためになったわけではないんですが、ド素人だった僕には「そもそもインターネットとは？」的な部分の理解ができてよかったです。&lt;/p&gt;
&lt;p&gt;サーバー全般&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4774135666/hatena-hamazou-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51uK4ACymiL._SL160_.jpg&quot; alt=&quot;[24時間365日] サーバ/インフラを支える技術 ?スケーラビリティ、ハイパフォーマンス、省力運用 (WEB+DB PRESS plusシリーズ)&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;[24時間365日] サーバ/インフラを支える技術 ?スケーラビリティ、ハイパフォーマンス、省力運用 (WEB+DB PRESS plusシリーズ)&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4774135666/hatena-hamazou-22/&quot;&gt;[24時間365日] サーバ/インフラを支える技術 ?スケーラビリティ、ハイパフォーマンス、省力運用 (WEB+DB PRESS plusシリーズ)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: 安井真伸,横川和哉,ひろせまさあき,伊藤直也,田中慎司,勝見祐己&lt;/li&gt;
&lt;li&gt;出版社/メーカー: 技術評論社&lt;/li&gt;
&lt;li&gt;発売日: 2008/08/07&lt;/li&gt;
&lt;li&gt;メディア: 単行本（ソフトカバー）&lt;/li&gt;
&lt;li&gt;購入: 122人 クリック: 2,018回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4774135666&quot;&gt;この商品を含むブログ (278件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　「サーバー、サーバーっていうけど、サーバーってなんなの？」っていうときに読んだ本です。上で紹介した本に比べると、いきなり難しくなります。なんとなく負荷分散とか、そもそも負荷って何よ？ってところを理解できました。&lt;/p&gt;
&lt;p&gt;webサーバー（nginx）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4048702270/hatena-hamazou-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51xpswg%2BkkL._SL160_.jpg&quot; alt=&quot;ハイパフォーマンスHTTPサーバ Nginx入門&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;ハイパフォーマンスHTTPサーバ Nginx入門&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4048702270/hatena-hamazou-22/&quot;&gt;ハイパフォーマンスHTTPサーバ Nginx入門&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: Clement Nedelcu,長尾高弘&lt;/li&gt;
&lt;li&gt;出版社/メーカー: アスキー・メディアワークス&lt;/li&gt;
&lt;li&gt;発売日: 2011/04/21&lt;/li&gt;
&lt;li&gt;メディア: 大型本&lt;/li&gt;
&lt;li&gt;購入: 2人 クリック: 589回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4048702270&quot;&gt;この商品を含むブログ (15件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　どうやらApacheよりnginxの方が速いし設定もラクというのを聞いてnginxを使っているんですが、いまのところ日本語で書かれたnginxの本はこれしかないような気がします。インストールから細かい設定まで詳しく説明されています。これと合わせて、nginxのwikiも参考にされるといいかと思います。&lt;/p&gt;
&lt;p&gt;DB（MySQL）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4798120723/hatena-hamazou-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51fSSetl7gL._SL160_.jpg&quot; alt=&quot;Linux-DB システム構築/運用入門 (DB Magazine SELECTION)&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;Linux-DB システム構築/運用入門 (DB Magazine SELECTION)&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4798120723/hatena-hamazou-22/&quot;&gt;Linux-DB システム構築/運用入門 (DB Magazine SELECTION)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: 松信嘉範&lt;/li&gt;
&lt;li&gt;出版社/メーカー: 翔泳社&lt;/li&gt;
&lt;li&gt;発売日: 2009/09/17&lt;/li&gt;
&lt;li&gt;メディア: 単行本（ソフトカバー）&lt;/li&gt;
&lt;li&gt;購入: 50人 クリック: 3,369回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4798120723&quot;&gt;この商品を含むブログ (31件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　これは最初から読んですぐに挫折したのですが、途中のインデックスに関する説明がとてつもなくわかりやすかったので、ピックアップしました。SQL文の解説とかはのってませんので、まるっきりの初心者にはオススメできません。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4774142948/hatena-hamazou-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/41oqE-9dM2L._SL160_.jpg&quot; alt=&quot;エキスパートのためのMySQL[運用+管理]トラブルシューティングガイド&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;エキスパートのためのMySQL[運用+管理]トラブルシューティングガイド&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4774142948/hatena-hamazou-22/&quot;&gt;エキスパートのためのMySQL[運用+管理]トラブルシューティングガイド&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: 奥野幹也&lt;/li&gt;
&lt;li&gt;出版社/メーカー: 技術評論社&lt;/li&gt;
&lt;li&gt;発売日: 2010/06/12&lt;/li&gt;
&lt;li&gt;メディア: 大型本&lt;/li&gt;
&lt;li&gt;購入: 11人 クリック: 175回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4774142948&quot;&gt;この商品を含むブログ (24件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　はじめてのLinuxにMySQLをインストールする際に参考にしました。rpmでのインストールから、my.cnfの書き方を参考にしましたが、まだ1/3も読んでません。おそらくこれからサービスを本格的に運用するにあたって真価を発揮すると思われる一冊です。&lt;/p&gt;
&lt;p&gt;セキュリティ&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4797361190/hatena-hamazou-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/41lX6Fg5KpL._SL160_.jpg&quot; alt=&quot;体系的に学ぶ 安全なWebアプリケーションの作り方　脆弱性が生まれる原理と対策の実践&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;体系的に学ぶ 安全なWebアプリケーションの作り方　脆弱性が生まれる原理と対策の実践&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4797361190/hatena-hamazou-22/&quot;&gt;体系的に学ぶ 安全なWebアプリケーションの作り方　脆弱性が生まれる原理と対策の実践&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: 徳丸浩&lt;/li&gt;
&lt;li&gt;出版社/メーカー: ソフトバンククリエイティブ&lt;/li&gt;
&lt;li&gt;発売日: 2011/03/03&lt;/li&gt;
&lt;li&gt;メディア: 大型本&lt;/li&gt;
&lt;li&gt;購入: 99人 クリック: 3,887回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4797361190&quot;&gt;この商品を含むブログ (120件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　CDが付属されていて、読みながら実践して確認できるタイプの本です。実践しながらなのでとてもわかりやすいし、実際にセキュリティの穴を確認できるので危機感をもてます。また、セキュリティ上の問題が類型化されているため、体系的に学ぶことができて初心者でも読みやすかったです。また、PHPが中心ですが、Rubyの僕でも問題はありませんでした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　オススメの10冊は以上です。ここにはないけど、Linuxの初歩やバージョン管理システムなど、まだまだ覚えることはたくさんあります。もちろん、技術書を読んだだけでは、プログラムは書けるようにはなりません。実践していく中で、こうした本に載った知識を吸収していくことが必要だと思います。&lt;/p&gt;
&lt;p&gt;　それでは、（なんかエラそうだけど）初心者の方がいち早く成長して、素敵なプロダクトをリリースすることを期待しています。差し支えなければ、&lt;a href=&quot;http://himazinz.com&quot;&gt;himazinz.com&lt;/a&gt;も宜しくお願い致します。&lt;/p&gt;</summary>
    <title>HTMLから始めたド素人がwebサービスをリリースするまでに読んだオススメの本10冊</title>
    <updated>2011-12-08T18:23:00+00:00</updated>
    <dc:date>2011-12-08T18:23:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/93/</id>
    <link href="https://blog.naoty.dev/93/"/>
    <summary>&lt;p&gt;Gemfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gem 'devise'
gem 'omniauth'
gem 'twitter'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;config/initialisers/devise.rb&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Devise.setup do |config|
  config.omniauth :twitter, 'CONSUMER KEY', 'CONSUMER SECRET'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;config/initializers/twitter.rb&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Twitter.configure do |config|
  config.consumer_token = Devise.omniauth_configs[:twitter].args.first
  config.consumer_secret = Devise.omniauth_configs[:twitter].args.last
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;app/models/user.rb&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class User &amp;lt; ActiveRecord::Base

  devise :omniauthable
  attr_accessor :client

  def follower_ids
    set_client
    @client.follower_ids.ids
  end

  private

  def set_client
    @client = Twitter.new(oauth_token: token, oauth_token_secret: secret)
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;補足：コントローラーでAPIを呼び出して結果をmemcachedにキャッシュする&lt;/p&gt;
&lt;p&gt;Gemfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gem 'devise'
gem 'omniauth'
gem 'twitter'
gem 'dalli'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;config/environments/production.rb&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SampleApp::Application.configure do
  config.cache_store = :dalli_store
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;app/controllers/users_controller.rb&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class UsersController &amp;lt; ApplicationController

  def index
    follower_ids = Rails.cache.fetch(&quot;#{current_user.name}_follower_ids&quot;) { current_user.follower_ids }
    # ...
  end

end
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>Rails3.1でTwitter認証しTwitter APIを呼び出す</title>
    <updated>2011-12-03T21:52:00+00:00</updated>
    <dc:date>2011-12-03T21:52:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/92/</id>
    <link href="https://blog.naoty.dev/92/"/>
    <summary>&lt;p&gt;Twitter上のヒマジンをマッチングさせるサービス、himazinzを昨日リリースしました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://f.hatena.ne.jp/naoty_k/20111127011956&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20111127/20111127011956.png&quot; alt=&quot;f:id:naoty_k:20111127011956p:image:w640&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;f:id:naoty_k:20111127011956p:image:w640&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;まだ試験的なリリースなので、もしかしたらクローズするかもしれません。&lt;/p&gt;
&lt;p&gt;１．趣旨&lt;br&gt;
himazinzはtwitter上でヒマジンをマッチングさせるためのサービスです。himazinzを使う人は、自分と同じ時間にヒマな人を一瞬にして探し出すことができます。himazinzは、「なんかヒマだなーだれかヒマなヤツがいれば遊びたいなぁ」とか「だれかランチに付き合ってくれる人いないかな〜？」とか「あこがれのあのひとにtwitterでアポとりたいけど、都合のいいスケジュールっていつだろう？」とか、そんなtwitter上のスケジュール調整にまつわる問題をすべて解決します。&lt;/p&gt;
&lt;p&gt;２．構成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;さくらVPS512（月1000円弱）&lt;/li&gt;
&lt;li&gt;言語：Ruby 1.9.3&lt;/li&gt;
&lt;li&gt;フレームワーク：Rails 3.1.1&lt;/li&gt;
&lt;li&gt;webサーバー：nginx&lt;/li&gt;
&lt;li&gt;appサーバー：unicorn&lt;/li&gt;
&lt;li&gt;DB：MySQL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;３．開発&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;だいたい2ヶ月程度&lt;/li&gt;
&lt;li&gt;vim&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;bitbucketの無料privateリポジトリ（これはかなりオススメ）&lt;/li&gt;
&lt;li&gt;rspec&lt;/li&gt;
&lt;li&gt;ジョブズの自伝（モチベアップに便利）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;４．これから&lt;br&gt;
（機能面）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ヒマの公開範囲の制限機能（フォローしてる人、フォロワー、リストなど）&lt;/li&gt;
&lt;li&gt;iPhoneアプリ（来年春頃にはなんとか出したい）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（開発・運用面）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一日のアクセス数などをとりあえずgoogle analyticsで計測&lt;/li&gt;
&lt;li&gt;webサーバーやDBサーバーの設定をすすめる&lt;/li&gt;
&lt;li&gt;テストしっかり書く&lt;/li&gt;
&lt;li&gt;めんどくさくなったらcapistrano導入&lt;/li&gt;
&lt;li&gt;監視体制もいれる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これが初めてのwebアプリケーションということで、不完全なところがまだまだ多いですが、ひとつずつ勉強して改善してまいります。ので、どうかよろしくお願いします。&lt;/p&gt;</summary>
    <title>himzinz.comをリリースしました</title>
    <updated>2011-11-26T01:54:00+00:00</updated>
    <dc:date>2011-11-26T01:54:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/91/</id>
    <link href="https://blog.naoty.dev/91/"/>
    <summary>&lt;pre lang=&quot;ruby:config/initializers/time_formats.rb&quot;&gt;&lt;code&gt;Time::DATE_FORMATS[:simple_time]     = lambda {|time| time = time.to_datetime; &quot;#{time.hour}:#{sprintf('%02d', time.minute)}&quot; }
Time::DATE_FORMATS[:simple_datetime] = lambda {|time| time = time.to_datetime; &quot;#{time.month}/#{time.day} #{time.hour}:#{sprintf('%02d', time.minute)}&quot; }
&lt;/code&gt;&lt;/pre&gt;
&lt;pre lang=&quot;ruby&quot; class=&quot;highlight highlight-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:simple_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;0:00&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:simple_datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;11/14 0:00&quot;&lt;/span&gt;
&lt;/pre&gt;</summary>
    <title>Time::DATE_FORMATS</title>
    <updated>2011-11-13T23:58:00+00:00</updated>
    <dc:date>2011-11-13T23:58:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/90/</id>
    <link href="https://blog.naoty.dev/90/"/>
    <summary>&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;CentOS 5.5 x86_64&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;naoty$ sudo bash &amp;lt; curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer )
naoty$ su -
root# usermod -G wheel,rvm naoty
root# exit
naoty$ exit
local$ ssh
naoty$ sudo yum install -y gcc-c++ patch readline readline-devel zlib zlib-devel libyaml-devel libffi-devel openssl-devel make bzip2 autoconf automake libtool bison
naoty$ rvm install 1.9.3
...
Compiling yaml in /usr/local/rvm/src/yaml-0.1.4.
ERROR: Error running 'make ', please read /usr/local/rvm/log/ruby-1.9.3-p0/yaml/make.log
Installing yaml to /usr/local/rvm/usr
ERROR: Error running 'make install', please read /usr/local/rvm/log/ruby-1.9.3-p0/yaml/make.install.log
...
Install of ruby-1.9.3-p0 - #complete
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;naoty$ less /usr/local/rvm/log/ruby-1.9.3-p0/yaml/make.log
[2011-11-05 18:32:56] make 
make all-recursive
make[1]: ディレクトリ `/usr/local/rvm/src/yaml-0.1.4' に入ります
Making all in include
make[2]: ディレクトリ `/usr/local/rvm/src/yaml-0.1.4/include' に入ります
make[2]: `all' に対して行うべき事はありません.
make[2]: ディレクトリ `/usr/local/rvm/src/yaml-0.1.4/include' から出ます
Making all in src
make[2]: ディレクトリ `/usr/local/rvm/src/yaml-0.1.4/src' に入ります
if /bin/sh ../libtool --tag=CC --mode=compile gcc -DHAVE_CONFIG_H -I. -I. -I.. -I../include -g -O2 -MT api.lo -MD -MP -MF &quot;.deps/api.Tpo&quot; -c -o api.lo api.c; \
        then mv -f &quot;.deps/api.Tpo&quot; &quot;.deps/api.Plo&quot;; else rm -f &quot;.deps/api.Tpo&quot;; exit 1; fi
../libtool: line 466: CDPATH: command not found
../libtool: line 1144: func_opt_split: command not found
libtool: Version mismatch error. This is libtool 2.2.6b Debian-2.2.6b-2ubuntu1, but the
libtool: definition of this LT_INIT comes from an older release.
libtool: You should recreate aclocal.m4 with macros from libtool 2.2.6b Debian-2.2.6b-2ubuntu1
libtool: and run autoconf again.
make[2]: *** [api.lo] エラー 1
make[2]: ディレクトリ `/usr/local/rvm/src/yaml-0.1.4/src' から出ます
make[1]: *** [all-recursive] エラー 1
make[1]: ディレクトリ `/usr/local/rvm/src/yaml-0.1.4' から出ます
make: *** [all] エラー 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;なにこれ？(´･ω･`)&lt;/p&gt;</summary>
    <title>rvm installでyamlがmakeできない件</title>
    <updated>2011-11-05T18:42:00+00:00</updated>
    <dc:date>2011-11-05T18:42:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/89/</id>
    <link href="https://blog.naoty.dev/89/"/>
    <summary>&lt;p&gt;Gemfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;source 'http://rubygems.org'

gem 'rails', '3.1.1'

group :assets do
  gem 'sass-rails', '~&amp;gt; 3.1.4'
  gem 'coffee-rails', '~&amp;gt; 3.1.1'
  gem 'uglifier', '&amp;gt;= 1.0.3'
end

gem 'jquery-rails'

group :development, :test do
  gem 'turn', :require =&amp;gt; false
end

group :production do
  gem 'therubyracer'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上のようなGemfileがあった場合、Bundler.requireによって次のような結果が得られる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Bundler.require(:default)
#=&amp;gt; rails, jquery-rails
Bundler.require(:default, :assets)
#=&amp;gt; rails, jquery-rails, sass-rails, coffee-rails, uglifier
Bundler.require(:default, :assets, :development)
#=&amp;gt; rails, jquery-rails, sass-rails, coffee-rails, uglifier, turn

Bundler.require(*Rails.groups(:assets =&amp;gt; %w(development test)))
#=&amp;gt; Bundler.require(:default, :development, :assets) # for Rails.env == 'development'
#=&amp;gt; rails, jquery-rails, sass-rails, coffee-rails, uglifier, turn

#=&amp;gt; Bundler.require(:default, :production) # for Rails.env == 'production'
#=&amp;gt; rails, jquery-rails, therubyracer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bundler.requireの仕様を理解していれば、config/application.rbのコメントの説明も理解できるだろう。&lt;/p&gt;
&lt;p&gt;config/application.rb&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if defined?(Bundler)
  # If you precompile assets before deploying to production, use this line
  Bundler.require(*Rails.groups(:assets =&amp;gt; %w(development test)))
  # If you want your assets lazily compiled in production use this line
  # Bundler.require(:default, :assets, Rails.env)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;production環境でaseetsをどのタイミングでプリコンパイルするかで、この設定を変更する必要があるようだ。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Bundler.require(*Rails.groups(:assets =&amp;gt; %w(development test)))
#=&amp;gt; production環境では:assetsはロードされないので、デプロイ前に手動でプリコンパイルしておく必要がある

Bundler.require(:default, :assets, Rails.env)
#=&amp;gt; production環境でも:assetsをロードするので、自動でプリコンパイルしてくれる
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>実行環境とBundler.require</title>
    <updated>2011-11-02T00:24:00+00:00</updated>
    <dc:date>2011-11-02T00:24:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/88/</id>
    <link href="https://blog.naoty.dev/88/"/>
    <summary>&lt;pre&gt;&lt;code&gt;class ApplicationController &amp;lt; ActionController::Base
  USERS = { 'naoty' =&amp;gt; 'coolguy' }

  protect_from_forgery
  before_filter { digest_authentication if Rails.env.production? }

  private

  def digest_authentication
    authenticate_or_request_with_http_digest do |name|
      USERS[name]
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ポイントは3つ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rails.env.production?でproduction環境かどうかを判定できる。同様にRails.env.development?なんかもできる。&lt;/li&gt;
&lt;li&gt;before_filterにブロックを渡すことで、条件付きでフィルタを適用できる。&lt;/li&gt;
&lt;li&gt;authenticate_or_request_with_http_digestでBasic認証（authenticate_or_request_with_http_basicメソッド）より安全な認証を実装でき、かつ複数のパスを簡単に扱えるようになる。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>production環境のみダイジェスト認証を有効にする</title>
    <updated>2011-10-31T20:41:00+00:00</updated>
    <dc:date>2011-10-31T20:41:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/87/</id>
    <link href="https://blog.naoty.dev/87/"/>
    <summary>&lt;blockquote&gt;
&lt;p&gt;環境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rails 3.1.1&lt;/li&gt;
&lt;li&gt;factory_girl 2.2.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;　requireでfactory_girlとfactoryファイルすべてを読み込むと、seeds.rbでもfactory_girlが使えます。seeds.rbでfactory_girlを使うのは、テストと同じデータをブラウザでも確認できる、seeds.rbを非常に簡潔に書くことができる、といった利点があります。&lt;/p&gt;
&lt;p&gt;以下の例では、このようなデータを作成する例です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特定のユーザーを含む6人のUserインスタンスを作成&lt;/li&gt;
&lt;li&gt;100件のArticleインスタンスを作成&lt;/li&gt;
&lt;li&gt;100件のArticleインスタンスはそれぞれ、6人のうち1つのuser_idをランダムにふられる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;db/seeds.rb&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;require 'factory_girl'
Dir[Rails.root.join('spec/support/factories/*.rb')].each {|f| require f }

User.delete_all
Article.delete_all

FactoryGirl.create(:naoty)
FactoryGirl.create_list(:user, 5)
FactoryGirl.create_list(:article, 100)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;spec/support/factories/users.rb&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FactoryGirl.define do
  factory :user do
    sequence(:name) {|n| &quot;user #{n}&quot; }
  end

  factory :naoty do
    name 'naoty'
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;spec/support/factories/articles.rb&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FactoryGirl.define do
  factory :article do
    sequence(:title) {|n| &quot;sample title #{n}&quot; }
    user_id { User.all.to_a.map(&amp;amp;:id).sample }
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;naoty$ rake db:seed
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>factory_girlを使ってスマートにseedデータを作成する</title>
    <updated>2011-10-30T20:24:00+00:00</updated>
    <dc:date>2011-10-30T20:24:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/86/</id>
    <link href="https://blog.naoty.dev/86/"/>
    <summary>&lt;p&gt;苦労の末、とうとうサーバーでRailsが動いたので、記念メモ。&lt;br&gt;
どんどん加筆していく予定です。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;プラン：さくらのVPS 512（いちばん安いやつ。月980円）&lt;/li&gt;
&lt;li&gt;OS：CentOS 5.5 x86_64&lt;/li&gt;
&lt;li&gt;ruby 1.9.2&lt;/li&gt;
&lt;li&gt;Rails 3.1.0&lt;/li&gt;
&lt;li&gt;webサーバー：nginx&lt;/li&gt;
&lt;li&gt;appサーバー：unicorn&lt;/li&gt;
&lt;li&gt;DB：MySQL&lt;/li&gt;
&lt;li&gt;repo：bitbucket&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;rootユーザーのパスワードを設定する&lt;/li&gt;
&lt;li&gt;作業用ユーザーを作成する&lt;/li&gt;
&lt;li&gt;作業用ユーザーのパスワードを設定する&lt;/li&gt;
&lt;li&gt;su, sudoの権限を制限する&lt;/li&gt;
&lt;li&gt;$PATHを追加する&lt;/li&gt;
&lt;li&gt;パスワード認証から公開鍵認証に変更する&lt;/li&gt;
&lt;li&gt;rootでのログインを禁止する&lt;/li&gt;
&lt;li&gt;sshのポートを22番から変更する&lt;/li&gt;
&lt;li&gt;iptablesによるパケットフィルタリングを設定する&lt;/li&gt;
&lt;li&gt;yumをアップデートする&lt;/li&gt;
&lt;li&gt;gitをインストールする&lt;/li&gt;
&lt;li&gt;rvmをインストールする&lt;/li&gt;
&lt;li&gt;ruby1.9.2をインストールする&lt;/li&gt;
&lt;li&gt;mysqlをrpmでインストールする&lt;/li&gt;
&lt;li&gt;nginxをビルド&lt;/li&gt;
&lt;li&gt;nginxの自動起動を設定する&lt;/li&gt;
&lt;li&gt;unicorn、bundlerをgemにインストール&lt;/li&gt;
&lt;li&gt;bitbucketからプロジェクトをgit clone&lt;/li&gt;
&lt;li&gt;bundle install --path vendor/bundle&lt;/li&gt;
&lt;li&gt;本番用DB作成&lt;/li&gt;
&lt;li&gt;マイグレーション&lt;/li&gt;
&lt;li&gt;unicornの設定ファイル（config/unicorn.rb）を作成して、unicornを起動&lt;/li&gt;
&lt;li&gt;unicornに合わせてnginxの設定ファイル（nginx.conf）を修正して、リロード&lt;/li&gt;
&lt;li&gt;静的ファイルのプリコンパイルの設定を変更&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考図書&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4048702270/hatena-hamazou-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51xpswg%2BkkL._SL160_.jpg&quot; alt=&quot;ハイパフォーマンスHTTPサーバ Nginx入門&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;ハイパフォーマンスHTTPサーバ Nginx入門&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4048702270/hatena-hamazou-22/&quot;&gt;ハイパフォーマンスHTTPサーバ Nginx入門&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: Clement Nedelcu,長尾高弘&lt;/li&gt;
&lt;li&gt;出版社/メーカー: アスキー・メディアワークス&lt;/li&gt;
&lt;li&gt;発売日: 2011/04/21&lt;/li&gt;
&lt;li&gt;メディア: 大型本&lt;/li&gt;
&lt;li&gt;購入: 2人 クリック: 589回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4048702270&quot;&gt;この商品を含むブログ (15件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4774142948/hatena-hamazou-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/41oqE-9dM2L._SL160_.jpg&quot; alt=&quot;エキスパートのためのMySQL[運用+管理]トラブルシューティングガイド&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;エキスパートのためのMySQL[運用+管理]トラブルシューティングガイド&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4774142948/hatena-hamazou-22/&quot;&gt;エキスパートのためのMySQL[運用+管理]トラブルシューティングガイド&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: 奥野幹也&lt;/li&gt;
&lt;li&gt;出版社/メーカー: 技術評論社&lt;/li&gt;
&lt;li&gt;発売日: 2010/06/12&lt;/li&gt;
&lt;li&gt;メディア: 大型本&lt;/li&gt;
&lt;li&gt;購入: 11人 クリック: 175回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4774142948&quot;&gt;この商品を含むブログ (24件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>さくらVPSでRailsを動かすまでのTodo</title>
    <updated>2011-10-28T19:43:00+00:00</updated>
    <dc:date>2011-10-28T19:43:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/85/</id>
    <link href="https://blog.naoty.dev/85/"/>
    <summary>&lt;ul&gt;
&lt;li&gt;centos 5.5&lt;/li&gt;
&lt;li&gt;nginx&lt;/li&gt;
&lt;li&gt;rvm&lt;/li&gt;
&lt;li&gt;ruby 1.9.2&lt;/li&gt;
&lt;li&gt;passenger&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という構成でRailsアプリケーションを動かそうとしたのですが、どうやらpassengerが動いてないみたいで（ずっと403 Forbidden）いろいろ調べてみました。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ps aux | grep Passenger
root 6819 0.0 0.3 16908 1740 ? Ssl Oct23 0:00 PassengerWatchdog
root 6822 0.0 0.4 32704 2404 ? Sl Oct23 0:00 PassengerHelperAgent
root 6824 0.0 1.6 107472 8172 ? Sl Oct23 0:00 Passenger spawn server

nobody 6845 0.0 0.5 51544 2904 ? Sl Oct23 0:00 PassengerLoggingAgent
naoty 7639 0.0 0.1 6040 568 pts/0 R+ 12:55 0:00 grep Passenger
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Passengerのプロセスは4つ起動しているようです。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ rvmsudo passenger-status
[sudo] password for naoty:
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>nginx+rvmでPassengerが動いてない？</title>
    <updated>2011-10-24T13:12:00+00:00</updated>
    <dc:date>2011-10-24T13:12:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/84/</id>
    <link href="https://blog.naoty.dev/84/"/>
    <summary>&lt;p&gt;１．rpmでインストール&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;naoty$ yum list | grep mysql-server
mysql-server.x86_64 5.0.77-4.el5_6.6 base
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;yumだと古いバージョンしかインストールできないみたいです。&lt;/li&gt;
&lt;li&gt;なので、rpmでインストールします。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;naoty$ mkdir src
naoty$ cd src
naoty$ wget http://dev.mysql.com/get/Downloads/MySQL-5.5/MySQL-server-5.5.16-1.linux2.6.x86_64.rpm/from/http://ftp.iij.ad.jp/pub/db/mysql/
naoty$ sudo rpm -i MySQL-server-5.5.16-1.linux2.6.x86_64.rpm
naoty$ wget http://dev.mysql.com/get/Downloads/MySQL-5.5/MySQL-client-5.5.16-1.linux2.6.x86_64.rpm/from/http://ftp.iij.ad.jp/pub/db/mysql/
naoty$ sudo rpm -i MySQL-client-5.5.16-1.linux2.6.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;インストールするのは、mysql-serverとmysql-clientです。&lt;/li&gt;
&lt;li&gt;他にもいろいろあるようですが、いまのところは必要なさそうです。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;２．起動&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;naoty$ sudo mysqld_safe &amp;gt; /dev/null &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;インストールしたときのメッセージにしたがってmysqld_safeで起動&lt;/li&gt;
&lt;li&gt;/dev/nullはゴミ箱みたいなものだそうです。ゴミ箱に出力して、&amp;amp;でバックグラウンドで実行です。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;３．初期設定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;naoty$ sudo mysql_secure_installation
...
Set root password? [Y/n] Y
...
Remove anonymous users? [Y/n] Y
...
Disallow root login remotely? [Y/n] Y
...
Remove test database and access to it? [Y/n] Y
...
Reload privilege tables now? [Y/n] Y
...
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;インストールしたときに強く推奨されたmysql_secure_installationで堅牢な初期設定をします。&lt;/li&gt;
&lt;li&gt;質問にはぜんぶ「Y」&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;４．クライアント起動&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;naoty$ mysql -u root -p
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2011.10.18追記&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;naoty$ bundle install --path vendor/bundle
...
Installing mysql2 (0.3.7) with native extensions
Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension.
...
checking for rb_thread_blocking_region()... yes
checking for mysql_query() in -lmysqlclient... no
checking for main() in -lm... yes
checking for mysql_query() in -lmysqlclient... no
checking for main() in -lz... yes
checking for mysql_query() in -lmysqlclient... no
checking for main() in -lsocket... no
checking for mysql_query() in -lmysqlclient... no
checking for main() in -lnsl... yes
checking for mysql_query() in -lmysqlclient... no
checking for main() in -lmygcc... no
checking for mysql_query() in -lmysqlclient... no
...
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;rails3.1でmysqlアダプターをインストールしようとしたところ上記のようなエラーが発生しました。&lt;/li&gt;
&lt;li&gt;どうやらライブラリが足りないようなので、共有ライブラリをrpmでインストールします。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;naoty$ cd src
naoty$ wget http://dev.mysql.com/get/Downloads/MySQL-5.5/MySQL-shared-5.5.16-1.linux2.6.x86_64.rpm/from/http://ftp.jaist.ac.jp/pub/mysql/
naoty$ sudo rpm -i MySQL-shared-5.5.16-1.linux2.6.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;naoty$ bundle install --path vendor/bundle
...
Installing mysql2 (0.3.7) with native extensions
Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension.
...
checking for rb_thread_blocking_region()... yes
checking for mysql_query() in -lmysqlclient... yes
checking for mysql.h... no
checking for mysql/mysql.h... no
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>CentOSにmysqlを入れて起動するまでのメモ</title>
    <updated>2011-10-17T21:58:00+00:00</updated>
    <dc:date>2011-10-17T21:58:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/83/</id>
    <link href="https://blog.naoty.dev/83/"/>
    <summary>&lt;p&gt;１．gitosisをyumでインストール&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;remote$ sudo yum install gitosis
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;標準リポジトリにはないと思うので、僕の場合はepelリポジトリを追加しました。&lt;/li&gt;
&lt;li&gt;いっしょにgitとかもインストールされる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;２．gitというユーザーを追加&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;remote$ sudo useradd git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;３．gitosisの初期化&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;remote$ sudo -H -u git gitosis-init &amp;lt; id_dsa.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;４．ローカルでgit clone&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;local$ git clone ssh://git@ホスト名:ポート番号/gitosis-admin.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;５．pushしたいリポジトリを設定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;local$ cd gitosis-admin.git
local$ vi gitosis.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[gitosis]

[group gitosis-admin]
writable = gitosis-admin
members = naoty

[group hoge]
writable = hoge
members = naoty
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;local$ git add .
local$ git commit -m 'hogeリポジトリを追加'
local$ git push
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;６．プロジェクトの変更をpushする場合&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;local$ cd
local$ cd workspace/hoge
local$ git remote add origin ssh://git@ホスト名:ポート番号/hoge.git
local$ git push origin master
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>centosにgitosisを入れてpushするまでのメモ</title>
    <updated>2011-10-15T01:41:00+00:00</updated>
    <dc:date>2011-10-15T01:41:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/82/</id>
    <link href="https://blog.naoty.dev/82/"/>
    <summary>&lt;p&gt;deviseのconfirmableによって確認メールを送信する機能をカンタンに実装できるんですが、なぜか、確認メールが送られてこない…件を解決したので、メモ。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config/environments/development.rb

  # Don't care if the mailer can't send
  config.action_mailer.raise_delivery_errors = false
  config.action_mailer.default_url_options = { host: 'localhost:3000' }
  config.action_mailer.delivery_method = :sendmail # ←追加！
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;default_url_optionsはdeviseをインストールする際に注意されるので設定しましたが、delivery_methodを指定するのは完全に見落としてました。deviseの設定というより、action_mailerの設定ですね。&lt;/p&gt;
&lt;p&gt;環境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rails 3.1.0&lt;/li&gt;
&lt;li&gt;actionmailer 3.1.0&lt;/li&gt;
&lt;li&gt;devise 1.4.7&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>deviseで確認メールが送られてこない件を解決</title>
    <updated>2011-09-28T12:00:00+00:00</updated>
    <dc:date>2011-09-28T12:00:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/81/</id>
    <link href="https://blog.naoty.dev/81/"/>
    <summary>&lt;p&gt;js&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;app/assets/javascripts/application.jsに一行追加するだけ&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# app/assets/javascrypts/application.js

// This is a manifest file that'll be compiled into including all the files listed below.
// Add new JavaScript/Coffee code in separate files in this directory and they'll automatically
// be included in the compiled file accessible from http://example.com/assets/application.js
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// the compiled file.
//
//= require jquery
//= require jquery-ui // ←追加
//= require jquery_ujs
//= require_tree .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;css&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vendor/assets/stylesheets/vendor.cssを作成&lt;/li&gt;
&lt;li&gt;vendor/assets/stylesheets/jquery-uiを作成して、そのなかにダウンロードしてきたjquery-ui-1.8.16.custom.cssをおく&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# app/assets/stylesheets/application.css

/*
 * This is a manifest file that'll automatically include all the stylesheets available in this directory
 * and any sub-directories. You're free to add application-wide styles to this file and they'll appear at
 * the top of the compiled file, but it's generally better to create a new file per style scope.
 *= require_self
 *= require vendor // ←追加
 *= require_tree . 
*/
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# vendor/assets/stylesheets/vendor.css

/*
 *= require_tree ./jquery-ui
 */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;image&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;エラーメッセージを見ながらディレクトリを用意してあげる&lt;/li&gt;
&lt;li&gt;今回は、vendor/assets/images/jquery-ui/imagesのなかにダウンロードしてきた画像をおく&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;参考&lt;br&gt;
&lt;a href=&quot;http://stackoverflow.com/questions/6048490/rails-3-1-and-jquery-ui-images&quot;&gt;Ruby on Rails 3.1 and jQuery UI images - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2011.10.1&lt;br&gt;
追記&lt;br&gt;
datepickerなどの日本語化ファイルを使いたい場合&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// app/assets/javascripts/application.js

// This is a manifest file that'll be compiled into including all the files listed below.
// Add new JavaScript/Coffee code in separate files in this directory and they'll automatically
// be included in the compiled file accessible from http://example.com/assets/application.js
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// the compiled file.
//
//= require jquery
//= require jquery_ujs
//= require jquery-ui
//= require vendor // ←追加
//= require_tree .
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;// vendor/assets/javascripts/vendor.js

//= require_tree ./jquery-ui
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;で、あとは、vendor/assets/javascripts/jquery-ui/配下に日本語ファイルをおけばおｋ。&lt;/p&gt;</summary>
    <title>Rails3.1にjquery-uiを導入する</title>
    <updated>2011-09-25T01:50:00+00:00</updated>
    <dc:date>2011-09-25T01:50:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/80/</id>
    <link href="https://blog.naoty.dev/80/"/>
    <summary>&lt;pre&gt;&lt;code&gt;// http://api.twitter.com/statuses/friends.json
{
    error: &quot;This method requires authentication.&quot;
    request: &quot;/statuses/friends.json&quot;
}

// http://api.twitter.com/statuses/friends.json?screen_name=naoty_k
{
  - errors: [
      - {
          code: 37
          message: &quot;Not authorized to use this endpoint&quot;
        }
  ]
}

// http://api.twitter.com/1/statuses/friends.json?screen_name=naoty_k
[
  - {
      show_all_inline_media: false
      contributors_enabled: false
      geo_enabled: false
      profile_background_tile: false
      protected: false
    },
  - {

    } 
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;認証済みなのに「This method requires authentication.」「Not authorized to use this endpoint」みたいなエラーがおきたら、パラメータにscreen_nameを渡して、1を追加してあげるとうまくいった。なにこれ？&lt;/p&gt;</summary>
    <title>Twitter APIのエラーの回避方法</title>
    <updated>2011-09-09T03:26:00+00:00</updated>
    <dc:date>2011-09-09T03:26:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/79/</id>
    <link href="https://blog.naoty.dev/79/"/>
    <summary>&lt;p&gt;１．rails new&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rails _3.0.10_ new sample-3.0.10
      create
      create README
      create Rakefile
      create config.ru
      create .gitignore
      create Gemfile
      create app
      create app/controllers/application_controller.rb
      create app/helpers/application_helper.rb
      create app/mailers
      create app/models
      create app/views/layouts/application.html.erb
      create config
      create config/routes.rb
      create config/application.rb
      create config/environment.rb
      create config/environments
      create config/environments/development.rb
      create config/environments/production.rb
      create config/environments/test.rb
      create config/initializers
      create config/initializers/backtrace_silencers.rb
      create config/initializers/inflections.rb
      create config/initializers/mime_types.rb
      create config/initializers/secret_token.rb
      create config/initializers/session_store.rb
      create config/locales
      create config/locales/en.yml
      create config/boot.rb
      create config/database.yml
      create db
      create db/seeds.rb
      create doc
      create doc/README_FOR_APP
      create lib
      create lib/tasks
      create lib/tasks/.gitkeep
      create log
      create log/server.log
      create log/production.log
      create log/development.log
      create log/test.log
      create public
      create public/404.html
      create public/422.html
      create public/500.html
      create public/favicon.ico
      create public/index.html
      create public/robots.txt
      create public/images
      create public/images/rails.png
      create public/stylesheets
      create public/stylesheets/.gitkeep
      create public/javascripts
      create public/javascripts/application.js
      create public/javascripts/controls.js
      create public/javascripts/dragdrop.js
      create public/javascripts/effects.js
      create public/javascripts/prototype.js
      create public/javascripts/rails.js
      create script
      create script/rails
      create test
      create test/fixtures
      create test/functional
      create test/integration
      create test/performance/browsing_test.rb
      create test/test_helper.rb
      create test/unit
      create tmp
      create tmp/sessions
      create tmp/sockets
      create tmp/cache
      create tmp/pids
      create vendor/plugins
      create vendor/plugins/.gitkeep
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ rails new sample-3.1.0
      create
      create README
      create Rakefile
      create config.ru
      create .gitignore
      create Gemfile
      create app
      create app/assets/images/rails.png
      create app/assets/javascripts/application.js
      create app/assets/stylesheets/application.css
      create app/controllers/application_controller.rb
      create app/helpers/application_helper.rb
      create app/mailers
      create app/models
      create app/views/layouts/application.html.erb
      create app/mailers/.gitkeep
      create app/models/.gitkeep
      create config
      create config/routes.rb
      create config/application.rb
      create config/environment.rb
      create config/environments
      create config/environments/development.rb
      create config/environments/production.rb
      create config/environments/test.rb
      create config/initializers
      create config/initializers/backtrace_silencers.rb
      create config/initializers/inflections.rb
      create config/initializers/mime_types.rb
      create config/initializers/secret_token.rb
      create config/initializers/session_store.rb
      create config/initializers/wrap_parameters.rb
      create config/locales
      create config/locales/en.yml
      create config/boot.rb
      create config/database.yml
      create db
      create db/seeds.rb
      create doc
      create doc/README_FOR_APP
      create lib
      create lib/tasks
      create lib/tasks/.gitkeep
      create lib/assets
      create lib/assets/.gitkeep
      create log
      create log/.gitkeep
      create public
      create public/404.html
      create public/422.html
      create public/500.html
      create public/favicon.ico
      create public/index.html
      create public/robots.txt
      create script
      create script/rails
      create test/fixtures
      create test/fixtures/.gitkeep
      create test/functional
      create test/functional/.gitkeep
      create test/integration
      create test/integration/.gitkeep
      create test/unit
      create test/unit/.gitkeep
      create test/performance/browsing_test.rb
      create test/test_helper.rb
      create tmp/cache
      create tmp/cache/assets
      create vendor/assets/stylesheets
      create vendor/assets/stylesheets/.gitkeep
      create vendor/plugins
      create vendor/plugins/.gitkeep
         run bundle install
Fetching source index for http://rubygems.org/
Installing rake (0.9.2)
Using multi_json (1.0.3)
Using activesupport (3.1.0)
Using bcrypt-ruby (3.0.0)
Using builder (3.0.0)
Using i18n (0.6.0)
Using activemodel (3.1.0)
Using erubis (2.7.0)
Using rack (1.3.2)
Using rack-cache (1.0.3)
Using rack-mount (0.8.3)
Using rack-test (0.6.1)
Using hike (1.2.1)
Using tilt (1.3.3)
Using sprockets (2.0.0)
Using actionpack (3.1.0)
Using mime-types (1.16)
Using polyglot (0.3.2)
Using treetop (1.4.10)
Using mail (2.3.0)
Using actionmailer (3.1.0)
Using arel (2.2.1)
Using tzinfo (0.3.29)
Using activerecord (3.1.0)
Using activeresource (3.1.0)
Installing ansi (1.3.0)
Using bundler (1.0.18)
Installing coffee-script-source (1.1.2)
Installing execjs (1.2.4)
Installing coffee-script (2.2.0)
Using rack-ssl (1.3.2)
Using rdoc (3.9.4)
Using thor (0.14.6)
Using railties (3.1.0)
Installing coffee-rails (3.1.0)
Installing jquery-rails (1.0.13)
Using rails (3.1.0)
Installing sass (3.1.7)
Installing sass-rails (3.1.0)
Installing sqlite3 (1.3.4) with native extensions
Installing turn (0.8.2)
Installing uglifier (1.0.2)
Your bundle is complete! Use `bundle show [gemname]` to see where a bundled gem is installed.
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;3.1.0ではrails newでbundle installが実行される。ただ、これではsystem gemsにインストールされてしまい困る。&lt;/li&gt;
&lt;li&gt;そこで、以下のように--skip-bundleをつけてbundle installをスキップするといいかもしれない。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ rails new sample-3.1.0 --skip-bundle
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;２．rails g&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd sample-3.0.10
$ rails g scaffold user name:string email:string
      invoke active_record
      create db/migrate/20110903125449_create_users.rb
      create app/models/user.rb
      invoke test_unit
      create test/unit/user_test.rb
      create test/fixtures/users.yml
       route resources :users
      invoke scaffold_controller
      create app/controllers/users_controller.rb
      invoke erb
      create app/views/users
      create app/views/users/index.html.erb
      create app/views/users/edit.html.erb
      create app/views/users/show.html.erb
      create app/views/users/new.html.erb
      create app/views/users/_form.html.erb
      invoke test_unit
      create test/functional/users_controller_test.rb
      invoke helper
      create app/helpers/users_helper.rb
      invoke test_unit
      create test/unit/helpers/users_helper_test.rb
      invoke stylesheets
      create public/stylesheets/scaffold.css
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ cd sample-3.1.0
$ rails g scaffold user name:string email:string
      invoke active_record
      create db/migrate/20110903125248_create_users.rb
      create app/models/user.rb
      invoke test_unit
      create test/unit/user_test.rb
      create test/fixtures/users.yml
       route resources :users
      invoke scaffold_controller
      create app/controllers/users_controller.rb
      invoke erb
      create app/views/users
      create app/views/users/index.html.erb
      create app/views/users/edit.html.erb
      create app/views/users/show.html.erb
      create app/views/users/new.html.erb
      create app/views/users/_form.html.erb
      invoke test_unit
      create test/functional/users_controller_test.rb
      invoke helper
      create app/helpers/users_helper.rb
      invoke test_unit
      create test/unit/helpers/users_helper_test.rb
      invoke assets
      invoke coffee
      create app/assets/javascripts/users.js.coffee
      invoke scss
      create app/assets/stylesheets/users.css.scss
      invoke scss
      create app/assets/stylesheets/scaffolds.css.scss
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;3.1から導入されたassetによって、リソースごとにjsとcssが生成されるようだ。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Rails3.0.xと3.1のrails newとrails generateの違い</title>
    <updated>2011-09-03T21:56:00+00:00</updated>
    <dc:date>2011-09-03T21:56:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/78/</id>
    <link href="https://blog.naoty.dev/78/"/>
    <summary>&lt;pre&gt;&lt;code&gt;Factory.define :user do |u|
  u.name 'naoty'
  u.email 'naoty.k@gmail.com'
  u.password 'naotynaoty'
  
  # skip confirmation
  u.confirmed_at Time.now
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;deviseには確認メールの送信をスキップするskip_confirmation!というメソッドがあるが、それをファクトリで使うことはできない。&lt;/li&gt;
&lt;li&gt;そこで、skip_confirmation!の中身は以下のようになっているので、これを利用した。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;def skip_confirmation!
  self.confirmed_at = Time.now
end
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>factory_girlでdeviseのメール通知をスキップする</title>
    <updated>2011-09-01T14:16:00+00:00</updated>
    <dc:date>2011-09-01T14:16:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/77/</id>
    <link href="https://blog.naoty.dev/77/"/>
    <summary>&lt;p&gt;こちらの記事を参考に自分で自動テスト環境を構築した記録です。この記事はすごく参考になりました。感謝です。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://curiosity-drives.me/programming/rails/rails3-rspec2-spork-guard-guard-rspec-guard-cucumber-bdd/&quot;&gt;Rails3+RSpec2+Spork+Guard(guard-rspec,guard-cucumber)で最速のBDD(振舞駆動開発)環境を作る - Curiocity Drives me&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;０．環境&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Gemfile

source 'http://rubygems.org'

gem 'rails'
gem 'rake', '0.8.7'
gem 'mysql2', '0.2.6'
gem 'haml-rails'
gem 'jquery-rails'
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ bundle install --path vendor/bundle
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;１．rpec-rails, factory_girl_railsのインストール&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Gemfile

source 'http://rubygems.org'

gem 'rails'
gem 'rake', '0.8.7'
gem 'mysql2', '0.2.6'
gem 'haml-rails'
gem 'jquery-rails'

group :development, :test do
  gem 'rspec-rails'
  gem 'factory_girl_rails'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ bundle install --path vendor/bundle
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ rails g rspec:install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでspec_helper.rbが作成される。rspecに関する設定はここで行う。&lt;/p&gt;
&lt;p&gt;２．rspec-rails, factory_girl_railsの設定&lt;br&gt;
２．１．Generatorの設定（修正しました！追記２をご覧ください。）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「rails g」でspecファイルとファクトリファイルが生成されるように設定を変更する。&lt;/li&gt;
&lt;li&gt;config.generatorsに渡されるブロック内で設定できる。&lt;/li&gt;
&lt;li&gt;ファクトリファイルのパスをspec/support/factoriesにしてるのは、rspec_helper.rbがrspecにspec/support配下のファイルを読み込むように指定してあるから。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# config/application.rb

module Antibotch
  class Application &amp;lt; Rails::Application

    # ...

    # Configure sensitive parameters which will be filtered from the log file.
    config.filter_parameters += [:password]
    
    # Configure file type generated by 'rails generate'
    config.generators do |g|
      g.orm :active_record
      g.template_engine :haml
      g.test_framework :rspec, fixture: true, views: false
      g.fixture_replacement :factory_girl, dir: 'spec/support/factories'
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;２．２．spec_helper.rbの設定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# spec/spec_helper.rb

# This file is copied to spec/ when you run 'rails generate rspec:install'
ENV[&quot;RAILS_ENV&quot;] ||= 'test'
require File.expand_path(&quot;../../config/environment&quot;, __FILE__ )
require 'rspec/rails'
require 'factory_girl' # 追加

# ...

RSpec.configure do |config|
  # ...

  # Remove this line if you're not using ActiveRecord or ActiveRecord fixtures
  # config.fixture_path = &quot;#{::Rails.root}/spec/fixtures&quot; # コメントアウト

  # ...
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;３．sporkのインストール&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Gemfile

source 'http://rubygems.org'

gem 'rails'
gem 'rake', '0.8.7'
gem 'mysql2', '0.2.6'
gem 'haml-rails'
gem 'jquery-rails'

group :development, :test do
  gem 'rspec-rails'
  gem 'factory_girl_rails'
  gem 'spork'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ bundle install --path vendor/bundle
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# .spec

--drb

# 以下、僕の好み
--colour
-format documentation
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;４．spec_helper.rbの設定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ bundle exec spork --bootstrap
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;spec_helper.rbが自動的に編集されるので、以下のように編集しなおす。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# spec/spec_helper.rb

require 'rubygems'
require 'spork'

Spork.prefork do
  # 元のspec_helper.rbのコード
end

Spork.each_run do
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;５．guard-sporkのインストールと設定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Gemfile

source 'http://rubygems.org'

gem 'rails'
gem 'rake', '0.8.7'
gem 'mysql2', '0.2.6'
gem 'haml-rails'
gem 'jquery-rails'

group :development, :test do
  gem 'rspec-rails'
  gem 'factory_girl_rails'
  gem 'spork'
  gem 'rb-fsevent'
  gem 'growl'
  gem 'guard-spork'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;growl, growlnotifyはインストール済み。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ bundle install --path vendor/bundle
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ bundle exec guard init spork
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Guardfileが生成されるので、これを以下のように編集。編集しないとspork for rspecが起動しないエラーが起きる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Guardfile

# A sample Guardfile
# More info at https://github.com/guard/guard#readme

guard 'spork', :rspec_env =&amp;gt; { 'RAILS_ENV' =&amp;gt; 'test' }, :test_unit =&amp;gt; false, :cucumber =&amp;gt; false do
  watch('config/application.rb')
  watch('config/environment.rb')
  watch(%r{^config/environments/.+\.rb$})
  watch(%r{^config/initializers/.+\.rb$})
  watch('spec/spec_helper.rb')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;７．guard-rspecのインストールと設定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Gemfile

source 'http://rubygems.org'

gem 'rails'
gem 'rake', '0.8.7'
gem 'mysql2', '0.2.6'
gem 'haml-rails'
gem 'jquery-rails'

group :development, :test do
  gem 'rspec-rails'
  gem 'factory_girl_rails'
  gem 'spork'
  gem 'rb-fsevent'
  gem 'growl'
  gem 'guard-spork'
  gem 'guard-rspec'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ bundle install --path vendor/bundle
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ bundle exec guard init rspec
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;エラーが発生するが、気にしない。&lt;/p&gt;
&lt;p&gt;８．完成！&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ bundle exec guard start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで起動するはず。起動中はファイルが保存される度にテストが自動的に実行されて、growlで結果が通知されるようになる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追記１：guard startでエラーが発生する場合&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ bundle exec guard start
Guard is now watching at '/Users/nkaneko/workspace/jmty-web-dev/jmty-web'
Starting Spork for RSpec
Using RSpec
Loading Spork.prefork block...
ERROR: Could not start Spork server for RSpec. Make sure you can use it manually first.
Spork is ready and listening on 8989!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記のようなエラーが発生した場合、以下のようにGuardfileを修正するといいかも。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Guardfile

# A sample Guardfile
# More info at https://github.com/guard/guard#readme

guard 'spork', :rspec_env =&amp;gt; { 'RAILS_ENV' =&amp;gt; 'test' }, :test_unit =&amp;gt; false, :cucumber =&amp;gt; false, :wait =&amp;gt; 30 do
  watch('config/application.rb')
  watch('config/environment.rb')
  watch(%r{^config/environments/.+\.rb$})
  watch(%r{^config/initializers/.+\.rb$})
  watch('spec/spec_helper.rb')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:waitパラメータはデフォルトで20なのですが、これを少し増やすと直るかもしれません。&lt;br&gt;
githubで開発者がアナウンスしてます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/guard/guard-spork&quot;&gt;https://github.com/guard/guard-spork&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;追記２：rspecのgeneratorの設定について&lt;br&gt;
config/application.rbのgeneratorの設定を以下のように修正します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config.generators do |g|
  # g.test_framework :rspec, fixture: true, views:false
  g.test_framework :rspec, fixture: true, view_specs: false
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;generatorのオプションは以下のように調べることができる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rails g scaffold
Usage:
  rails generate scaffold NAME [field:type field:type] [options]

...

Rspec options:
  [--fixture] # Indicates when to generate fixture
                                # Default: true
  [--fixture-replacement=NAME] # Fixture replacement to be invoked
                                # Default: factory_girl
  [--singleton] # Supply to create a singleton controller
  [--controller-specs] # Generate controller specs
                                # Default: true
  [--view-specs] # Generate view specs
                                # Default: true
  [--webrat] # Use webrat methods/matchers
  [--webrat-matchers] # Use webrat methods/matchers (deprecated - use --webrat)
  [--helper-specs] # Generate helper specs
                                # Default: true
  [--routing-specs] # Generate routing specs
                                # Default: true
  [--integration-tool=NAME] # Integration tool to be invoked
                                # Default: rspec

...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;なので、view_specs, helper_specs, controller_specsなどとオプションを設定する。&lt;/p&gt;</summary>
    <title>rspec, factory_girl, spork, guardによる自動テスト環境の構築</title>
    <updated>2011-08-24T01:48:00+00:00</updated>
    <dc:date>2011-08-24T01:48:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/76/</id>
    <link href="https://blog.naoty.dev/76/"/>
    <summary>&lt;pre&gt;&lt;code&gt;NSString *path = [[NSBundle mainBundle] pathForResource:@&quot;places&quot; ofType:@&quot;plist&quot;];
placesDictionary = [[NSDictionary alloc] initWithContentsOfFile:path];
NSArray *places = [placesDictionary objectForKey:@&quot;places&quot;];
NSDictionary *place = [places objectAtIndex:indexPath.row];
NSNumber *lat = [place objectForKey:@&quot;latitude&quot;];
NSNumber *lng = [place objectForKey:@&quot;longitude&quot;];

PlaceAppDelegate *appDelegate = (PlaceAppDelegate *) [[UIApplication sharedApplication] delegate];
appDelegate.latitude = [lat doubleValue];
appDelegate.longitude = [lng doubleValue];
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;(id)objectForKey:(id)aKeyはid型を返すので、doubleなどプリミティブ型に直接入れることができない&lt;/li&gt;
&lt;li&gt;数値をオブジェクトとして扱うためにNSNumberを使う&lt;/li&gt;
&lt;li&gt;NSNumberを通してプリミティブ型に変換する&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&amp;gt;
version=&quot;1.0&quot;&amp;gt;

	places
	
		
			name
			Tokyo
			latitude
			35.689488
			longitude
			139.691706
		
		
			name
			New York
			latitude
			40.714353
			longitude
			-74.005973
		
		
			name
			London
			latitude
			51.500152
			longitude
			-0.126236
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>plistから数値を読み込む</title>
    <updated>2011-08-17T22:30:00+00:00</updated>
    <dc:date>2011-08-17T22:30:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/75/</id>
    <link href="https://blog.naoty.dev/75/"/>
    <summary>&lt;pre&gt;&lt;code&gt;# config/application.rb
module Hoge
  class Application &amp;lt; Rails::Application
    # Set Time.zone default to the specified zone and make Active Record auto-convert to this zone.
    # Run &quot;rake -D time&quot; for a list of tasks for finding time zone names. Default is UTC.
    # config.time_zone = 'Central Time (US &amp;amp; Canada)'
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;プロジェクトが作成されたばかりの設定を見ると、デフォルトのタイムゾーンはTime.zoneを参照していることがわかる。&lt;/li&gt;
&lt;li&gt;Date.currentのソースコードからもそれが読み取れる。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# activesupport/lib/active_support/core_ext/date/calculations.rb
require 'date'
class Date
  class &amp;lt;&amp;lt; self
    def current
      ::Time.zone ? ::Time.zone.today : ::Date.today
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# lib/date.rb
class Date
  def self.today(sg=ITALY)
    t = Time.now
    jd = civil_to_jd(t.year, t.mon, t.mday, sg)
    new!(jd_to_ajd(jd, 0, 0), 0, sg)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;TimeクラスはC言語で実装されてるっぽいので、よくわからない。けど、タイムゾーンはシステムのものを使っていると思われる。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;ruby-1.9.2-p180 :001 &amp;gt; Date.current
 =&amp;gt; Mon, 01 Aug 2011
ruby-1.9.2-p180 :002 &amp;gt; Time.zone
 =&amp;gt; (GMT+00:00) UTC
ruby-1.9.2-p180 :003 &amp;gt; Time.zone.today
 =&amp;gt; Mon, 01 Aug 2011
$ date
Mon Aug 1 23:05:00 JST 2011
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;ん？でも、タイムゾーンはJSTになってる。ここまで低水準だともうわから〜ん。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# config/application.rb
module Hoge
  class Application &amp;lt; Rails::Application
    # Set Time.zone default to the specified zone and make Active Record auto-convert to this zone.
    # Run &quot;rake -D time&quot; for a list of tasks for finding time zone names. Default is UTC.
    # config.time_zone = 'Central Time (US &amp;amp; Canada)'
    config.time_zone = 'Tokyo'
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;試しに設定を日本時に変更してみると…&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;ruby-1.9.2-p180 :001 &amp;gt; Time.zone
 =&amp;gt; (GMT+09:00) Tokyo
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Time.zoneは変更された。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Railsアプリケーションのタイムゾーンを調べる場合はTime.zoneで確認できるようだ。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追記&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ date
2011年 8月2日 火曜日 00時04分59秒 JST

ruby-1.9.2-p180 :001 &amp;gt; Date.current
 =&amp;gt; Mon, 01 Aug 2011
ruby-1.9.2-p180 :002 &amp;gt; Date.today
 =&amp;gt; Mon, 02 Aug 2011
ruby-1.9.2-p180 :003 &amp;gt; Time.zone
 =&amp;gt; (GMT+00:00) UTC
ruby-1.9.2-p180 :004 &amp;gt; Time.now
 =&amp;gt; 2011-08-02 00:05:23 +0900
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Date.currentとDate.todayでタイムゾーンが異なるのは、前者がTime.zoneを参照しているからで、後者がTime.nowを参照しているからなのだが、それらが違うのがまた謎だ…&lt;/p&gt;</summary>
    <title>Rails3のDate.currentのソースコードリーディング</title>
    <updated>2011-08-01T23:08:00+00:00</updated>
    <dc:date>2011-08-01T23:08:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/74/</id>
    <link href="https://blog.naoty.dev/74/"/>
    <summary>&lt;p&gt;合計を計算する場合&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 初心者
count = 0
(1..10).each {|n| count += n}
p count

# 脱初心者
p (1..10).inject(0) {|count, n| count + n}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配列に特定の要素をいれる&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 初心者
users = []
[1,2,3,4,5].each do |n|
  users &amp;lt;&amp;lt; User.find(n) if n &amp;gt; 3
end

# 脱初心者
users = [1,2,3,4,5].select {|n| n &amp;gt; 3}.collect {|n| User.find(n)}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;eachループをinject, collect(map), selectで書き換えると、スッキリしてカッコイイ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追記&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 以下同じ
p (1..10).inject(0) {|count, n| count + n}
p (0..10).inject {|count, n| count + n}
p (1..10).inject(:+)
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>脱初心者なRubyのループ処理の書き方</title>
    <updated>2011-07-26T23:51:00+00:00</updated>
    <dc:date>2011-07-26T23:51:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/73/</id>
    <link href="https://blog.naoty.dev/73/"/>
    <summary>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mogya/tm_twitter_api&quot;&gt;tm_twitter_api - github&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;// Resources/app.js
var path_lib = '';
Titanium.include('lib/twitter_api.js');
Titanium.App.twitterApi = new TwitterApi({
	consumerKey: 'MY CONSUMER KEY',
	consumerSecret: 'MY CONSUMER SECRET'
});
var twitterApi = Titanium.App.twitterApi
twitterApi.init();
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;認証ページでアカウント名とパスワードを入力し「連携アプリを認証」ボタンをおすと、なぜか&lt;a href=&quot;http://mobile.twitter.com/&quot;&gt;http://mobile.twitter.com/&lt;/a&gt;にリダイレクトされる（下画像）。モーダルウィンドウはいっこうに閉じない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://f.hatena.ne.jp/naoty_k/20110724235009&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20110724/20110724235009.png&quot; alt=&quot;f:id:naoty_k:20110724235009p:image&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;f:id:naoty_k:20110724235009p:image&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;</summary>
    <title>tm_twitter_apiでうまく認証できない</title>
    <updated>2011-07-24T23:51:00+00:00</updated>
    <dc:date>2011-07-24T23:51:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/72/</id>
    <link href="https://blog.naoty.dev/72/"/>
    <summary>&lt;p&gt;以下のようなクラスとインスタンスについて考えていく。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Person = Class.new # Personクラスの作成（Classクラスのインスタンスの作成）
naoty = Person.new # Personクラスのインスタンスの作成
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;今回はclass_evalとinstance_evalについて。どっちとも引数のブロック内の文字列をRubyコードとして評価して実行するのだが、実行するコンテキストが異なる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Person.class_eval do
  def greet
    p 'Hello, my world!'
  end
end
naoty.greet #=&amp;gt; &quot;Hello, my world!&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;class_evalはレシーバ（＝Person）をクラスとしてブロック内を実行する。クラス内で実行されたのと同じ。&lt;/li&gt;
&lt;li&gt;この場合、Personをクラスとしてgreetを定義しているので、greetはインスタンスメソッドとなり、naotyというインスタンスから呼び出すことができる。&lt;/li&gt;
&lt;li&gt;privateメソッドを呼び出すときに使われることが多い。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;Person.instance_eval do
  def greet
    p 'Hello, world!'
  end
end
Person.greet #=&amp;gt; &quot;Hello, world!&quot;
naoty.greet #=&amp;gt; NoMethodError: undefined method 'greet' for ...
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;instance_evalはレシーバ（＝Person）をインスタンスとしてブロック内を実行する。&lt;/li&gt;
&lt;li&gt;instance_evalでメソッドを定義すると、そのインスタンスの特異メソッドが定義されることになる。&lt;/li&gt;
&lt;li&gt;PersonをClassクラスのインスタンスとして考えると、instance_eval内で定義されたメソッドはPersonの特異メソッドであり、すなわちクラスメソッドということになる。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>class_evalとinstance_eval</title>
    <updated>2011-07-22T01:42:00+00:00</updated>
    <dc:date>2011-07-22T01:42:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/71/</id>
    <link href="https://blog.naoty.dev/71/"/>
    <summary>&lt;p&gt;以下の3つのコードはすべて同じことをしている。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;naoty = Person.new('naoty') # naotyはPersonクラスのインスタンス
def naoty.greet # naotyというインスタンスに特異メソッドを定義
  p 'Hello, my world!'
end

class Person # PersonはClassクラスのインスタンス
  # ...
end
def Person.greet # PersonというClassクラスのインスタンスに特異メソッド（＝クラスメソッド）を定義
  p 'Hello, world!'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;あるインスタンスにのみ定義されたメソッドを「特異メソッド」と呼ぶ。&lt;/li&gt;
&lt;li&gt;すべてのクラスはClassクラスのインスタンスである。&lt;/li&gt;
&lt;li&gt;ゆえに、クラスメソッドはClassクラスのインスタンスに定義された「特異メソッド」である。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;naoty = Person.new('naoty') # naotyはPersonクラスのインスタンス
class &amp;lt;&amp;lt; naoty # naotyというインスタンスの特異クラスをオープン
  def greet # 特異クラス内で定義されたメソッドはもちろん特異メソッド
    p 'Hello, my world!'
  end
end

class Person # PersonはClassクラスのインスタンス
  # ...
end
class &amp;lt;&amp;lt; Person # PersonというClassクラスのインスタンスの特異クラスをオープン
  def greet # 特異クラス内で定義されたメソッドはもちろん特異メソッド（＝クラスメソッド）
    p 'Hello, world!'
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;「特異メソッド」はメソッドであるが、あるインスタンスのみに定義されている。&lt;/li&gt;
&lt;li&gt;すべてのメソッドはクラスに属する。&lt;/li&gt;
&lt;li&gt;「特異メソッド」は「特異クラス」に属する。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;class Person
  # ...

  class &amp;lt;&amp;lt; self # PersonというClassクラスのインスタンスの特異クラスをオープン
    def greet # 特異クラス内で定義されたメソッドはもちろん特異メソッド（＝クラスメソッド）
      p 'Hello, world!'
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;クラス定義内のselfはクラスそのものを指すので、上記のように書き換えられる。&lt;/li&gt;
&lt;li&gt;「class &amp;lt;&amp;lt; self; end;」内で定義されたメソッドは、クラスメソッドとなる。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>特異クラスと特異メソッド</title>
    <updated>2011-07-20T23:16:00+00:00</updated>
    <dc:date>2011-07-20T23:16:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/70/</id>
    <link href="https://blog.naoty.dev/70/"/>
    <summary>&lt;pre&gt;&lt;code&gt;Module CoolModule
  # このModuleをインクルードしたクラスを引数にブロック内を実行
  def self.included(class)
    # 第1引数のメソッドを第2引数以降を引数に実行
    class.send :alias_method_chain, :hoge_method, :cool
  end

  # インクルードしたクラス内で定義（≠実行）
  def hoge_method_with_cool
    # ...
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　クラスがモジュールをインクルードすると、モジュールに定義されたメソッドをクラスでも使えるようになる（クラス内に定義される）。一方、インクルードされたときにメソッドを実行したい場合（alias_method_chain、define_method、class_eval等）、Module#includedを使う。&lt;/p&gt;</summary>
    <title>Moduleによるクラスの拡張</title>
    <updated>2011-07-20T13:42:00+00:00</updated>
    <dc:date>2011-07-20T13:42:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/69/</id>
    <link href="https://blog.naoty.dev/69/"/>
    <summary>&lt;pre&gt;&lt;code&gt;$ date
2011年 7月20日 水曜日 00時46分27秒 JST
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Date.current #=&amp;gt; Tue, 19 Jul 2011
Date.today #=&amp;gt; Wed, 20 Jul 2011
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Date.currentはUTC、Date.todayはJSTを返すのだろうか？&lt;/p&gt;</summary>
    <title>Dateクラスのタイムゾーンの不思議</title>
    <updated>2011-07-20T12:02:00+00:00</updated>
    <dc:date>2011-07-20T12:02:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/68/</id>
    <link href="https://blog.naoty.dev/68/"/>
    <summary>&lt;p&gt;MongoDBのORMとしてMongoidを使う場合。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# /Gemfile
source 'http://rubygems.org'

gem 'rails', '3.0.9'
gem 'rake', '0.8.7'
gem 'mongoid'
gem 'bson_ext'
gem 'rspec-rails'
gem 'factory_girl_rails'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以下のようなエラーがおきた。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rake spec
Mon Jul 18 22:43:46 [initandlisten] connection accepted from 127.0.0.1:51455 #17
Mon Jul 18 22:43:46 [conn17] end connection 127.0.0.1:51455
Mon Jul 18 22:43:46 [initandlisten] connection accepted from 127.0.0.1:51456 #18
/spec/spec_helper.rb:26:in `block in &amp;lt;top (required)&amp;gt;': undefined method `use_transactional_fixtures=' for #&amp;lt;RSpec::Core::Configuration:0x0000010087a298&amp;gt; (NoMethodError)
	from /vendor/bundle/ruby/1.9.1/gems/rspec-core-2.6.4/lib/rspec/core.rb:79:in `configure'
	from /spec/spec_helper.rb:10:in `&amp;lt;top (required)&amp;gt;'
	from /spec/models/user_spec.rb:1:in `require'
	from /spec/models/user_spec.rb:1:in `&amp;lt;top (required)&amp;gt;'
	from /vendor/bundle/ruby/1.9.1/gems/rspec-core-2.6.4/lib/rspec/core/configuration.rb:419:in `load'
	from /vendor/bundle/ruby/1.9.1/gems/rspec-core-2.6.4/lib/rspec/core/configuration.rb:419:in `block in load_spec_files'
	from /vendor/bundle/ruby/1.9.1/gems/rspec-core-2.6.4/lib/rspec/core/configuration.rb:419:in `map'
	from /vendor/bundle/ruby/1.9.1/gems/rspec-core-2.6.4/lib/rspec/core/configuration.rb:419:in `load_spec_files'
	from /vendor/bundle/ruby/1.9.1/gems/rspec-core-2.6.4/lib/rspec/core/command_line.rb:18:in `run'
	from /vendor/bundle/ruby/1.9.1/gems/rspec-core-2.6.4/lib/rspec/core/runner.rb:80:in `run_in_process'
	from /vendor/bundle/ruby/1.9.1/gems/rspec-core-2.6.4/lib/rspec/core/runner.rb:69:in `run'
	from /vendor/bundle/ruby/1.9.1/gems/rspec-core-2.6.4/lib/rspec/core/runner.rb:11:in `block in autorun'
Mon Jul 18 22:43:48 [conn18] end connection 127.0.0.1:51456
rake aborted!
ruby -S bundle exec rspec ./spec/models/user_spec.rb failed

(See full trace by running task with --trace)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ActiveRecord以外のORMを使う場合は、以下の2行をコメントアウトするといいらしい。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# /spec/spec_helper.rb

RSpec.configure do |config|
  # == Mock Framework
  #
  # If you prefer to use mocha, flexmock or RR, uncomment the appropriate line:
  #
  # config.mock_with :mocha
  # config.mock_with :flexmock
  # config.mock_with :rr
  config.mock_with :rspec

  # Remove this line if you're not using ActiveRecord or ActiveRecord fixtures
  #config.fixture_path = &quot;#{::Rails.root}/spec/fixtures&quot; # コメントアウト

  # If you're not using ActiveRecord, or you'd prefer not to run each of your
  # examples within a transaction, remove the following line or assign false
  # instead of true.
  #config.use_transactional_fixtures = true # コメントアウト
end
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>MongoDBを使う際のRspecの設定メモ</title>
    <updated>2011-07-18T22:52:00+00:00</updated>
    <dc:date>2011-07-18T22:52:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/67/</id>
    <link href="https://blog.naoty.dev/67/"/>
    <summary>&lt;pre&gt;&lt;code&gt;# /Gemfile
gem 'rspec-rails'
gem 'factory_girl_rails'
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ bundle install --path vendor/bundle
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ rails g rspec:install
Mon Jul 18 21:51:37 [initandlisten] connection accepted from 127.0.0.1:50773 #1
Mon Jul 18 21:51:37 [conn1] end connection 127.0.0.1:50773
Mon Jul 18 21:51:37 [initandlisten] connection accepted from 127.0.0.1:50774 #2
      create .rspec
      create spec
      create spec/spec_helper.rb
Mon Jul 18 21:51:37 [conn2] end connection 127.0.0.1:50774
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作成済みのモデルのrspecファイルを生成する場合&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rails g rspec:model user
Mon Jul 18 21:55:13 [initandlisten] connection accepted from 127.0.0.1:50866 #3
Mon Jul 18 21:55:13 [conn3] end connection 127.0.0.1:50866
Mon Jul 18 21:55:13 [initandlisten] connection accepted from 127.0.0.1:50867 #4
      create spec/models/user_spec.rb
Mon Jul 18 21:55:14 [conn4] end connection 127.0.0.1:50867
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ファクトリーを定義するファイルを作成&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ touch spec/factories.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;テスト実行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rake spec &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>Rails3にrspecとfactory girlをインストールしたときのメモ</title>
    <updated>2011-07-18T22:07:00+00:00</updated>
    <dc:date>2011-07-18T22:07:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/66/</id>
    <link href="https://blog.naoty.dev/66/"/>
    <summary>&lt;pre&gt;&lt;code&gt;Object.class #=&amp;gt; Class
Module.class #=&amp;gt; Class
Class.class #=&amp;gt; Class

Class.superclass #=&amp;gt; Module
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;irbで上記のような結果を得たので、これよりClassクラスってこんな感じじゃないかと思った。あくまで仮説だけどねー。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Class &amp;lt; Module
  Object = self.new
  Module = self.new
  Class = self.new

  # ...
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;概念じゃよくわかんないので、ソースコードで考えてみた方がわかりやすい気がする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追記&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Class.instance_methods(false)
#=&amp;gt; [:allocate, :new, :superclass]

Class.private_methods(false)
#=&amp;gt; [:inherited, :initialize, :initialize_copy]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;という結果から、さっきの仮説を少し修正する必要があるっぽい。newはインスタンス・メソッドだということがわかったから。で、newの代わりにインスタンスを作ってるのが、プライベート・メソッドのinitializeっぽい。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Class &amp;lt; Module
  Object = self.initialize
  Module = self.initialize
  Class = self.initialize

  # ...
end
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>Classクラスに関する仮説</title>
    <updated>2011-07-11T23:44:00+00:00</updated>
    <dc:date>2011-07-11T23:44:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/65/</id>
    <link href="https://blog.naoty.dev/65/"/>
    <summary>&lt;pre&gt;&lt;code&gt;# application_helper.rb
def tag_add_class_if(tag, conditions, cl, attributes = {}, &amp;amp;block)
  if conditions
    if attributes.keys.include?(:class)
      attributes[:class] += &quot; #{cl}&quot;
    else
      attributes.merge(:class =&amp;gt; cl)
    end
  end
  content_tag tag, attributes, &amp;amp;block
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# index.html.erb
&amp;lt;%= tag_add_class_if :ul, (@user == current_user), 'current', {:class =&amp;gt; 'users'} do %&amp;gt;
  # ...
&amp;lt;% end -%&amp;gt;
#=&amp;gt; ...
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>ある条件であるクラスを追加するヘルパーメソッドつくりました</title>
    <updated>2011-07-11T17:17:00+00:00</updated>
    <dc:date>2011-07-11T17:17:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/64/</id>
    <link href="https://blog.naoty.dev/64/"/>
    <summary>&lt;pre&gt;&lt;code&gt;# application_helper.rb
def tag_hidden_if(tag, conditions, attributes = {}, &amp;amp;block)
  attributes = attributes.merge({'style' =&amp;gt; 'display:none;'}) if conditions
  content_tag tag, attributes, &amp;amp;block
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# index.html.erb
&amp;lt;% @articles.each_with_index do |article, i| -%&amp;gt;
  &amp;lt;%= tag_hidden_if :li, (i % 2 == 0), {:class =&amp;gt; 'naotyhoge'} do %&amp;gt;
    # ...
  &amp;lt;% end -%&amp;gt;
&amp;lt;% end -%&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;この例だと、偶数の列は非表示になるはずです。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>ある条件でhiddenなHTMLタグを出力するヘルパーメソッドつくりました</title>
    <updated>2011-07-11T15:26:00+00:00</updated>
    <dc:date>2011-07-11T15:26:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/63/</id>
    <link href="https://blog.naoty.dev/63/"/>
    <summary>&lt;pre&gt;&lt;code&gt;# /app/controllers/users_controller.rb
class UsersController &amp;lt; ApplicationController  
  def signin
    @user = User.create({:name =&amp;gt; params[:name], :password =&amp;gt; params[:password]})
    respond_to do |format|
      format.json { render :json =&amp;gt; @user.to_json }
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;アプリ側からのリクエストを受けると、Userインスタンスを新しく作成します。ここでは、セキュリティ面の実装は無視しています。&lt;/li&gt;
&lt;li&gt;jsonでレスポンスを返したいので、インスタンスをto_jsonでjson化したものをformat.jsonで返します。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;// /Resources/signin.js
button.addEventListener('click', function () {
	var username = usernameForm.value;
	var password = passwordForm.value;
	var confirmation = confirmationForm.value;
	
	if (username === '' || password === '' || confirmation === '') {
		Titanium.API.debug('form is blank.');
		return;
	}
	if (password !== confirmation) {
		Titanium.API.debug('confirmation is wrong.');
		return;
	}
	
	var xhr = Titanium.Network.createHTTPClient();
	xhr.open('PUT', 'http://localhost:3000/users/signin.json');
	xhr.onload = function () {
		var user = JSON.parse(this.responseText);
		Titanium.App.Properties.setString('name', user.name);
		Titanium.App.Properties.setString('password', user.password);
		Titanium.App.Properties.setInt('id', user._id);
		win.close();
	};
	xhr.send({
		'name': username,
		'password': password
	});
});
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;会員登録画面をつくったつもりです。このコードはそのボタン部分の抜粋です。&lt;/li&gt;
&lt;li&gt;サーバーにリクエストする前に最低限の検証をおこなっておきます。ひっかかったら、フォームの背景色を赤にするなど、目立たせる処理も実装するといいっすねー。&lt;/li&gt;
&lt;li&gt;Titanium.Network.HTTPClientを使って、サーバー側と非同期通信します。&lt;/li&gt;
&lt;li&gt;jsonでレスポンスを返してもらいたいので、URLの末尾に「.json」をつけておきます。&lt;/li&gt;
&lt;li&gt;Titanium.Network.HTTPClient.onloadはレスポンスが正常に返ってきた際の処理です。jsonで返ってくるので、JSON.parse()でJavaScriptのオブジェクトに変換します。&lt;/li&gt;
&lt;li&gt;Titanium.App.Propertiesで、アプリ側に変数を保持しておくことができます。ブラウザでいうところのクッキーみたいな使い方ができるので便利です。&lt;/li&gt;
&lt;li&gt;Titanium.Network.HTTPClient.send()は引数にパラメータをもつことができるので、この場合だと、ユーザー名とパスワードをオブジェクトのプロパティとしてセットします。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>アプリ（Titanium Mobile）とサーバー（Rails）間の通信</title>
    <updated>2011-07-04T00:33:00+00:00</updated>
    <dc:date>2011-07-04T00:33:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/62/</id>
    <link href="https://blog.naoty.dev/62/"/>
    <summary>&lt;pre&gt;&lt;code&gt;// app.js
Titanium.UI.setBackgroundColor('#000');

var tabGroup = Titanium.UI.createTabGroup();

var win1 = Titanium.UI.createWindow({
	url: 'map.js',
	navBarHidden: true
});
var tab1 = Titanium.UI.createTab({
	title: 'Map',
	icon: 'dark_pin.png',
	window: win1
});

var win2 = Titanium.UI.createWindow({
	url: 'list.js',
	navBarHidden: true
});
var tab2 = Titanium.UI.createTab({
	title: 'List',
	icon: 'dark_list.png',
	window: win2
});

var win3 = Titanium.UI.createWindow({
	url: 'registration.js',
	navBarHidden: true
});

tabGroup.addTab(tab1);
tabGroup.addTab(tab2);

tabGroup.addEventListener('open', function (e) {
	win3.open({
		modal: true,
		modalTransitionStyle: Titanium.UI.iPhone.MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL
	});
});

tabGroup.open();
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;// registration.js
var win = Titanium.UI.currentWindow;
win.backgroundColor = '#fff';

var button = Titanium.UI.createButton({
	title: 'Close',
	top: 150,
	width: 100,
	height: 50
});

button.addEventListener('click', function (e) {
	win.close();
});

win.add(button);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;window.open()の引数にmodalを指定することで、モーダルウィンドウを実装できる。&lt;/li&gt;
&lt;li&gt;tabGroupのopenイベントでログイン画面をopenさせる。&lt;/li&gt;
&lt;li&gt;ログインしているかによって、モーダルウィンドウをopenするかを切り替えればおｋ&lt;/li&gt;
&lt;li&gt;Titanium.UI.iPhone.MODAL_TRANSITION_STYLE_FLIP_HORIZONTALはクルッと横回転するアニメーション。ほかにもいくつかある。&lt;/li&gt;
&lt;li&gt;ログイン画面はcloseすれば、クルッと回転して元の画面が表示される（tabGroupがopenされる）。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>アプリ起動時にログイン画面を表示させる</title>
    <updated>2011-06-21T00:55:00+00:00</updated>
    <dc:date>2011-06-21T00:55:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/61/</id>
    <link href="https://blog.naoty.dev/61/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;http://f.hatena.ne.jp/naoty_k/20110616225637&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naoty_k/20110616/20110616225637.png&quot; alt=&quot;f:id:naoty_k:20110616225637p:image&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;f:id:naoty_k:20110616225637p:image&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var win = Titanium.UI.currentWindow;

var title = Titanium.UI.createLabel({
	text: 'TestApp',
	top: 100,
	height: 40,
	color: '#008800',
	font: {fontSize: 40},
	textAlign: 'center'
});
var usernameForm = Titanium.UI.createTextField({
	hintText: 'Username',
	top: 200,
	width: 250,
	height: 40,
	borderStyle: Titanium.UI.INPUT_BORDERSTYLE_ROUNDED,
	returnKeyType: Titanium.UI.RETURNKEY_NEXT,
	autocapitalization: false
});
var passwordForm = Titanium.UI.createTextField({
	hintText: 'Password',
	top: 250,
	width: 250,
	height: 40,
	borderStyle: Titanium.UI.INPUT_BORDERSTYLE_ROUNDED,
	returnKeyType: Titanium.UI.RETURNKEY_NEXT,
	passwordMask: true
});
var confirmationForm = Titanium.UI.createTextField({
	hintText: 'Confirmation',
	top: 300,
	width: 250,
	height: 40,
	borderStyle: Titanium.UI.INPUT_BORDERSTYLE_ROUNDED,
	returnKeyType: Titanium.UI.RETURNKEY_GO,
	passwordMask: true
});
var button = Titanium.UI.createButton({
	title: 'Sign in',
	top: 350,
	width: 100,
	height: 40
});

win.add(title);
win.add(usernameForm);
win.add(passwordForm);
win.add(confirmationForm);
win.add(button);
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>基本的なログインフォーム</title>
    <updated>2011-06-16T22:57:00+00:00</updated>
    <dc:date>2011-06-16T22:57:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/60/</id>
    <link href="https://blog.naoty.dev/60/"/>
    <summary>&lt;pre&gt;&lt;code&gt;var win = Titanium.UI.currentWindow;
// Titanium.Map.createViewで地図表示部品MapViewを作成する
var mapview = Titanium.Map.createView({
    mapType: Titanium.Map.STANDARD_TYPE,
    animate: true,
    regionFit: true,
    userLocation: true
});
win.add(mapview);

if (Titanium.Geolocation.locationServicesEnabled) {
    // 継続的な位置測定にはlocationイベントを用いる
    Titanium.Geolocation.addEventListener('location', funtion (e){
        // e.errorにエラー時のプロパティがセットされる
        if (!e.success || e.error) {
            alert('error: ' + JSON.stringify(e.error));
            return;
        }
        // e.coordsに位置情報のプロパティがセットされる
        var lat = e.coords.latitude;
        var lon = e.coords.longitude;
        // latitude, longitudeを動的に指定
        mapview.region = {
            latitude: lat,
            longitude: lon,
            latitudeDelta: 0.01,
            longitudeDelta: 0.01
        };
    });
}
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>Titanium Mobileで現在地を表示する</title>
    <updated>2011-06-12T23:51:00+00:00</updated>
    <dc:date>2011-06-12T23:51:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/59/</id>
    <link href="https://blog.naoty.dev/59/"/>
    <summary>&lt;ol start=&quot;0&quot;&gt;
&lt;li&gt;環境&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Mac 0S X 10.6.7&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Titanium MobileでiOS, Androidのアプリを開発する環境を構築した手順はこんな感じ。&lt;br&gt;
1.　iOS SDKをインストール&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Xcodeをインストールするときについてくる。&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://developer.apple.com/xcode/&quot;&gt;こちら&lt;/a&gt;で登録すればXcodeをインストールできる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.　Android SDKをインストール&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;http://gihyo.jp/dev/serial/01/titanium/0012&quot;&gt;こちらの記事&lt;/a&gt;通りにやったらうまくいった。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.　Titanium Developerをインストール&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;http://www.appcelerator.com/products/download/&quot;&gt;こちら&lt;/a&gt;からインストール。&lt;/li&gt;
&lt;li&gt;これはエディタではないので、別にエディタを用意する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（こっからは任意）&lt;br&gt;
4.　Titanium Studioをインストール&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Titaniumの開発元が作ったIDEで、Aptana Studio 3とほぼ同じ。&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://preview.appcelerator.com/studio/&quot;&gt;こちら&lt;/a&gt;からインストール。&lt;/li&gt;
&lt;li&gt;どっかでAndroid SDKのディレクトリを指定しないと、Androidのエミュレータを実行できない。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Titanium Mobileによる開発環境の構築</title>
    <updated>2011-06-11T17:20:00+00:00</updated>
    <dc:date>2011-06-11T17:20:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/58/</id>
    <link href="https://blog.naoty.dev/58/"/>
    <summary>&lt;pre&gt;&lt;code&gt;$ rails runner [ファイル名]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;で実行します。ファイルは/script以下に配置します。&lt;/p&gt;
&lt;p&gt;今回は、一日の（投稿数、新規ユーザーなどの）カウントをリセットするバッチ処理を書いてみました。&lt;/p&gt;
&lt;p&gt;/script/reset_count.rb&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# encoding: utf-8
SomethingCool.all.each {|sc| sc.update_attributes({:cool_user_count =&amp;gt; 0})}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;あとは、このファイルをcronで一日一回実行すれば、毎日のカウントをリセットすることができますね。&lt;/p&gt;</summary>
    <title>Rails 3のバッチ処理</title>
    <updated>2011-06-10T11:39:00+00:00</updated>
    <dc:date>2011-06-10T11:39:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/57/</id>
    <link href="https://blog.naoty.dev/57/"/>
    <summary>&lt;p&gt;railsで動的なページにTweetボタンを埋め込みたいので、公式ドキュメント&lt;a href=&quot;#f1&quot; title=&quot;http://dev.twitter.com/pages/tweet_button&quot;&gt;*1&lt;/a&gt;を見ながら、カスタマイズしてみました。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&quot;http://platform.twitter.com/widgets.js&quot; type=&quot;text/javascript&quot;&amp;gt;script&amp;gt;
&amp;lt;div&amp;gt;
  &amp;lt;a href=&quot;http://twitter.com/share&quot; class=&quot;twitter-share-button&quot;
       data-count=&quot;horizontal&quot;
       data-lang=&quot;ja&quot;
       data-related=&quot;naoty_k&quot;
       data-text=&quot;RT #{@article.title}&quot;
       data-url=&quot;#{article_url(@article)}&quot;
       data-via=&quot;naoty_k&quot;&amp;gt;Tweeta&amp;gt;
div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;デフォルト&lt;/th&gt;
&lt;th&gt;意味&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;data-count&lt;/td&gt;
&lt;td&gt;horizontal&lt;/td&gt;
&lt;td&gt;ツイート数をどこに表示するか&lt;/td&gt;
&lt;td&gt;horizontal, vertial, noneから選択&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data-lang&lt;/td&gt;
&lt;td&gt;en&lt;/td&gt;
&lt;td&gt;言語&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data-related&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ツイート後にオススメされるアカウント&lt;/td&gt;
&lt;td&gt;挙動が細かいので公式ドキュメントを参照&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data-text&lt;/td&gt;
&lt;td&gt;titleタグ内&lt;/td&gt;
&lt;td&gt;ツイート本文&lt;/td&gt;
&lt;td&gt;ここにurlを貼る必要はない&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data-url&lt;/td&gt;
&lt;td&gt;HTTP Referer&lt;/td&gt;
&lt;td&gt;ツイート本文に貼られるurl&lt;/td&gt;
&lt;td&gt;t.coで短縮される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data-via&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ツイート本文末尾に「via @user_name」をつける&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href=&quot;#fn1&quot;&gt;*1&lt;/a&gt;:&lt;a href=&quot;http://dev.twitter.com/pages/tweet%5C_button&quot;&gt;http://dev.twitter.com/pages/tweet\_button&lt;/a&gt;&lt;/p&gt;</summary>
    <title>Tweetボタンのカスタマイズ</title>
    <updated>2011-06-09T11:20:00+00:00</updated>
    <dc:date>2011-06-09T11:20:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/56/</id>
    <link href="https://blog.naoty.dev/56/"/>
    <summary>&lt;pre&gt;&lt;code&gt;$(function (){
    var $text_area = $('#text_area');
    $text_area.attr('selectionEnd', 0);
    $text_area.attr('selectionStart', 0);
    $text_area.focus();
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;focus()を使うと、文末にキャレット（カーソル）が移動してしまうので、selectionEnd属性とselectionStart属性を0に指定してあげることで、先頭に移動することができます。Firefoxのみで検証したので、IEについても検証次第、追記します。取り急ぎ。&lt;/p&gt;</summary>
    <title>jQueryでテキストエリアのキャレットを先頭に移動する</title>
    <updated>2011-05-23T18:48:00+00:00</updated>
    <dc:date>2011-05-23T18:48:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/55/</id>
    <link href="https://blog.naoty.dev/55/"/>
    <summary>&lt;pre&gt;&lt;code&gt;link_to &quot;メール送信&quot;, mail_user_path(:article_id =&amp;gt; @article)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ハードコーディングはなるべく回避するため、ルーティングヘルパーの使い方をマスターしたい。こっちの方がカッコイイし。&lt;/p&gt;</summary>
    <title>ルーティングヘルパーにパラメーターを付加する</title>
    <updated>2011-05-12T18:05:00+00:00</updated>
    <dc:date>2011-05-12T18:05:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/54/</id>
    <link href="https://blog.naoty.dev/54/"/>
    <summary>&lt;pre&gt;&lt;code&gt;resources :users
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　これで、基本的なアクション（index, show, new, create, edit, update, delete）のマッピングができる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;resources :users do
  get 'mail', :on =&amp;gt; :member
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　他にアクションを加えたい場合、ブロック内に「HTTP verb」「アクション名」「member（単数）かcollection（複数）か」を加えればおｋ。この場合のルーティングヘルパーは「mail_user_path(id)」となる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2011.5.13追記&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;resources :users do
  get 'mail', :on =&amp;gt; :member #=&amp;gt; mail_user_path(id)
  get 'group', :on =&amp;gt; :collection #=&amp;gt; group_users_path
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;member（単数）だったらヘルパーも単数、collection（複数）だったらヘルパーも複数だった。Railsの単数複数は徹底してるねー。&lt;/p&gt;</summary>
    <title>Rails3のルーティングの初歩</title>
    <updated>2011-05-12T13:36:00+00:00</updated>
    <dc:date>2011-05-12T13:36:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/53/</id>
    <link href="https://blog.naoty.dev/53/"/>
    <summary>&lt;p&gt;0.　環境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows Vista&lt;/li&gt;
&lt;li&gt;Ruby 1.8.7&lt;/li&gt;
&lt;li&gt;Rails 3.0.7&lt;/li&gt;
&lt;li&gt;MongoDB 1.8.1&lt;/li&gt;
&lt;li&gt;bundler 1.0.13&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1.　新規アプリケーションの作成&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rails new sample -O
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;「-O」（大文字のオー、これで2回やりなおした(´・ω・｀)）をつけると、config/database.ymlが生成されません。今回はmongoidを使うので、このオプションを使います。&lt;/li&gt;
&lt;li&gt;オプションをつけないと、sqlite3でconfig/database.ymlが作られます。&lt;/li&gt;
&lt;li&gt;「-d mysql」でmysqlでconfig/database.ymlが作られます。mysqlのところを他のDBに変えれば、柔軟に変更できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;はじめる！Rails3（1）&lt;a href=&quot;http://tatsu-zine.com/books/rails3&quot;&gt;http://tatsu-zine.com/books/rails3&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.　bundlerでmongoidのインストール&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gemfileを編集します。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# Bundle the extra gems:
# gem 'bj'
# gem 'nokogiri'
# gem 'sqlite3-ruby', :require =&amp;gt; 'sqlite3'
# gem 'aws-s3', :require =&amp;gt; 'aws/s3'
gem 'mongoid', '~&amp;gt; 2.0'
gem 'bson_ext', '~&amp;gt; 1.3'
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;bundlerからmongoidとbson_ext（パフォーマンスを上げるらしい）をvendor/bundleにインストールします。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;bundle install vendor/bundle
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここでエラー発生。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ bundle install vendor/bundle 
Fetching source index for http://rubygems.org/
Using activesupport (3.0.7)
Using builder (2.1.2)
Using i18n (0.5.0)
Using activemodel (3.0.7)
Using bson (1.3.0)
Installing bson_ext (1.3.0) c:/Ruby187/lib/ruby/site_ruby/1.8/rubygems/defaults/
operating_system.rb:9: The 'bson_ext' native gem requires installed build tools.
 (Gem::InstallError)

Please update your PATH to include build tools or download the DevKit
from 'http://rubyinstaller.org/downloads' and follow the instructions
at 'http://github.com/oneclick/rubyinstaller/wiki/Development-Kit'
        from c:/Ruby187/lib/ruby/site_ruby/1.8/rubygems/installer.rb:141:in `call'
        from c:/Ruby187/lib/ruby/site_ruby/1.8/rubygems/installer.rb:141:in `install'
        from c:/Ruby187/lib/ruby/site_ruby/1.8/rubygems/installer.rb:140:in `each'
        from c:/Ruby187/lib/ruby/site_ruby/1.8/rubygems/installer.rb:140:in `install'
        from c:/Ruby187/lib/ruby/gems/1.8/gems/bundler-1.0.13/lib/bundler/source.rb:100:in `install'
        from c:/Ruby187/lib/ruby/gems/1.8/gems/bundler-1.0.13/lib/bundler/installer.rb:58:in `run'
        from c:/Ruby187/lib/ruby/gems/1.8/gems/bundler-1.0.13/lib/bundler/rubygems_integration.rb:90:in `with_build_args'
        from c:/Ruby187/lib/ruby/gems/1.8/gems/bundler-1.0.13/lib/bundler/installer.rb:57:in `run'
        from c:/Ruby187/lib/ruby/gems/1.8/gems/bundler-1.0.13/lib/bundler/spec_set.rb:12:in `each'
        from c:/Ruby187/lib/ruby/gems/1.8/gems/bundler-1.0.13/lib/bundler/spec_set.rb:12:in `each'
        from c:/Ruby187/lib/ruby/gems/1.8/gems/bundler-1.0.13/lib/bundler/installer.rb:49:in `run'
        from c:/Ruby187/lib/ruby/gems/1.8/gems/bundler-1.0.13/lib/bundler/installer.rb:8:in `install'
        from c:/Ruby187/lib/ruby/gems/1.8/gems/bundler-1.0.13/lib/bundler/cli.rb:222:in `install'
        from c:/Ruby187/lib/ruby/gems/1.8/gems/bundler-1.0.13/lib/bundler/vendor/thor/task.rb:22:in `send'
        from c:/Ruby187/lib/ruby/gems/1.8/gems/bundler-1.0.13/lib/bundler/vendor/thor/task.rb:22:in `run'
        from c:/Ruby187/lib/ruby/gems/1.8/gems/bundler-1.0.13/lib/bundler/vendor/thor/invocation.rb:118:in `invoke_task'
        from c:/Ruby187/lib/ruby/gems/1.8/gems/bundler-1.0.13/lib/bundler/vendor/thor.rb:246:in `dispatch'
        from c:/Ruby187/lib/ruby/gems/1.8/gems/bundler-1.0.13/lib/bundler/vendor/thor/base.rb:389:in `start'
        from c:/Ruby187/lib/ruby/gems/1.8/gems/bundler-1.0.13/bin/bundle:13
        from c:/Ruby187/bin/bundle:19:in `load'
        from c:/Ruby187/bin/bundle:19
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここで詰まった＼(^o^)／&lt;/p&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mongoid: Installation &lt;a href=&quot;http://mongoid.org/docs/installation.html&quot;&gt;http://mongoid.org/docs/installation.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    <title>Rails3でMongoidを使ってみる</title>
    <updated>2011-05-10T00:09:00+00:00</updated>
    <dc:date>2011-05-10T00:09:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/52/</id>
    <link href="https://blog.naoty.dev/52/"/>
    <summary>&lt;pre&gt;&lt;code&gt;PS1='\[\n\033[32m\u@\h \033[33m\w\n\033[0m\$ \]'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;gitbashのプロンプトの表示が好きだったので、.bashrcもそれに合わせた。&lt;/p&gt;</summary>
    <title>ターミナルのプロンプトの設定</title>
    <updated>2011-05-09T12:22:00+00:00</updated>
    <dc:date>2011-05-09T12:22:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/51/</id>
    <link href="https://blog.naoty.dev/51/"/>
    <summary>&lt;p&gt;環境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ruby 1.9.1&lt;/li&gt;
&lt;li&gt;Rails 2.3.12&lt;/li&gt;
&lt;li&gt;テストコードというものを昨日しった拙者&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例として、任意の年のアクセス数をcsv形式で出力するexportというアクションを機能テストしたい。そこで、選択可能な過去5年間についてリクエストをだして出力をテストする。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;require 'test_helper'

class AccessCountsControllerTest &amp;lt; ActionController::TestCase
  test 'export' do
    ((Date.today.year - 5)..(Date.today.year)).each do |year|
      post(:export, {:year =&amp;gt; &quot;#{year}&quot;})
      assert_response :success
      assert_not_nil @response.body
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;@response.bodyに出力された内容が入っているらしい。どうやら、JSON.parseやcsvのパーサを使うことで@response.bodyの中身を解析し、中身を詳細にテストすることもできるようだ。&lt;/p&gt;</summary>
    <title>CSV出力の機能テスト</title>
    <updated>2011-04-28T17:41:00+00:00</updated>
    <dc:date>2011-04-28T17:41:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/50/</id>
    <link href="https://blog.naoty.dev/50/"/>
    <summary>&lt;p&gt;環境変数HOMEを削除したら解決した。削除したことによる不都合は今のところないみたい。&lt;/p&gt;</summary>
    <title>Ruby InstallerでWindowsにRubyを入れるとirbでエラーが起こる件</title>
    <updated>2011-04-18T00:36:00+00:00</updated>
    <dc:date>2011-04-18T00:36:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/49/</id>
    <link href="https://blog.naoty.dev/49/"/>
    <summary>&lt;p&gt;0.　環境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CentOS（さくらVPS標準のもの）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1.　gitをインストールする&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vi /etc/yum/repos.d/CentOS-Base.repo
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[dag]
name=Dag RPM Repository for Redhat EL5
baseurl=http://apt.sw.be/redhat/el$releasever/en/$basearch/dag
gpgcheck=1
enabled=0
gpgkey=http://dag.wieers.com/packages/RPM-GPG-KEY.dag.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;sudo yum --enablerepo=dag -y install git
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a href=&quot;http://www.yuyak.com/585&quot;&gt;http://www.yuyak.com/585&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.　emacsをインストールする&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo yum install emacs
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a href=&quot;http://blog.remora.cx/2010/04/gnu-screen-on-centos-54.html&quot;&gt;http://blog.remora.cx/2010/04/gnu-screen-on-centos-54.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3.　m4をインストールする&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd
mkdir download
wget ftp://ftp.riken.go.jp/Linux/fedora/releases/11/Fedora/source/SRPMS/m4-1.4.12-2.fc11.src.rpm
sudo rpm -ivh --nomd5 m4-1.4.12-2.fc11.src.rpm
cd /usr/src/redhat/SPECS
sudo rpmbuild -ba m4.spec
cd ../RPMS/x86_64
rpm -Uvh m4-1.4.12-2.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a href=&quot;http://blog.remora.cx/2010/04/gnu-screen-on-centos-54.html&quot;&gt;http://blog.remora.cx/2010/04/gnu-screen-on-centos-54.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4.　autoconfをインストールする&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ~/download
wget ftp://ftp.riken.go.jp/Linux/fedora/releases/11/Fedora/source/SRPMS/autoconf-2.63-2.fc11.src.rpm
sudo rpm -ivh --nomd5 autoconf-2.63-2.fc11.src.rpm
cd /usr/src/redhat/SPECS
sudo rpmbuild -ba autoconf.spec
cd ../RPMS/noarch
sudo rpm -Uvh autoconf-2.63-2.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a href=&quot;http://blog.remora.cx/2010/04/gnu-screen-on-centos-54.html&quot;&gt;http://blog.remora.cx/2010/04/gnu-screen-on-centos-54.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;5.　ncurses-develをインストールする&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo yum install ncurses-devel.x86_64
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a href=&quot;http://cknbstr.tumblr.com/post/1154650974/tscreen-configure-error-no-tgetent-no&quot;&gt;http://cknbstr.tumblr.com/post/1154650974/tscreen-configure-error-no-tgetent-no&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;6.　GNU screenをインストールする&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ~/screen/src
autoconf
autoheader
./configure
make
sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;参考：&lt;br&gt;
&lt;a href=&quot;http://blog.remora.cx/2010/04/gnu-screen-on-centos-54.html&quot;&gt;http://blog.remora.cx/2010/04/gnu-screen-on-centos-54.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;7.　インストールを確認する&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;screen --version
Screen version 4.01.00devel (GNU8cf5efc) 2-May-06
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>さくらVPSに最新版GNU screenをインストールする</title>
    <updated>2011-04-08T04:14:00+00:00</updated>
    <dc:date>2011-04-08T04:14:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/48/</id>
    <link href="https://blog.naoty.dev/48/"/>
    <summary>&lt;p&gt;submit_tagの場合&lt;br&gt;
view&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;% form_tag -%&amp;gt;
  &amp;lt;%= submit_tag(&quot;Search&quot;, :name =&amp;gt; &quot;search&quot;) %&amp;gt;
  &amp;lt;%= submit_tag(&quot;Delete&quot;, :name =&amp;gt; &quot;delete&quot;) %&amp;gt;
&amp;lt;% end -%&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;controller&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if params[:search]
  // ...
elsif params[:delete]
  // ...
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;image_submit_tagの場合&lt;br&gt;
view&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;% form_tag -%&amp;gt;
  &amp;lt;%= image_submit_tag(&quot;search.png&quot;, :name =&amp;gt; &quot;search&quot;) %&amp;gt;
  &amp;lt;%= image_submit_tag(&quot;delete.png&quot;, :name =&amp;gt; &quot;delete&quot;) %&amp;gt;
&amp;lt;% end -%&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;controller&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if params['search.x']
  // ...
elsif params['delete.x']
  // ...
end
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>ボタンによって処理を切り替える</title>
    <updated>2011-03-30T17:26:00+00:00</updated>
    <dc:date>2011-03-30T17:26:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/47/</id>
    <link href="https://blog.naoty.dev/47/"/>
    <summary>&lt;p&gt;HTML&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;table&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;
            &amp;lt;input type=&quot;radio&quot; name=&quot;A&quot; value=&quot;0&quot; /&amp;gt;
            &amp;lt;input type=&quot;radio&quot; name=&quot;B&quot; value=&quot;1&quot; /&amp;gt;
            &amp;lt;input type=&quot;radio&quot; name=&quot;C&quot; value=&quot;2&quot; /&amp;gt;
            &amp;lt;input type=&quot;radio&quot; name=&quot;D&quot; value=&quot;3&quot; /&amp;gt;
        td&amp;gt;
    tr&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;
            &amp;lt;select&amp;gt;
                &amp;lt;option selected=&quot;selected&quot; value=&quot;AAA&quot;&amp;gt;AAAoption&amp;gt;
                &amp;lt;option value=&quot;BBB&quot;&amp;gt;BBBoption&amp;gt;
                &amp;lt;option value=&quot;CCC&quot;&amp;gt;CCCoption&amp;gt;
            select&amp;gt;
        td&amp;gt;
    tr&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;
            &amp;lt;input id=&quot;reset&quot; type=&quot;submit&quot; value=&quot;reset&quot; /&amp;gt;
        td&amp;gt;
    tr&amp;gt;
table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;JavaScript&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$('#reset').click(function (event) {
    event.preventDefault();
    $(':checked').attr('checked', false);
    $('select').attr('selectedIndex', 0);
});
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>jQueryでの選択解除</title>
    <updated>2011-03-29T11:55:00+00:00</updated>
    <dc:date>2011-03-29T11:55:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/46/</id>
    <link href="https://blog.naoty.dev/46/"/>
    <summary>&lt;p&gt;　どうやらjsdo.itからそのままはてなダイアリーに埋め込みができるようになったみたいですね。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;a href=&quot;http://jsdo.it/naoty/zV9A&quot; title=&quot;お絵かき&quot;&gt;お絵かき - jsdo.it - share JavaScript, HTML5 and CSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　これを作るにあたってのポイントは2つでした。第一に、ドラッグの実装。第二に、マウスの動きに合わせて線を引くこと。&lt;/p&gt;
&lt;p&gt;1.　ドラッグの実装&lt;/p&gt;
&lt;p&gt;　mousedownイベント・mousemoveイベント・mouseupイベントを組み合わせ、ドラッグの状態をdragFlagという変数で管理することでドラッグを実装します。マウスが押されているとき、dragFlagはtrueとなっており、この状態ではdraw関数より線を引くことができます。マウスが押されていないとき、あるいはマウスが対象から離れたとき、dragFlagはfalseとなり、この状態では線を引くことはできません。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// jQuery v1.5.1
$canvas.mousedown(startDrawing);
$canvas.mousemove(draw);
$canvas.bind('mouseup mouseleave', endDrawing);

function startDrawing(event) {
    // set x and y
    dragFlag = true;
}

function draw(event) {
    if (dragFlag) {
        // draw
    }
}

function endDrawing() {
    dragFlag = false;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2.　マウスの動きに合わせて線を引く&lt;/p&gt;
&lt;p&gt;　fromX, fromYとtoX, toYという2種類の座標の間に線を引き、これらの座標をmousemoveされる度に書き換えることでマウスの動きに合わせて線を引くことができます。マウスが押されたときの座標を出発点となる座標（fromX, fromY）にセットします。mousemoveすると、動いた先の座標を到達点となる座標（toX, toY）にセットして、出発点と到達点との間に線を引きます。その後、到達点の座標を出発点の座標にセットすることで、連続的に出発点と到達点をセットすることができるため、なめらかに線を引くことができるようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function startDrawing(event) {
    fromX = event.pageX - $canvas.offset().left;
    fromY = event.pageY - $canvas.offset().top;
    dragFlag = true;
}

function draw(event) {
    if (dragFlag) {
        var toX = event.pageX - $canvas.offset().left,
            toY = event.pageY - $canvas.offset().top;
        context.beginPath();
        context.moveTo(fromX, fromY);
        context.lineTo(toX, toY);
        context.stroke();
        fromX = toX;
        fromY = toY;
    }
}
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>canvasでお絵かき</title>
    <updated>2011-03-25T23:32:00+00:00</updated>
    <dc:date>2011-03-25T23:32:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/45/</id>
    <link href="https://blog.naoty.dev/45/"/>
    <summary>&lt;p&gt;　Google Maps API v3で入力した場所名あるいは住所から緯度経度を取得し、Twitter APIでその緯度経度を使ってタイムラインを検索するアプリを作ったので、その記録。実物はここで見れる。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;a href=&quot;http://jsdo.it/naoty/rK4I&quot; title=&quot;タイムライン場所検索&quot;&gt;タイムライン場所検索 - jsdo.it - share JavaScript, HTML5 and CSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JavaScript&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Google Maps API V3
// Twitter API

$(function () {

// initialize
$('#options').hide();

// events
$('#search').click(function (e) {
	e.preventDefault();
	getLatLng($('#address').val()); // (1)
}).click();
$('#option').click(function (e) {
	e.preventDefault();
	$('#options').slideToggle(); // (2)
});

// functions
function getLatLng(place) {
	var geocoder = new google.maps.Geocoder(); // (3)
	geocoder.geocode({ // (4)
		address: place
	}, function (results, status) {
		if (status == google.maps.GeocoderStatus.OK) {
			var latlng = results[0].geometry.location; // (5)
			searchTimeline(latlng.lat(), latlng.lng()); // (1)
		} else {
			alert('Geocode is not successful for the following reason: ' + status);
		}
	});
}

function searchTimeline(lat, lng) {
	var radius = $('#radius').val() || 10;
	$.ajax({
		type: 'GET',
		url: 'http://search.twitter.com/search.json',
		data: {
			q: $('#keyword').val(),
			geocode: lat + ',' + lng + ',' + radius + 'km', // (6)
			rpp: $('#number').val() || 10
		},
		dataType: 'jsonp',
		success: function (data) {
			var timeline = [];
			$.each(data.results, function () {
				var user = ' + this.from_user + '&quot; target=&quot;_blank&quot;&amp;gt;' + this.from_user + '';
				var datetime = ' + this.from_user + '/status/' + this.id_str + '&quot; target=&quot;_blank&quot;&amp;gt;' + formatTime(this.created_at) + '';
				var text = this.text
					.replace(/(http:\S+)/g, '$1')
					.replace(/@([^\s:]+)/g, '@$1')
					.replace(/#(\S+)/g, '#$1');
				timeline.push([
					'',
						'' + ' + this.profile_image_url + '&quot; /&amp;gt;',
						'' + user + '',
						'' + datetime + '',
						'' + text + '',
					''
				].join('')); // (7)
			});
			$('#timeline').html(timeline.join(''));
		}
	});
}

function formatTime(time) {
	var createdAt = time.split(' ');
	var datetime = new Date(createdAt[2] + ' ' + createdAt[1] + ', ' + createdAt[3] + ' ' + createdAt[4]);
	datetime.setHours(datetime.getHours() + 9);
	return datetime.toLocaleString();
}

});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(1)　緯度経度を取得した後にタイムライン検索を行うには、searchTimeline関数はgetLatLng関数のコールバックで呼び出す必要がある。以下のように記述すると、searchTimeline関数がgetLatLng関数内のAjax通信と同時に実行されるために、緯度経度を渡すことができず失敗する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// events
$('#search').click(function (e) {
	e.preventDefault();
	getLatLng($('#address').val());
	searchTimeline(lat, lng);
}).click();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(2)　オプション入力フォームの表示／非表示切り替え。slideToggle()関数は便利。&lt;br&gt;
(3)　Google Maps API v3では、住所と緯度経度の変換はgoogle.maps.Geocoderクラスを通じて行われる。そのため、まずGeocoderオブジェクトを生成する。&lt;br&gt;
(4)　Geocoder.geocode()関数は、第1引数にリクエストパラメータ、第2引数にコールバック関数をとる。この場合、入力された場所名あるいは住所をaddressというパラメータとしてリクエストを送信する。レスポンスでは、resultsにデータが、statusに通信結果が入っている。&lt;br&gt;
(5)　results.geometry.locationでlatlngオブジェクトを取得できる。latlng.lat()で緯度を、latlng.lng()で経度を取得できる。&lt;br&gt;
(6)　取得した緯度経度をタイムライン検索のリクエストパラメータにセットする。&lt;/p&gt;</summary>
    <title>Google Maps APIとTwitter APIのマッシュアップ</title>
    <updated>2011-03-20T19:54:00+00:00</updated>
    <dc:date>2011-03-20T19:54:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/44/</id>
    <link href="https://blog.naoty.dev/44/"/>
    <summary>&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
    &amp;lt;li class=&quot;pref&quot;&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;miyagia&amp;gt;li&amp;gt;
    &amp;lt;li class=&quot;city&quot;&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;sendaia&amp;gt;li&amp;gt;
    &amp;lt;li class=&quot;city&quot;&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;kesennumaa&amp;gt;li&amp;gt;
    &amp;lt;li class=&quot;city&quot;&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;ishinomakia&amp;gt;li&amp;gt;
    &amp;lt;li class=&quot;city&quot;&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;onagawaa&amp;gt;li&amp;gt;
    &amp;lt;li class=&quot;pref&quot;&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;iwatea&amp;gt;li&amp;gt;
    &amp;lt;li class=&quot;city&quot;&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;miyakoa&amp;gt;li&amp;gt;
    &amp;lt;li class=&quot;city&quot;&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;rikuzentakadaa&amp;gt;li&amp;gt;
    &amp;lt;li class=&quot;pref&quot;&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;fukushimaa&amp;gt;li&amp;gt;
    &amp;lt;li class=&quot;city&quot;&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;soumaa&amp;gt;li&amp;gt;
ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$(&quot;li.pref&quot;).click(accordion); // (1)

function accordion(e) {
    var $this = $(this);
    if (!$this.hasClass(&quot;opened&quot;)) { // (2)
        $(&quot;li.opened&quot;).removeClass(&quot;opened&quot;).nextUntil(&quot;.pref&quot;).slideUp(); // (3)
        $this.addClass(&quot;opened&quot;).nextUntil(&quot;.pref&quot;).slideDown(); // (4)
    } else { // (5)
        $this.removeClass(&quot;opened&quot;).nextUntil(&quot;.pref&quot;).slideUp(); // (6)
    }
    e.preventDefault(); // (7)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(1)：「pref」クラスを持つli要素がクリックされると、accordion関数が実行される。&lt;br&gt;
(2)：クリックされたli要素が「opened」クラスを持っていなければ、&lt;br&gt;
(3)：「opened」クラスを持つli要素から「opened」クラスを取り除き、このli要素と次に現れる「pref」クラスを持つli要素との間にあるli要素をslideUpする。&lt;br&gt;
(4)：クリックされたli要素に「opened」クラスをつけ、このli要素と次に現れる「pref」クラスを持つli要素との間にあるli要素をslideDownする。&lt;br&gt;
(5)：クリックされたli要素が「opened」クラスを持っていれば、&lt;br&gt;
(6)：クリックされたli要素から「opened」クラスを取り除き、このli要素と次に現れる「pref」クラスを持つli要素との間にあるli要素をslideUpする。&lt;br&gt;
(7)：li直下にあるa要素にデフォルトでセットされているイベント（他ページへのジャンプ）を実行させない。&lt;/p&gt;</summary>
    <title>jQueryによるアコーディオンパネル</title>
    <updated>2011-03-15T14:04:00+00:00</updated>
    <dc:date>2011-03-15T14:04:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/43/</id>
    <link href="https://blog.naoty.dev/43/"/>
    <summary>&lt;p&gt;1.　典型的なfor文&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for (var i = 0; i &amp;lt; array.length; i++) {
    statement
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;ループ開始前に「var i = 0」でループに使う変数を宣言する。ちなみに、「,」でつなげると、複数の変数を宣言できる。&lt;/li&gt;
&lt;li&gt;「i &amp;lt; array.length」がtrueであるかぎり、ループが続く。&lt;/li&gt;
&lt;li&gt;「i++」が各ループの最後に実行される。「i++」はiが0のとき、iに1を足して0を返す。&lt;/li&gt;
&lt;li&gt;各ループのはじめにarray.lengthを呼び出しているので、効率が悪い。事前にキャッシュすると2.のようになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.　改良型for文&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var i = 0, len = array.length;
for (; i &amp;lt; len; i++) {
    statement
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;事前にiとarray.lengthをキャッシュしておく。&lt;/li&gt;
&lt;li&gt;「;」は省略できない。なんか気持ち悪い。whileを使ってシンプルにすると、3.のようになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.　while文&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var len = array.length;
while (len--) {
    statement
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;「len--」がfalseになるとループが停止する。&lt;/li&gt;
&lt;li&gt;「len--」は、lenが1のとき、lenに0をセットし、1を返す（よって、ループは続く）。lenが0のとき、lenに-1をセットし、0を返す（よって、falseと解釈されループは停止する）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.　while文・do while文のテスト&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var i = 10
while (i--) {
    console.log(i);
}
//=&amp;gt; 9, 8, 7, 6, 5, 4, 3, 2, 1, 0

while (--i) {
    console.log(i);
}
//=&amp;gt; 9, 8, 7, 6, 5, 4, 3, 2, 1

do {
    console.log(i);
} while (i--)
//=&amp;gt; 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0

do {
    console.log(i);
} while (--i)
//=&amp;gt; 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;「i--」はiを返してから1引く。「--i」は1引いてからiを返す。&lt;/li&gt;
&lt;li&gt;while文はループ開始時に評価し、do while文はループ終了時に評価する。&lt;/li&gt;
&lt;li&gt;回数を指定してループを実行したいときは、「while (i--) {}」か「do {} while (i--)」がいい。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>JavaScriptのループ文あれこれ</title>
    <updated>2011-03-10T11:46:00+00:00</updated>
    <dc:date>2011-03-10T11:46:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/42/</id>
    <link href="https://blog.naoty.dev/42/"/>
    <summary>&lt;p&gt;　日付を入力するフォームを簡単に作成できるselect_date/select_datetimeというヘルパーを使って日付検索を実装しました。まだ不完全なところがありそうですが。一応、記録しておきます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;期間で検索するには、select_datetimeを2回使います。なので、パラメータを区別するためにprefixオプションを使います。&lt;/li&gt;
&lt;li&gt;パラメータをそのまま検索条件に使うことはできないので、mktime_from_selectというプライベートメソッドを用意して、Timeオブジェクトに変換します。&lt;/li&gt;
&lt;li&gt;@fromと@toという変数を使ってパラメータを保持しておくことで、入力した日付を引き続き表示させます。select_datetimeの第1引数で表示する日付を設定できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;View&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;%= select_datetime(@from || Time.now, {:prefix =&amp;gt; &quot;from&quot;}) %&amp;gt; 〜 
&amp;lt;%= select_datetime(@to || Time.now, {:prefix =&amp;gt; &quot;to&quot;}) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Controller&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def index
  conditions = []
  conditions &amp;lt;&amp;lt; [&quot;created_at&amp;gt;=?&quot;, mktime_from_select(params[:from])] unless params[:from][:year].empty?
  conditions &amp;lt;&amp;lt; [&quot;created_at&amp;lt;=?&quot;, mktime_from_select(params[:from])] unless params[:from][:year].empty?
  @users = User.find(:all, :condition =&amp;gt; flatten_conditions(conditions))
  @from = mktime_from_select(params[:from]) || Time.now
  @to = mktime_from_select(params[:to]) || Time.now
end

private

def mktime_from_select(params)
  return false if params.nil?
  year = 0; month = 0; day = 0; hour = 0; minute = 0
  params.each do |key, val|
    case key
    when &quot;year&quot;
      year = val
    when &quot;month&quot;
      month = val
    when &quot;day&quot;
      day = val
    when &quot;hour&quot;
      hour = val
    when &quot;minute&quot;
      minute = val
    end
  end
  return Time.mktime(year, month, day, hour, minute)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;※flatten_conditionsについて&lt;br&gt;
&lt;a href=&quot;http://d.hatena.ne.jp/zenpou/20080131/1201773558&quot;&gt;http://d.hatena.ne.jp/zenpou/20080131/1201773558&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    <title>select_datetimeからの日付検索</title>
    <updated>2011-03-09T19:59:00+00:00</updated>
    <dc:date>2011-03-09T19:59:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/41/</id>
    <link href="https://blog.naoty.dev/41/"/>
    <summary>&lt;p&gt;　select1の値が変更されると、select2の値がselect1と同じ値に変更される。セレクトボックスがたくさんあって入力が煩わしいインターフェイスを改善するときに、考えました。HTMLSelectElementのselectedIndexプロパティには選択されたoption要素の番号が入っているので、それを他方のselect要素に代入することで、セレクトボックスの値を変更することができます。&lt;/p&gt;
&lt;p&gt;HTML&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;select id=&quot;select1&quot;&amp;gt;
    &amp;lt;option value=&quot;1&quot;&amp;gt;1option&amp;gt;
    &amp;lt;option value=&quot;2&quot;&amp;gt;2option&amp;gt;
    &amp;lt;option value=&quot;3&quot;&amp;gt;3option&amp;gt;
    &amp;lt;option value=&quot;4&quot;&amp;gt;4option&amp;gt;
    &amp;lt;option value=&quot;5&quot;&amp;gt;5option&amp;gt;
select&amp;gt;

&amp;lt;select id=&quot;select2&quot;&amp;gt;
    &amp;lt;option value=&quot;1&quot;&amp;gt;1option&amp;gt;
    &amp;lt;option value=&quot;2&quot;&amp;gt;2option&amp;gt;
    &amp;lt;option value=&quot;3&quot;&amp;gt;3option&amp;gt;
    &amp;lt;option value=&quot;4&quot;&amp;gt;4option&amp;gt;
    &amp;lt;option value=&quot;5&quot;&amp;gt;5option&amp;gt;
select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;JavaScript&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var select1 = document.getElementById(&quot;select1&quot;),
    select2 = document.getElementById(&quot;select2&quot;);
select1.change = function () {
    select2.selectedIndex = select1.selectedIndex;
};
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>セレクトボックスの値を動的に設定する</title>
    <updated>2011-03-09T13:31:00+00:00</updated>
    <dc:date>2011-03-09T13:31:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/40/</id>
    <link href="https://blog.naoty.dev/40/"/>
    <summary>&lt;p&gt;　チェックボックスやラジオボタンで選択したものを画面遷移後もチェックしたままにしておきたい、ってことあるじゃないですか。けっこうそういうシーンは多いので、メモ。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;% @something_cool.each do |something| -%&amp;gt;
    &amp;lt;%= radio_button_tag &quot;cool&quot;, &quot;#{something}&quot;, (something == params[:cool]) %&amp;gt;&amp;lt;%=h something %&amp;gt;
&amp;lt;% end -%&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;radio_button_tag（check_box_tag）の第3引数はチェックを入れるかどうかをtrue/falseで表します&lt;/li&gt;
&lt;li&gt;このチェックボックスから送信されたパラメータはparams[:cool]に入ります&lt;/li&gt;
&lt;li&gt;（something == params[:cool]）で画面遷移前にチェックされた選択肢と現在の選択肢を比較してtrueを返すことで、チェックを入れます&lt;/li&gt;
&lt;li&gt;結果的に、これで画面遷移後もチェックを保持できますね&lt;/li&gt;
&lt;li&gt;viewにif文を書くのはあんまりキレイじゃないので、これは便利&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>選択されたチェックを画面遷移後も維持する</title>
    <updated>2011-03-04T13:11:00+00:00</updated>
    <dc:date>2011-03-04T13:11:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/39/</id>
    <link href="https://blog.naoty.dev/39/"/>
    <summary>&lt;p&gt;0.　環境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mac OS X 10.5.8&lt;/li&gt;
&lt;li&gt;Java 1.5.0_26-b03（Before）&lt;/li&gt;
&lt;li&gt;Java 1.6.0_22-b04-307（After）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;※「ソフトウェア・アップデート」で最新版のJavaを取得できるので、事前に済ませておく&lt;/p&gt;
&lt;p&gt;1.　Javaのバージョンの確認&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ java -version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2.　Java Preferences&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「Finder &amp;gt; アプリケーション &amp;gt; ユーティリティ &amp;gt; Java Preferences」にアクセス&lt;/li&gt;
&lt;li&gt;有効にするJavaのバージョンをチェック&lt;/li&gt;
&lt;li&gt;実行するJavaのバージョンをドラッグアンドドロップで優先順に上から並べる。一番上のバージョンが最優先に実行される。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;※これでOKと思っていたら、アカウントによって優先的に実行されるバージョンが異なっていることが発覚。別の方法を模索。&lt;/p&gt;
&lt;p&gt;3.　シンボリックリンクの張り替え&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;現在有効になっているJDKのバージョンは以下の「CurrentJDK」のシンボリックリンク先となる。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ ls -la /System/Library/Frameworks/JavaVM.framework/Versions/
total 64
drwxr-xr-x 14 root wheel 476 2 23 16:39 ./
drwxr-xr-x 12 root wheel 408 2 23 16:39 ../
lrwxr-xr-x 1 root wheel 5 2 23 16:39 1.3@ -&amp;gt; 1.3.1
drwxr-xr-x 3 root wheel 102 9 29 2007 1.3.1/
lrwxr-xr-x 1 root wheel 5 2 17 14:14 1.4@ -&amp;gt; 1.4.2
lrwxr-xr-x 1 root wheel 3 11 15 13:08 1.4.1@ -&amp;gt; 1.4
drwxr-xr-x 8 root wheel 272 11 15 12:36 1.4.2/
lrwxr-xr-x 1 root wheel 5 2 23 16:39 1.5@ -&amp;gt; 1.5.0
drwxr-xr-x 9 root wheel 306 3 2 16:54 1.5.0/
lrwxr-xr-x 1 root wheel 5 2 23 16:39 1.6@ -&amp;gt; 1.6.0
lrwxr-xr-x 1 root wheel 59 2 23 16:39 1.6.0@ -&amp;gt; /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents
drwxr-xr-x 10 root wheel 340 2 23 16:39 A/
lrwxr-xr-x 1 root wheel 1 2 23 16:39 Current@ -&amp;gt; A
lrwxr-xr-x 1 root wheel 3 2 23 16:39 CurrentJDK@ -&amp;gt; 1.5
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;1.5のままじゃん（苦笑）&lt;/li&gt;
&lt;li&gt;ということで、シンボリックリンクを1.6に張り替える。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ sudo ln -fsh 1.6 /System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;再度、確認してみると確かにバージョンが切り替わった。これでOK。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ ls -la /System/Library/Frameworks/JavaVM.framework/Versions/
total 64
drwxr-xr-x 14 root wheel 476 3 2 16:54 ./
drwxr-xr-x 12 root wheel 408 2 23 16:39 ../
lrwxr-xr-x 1 root wheel 5 2 23 16:39 1.3@ -&amp;gt; 1.3.1
drwxr-xr-x 3 root wheel 102 9 29 2007 1.3.1/
lrwxr-xr-x 1 root wheel 5 2 17 14:14 1.4@ -&amp;gt; 1.4.2
lrwxr-xr-x 1 root wheel 3 11 15 13:08 1.4.1@ -&amp;gt; 1.4
drwxr-xr-x 8 root wheel 272 11 15 12:36 1.4.2/
lrwxr-xr-x 1 root wheel 5 2 23 16:39 1.5@ -&amp;gt; 1.5.0
drwxr-xr-x 9 root wheel 306 3 2 16:54 1.5.0/
lrwxr-xr-x 1 root wheel 5 2 23 16:39 1.6@ -&amp;gt; 1.6.0
lrwxr-xr-x 1 root wheel 59 2 23 16:39 1.6.0@ -&amp;gt; /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents
drwxr-xr-x 10 root wheel 340 2 23 16:39 A/
lrwxr-xr-x 1 root wheel 1 2 23 16:39 Current@ -&amp;gt; A
lrwxr-xr-x 1 root wheel 3 3 2 16:54 CurrentJDK@ -&amp;gt; 1.6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ java -version
java version &quot;1.6.0_22&quot;
Java(TM) SE Runtime Environment (build 1.6.0_22-b04-307-9M3263)
Java HotSpot(TM) 64-Bit Server VM (build 17.1-b03-307, mixed mode)
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>Mac OS XにおけるJavaのバージョン変更</title>
    <updated>2011-03-02T17:12:00+00:00</updated>
    <dc:date>2011-03-02T17:12:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/38/</id>
    <link href="https://blog.naoty.dev/38/"/>
    <summary>&lt;p&gt;0.　インストールするもの&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Aptana Studio 2.0.5（スタンドアロン版）&lt;/li&gt;
&lt;li&gt;Babel（日本語化パック）&lt;/li&gt;
&lt;li&gt;Aptana XUL Runner（Firefoxプレビュー）&lt;/li&gt;
&lt;li&gt;EGit（gitと連携しgithubに保存したい）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1.　Aptana Studioをインストールする&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;http://www.aptana.com/products/studio2/download&quot;&gt;http://www.aptana.com/products/studio2/download&lt;/a&gt;からダウンロード&amp;amp;インストール&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.　Babelをインストールする&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「Help &amp;gt; Install New Software」とクリック&lt;/li&gt;
&lt;li&gt;「Work with:」の欄に「&lt;a href=&quot;http://download.eclipse.org/technology/babel/update-site/R0.8.1/helios&quot;&gt;http://download.eclipse.org/technology/babel/update-site/R0.8.1/helios&lt;/a&gt;」と入力&lt;/li&gt;
&lt;li&gt;いろいろパッケージが出てくるので、Japaneseを選択しインストール&lt;/li&gt;
&lt;li&gt;インストール後再起動すると、日本語になっている&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.　Aptana XUL Runnerをインストールする&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「ヘルプ &amp;gt; 新規ソフトウェアのインストール」をクリック&lt;/li&gt;
&lt;li&gt;「Work with:」の欄の右端の三角形をクリックし、「Aptana XUL Update Site」を選択&lt;/li&gt;
&lt;li&gt;「Aptana XUL Runner」が表示されるので、選択してインストール&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.　EGitをインストールする&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「ヘルプ &amp;gt; 新規ソフトウェアのインストール」をクリック&lt;/li&gt;
&lt;li&gt;「Work with:」の欄に「&lt;a href=&quot;http://download.eclipse.org/egit/updates&quot;&gt;http://download.eclipse.org/egit/updates&lt;/a&gt;」と入力&lt;/li&gt;
&lt;li&gt;いろいろパッケージが出てくるが、「Eclipse EGit (Incubation)」を選択しインストール&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5.　EGitからgithubにpushする（ここからが本題）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「ウィンドウ &amp;gt; 設定」をクリックし、設定ダイアログを表示&lt;/li&gt;
&lt;li&gt;「一般 &amp;gt; ネットワーク接続 &amp;gt; SSH2」をクリック&lt;/li&gt;
&lt;li&gt;「鍵管理」タグの「RSA鍵の生成」をクリックし、鍵を生成する&lt;/li&gt;
&lt;li&gt;githubのアカウントページの「SSH公開鍵」をクリックし、生成された公開鍵をコピペする（ついでにプロジェクトを作成しておく）&lt;/li&gt;
&lt;li&gt;その後、「秘密鍵の保管」をクリック。パスフレーズなしでおｋ&lt;/li&gt;
&lt;li&gt;適当にプロジェクト（githubに作成したものと同名）を作成し、ルートで「右クリック &amp;gt; プロジェクトの共用」をクリック&lt;/li&gt;
&lt;li&gt;プロジェクト名をクリックし、「Create Repository」をクリックし、「終了」をクリックする。ローカルリポジトリが作成される&lt;/li&gt;
&lt;li&gt;aptana studioに戻り適当にファイル（READMEファイルなど）を作成する&lt;/li&gt;
&lt;li&gt;プロジェクトのルートディレクトリで「右クリック &amp;gt; 追加」「右クリック &amp;gt; コミット」「右クリック &amp;gt; remote &amp;gt; push」の順に実行&lt;/li&gt;
&lt;li&gt;githubのプロジェクトページの「ssh」のURIをコピペ、あとは適当に従う&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>Aptana Studioの環境構築</title>
    <updated>2011-03-01T01:34:00+00:00</updated>
    <dc:date>2011-03-01T01:34:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/37/</id>
    <link href="https://blog.naoty.dev/37/"/>
    <summary>&lt;p&gt;1.MacPortsからmysql5とmysql5-serverをインストール。かなり時間がかかります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo port install mysql5-server
---&amp;gt; Computing dependencies for mysql5-server
---&amp;gt; Dependencies to be installed: mysql5
---&amp;gt; Fetching mysql5
---&amp;gt; Verifying checksum(s) for mysql5
---&amp;gt; Extracting mysql5
---&amp;gt; Applying patches to mysql5
---&amp;gt; Configuring mysql5
---&amp;gt; Building mysql5
---&amp;gt; Staging mysql5 into destroot
---&amp;gt; Installing mysql5 @5.1.55_0
The MySQL client has been installed.
If you also want a MySQL server, install the mysql5-server port.
---&amp;gt; Activating mysql5 @5.1.55_0
---&amp;gt; Cleaning mysql5
---&amp;gt; Fetching mysql5-server
---&amp;gt; Verifying checksum(s) for mysql5-server
---&amp;gt; Extracting mysql5-server
---&amp;gt; Configuring mysql5-server
---&amp;gt; Building mysql5-server
---&amp;gt; Staging mysql5-server into destroot
---&amp;gt; Creating launchd control script
###########################################################
# A startup item has been generated that will aid in
# starting mysql5-server with launchd. It is disabled
# by default. Execute the following command to start it,
# and to cause it to launch at startup:
#
# sudo port load mysql5-server
###########################################################
---&amp;gt; Installing mysql5-server @5.1.55_0
******************************************************
* In order to setup the database, you might want to run
* sudo -u _mysql mysql_install_db5
* if this is a new install
******************************************************
---&amp;gt; Activating mysql5-server @5.1.55_0
---&amp;gt; Cleaning mysql5-server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2.所有者の変更。これをしないと、次の初期化でエラーが発生します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo chown -R _mysql:_mysql /opt/local/var/db/mysql5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.初期化。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo -u _mysql mysql_install_db5
Installing MySQL system tables...
110222 16:22:37 [Warning] '--skip-locking' is deprecated and will be removed in a future release. Please use '--skip-external-locking' instead.
110222 16:22:37 [Warning] '--default-character-set' is deprecated and will be removed in a future release. Please use '--character-set-server' instead.
110222 16:22:37 [Warning] '--log' is deprecated and will be removed in a future release. Please use ''--general_log'/'--general_log_file'' instead.
OK
Filling help tables...
110222 16:22:37 [Warning] '--skip-locking' is deprecated and will be removed in a future release. Please use '--skip-external-locking' instead.
110222 16:22:37 [Warning] '--default-character-set' is deprecated and will be removed in a future release. Please use '--character-set-server' instead.
110222 16:22:37 [Warning] '--log' is deprecated and will be removed in a future release. Please use ''--general_log'/'--general_log_file'' instead.
OK

To start mysqld at boot time you have to copy
support-files/mysql.server to the right place for your system

PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !
To do so, start the server, then issue the following commands:

/opt/local/lib/mysql5/bin/mysqladmin -u root password 'new-password'
/opt/local/lib/mysql5/bin/mysqladmin -u root -h nkaneko.reji password 'new-password'

Alternatively you can run:
/opt/local/lib/mysql5/bin/mysql_secure_installation

which will also give you the option of removing the test
databases and anonymous user created by default. This is
strongly recommended for production servers.

See the manual for more instructions.

You can start the MySQL daemon with:
cd /opt/local ; /opt/local/lib/mysql5/bin/mysqld_safe &amp;amp;

You can test the MySQL daemon with mysql-test-run.pl
cd /opt/local/mysql-test ; perl mysql-test-run.pl

Please report any problems with the /opt/local/lib/mysql5/bin/mysqlbug script!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4.設定ファイルを作成。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo cp /opt/local/share/mysql5/mysql/my-small.cnf /opt/local/share/mysql5/my.cnf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5.起動。初期化しないとエラーが発生します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo /opt/local/share/mysql5/mysql/mysql.server start
Password:
Starting MySQL
.. SUCCESS!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6.ログイン。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mysql5 -u root
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 1
Server version: 5.1.55-log Source distribution

Copyright (c) 2000, 2010, Oracle and/or its affiliates. All rights reserved.
This software comes with ABSOLUTELY NO WARRANTY. This is free software,
and you are welcome to modify and redistribute it under the GPL v2 license

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;7..bashrcにalias設定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;alias mysql='/opt/local/bin/mysql5'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.pleiades.or.jp/misc/mac/MySQL.html&quot;&gt;MySQLをインストール/設定&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://pmoon.bbsnow.net/cgi-bin/tipsalac/?date=20090127&quot;&gt;Tips A La Carte - MacPortsでMySQLを初期化する際のエラー&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2011.6.17加筆&lt;br&gt;
転職先でセットアップした際にもこの手順で成功しました。環境は以下のとおりです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mac OS X 10.6&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>MacPortsでMySQLをインストールしてからログインまで</title>
    <updated>2011-02-22T16:45:00+00:00</updated>
    <dc:date>2011-02-22T16:45:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/36/</id>
    <link href="https://blog.naoty.dev/36/"/>
    <summary>&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/487311425X/hatena-hamazou-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/513cHHi%2BkCL._SL160_.jpg&quot; alt=&quot;初めてのJavaScript 第2版&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;初めてのJavaScript 第2版&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/487311425X/hatena-hamazou-22/&quot;&gt;初めてのJavaScript 第2版&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: Shelley Powers,武舎広幸,武舎るみ&lt;/li&gt;
&lt;li&gt;出版社/メーカー: オライリージャパン&lt;/li&gt;
&lt;li&gt;発売日: 2009/11/30&lt;/li&gt;
&lt;li&gt;メディア: 大型本&lt;/li&gt;
&lt;li&gt;購入: 6人 クリック: 106回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/487311425X&quot;&gt;この商品を含むブログ (19件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　現在、このテキストでJavaScriptの基礎をしっかり学ぼうとしています。が、初心者がこれを読んでも「？」な感じになると思いました。その理由は、&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用語がムズい。例えば、「オブジェクト指向」の意味がわかってないと厳しいかも。&lt;/li&gt;
&lt;li&gt;字がちっちゃくてとっかりにくい。&lt;/li&gt;
&lt;li&gt;図とかないし、色もないし、なんかいかつい。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;の3つかな。でも、逆に「勉強した」感はものすごく得られるはず。勉強大好きっこにはオススメかも。&lt;/p&gt;
&lt;p&gt;　このテキストが終わったら、次はこっちに行きたい！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4873114888/hatena-hamazou-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51ZoMJ%2BrLhL._SL160_.jpg&quot; alt=&quot;JavaScriptパターン ―優れたアプリケーションのための作法&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;JavaScriptパターン ―優れたアプリケーションのための作法&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4873114888/hatena-hamazou-22/&quot;&gt;JavaScriptパターン ―優れたアプリケーションのための作法&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: Stoyan Stefanov,豊福剛&lt;/li&gt;
&lt;li&gt;出版社/メーカー: オライリージャパン&lt;/li&gt;
&lt;li&gt;発売日: 2011/02/16&lt;/li&gt;
&lt;li&gt;メディア: 大型本&lt;/li&gt;
&lt;li&gt;購入: 19人 クリック: 839回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4873114888&quot;&gt;この商品を含むブログ (57件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>「初めてのJavaScript」は初心者向けじゃない！</title>
    <updated>2011-02-18T00:59:00+00:00</updated>
    <dc:date>2011-02-18T00:59:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/35/</id>
    <link href="https://blog.naoty.dev/35/"/>
    <summary>&lt;p&gt;　RubyとMechanizeを使ってMixiボイスに投稿するプログラムを書きました。Mixiボイスに投稿するのはこれが初めてでしたｗ&lt;br&gt;
　このプログラムを実行するにはmechanizeをインストールする必要があります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gem install mechanize
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　で、プログラムはこんな感じ。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;require 'rubygems'
require 'mechanize'

agent = Mechanize::new

puts &quot;Login...&quot;
page = agent.get &quot;http://mixi.jp/&quot;
form = page.forms[0]
form.email = &quot;xxx@xxx&quot;
form.password = &quot;xxxxxxx&quot;
agent.form.submit

puts &quot;Post...&quot;
page = agent.get &quot;http://mixi.jp/home.pl&quot;
form = page.forms[0]
form[&quot;body&quot;] = &quot;this voice is from a ruby program.&quot;
agent.form.submit

puts &quot;Done&quot;
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>MechanizeでMixiボイスに投稿する</title>
    <updated>2011-02-17T02:41:00+00:00</updated>
    <dc:date>2011-02-17T02:41:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/34/</id>
    <link href="https://blog.naoty.dev/34/"/>
    <summary>&lt;p&gt;　結論から言うと、プロパティは以下の順番で値を探しに行きます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ローカルプロパティ&lt;/li&gt;
&lt;li&gt;__proto__内のプロパティ（prototypeからセットされたプロパティ）&lt;/li&gt;
&lt;li&gt;__proto__.__proto__内のプロパティ&lt;/li&gt;
&lt;li&gt;__proto__.__proto__.__proto__・・・と続く&lt;/li&gt;
&lt;li&gt;undefined&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;　以下の例で言うと、naotoknkオブジェクトのプロパティは以下の順番で値を探しに行きます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;naotoknk（WorkerBee内で定義されたプロパティ）&lt;/li&gt;
&lt;li&gt;naotoknk.__proto__（WorkerBee.prototype内で定義されたプロパティ）&lt;/li&gt;
&lt;li&gt;naotoknk.__proto__.__proto__（Employee.prototype内で定義されたプロパティ）&lt;/li&gt;
&lt;li&gt;naotoknk.__proto__.__proto__.__proto__（Object.prototype内で定義されたプロパティ）&lt;/li&gt;
&lt;li&gt;undefined&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;function Employee() {
    this.name = &quot;&quot;;
    this.dept = &quot;general&quot;;
}

function WorkerBee() {
    this.projects = [];
}
WorkerBee.prototype = new Employee; // 継承

var naotoknk = new WorkerBee;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　この例では、WorkerBee.prototypeにEmployeeのインスタンスを定義しています。Employeeインスタンスにはnameプロパティとdeptプロパティが定義されているので、WorkerBee.prototype内にnameプロパティとdeptプロパティが定義されるのです（すなわち、継承）。&lt;br&gt;
　このとき、naotoknk.nameを参照すると、naotoknk内にnameプロパティを探しに行きます。しかし、存在しないため、naotoknk.__proto__内に探しに行きます。ここには存在するため、&quot;&quot;（空文字列）を返します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;naotoknk.name == naotoknk. __proto__.name
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>プロパティの参照順序について</title>
    <updated>2011-02-13T22:12:00+00:00</updated>
    <dc:date>2011-02-13T22:12:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/33/</id>
    <link href="https://blog.naoty.dev/33/"/>
    <summary>&lt;p&gt;　includeだけではプラグインを読み込めないことが発覚した。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module hogehoge
  # ...
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;class FugafugaController &amp;lt; ApplicationController
  include hogehoge #=&amp;gt; &quot;uninitialized constant ...&quot;というエラー
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;environment.rbに以下のように記述することが必要らしい。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Rails::Initializer.run do |config|
  config.plugins = [:hogehoge]
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;environment.rbは盲点だった...。&lt;/p&gt;
&lt;p&gt;environment.rbのあれこれについては以下のエントリーが参考になりました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.func09.com/wordpress/archives/189&quot;&gt;毎日読むRails environment.rb その２&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    <title>プラグイン読み込みの設定</title>
    <updated>2011-02-09T18:06:00+00:00</updated>
    <dc:date>2011-02-09T18:06:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/32/</id>
    <link href="https://blog.naoty.dev/32/"/>
    <summary>&lt;p&gt;　canvasはHTML5で新しく追加されるHTML要素で、canvas内にJavaScriptを使って図形を描画できる。Flashを使わないで済む。簡単な図形を描いてみた。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;</summary>
    <title>Canvasで図形を描画する</title>
    <updated>2011-02-02T15:55:00+00:00</updated>
    <dc:date>2011-02-02T15:55:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/31/</id>
    <link href="https://blog.naoty.dev/31/"/>
    <summary>&lt;p&gt;　オブジェクトでプロパティの最後に「,」をつけると、FFではよくてもIEでバグる。細かいから気づきにくい。&lt;/p&gt;
&lt;p&gt;Bad&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var options = {
  label: '合計',
  data: access_data,
}:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Good&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var options = {
  label: '合計',
  data: access_data
}:
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>IEでよくあるバグ</title>
    <updated>2011-01-27T17:37:00+00:00</updated>
    <dc:date>2011-01-27T17:37:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/30/</id>
    <link href="https://blog.naoty.dev/30/"/>
    <summary>&lt;p&gt;　セレクタがごちゃごちゃするとき、以下のように書き換えると処理速度が向上するそうです。なるべくセレクタはシンプルにまとめて、find()を利用するといいそうです。&lt;/p&gt;
&lt;p&gt;Before&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$(&quot;tr td&quot;).remove();
$(&quot;tr:first&quot;, this).remove();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$(&quot;tr&quot;).find(&quot;td&quot;).remove();
$(this).find(&quot;tr&quot;).first().remove();
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>セレクタのリファクタリング</title>
    <updated>2011-01-20T19:56:00+00:00</updated>
    <dc:date>2011-01-20T19:56:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/29/</id>
    <link href="https://blog.naoty.dev/29/"/>
    <summary>&lt;p&gt;　垂直方向も作ってみました。こちらの方が難しかった。jsdo.itでの更新がブログパーツの方にも反映されるようです。便利すぎ。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;</summary>
    <title>jQueryでテーブルを垂直方向に分割する</title>
    <updated>2011-01-20T17:04:00+00:00</updated>
    <dc:date>2011-01-20T17:04:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/28/</id>
    <link href="https://blog.naoty.dev/28/"/>
    <summary>&lt;p&gt;　使い道はなさそうですが、いい練習になりました。これは、jsdo.itのブログパーツを少しいじって、はてなダイアリーに貼りつけられるようにしたものです。サイズは「465 * 555」がちょうどよさそうです。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;</summary>
    <title>jQueryでテーブルを水平方向に分割する</title>
    <updated>2011-01-20T14:43:00+00:00</updated>
    <dc:date>2011-01-20T14:43:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/27/</id>
    <link href="https://blog.naoty.dev/27/"/>
    <summary>&lt;p&gt;　初心者の拙者にとっては、理論的な話より、ハウトゥが具体的に書かれているものの方が役に立ちました。その結果、以下のような逆引きリファレンス的なテキストを重宝してます。（一方で、オライリーの本がホコリをカブってる…）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4839928266/hatena-hamazou-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/41nTPEtVmPL._SL160_.jpg&quot; alt=&quot;Ruby on Rails 逆引きクイックリファレンス Rails 2.0対応&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;Ruby on Rails 逆引きクイックリファレンス Rails 2.0対応&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4839928266/hatena-hamazou-22/&quot;&gt;Ruby on Rails 逆引きクイックリファレンス Rails 2.0対応&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: 大場寧子,大場光一郎,久保優子,株式会社万葉&lt;/li&gt;
&lt;li&gt;出版社/メーカー: 毎日コミュニケーションズ&lt;/li&gt;
&lt;li&gt;発売日: 2008/05/31&lt;/li&gt;
&lt;li&gt;メディア: 単行本（ソフトカバー）&lt;/li&gt;
&lt;li&gt;購入: 3人 クリック: 165回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4839928266&quot;&gt;この商品を含むブログ (19件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4844329618/hatena-hamazou-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51m-3d9s9WL._SL160_.jpg&quot; alt=&quot;jQuery逆引きマニュアル Webデザインの現場で役立つ基本と実践&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;jQuery逆引きマニュアル Webデザインの現場で役立つ基本と実践&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4844329618/hatena-hamazou-22/&quot;&gt;jQuery逆引きマニュアル Webデザインの現場で役立つ基本と実践&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: 西畑一馬,中村享介,徳田和規&lt;/li&gt;
&lt;li&gt;出版社/メーカー: インプレスジャパン&lt;/li&gt;
&lt;li&gt;発売日: 2010/12/17&lt;/li&gt;
&lt;li&gt;メディア: 単行本（ソフトカバー）&lt;/li&gt;
&lt;li&gt;購入: 3人 クリック: 166回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4844329618&quot;&gt;この商品を含むブログ (10件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>わかりやすかったテキスト（Rails, jQuery編）</title>
    <updated>2011-01-18T17:47:00+00:00</updated>
    <dc:date>2011-01-18T17:47:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/26/</id>
    <link href="https://blog.naoty.dev/26/"/>
    <summary>&lt;p&gt;HTML（セレクトボックス）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;select id='date_year' name='year'&amp;gt;
  &amp;lt;option value='2005'&amp;gt;2005option&amp;gt;
  &amp;lt;option value='2006'&amp;gt;2006option&amp;gt;
  &amp;lt;option value='2007'&amp;gt;2007option&amp;gt;
  &amp;lt;option value='2008'&amp;gt;2008option&amp;gt;
  &amp;lt;option value='2009'&amp;gt;2009option&amp;gt;
  &amp;lt;option value='2010'&amp;gt;2010option&amp;gt;
  &amp;lt;option value='2011' selected='selected'&amp;gt;2011option&amp;gt;
select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;jQuery&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var date_year = $('#date_year');
date_year.change(function(){
  value = $(':selected', date_year).val(); // ':selected'で選択されたoptionを指定
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;イベントオブジェクトを利用した方法ってあるんだろうか？&lt;/p&gt;</summary>
    <title>jQueryでchangeイベント内で変更後の値を取得する</title>
    <updated>2011-01-18T15:13:00+00:00</updated>
    <dc:date>2011-01-18T15:13:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/25/</id>
    <link href="https://blog.naoty.dev/25/"/>
    <summary>&lt;pre&gt;&lt;code&gt;$(location).attr('href');
$(location).attr('href', 'http://www.google.co.jp'); // googleに移動
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>jQueryで現在のページのURLを取得する</title>
    <updated>2011-01-18T14:58:00+00:00</updated>
    <dc:date>2011-01-18T14:58:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/24/</id>
    <link href="https://blog.naoty.dev/24/"/>
    <summary>&lt;p&gt;　第一引数を省略すると、現在のページに遷移する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;form_tag({}, {:method =&amp;gt; :get}) do
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>form_tagでパラメータをつけて現在のページに遷移する</title>
    <updated>2011-01-13T20:37:00+00:00</updated>
    <dc:date>2011-01-13T20:37:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/23/</id>
    <link href="https://blog.naoty.dev/23/"/>
    <summary>&lt;p&gt;　テーブル内のテキストを取得してグラフを描画する際に用いました。&lt;/p&gt;
&lt;p&gt;HTML&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;table&amp;gt;
  &amp;lt;tr&amp;gt;
    &amp;lt;th&amp;gt;1月th&amp;gt;&amp;lt;td class='item'&amp;gt;10td&amp;gt;&amp;lt;td class='user'&amp;gt;3td&amp;gt;
    &amp;lt;th&amp;gt;2月th&amp;gt;&amp;lt;td class='item'&amp;gt;5td&amp;gt;&amp;lt;td class='user'&amp;gt;1td&amp;gt;
    &amp;lt;th&amp;gt;3月th&amp;gt;&amp;lt;td class='item'&amp;gt;20td&amp;gt;&amp;lt;td class='user'&amp;gt;4td&amp;gt;
    &amp;lt;th&amp;gt;4月th&amp;gt;&amp;lt;td class='item'&amp;gt;30td&amp;gt;&amp;lt;td class='user'&amp;gt;6td&amp;gt;
    &amp;lt;th&amp;gt;5月th&amp;gt;&amp;lt;td class='item'&amp;gt;10td&amp;gt;&amp;lt;td class='user'&amp;gt;2td&amp;gt;
    &amp;lt;th&amp;gt;6月th&amp;gt;&amp;lt;td class='item'&amp;gt;25td&amp;gt;&amp;lt;td class='user'&amp;gt;4td&amp;gt;
    &amp;lt;th&amp;gt;7月th&amp;gt;&amp;lt;td class='item'&amp;gt;25td&amp;gt;&amp;lt;td class='user'&amp;gt;5td&amp;gt;
    &amp;lt;th&amp;gt;8月th&amp;gt;&amp;lt;td class='item'&amp;gt;40td&amp;gt;&amp;lt;td class='user'&amp;gt;9td&amp;gt;
    &amp;lt;th&amp;gt;9月th&amp;gt;&amp;lt;td class='item'&amp;gt;35td&amp;gt;&amp;lt;td class='user'&amp;gt;7td&amp;gt;
    &amp;lt;th&amp;gt;10月th&amp;gt;&amp;lt;td class='item'&amp;gt;20td&amp;gt;&amp;lt;td class='user'&amp;gt;5td&amp;gt;
    &amp;lt;th&amp;gt;11月th&amp;gt;&amp;lt;td class='item'&amp;gt;10td&amp;gt;&amp;lt;td class='user'&amp;gt;2td&amp;gt;
    &amp;lt;th&amp;gt;12月th&amp;gt;&amp;lt;td class='item'&amp;gt;5td&amp;gt;&amp;lt;td class='user'&amp;gt;1td&amp;gt;
  tr&amp;gt;
table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;JavaScript&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var item_count = [];
  var user_count = [];

  jQuery.noConflict();
  jQuery(document).ready(function($){
    for(var i=0; i&amp;lt;$('.item').length; i++){
      item_count[i] = [i+1, $('.item:eq('+i+')').text()];
      user_count[i] = [i+1, $('.user:eq('+i+')').text()];
    }
  });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　セレクタを利用してi回目のループでi番目の要素からテキストを取得します。item_countとuser_countはグラフを描画する際に用います。&lt;/p&gt;</summary>
    <title>jQueryで複数のテキストを取得する方法</title>
    <updated>2010-12-28T16:50:00+00:00</updated>
    <dc:date>2010-12-28T16:50:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/22/</id>
    <link href="https://blog.naoty.dev/22/"/>
    <summary>&lt;p&gt;0.環境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows XP&lt;/li&gt;
&lt;li&gt;Instant Rails 2.0（C:\InstantRails-2.0-win）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1.msysgitをインストール&lt;br&gt;
　インストールのときに「Adjusting your PATH environment」で2番目の「Run Git from the Windows Command Prompt」を選択。ここでは標準どおり「C:\Program Files」にインストールする。コマンドプロンプトで「git --version」としてみて、バージョンが表示されればOK。これでコマンドプロンプトでgitを使えるようになった。&lt;/p&gt;
&lt;p&gt;2.Instant Railsのパスの設定&lt;br&gt;
　「C:\InstantRails-2.0-win\use_ruby.cmd」を開く。「PATH」に「C:\Program Files\Git\cmd;」を追加。上書き保存。終了。これでInstant Railsのrubyコンソールからもgitが使えるようになった。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://taka3090.blog88.fc2.com/blog-entry-8.html&quot;&gt;Linux、Rails覚書き&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ja-jp.facebook.com/note.php?note_id=80921572086&quot;&gt;Rails Plugin Updates, SVN, and Piston 2.0.2 on Windows (Facebook）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</summary>
    <title>Instant Railsのrubyコンソールでgitを使う</title>
    <updated>2010-10-11T21:50:00+00:00</updated>
    <dc:date>2010-10-11T21:50:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/21/</id>
    <link href="https://blog.naoty.dev/21/"/>
    <summary>&lt;p&gt;　Twitterでアドバイスを募ったところ、解決策が見つかったので、さっそく記録します。完成版のコードはこちら。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;require 'find'

def grep(pattern, directory)
  Find.find(directory) do |path|
    if FileTest.file?(path)
      file = open(path)
      path = File.expand_path(path).sub(Regexp.new(File.expand_path(directory)), '')
      while line = file.gets
        puts &quot;#{path}: #{file.lineno}&quot; if line =~ pattern
      end
      file.close
    end
  end
end

grep(Regexp.new(ARGV[0]), ARGV[1])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:\codes\ruby&amp;gt;ruby grep.rb @task c:\codes\rails\rails_apps\task
/app/views/admin/tasks/show.html.erb: 3
/app/views/admin/tasks/show.html.erb: 8
/app/views/admin/tasks/show.html.erb: 13
/app/views/admin/tasks/show.html.erb: 17
/app/views/admin/tasks/new.html.erb: 5
/app/views/admin/tasks/index.html.erb: 8
/app/views/admin/tasks/edit.html.erb: 5
/app/views/admin/tasks/edit.html.erb: 26
/app/controllers/admin/tasks_controller.rb: 16
/app/controllers/admin/tasks_controller.rb: 20
/app/controllers/admin/tasks_controller.rb: 27
/app/controllers/admin/tasks_controller.rb: 31
/app/controllers/admin/tasks_controller.rb: 37
/app/controllers/admin/tasks_controller.rb: 43
/app/controllers/admin/tasks_controller.rb: 46
/app/controllers/admin/tasks_controller.rb: 48
/app/controllers/admin/tasks_controller.rb: 49
/app/controllers/admin/tasks_controller.rb: 52
/app/controllers/admin/tasks_controller.rb: 60
/app/controllers/admin/tasks_controller.rb: 63
/app/controllers/admin/tasks_controller.rb: 65
/app/controllers/admin/tasks_controller.rb: 69
/app/controllers/admin/tasks_controller.rb: 77
/app/controllers/admin/tasks_controller.rb: 78
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　ブラボー！！&lt;br&gt;
　どうやらうまくいかなかった原因は、subの中でマッチングされずうまくパス名が変換できなかったからのようですね。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;path = File.expand_path(path).sub(Regexp.new(File.expand_path(directory)), '')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　こうしておけば、確実にマッチングできます。うん、Twitterいいね。&lt;/p&gt;
&lt;p&gt;　アドバイスいただいた方、ありがとうございました。&lt;/p&gt;</summary>
    <title>Grepコマンドもどき ver.2（完成版）</title>
    <updated>2010-10-02T18:10:00+00:00</updated>
    <dc:date>2010-10-02T18:10:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/20/</id>
    <link href="https://blog.naoty.dev/20/"/>
    <summary>&lt;p&gt;　Railsで「この変数はどこで定義されているんだ？」と困ったときに、ディレクトリ以下のファイルすべてでパターンマッチをしたいです。なので、Grepコマンドもどきを作ってみました。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;require 'find'

def grep(pattern, directory)
  Find.find(directory) do |path|
    if FileTest.file?(path)
      file = open(path)
      while line = file.gets
        puts &quot;#{path}: #{file.lineno}&quot; if line =~ pattern
      end
      file.close
    end
  end
end

grep(Regexp.new(ARGV[0]), ARGV[1])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:\codes\ruby&amp;gt;ruby grep.rb @task c:\codes\rails\rails_apps\task
c:\codes\rails\rails_apps\task/app/views/admin/tasks/show.html.erb: 3
c:\codes\rails\rails_apps\task/app/views/admin/tasks/show.html.erb: 8
c:\codes\rails\rails_apps\task/app/views/admin/tasks/show.html.erb: 13
c:\codes\rails\rails_apps\task/app/views/admin/tasks/show.html.erb: 17
c:\codes\rails\rails_apps\task/app/views/admin/tasks/new.html.erb: 5
c:\codes\rails\rails_apps\task/app/views/admin/tasks/index.html.erb: 8
c:\codes\rails\rails_apps\task/app/views/admin/tasks/edit.html.erb: 5
c:\codes\rails\rails_apps\task/app/views/admin/tasks/edit.html.erb: 26
c:\codes\rails\rails_apps\task/app/controllers/admin/tasks_controller.rb: 16
c:\codes\rails\rails_apps\task/app/controllers/admin/tasks_controller.rb: 20
c:\codes\rails\rails_apps\task/app/controllers/admin/tasks_controller.rb: 27
c:\codes\rails\rails_apps\task/app/controllers/admin/tasks_controller.rb: 31
c:\codes\rails\rails_apps\task/app/controllers/admin/tasks_controller.rb: 37
c:\codes\rails\rails_apps\task/app/controllers/admin/tasks_controller.rb: 43
c:\codes\rails\rails_apps\task/app/controllers/admin/tasks_controller.rb: 46
c:\codes\rails\rails_apps\task/app/controllers/admin/tasks_controller.rb: 48
c:\codes\rails\rails_apps\task/app/controllers/admin/tasks_controller.rb: 49
c:\codes\rails\rails_apps\task/app/controllers/admin/tasks_controller.rb: 52
c:\codes\rails\rails_apps\task/app/controllers/admin/tasks_controller.rb: 60
c:\codes\rails\rails_apps\task/app/controllers/admin/tasks_controller.rb: 63
c:\codes\rails\rails_apps\task/app/controllers/admin/tasks_controller.rb: 65
c:\codes\rails\rails_apps\task/app/controllers/admin/tasks_controller.rb: 69
c:\codes\rails\rails_apps\task/app/controllers/admin/tasks_controller.rb: 77
c:\codes\rails\rails_apps\task/app/controllers/admin/tasks_controller.rb: 78
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　ご覧の通り、修正しなきゃいけないのは出力するパス名が絶対パスになっているというところです。引数に渡したパスに対して相対パスにしたい。&lt;br&gt;
　でも、なんかうまくいかないんですよね。例えば&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;path = path.sub(Regexp.new(directory), '')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;を加えてもダメでした。うまくいくと思ったんですが。&lt;/p&gt;
&lt;p&gt;　なぜダメなのか、そして何かいいアイディアがありましたら、お願いします。&lt;/p&gt;</summary>
    <title>Grepコマンドもどき ver.1</title>
    <updated>2010-10-02T15:13:00+00:00</updated>
    <dc:date>2010-10-02T15:13:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/19/</id>
    <link href="https://blog.naoty.dev/19/"/>
    <summary>&lt;p&gt;ローカル変数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小文字または「_」で始まる。&lt;/li&gt;
&lt;li&gt;宣言された変数スコープのみアクセスできる。変数スコープとは、ファイル内、クラス定義、モジュール定義、メソッド定義、ブロック内のこと。例えば、以下のように入れ子になっても、3つのvarは異なる値を持つ。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;var = 1 # ファイル内のvar
class Foo
  var = 2 # クラス定義内のvar
  def meth
    var = 3 # メソッド定義内のvar
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;インスタンス変数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「@」で始まる。&lt;/li&gt;
&lt;li&gt;メソッド定義内で宣言された場合には、同じインスタンス内のみでアクセスできる。クラス定義内で宣言された場合には、同じクラスのクラスメソッドまたはインスタンスメソッドでアクセスできる。サブクラスからはアクセスできない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;クラス変数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「@@」で始まる。&lt;/li&gt;
&lt;li&gt;クラス内の全インスタンス、サブクラスの全インスタンスで共有される。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;グローバル変数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「$」で始まる。&lt;/li&gt;
&lt;li&gt;どこからでもアクセスできる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;定数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大文字から始まる。&lt;/li&gt;
&lt;li&gt;自分のクラスに定義されている定数がなければ、次の順序で探す。１．トップレベル以外のネストの外側の定数、２．スーパークラスの定数&lt;/li&gt;
&lt;li&gt;ネストの内側の定数を参照するには、「::」演算子を用いる。&lt;/li&gt;
&lt;li&gt;再代入することは可能だが、警告が出る。&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>変数の区別</title>
    <updated>2010-09-26T17:36:00+00:00</updated>
    <dc:date>2010-09-26T17:36:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/18/</id>
    <link href="https://blog.naoty.dev/18/"/>
    <summary>&lt;p&gt;　ver.1で失敗した方法とは別の方法で再挑戦したところ、成功したっぽいです。ただ、ところどころ不安な点は残っています。&lt;/p&gt;
&lt;p&gt;環境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows XP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;導入したい開発環境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.kaoriya.net/#VIM72&quot;&gt;Vim 7.2-20100510 for Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=1567&quot;&gt;rails.vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=69&quot;&gt;project.vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;成功したっぽい手順&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;こちらの記事どおりにやったら、成功したっぽいです。感謝！&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://silentpower2.blogspot.com/2009/07/vimrails.html&quot;&gt;VimでRailsを快適に開発する（設定編）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;スクリーンショット&lt;br&gt;
&lt;a href=&quot;http://f.hatena.ne.jp/naotoknk/20100925193128&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/n/naotoknk/20100925/20100925193128.jpg&quot; alt=&quot;f:id:naotoknk:20100925193128j:image&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;f:id:naotoknk:20100925193128j:image&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今のところ不安が残るポイント&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「Rserver」コマンドがエラーになる。&lt;/li&gt;
&lt;li&gt;FuzzyfinderというCommand+tでファイルを簡単に検索できる機能がついているらしいが、windowsに対応してなさそう・・・。Ctrl+tではタブができるだけです。&lt;/li&gt;
&lt;li&gt;rails.vimのAbbreviationが上書きされていて、tabキーを押すとキーワード補完になる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;とりあえず、何かの参考になれば、さいわいです。&lt;/p&gt;</summary>
    <title>VimによるRails開発環境の構築　ver.2</title>
    <updated>2010-09-25T19:35:00+00:00</updated>
    <dc:date>2010-09-25T19:35:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/17/</id>
    <link href="https://blog.naoty.dev/17/"/>
    <summary>&lt;p&gt;　これから本格的に開発を進めていくため、そろそろ開発環境を整えていこうと思っている。だが、いろいろ見ながらやっても、ぜんぜんうまくいかない。&lt;/p&gt;
&lt;p&gt;環境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows XP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;導入したい開発環境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.kaoriya.net/#VIM72&quot;&gt;Vim 7.2-20100510 for Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=1567&quot;&gt;rails.vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=69&quot;&gt;project.vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;トライして失敗した手順&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;vimを上記リンクからダウンロードし、「C:\Program Files\vim」直下に配置。&lt;/li&gt;
&lt;li&gt;rails.vimを上記リンクからダウンロードし、「rails.vim」を「C:\Program Files\vim\runtime\plugin」直下に、「rails.txt」を「C:\Program Files\vim\runtime\doc」直下に配置。&lt;/li&gt;
&lt;li&gt;project.vimを上記リンクからダウンロードし、「project.vim」を「C:\Program Files\vim\runtime\plugin」直下に、「project.txt」を「C:\Program Files\vim\runtime\doc」直下に配置。&lt;/li&gt;
&lt;li&gt;「_vimrc」を以下のように記述し、「C:\Program Files\vim」直下に配置。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&quot; rails.vim
let g:rails_level=4
let g:rails_default_file=&quot;app/controllers/application.rb&quot;
let g:rails_default_database=&quot;sqlite3&quot;

&quot; rubycomplete.vim
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;何も変化なし・・・。&lt;br&gt;
rails.vimとかディレクトリに入れておくだけじゃだめなんだろうか・・・。&lt;/p&gt;</summary>
    <title>VimによるRails開発環境の構築　ver.1</title>
    <updated>2010-09-24T02:04:00+00:00</updated>
    <dc:date>2010-09-24T02:04:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/16/</id>
    <link href="https://blog.naoty.dev/16/"/>
    <summary>&lt;p&gt;　ARGVでコマンドラインから引数を渡そうと思ったけど、flozenでslice!できませんよとエラーが出てきた。dupしても、なんかおかしなことになる。それが気になる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def m_sort(array)
	if array.size == 1
		array
	else
		array1 = m_sort(array.slice!(0, array.size/2))
		array2 = m_sort(array)
		merge(array1, array2)
	end
end

def merge(array1, array2)
	merged_array = []
	(array1.size + array2.size).times do
		merged_array &amp;lt;&amp;lt; array1.shift if !array1.empty? &amp;amp;&amp;amp; (array2.empty? || array1.first &amp;lt;= array2.first)
		merged_array &amp;lt;&amp;lt; array2.shift if !array2.empty? &amp;amp;&amp;amp; (array1.empty? || array1.first &amp;gt; array2.first)
	end
	merged_array
end

p m_sort([9,32,4,10,3])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:\ruby&amp;gt;ruby m_sort.rb
[3, 4, 9, 10, 32]
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>Merge Sort ver.1</title>
    <updated>2010-09-09T15:48:00+00:00</updated>
    <dc:date>2010-09-09T15:48:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/15/</id>
    <link href="https://blog.naoty.dev/15/"/>
    <summary>&lt;p&gt;　Excelの単調な作業をプログラミングを用いて一掃できたら、どんなに快適なことか。何時間も何日も、AからBへデータを入力しなおす作業をやらされてきた身としては、喉から手が出るほど欲しい技術なのです。現在勉強しているRubyを使って、Excelの操作方法を勉強していきます。&lt;br&gt;
　今回参考にさせていただいたサイトはこちらです。以下の内容はすべて、こちらのサイトで勉強したことをまとめただけなので、こちらを見ていただく方が早いと思います。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://jp.rubyist.net/magazine/?0004-Win32OLE&quot;&gt;Rubyist Magazine - Win32OLE 活用法 【第 2 回】 Excel&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://jp.rubyist.net/magazine/?0027-ExcellentRuby&quot;&gt;Rubyist Magazine - VBA より便利で手軽 Excel 操作スクリプト言語「Ruby」へのお誘い (前編)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　とりあえず、Excelファイルを読み込んでセル内のデータを表示させるソースコードはこんな感じになります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;require 'win32ole'

app = WIN32OLE.new('Excel.Application')
book = app.Workbooks.Open(app.GetOpenFilename)

begin
	book.ActiveSheet.UsedRange.Rows.each do |row|
		row.Columns.each do |cell|
			p cell.Address
			p cell.Value
			p '--'
		end
	end
ensure
	book.Close
	app.quit
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　このソースコードがExcelを操作するプログラムとしては最もシンプルなものじゃないかと思います。今後の複雑な操作の際にも土台となる部分でしょう。なので、ひとつずつ見ていきます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;require 'win32ole'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　win32oleというライブラリを読み込んでいます。このライブラリによってExcelを初めMicrosoft社製品（Internet Explorerなど）をRubyで操作することが可能になります。このライブラリを読み込むことが必須となります。win32oleについては、こちらのサイトが非常に詳しく解説しています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://jp.rubyist.net/magazine/?0003-Win32OLE&quot;&gt;Rubyist Magazine - Win32OLE 活用法 【第 1 回】 Win32OLE ことはじめ&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;app = WIN32OLE.new('Excel.Application')
book = app.Workbooks.Open(app.GetOpenFilename)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　一行目でExcelを開き、二行目でExcelファイルを開いています。最後の「GetOpenFileName」を使うと、いつものファイルを開く画面が出てくるので好きなファイルを選択できます。パス名を取得する方法としては、これが一番簡単だと思います。また、ファイルを新規作成する場合は、「Open」ではなく「Add」とします。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;book.ActiveSheet.UsedRange.Rows.each do |row|
	row.Columns.each do |cell|
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　Excelのオブジェクトは「Application&amp;gt;Workbook&amp;gt;Worksheet&amp;gt;Range」というモデル（COM）になっています。ActiveSheetはActiveなworksheetを指すWorksheetオブジェクト、UsedRangeもActiveなrangeを指すRangeオブジェクトです。そして、Rangeオブジェクトには、Rowsプロパティ、Columnsプロパティ、その次の行に出てくるAddressプロパティ、Valueプロパティなどがあり、より詳細なデータの中身を参照することが可能です。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;book.Close
app.quit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　「begin〜ensure」のエラー処理をしておくと、エラーが起きても確実にExcelアプリケーションとExcelファイルを閉じておくことで問題を未然に防ぐことができます。こうした文法も必須です。&lt;/p&gt;</summary>
    <title>WIN32OLEを使ったExcelの操作(1)</title>
    <updated>2010-08-23T19:26:00+00:00</updated>
    <dc:date>2010-08-23T19:26:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/14/</id>
    <link href="https://blog.naoty.dev/14/"/>
    <summary>&lt;p&gt;　円盤がN枚のときの&lt;a href=&quot;http://ja.wikipedia.org/wiki/%E3%83%8F%E3%83%8E%E3%82%A4%E3%81%AE%E5%A1%94&quot;&gt;ハノイの塔&lt;/a&gt;を完全に攻略することができました。前回のものを再帰的手法を用いて洗練させました。&lt;br&gt;
　@towersは3つの塔を配列として表現したもの（@towers[0]が左、@towers[1]が真ん中、@towers[2]が右の塔）、timesは円盤を移動させた回数、nは円盤の枚数、startは最初に円盤が積んである塔の番号、goalは円盤を積んで完成させる塔の番号、tempはそのどちらでもない一時的に円盤を積んでおく塔の番号（start, goal, tempは0, 1, 2のどれかをとる）、をそれぞれ指します。&lt;br&gt;
　ハノイの塔の攻略法は、「n-1枚のハノイの塔を別に作って、n枚目の円盤を右側の塔に移し、その上に再度n-1枚のハノイの塔を作る」というものです。さらに、n-1枚のハノイの塔を作るには、n-2枚のハノイの塔をまたどこかに作って、n-1枚目の円盤をどこかに移し、n-2枚のハノイの塔をその上に作ることが必要です。これが「n-3, n-4,...,1」と続くわけです。数学の漸化式のような発想です。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@towers = [(1..ARGV[0].to_i).to_a, [], []]
@times = 0

def hanoi(n, start, goal)
	temp = 3 - start - goal
	if n == 1
		@towers[goal].unshift(@towers[start].shift)
		result
	else
		hanoi(n - 1, start, temp)
		@towers[goal].unshift(@towers[start].shift)
		result
		hanoi(n - 1, temp, goal)
	end
end

def result
	p @towers
	puts &quot;--&quot;
	@times += 1
end

hanoi(ARGV[0].to_i, 0, 2)
puts &quot;total times: #{@times}&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;c:\codes\ruby\exercise&amp;gt;ruby hanoi.rb 3
[[2,3],[],[1]]
--
[[3],[2],[1]]
--
[[3],[1,2],[]]
--
[[],[1,2],[3]]
--
[[1],[2],[3]]
--
[[1],[],[2,3]]
--
[[],[],[1,2,3]]
--
total times: 7
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>ハノイの塔　ver.2</title>
    <updated>2010-08-21T10:00:00+00:00</updated>
    <dc:date>2010-08-21T10:00:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/13/</id>
    <link href="https://blog.naoty.dev/13/"/>
    <summary>&lt;p&gt;　ハノイの塔を解くプログラムを作りました。かなり時間がかかりました。ずっとひっかかっていたところは、論理演算の初歩的なところでした。でも、そこに気づけてよかったです。これで論理演算は基礎が固まったかな。&lt;br&gt;
　3つの塔に見立てた配列から数値を出したり入れたりしています。どの配列から数値を取り出しどの配列に入れるかは全部で6パターンあり、それぞれについて4つの条件式を評価しています。&lt;br&gt;
　ただ、完成形が真ん中になってしまう場合も出てきてしまい、このプログラムは完璧とは言えません。また、この問題は再帰的プログラミングの典型例らしいので、この解き方は本筋ではないかもしれないです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def tower(n)
	towers = [[], [], []]
	towers[0] = (1..n).to_a
	p towers
	puts &quot;--&quot;
	times = 0
	disks = []
	loop do
		if towers[0].first != disks.last &amp;amp;&amp;amp; !towers[0].empty? &amp;amp;&amp;amp;
                 (towers[1].empty? || towers[0].first &amp;lt; towers[1].first)
			puts &quot;towers[0] -&amp;gt; #{towers[0].first} -&amp;gt; towers[1]&quot;
			disks &amp;lt;&amp;lt; towers[0].first
			towers[1].unshift(towers[0].shift)
		elsif towers[0].first != disks.last &amp;amp;&amp;amp; !towers[0].empty? &amp;amp;&amp;amp;
                    (towers[2].empty? || towers[0].first &amp;lt; towers[2].first)
			puts &quot;towers[0] -&amp;gt; #{towers[0].first} -&amp;gt; towers[2]&quot;
			disks &amp;lt;&amp;lt; towers[0].first
			towers[2].unshift(towers[0].shift)
		elsif towers[1].first != disks.last &amp;amp;&amp;amp; !towers[1].empty? &amp;amp;&amp;amp;
                    (towers[2].empty? || towers[1].first &amp;lt; towers[2].first)
			puts &quot;towers[1] -&amp;gt; #{towers[1].first} -&amp;gt; towers[2]&quot;
			disks &amp;lt;&amp;lt; towers[1].first
			towers[2].unshift(towers[1].shift)
		elsif towers[1].first != disks.last &amp;amp;&amp;amp; !towers[1].empty? &amp;amp;&amp;amp;
                    (towers[0].empty? || towers[1].first &amp;lt; towers[0].first)
			puts &quot;towers[1] -&amp;gt; #{towers[1].first} -&amp;gt; towers[0]&quot;
			disks &amp;lt;&amp;lt; towers[1].first
			towers[0].unshift(towers[1].shift)
		elsif towers[2].first != disks.last &amp;amp;&amp;amp; !towers[2].empty? &amp;amp;&amp;amp;
                    (towers[0].empty? || towers[2].first &amp;lt; towers[0].first)
			puts &quot;towers[2] -&amp;gt; #{towers[2].first} -&amp;gt; towers[0]&quot;
			disks &amp;lt;&amp;lt; towers[2].first
			towers[0].unshift(towers[2].shift)
		elsif towers[2].first != disks.last &amp;amp;&amp;amp; !towers[2].empty? &amp;amp;&amp;amp;
                    (towers[1].empty? || towers[2].first &amp;lt; towers[1].first)
			puts &quot;towers[2] -&amp;gt; #{towers[2].first} -&amp;gt; towers[1]&quot;
			disks &amp;lt;&amp;lt; towers[2].first
			towers[1].unshift(towers[2].shift)
		end
		p towers
		puts &quot;--&quot;
		times += 1
		break if towers[2] == (1..n).to_a || towers[1] == (1..n).to_a
	end
	puts &quot;total times: #{times}&quot;
end

tower(ARGV[0].to_i)
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>ハノイの塔　ver.1</title>
    <updated>2010-08-19T08:08:00+00:00</updated>
    <dc:date>2010-08-19T08:08:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/12/</id>
    <link href="https://blog.naoty.dev/12/"/>
    <summary>&lt;p&gt;　有名なFizzbuzz問題をRubyで解いてみました。Fizzbuzz問題とは、「1から任意の数までの自然数を表示せよ。ただし、3で割り切れる数は「Fizz」、5で割り切れる数は「Buzz」、両方で割り切れる数は「FizzBuzz」と表示すること。」というものです。&lt;br&gt;
　今回はRubyでやってみました。洗練された回答を出すために、2,3の新しい知識を得ました。非常に勉強になる問題だと思います。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def fizzbuzz(num)
	1.upto(num) do |i|
		x ||= i % 15 == 0 || i % 3 == 0 &amp;amp;&amp;amp; &quot;Fizz&quot;
		x ||= i % 15 == 0 || i % 5 == 0 &amp;amp;&amp;amp; &quot;Buzz&quot;
		puts x == true ? &quot;FizzBuzz&quot; : x || i
	end
end

fizzbuzz(ARGV[0].to_i)
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>Fizzbuzz問題（Ruby） ver.1</title>
    <updated>2010-08-16T11:18:00+00:00</updated>
    <dc:date>2010-08-16T11:18:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/11/</id>
    <link href="https://blog.naoty.dev/11/"/>
    <summary>&lt;p&gt;　指定されたディレクトリ内のファイルの大きさ（バイト）とその合計を表示するメソッドを作りました。コマンドを入力した瞬間にドバっと答えを返してくれるのが気持ちいいです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;require 'find'

def du(top)
	total_size = 0
	Find.find(top) do |path|
		if FileTest.file?(path)
			base = File.basename(path)
			size = File.size(path)
			puts &quot;#{base}: #{size}&quot;
			total_size += size
		end
	end
	puts &quot;--&quot;, &quot;Total: #{total_size}&quot;
end

du(ARGV[0] || &quot;.&quot;)
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>ディレクトリ内のファイルの大きさを表示する</title>
    <updated>2010-08-15T01:30:00+00:00</updated>
    <dc:date>2010-08-15T01:30:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/10/</id>
    <link href="https://blog.naoty.dev/10/"/>
    <summary>&lt;p&gt;　Array#uniqで重複を削除した配列に対してArray#eachでループさせたところ、問題は無事解決されました。ただ、実行すると最後にこの配列が表示されるのが気になる。なんでだろう？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def count_letters(str)
	ary = str.split(//)
	ary.uniq!
	ary.each do |letter|
		result = str.scan(/(#{letter})/)
		print &quot;'&quot;, letter, &quot;': &quot;
		result.count.times{print &quot;*&quot;}
		print &quot;\n&quot;
	end
end

p count_letters(&quot;Ruby is an object oriented programming language&quot;)
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>count_letters ver.2</title>
    <updated>2010-08-14T03:33:00+00:00</updated>
    <dc:date>2010-08-14T03:33:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/9/</id>
    <link href="https://blog.naoty.dev/9/"/>
    <summary>&lt;p&gt;　文字列に含まれる文字数を文字ごとにカウントするメソッドを作成中です。&quot;Ruby is an object oriented programming language&quot;を例に実行すると、&lt;/p&gt;
&lt;p&gt;'R': *&lt;br&gt;
'u': **&lt;br&gt;
'b': **&lt;br&gt;
（以下に続く）&lt;/p&gt;
&lt;p&gt;といった感じで表示されます。&lt;br&gt;
下のコードはやりかけですが、目下の問題は例えば「' ': ******」が一回表示されればいいものを六回表示されてしまうことです。さぁ、どうしたものか・・・。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def count_letters(str)
	ary = str.split(//)
	ary.each do |letter|
		result = str.scan(/(#{letter})/)
		print &quot;'&quot;, letter, &quot;': &quot;
		result.count.times{print &quot;*&quot;}
		print &quot;\n&quot;
	end
end
p count_letters(&quot;Ruby is an object oriented programming language&quot;)
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>count_letters ver.1</title>
    <updated>2010-08-14T03:09:00+00:00</updated>
    <dc:date>2010-08-14T03:09:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/8/</id>
    <link href="https://blog.naoty.dev/8/"/>
    <summary>&lt;p&gt;　SQL文を簡単に実行するためのユーザー定義関数を改良しました。非常に便利。ini.phpにDBの基本情報をいれてあります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;require_once(&quot;ini.php&quot;);

function sql_request($sql){
	$con = mysql_connect(DB_HOST,DB_USER,DB_PASS);
	mysql_select_db(DB_NAME);
	$resource = mysql_query($sql);
	if(($resource !== true) &amp;amp;&amp;amp; ($resource !== false)){
		$return = array();
		while($arr = mysql_fetch_array($resource)){
			$return[] = $arr;
		}
		mysql_close($con);
		return $return;
	}elseif($resource == true){
		mysql_close($con);
		return true;
	}elseif($resource == false){
		mysql_close($con);
		return false;
	}
}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>sql_request ver.2</title>
    <updated>2010-06-23T05:26:00+00:00</updated>
    <dc:date>2010-06-23T05:26:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/7/</id>
    <link href="https://blog.naoty.dev/7/"/>
    <summary>&lt;p&gt;　初級者から中級者へ脱皮したい人向けだというレビューを参考にこんな本をかいました。パッと見、見やすい。効果の程は、ジワジワくると思う。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4798119865/hatena-hamazou-22/&quot;&gt;&lt;figure&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/518bklf0j0L._SL160_.jpg&quot; alt=&quot;PHP 逆引きレシピ (PROGRAMMER’S RECiPE)&quot; style=&quot;max-width:100%;&quot;&gt;&lt;figcaption&gt;PHP 逆引きレシピ (PROGRAMMER’S RECiPE)&lt;/figcaption&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4798119865/hatena-hamazou-22/&quot;&gt;PHP 逆引きレシピ (PROGRAMMER’S RECiPE)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者: 鈴木憲治,安藤建一,山田直明,八木照朗,山本義之,河合勝彦&lt;/li&gt;
&lt;li&gt;出版社/メーカー: 翔泳社&lt;/li&gt;
&lt;li&gt;発売日: 2009/06/30&lt;/li&gt;
&lt;li&gt;メディア: 単行本（ソフトカバー）&lt;/li&gt;
&lt;li&gt;購入: 39人 クリック: 247回&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4798119865&quot;&gt;この商品を含むブログ (31件) を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <title>「PHP逆引きレシピ」を買いました</title>
    <updated>2010-06-22T06:40:00+00:00</updated>
    <dc:date>2010-06-22T06:40:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/6/</id>
    <link href="https://blog.naoty.dev/6/"/>
    <summary>&lt;p&gt;　掲示板 Lv.1.2を改良し、テーブル表示にして削除機能を加えました。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;table,tr,td {
	border: 1px solid;
	border-collapse: collapse;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;body&amp;gt;

/ *****DB情報の読み込み***** /
include_once(&quot;ini.php&quot;);

/ *****DBへ接続、DBの選択***** /
$con = mysql_connect(DB_HOST,DB_USER,DB_PASS);
mysql_select_db(DB_NAME);

/ *****フォーム表示***** /
echo '';
echo '氏名：';
echo '';
echo 'メッセージ：';
echo '';
echo '';
echo '';

/ *****utf-8にエンコーディング***** /
$user_d = mb_convert_encoding($_POST[&quot;user&quot;],&quot;utf-8&quot;,&quot;utf-8,euc-jp,sjis&quot;);
$msg_d = mb_convert_encoding($_POST[&quot;msg&quot;],&quot;utf-8&quot;,&quot;utf-8,euc-jp,sjis&quot;);

/ *****エスケープ***** /
$user_d = mysql_escape_string($user_d);
$msg_d = mysql_escape_string($msg_d);

/ *****「user」にデータがあるときデータをDBに挿入***** /
if($user_d !== &quot;&quot;){
	mysql_query(&quot;INSERT INTO twi_tb (user,msg) VALUES ('$user_d','$msg_d')&quot;);
}

/ *****レコード削除***** /
$dele_d = $_POST[&quot;delete&quot;];
mysql_query(&quot;DELETE FROM twi_tb WHERE id = $dele_d&quot;);

/ *****テーブル表示***** /
echo &quot;&quot;;
echo &quot;&quot;;
echo &quot;id&quot;;
echo &quot;time&quot;;
echo &quot;user&quot;;
echo &quot;msg&quot;;
echo &quot;delete&quot;;
echo &quot;&quot;;

/ *****タグ削除、twi_tbの全データ表示***** /
$re = mysql_query(&quot;SELECT * FROM twi_tb&quot;);
while($arr = mysql_fetch_array($re)){
	echo &quot;&quot;;
	echo &quot;&quot;.htmlspecialchars($arr[0]).&quot;&quot;;
	echo &quot;&quot;.htmlspecialchars($arr[1]).&quot;&quot;;
	echo &quot;&quot;.htmlspecialchars($arr[2]).&quot;&quot;;
	echo &quot;&quot;.htmlspecialchars($arr[3]).&quot;&quot;;

/ *****削除フォーム作成***** /
	echo &quot;&quot;;
	echo &quot;&quot;;
	echo &quot;$arr[0]' /&amp;gt;&quot;;
	echo &quot;&quot;;
	echo &quot;&quot;;
	echo &quot;&quot;;
}

/ *****テーブル終了***** /
echo &quot;&quot;;

/ *****DB切断***** /
mysql_close($con);

?&amp;gt;

body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>掲示板 ver.2.1</title>
    <updated>2010-06-20T17:43:00+00:00</updated>
    <dc:date>2010-06-20T17:43:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/5/</id>
    <link href="https://blog.naoty.dev/5/"/>
    <summary>&lt;p&gt;　前回のLv.1.1は文字化けするので、修正しました。修正点はこちら。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;htmlspecialcharsしてからDB書き込みは文字化けの原因なので、表示前に移動&lt;/li&gt;
&lt;li&gt;SQLインジェクション対策でmysql_escape_stringを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;body&amp;gt;

/ *****DB情報の読み込み***** /
include_once(&quot;ini.php&quot;);

/ *****DBへ接続、DBの選択***** /
$con = mysql_connect(DB_HOST,DB_USER,DB_PASS);
mysql_select_db(DB_NAME);

/ *****フォーム表示***** /
echo '';
echo '氏名：';
echo '';
echo 'メッセージ：';
echo '';
echo '';
echo '';

/ *****エスケープ***** /
$name_d = mysql_escape_string($_POST[&quot;name&quot;]);
$msg_d = mysql_escape_string($_POST[&quot;msg&quot;]);

/ *****utf-8にエンコーディング***** /
$name_d = mb_convert_encoding($name_d,&quot;utf-8&quot;,&quot;utf-8,euc-jp,sjis&quot;);
$msg_d = mb_convert_encoding($msg_d,&quot;utf-8&quot;,&quot;utf-8,euc-jp,sjis&quot;);

/ *****「name」にデータがあるときデータをDBに挿入***** /
if($name_d !== &quot;&quot;){
	mysql_query(&quot;INSERT INTO twi_tb (name,msg) VALUES ('$name_d','$msg_d')&quot;);
}

/ *****タグ削除、twi_tbの全データ表示***** /
$re = mysql_query(&quot;SELECT * FROM twi_tb&quot;);
while($arr = mysql_fetch_array($re)){
	echo htmlspecialchars($arr[0]);
	echo &quot;：&quot;;
	echo htmlspecialchars($arr[1]);
	echo &quot;：&quot;;
	echo htmlspecialchars($arr[2]);
	echo &quot;：&quot;;
	echo htmlspecialchars($arr[3]);
	echo &quot;&quot;;
}

/ *****DB切断***** /
mysql_close($con);

?&amp;gt;

body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>掲示板 ver.1.2</title>
    <updated>2010-06-19T04:32:00+00:00</updated>
    <dc:date>2010-06-19T04:32:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/4/</id>
    <link href="https://blog.naoty.dev/4/"/>
    <summary>&lt;pre&gt;&lt;code&gt;&amp;lt;body&amp;gt;

/ *****DB情報の読み込み***** /
include_once(&quot;ini.php&quot;);

/ *****DBへ接続、DBの選択***** /
$con = mysql_connect(DB_HOST,DB_USER,DB_PASS);
mysql_select_db(DB_NAME);

/ *****フォーム表示***** /
echo '';
echo '氏名：';
echo '';
echo 'メッセージ：';
echo '';
echo '';
echo '';

/ *****タグ削除***** /
$name_d = htmlspecialchars($_POST[&quot;name&quot;]);
$msg_d = htmlspecialchars($_POST[&quot;msg&quot;]);

/ *****utf-8にエンコーディング***** /
$name_d = mb_convert_encoding($name_d,&quot;utf-8&quot;);
$msg_d = mb_convert_encoding($msg_d,&quot;utf-8&quot;);

/ *****「name」にデータがあるときデータをDBに挿入***** /
if($name_d&amp;lt;&amp;gt;&quot;&quot;){
	mysql_query(&quot;INSERT INTO twi_tb (name,msg) VALUES ('$name_d','$msg_d')&quot;);
}

/ *****twi_tbの全データ表示***** /
$re = mysql_query(&quot;SELECT * FROM twi_tb&quot;);
$arr = mysql_fetch_array($re);
for($i=0;$i&amp;lt;count($arr);$i++){
	echo $arr[$i][0].$arr[$i][1].$arr[$i][2].$arr[$i][3];
}

/ *****DB切断***** /
mysql_close($con);

?&amp;gt;

body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>掲示板 ver.1.1</title>
    <updated>2010-06-18T03:18:00+00:00</updated>
    <dc:date>2010-06-18T03:18:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/3/</id>
    <link href="https://blog.naoty.dev/3/"/>
    <summary>&lt;p&gt;できること&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;データの送信&lt;/li&gt;
&lt;li&gt;データの表示&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;body&amp;gt;

include_once(&quot;./ini.php&quot;);
include_once(&quot;./sql_request.php&quot;);

//DB作成
sql_request(&quot;CREATE DATABASE IF NOT EXISTS &quot;.DB_NAME.&quot; ;&quot;);

//テーブル作成
$sql = &quot;
CREATE TABLE IF NOT EXISTS mb (
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	actime TIMESTAMP(11) NOT NULL DEFAULT CURRENT_TIMESTAMP,
	name VARCHAR(255) NULL,
	msg VARCHAR(4095) NULL
)
&quot;;
sql_request($sql);

?&amp;gt;

&amp;lt;form action=&quot;./MessageBoard.php&quot; method=&quot;post&quot;&amp;gt;
氏名：&amp;lt;br&amp;gt;
&amp;lt;input type=&quot;text&quot; name=&quot;name&quot; maxlength=&quot;255&quot; /&amp;gt;&amp;lt;br&amp;gt;
メッセージ：&amp;lt;br&amp;gt;
&amp;lt;input type=&quot;text&quot; name=&quot;msg&quot; maxlength=&quot;255&quot; width=&quot;400&quot; /&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;input type=&quot;submit&quot; value=&quot;post&quot; /&amp;gt;
form&amp;gt;

//フォームから送信された情報をテーブルに挿入
if(($_POST[&quot;name&quot;] != &quot;&quot;) &amp;amp;&amp;amp; ($_POST[&quot;msg&quot;] != &quot;&quot;)){
	$sql = &quot;INSERT INTO mb (name,msg) VALUES ('&quot;;
	$sql .= mysql_escape_string($_POST[&quot;name&quot;]).&quot;','&quot;;
	$sql .= mysql_escape_string($_POST[&quot;msg&quot;]).&quot;')&quot;;
	sql_request($sql);
}

//テーブルの情報を時間順に並び替えて表示
$arr = sql_request(&quot;SELECT * FROM mb ORDER BY actime DESC&quot;);
if($arr !== false){
	for($i=0;$i&amp;lt;count($arr);$i++){
		echo &quot;&quot;.$arr[$i][&quot;name&quot;].&quot;：
			&quot;.$arr[$i][&quot;msg&quot;].&quot; 
			&quot;.$arr[$i][&quot;actime&quot;].&quot;\n&quot;;
	}
}

?&amp;gt;

body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>掲示板 ver.1</title>
    <updated>2010-06-10T15:46:00+00:00</updated>
    <dc:date>2010-06-10T15:46:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/2/</id>
    <link href="https://blog.naoty.dev/2/"/>
    <summary>&lt;p&gt;できること&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;データの送信&lt;/li&gt;
&lt;li&gt;データの表示&lt;/li&gt;
&lt;li&gt;データの削除&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;body&amp;gt;

include_once(&quot;./ini.php&quot;);
include_once(&quot;./sql_request.php&quot;);

sql_request(&quot;CREATE DATABASE IF NOT EXISTS &quot;.DB_NAME.&quot; ;&quot;);

//テーブル作成
$sql = &quot;
CREATE TABLE IF NOT EXISTS mb (
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	actime TIMESTAMP(11) NOT NULL DEFAULT CURRENT_TIMESTAMP,
	name VARCHAR(255) NULL,
	msg VARCHAR(4095) NULL
)
&quot;;
sql_request($sql);

?&amp;gt;

&amp;lt;form action=&quot;./MessageBoard.php&quot; method=&quot;post&quot;&amp;gt;
氏名：&amp;lt;br&amp;gt;
&amp;lt;input type=&quot;text&quot; name=&quot;name&quot; maxlength=&quot;255&quot; /&amp;gt;&amp;lt;br&amp;gt;
メッセージ：&amp;lt;br&amp;gt;
&amp;lt;input type=&quot;text&quot; name=&quot;msg&quot; maxlength=&quot;255&quot; width=&quot;400&quot; /&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;input type=&quot;submit&quot; value=&quot;post&quot; /&amp;gt;
form&amp;gt;

//データの書き込み
if(($_POST[&quot;name&quot;] != &quot;&quot;) &amp;amp;&amp;amp; ($_POST[&quot;msg&quot;] != &quot;&quot;)){
	$sql = &quot;INSERT INTO mb (name,msg) VALUES ('&quot;;
	$sql .= mysql_escape_string($_POST[&quot;name&quot;]).&quot;','&quot;;
	$sql .= mysql_escape_string(mb_substr($_POST[&quot;msg&quot;],0,2048)).&quot;')&quot;;
	sql_request($sql);
}

//データの削除
if((int)($_POST[&quot;delete&quot;])&amp;gt;0){
	$sql = &quot;DELETE FROM mb WHERE id = &quot;.(int)($_POST[&quot;delete&quot;]);
	sql_request($sql);
}

//データと削除ボタンの表示
$arr = sql_request(&quot;SELECT * FROM mb ORDER BY actime DESC&quot;);
if($arr !== false){
	for($i=0;$i&amp;lt;count($arr);$i++){
		echo &quot;\n&quot;;
		echo &quot;\n&quot;;
		echo &quot;&quot;.$arr[$i][&quot;name&quot;].&quot;：\n&quot;;
		echo &quot;&quot;.$arr[$i][&quot;msg&quot;].&quot; \n&quot;;
		echo &quot;&quot;.$arr[$i][&quot;actime&quot;].&quot;\n&quot;;
		echo &quot;&quot;.$arr[$i][&quot;id&quot;].&quot;' /&amp;gt;\n&quot;;
		echo &quot;\n&quot;;
		echo &quot;\n&quot;;
		echo &quot;\n\n&quot;;
	}
}

?&amp;gt;

body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
    <title>掲示板 ver.2</title>
    <updated>2010-06-10T13:53:00+00:00</updated>
    <dc:date>2010-06-10T13:53:00+00:00</dc:date>
  </entry>
  <entry>
    <id>https://blog.naoty.dev/1/</id>
    <link href="https://blog.naoty.dev/1/"/>
    <summary>&lt;p&gt;　PHP、MySQLの基礎的な知識が身についてきたので、そろそろ掲示板の作成に入ろうと思います。その前に、SQL文を実行するときに便利なユーザー定義関数を作っておきます。MySQLへのログイン、DBの選択、SQL文の実行、MySQLからのログアウト、SELECTの場合には値を返す、これらを簡単に呼び出せるようにしておきます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function sql_request($sql){
  $return = array();
  $db_link = mysql_link(DB_HOST,DB_USER,DB_PASS);
  mysql_select_db(DB_NAME);
  $result = mysql_query($sql);
  if($result !== true){
    for(;$row = mysql_fetch_array($result);){
      $return[] = $row;
    }
  }
  mysql_close($db_link);
  return ($return == array()) ? false : $return;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　DB_HOST、DB_USER、DB_PASS、DB_NAMEは重要な情報なので、別のファイルに保存しておきinclude_once関数で呼び出せるようにしておきます。で、あとは、$sqlにSQL文を代入すれば、それがPHPで実行されるわけですね。&lt;/p&gt;</summary>
    <title>sql_request ver.1</title>
    <updated>2010-06-09T22:07:00+00:00</updated>
    <dc:date>2010-06-09T22:07:00+00:00</dc:date>
  </entry>
  <dc:date>2021-01-09T00:00:00+00:00</dc:date>
</feed>
